/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Machine Code Emitter                                                       *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

uint64_t SystemZMCCodeEmitter::getBinaryCodeForInstr(const MCInst &MI,
    SmallVectorImpl<MCFixup> &Fixups,
    const MCSubtargetInfo &STI) const {
  static const uint64_t InstBits[] = {
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(1509949440),	// A
    UINT64_C(260584255782938),	// ADB
    UINT64_C(3004825600),	// ADBR
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(260584255782922),	// AEB
    UINT64_C(3003777024),	// AEBR
    UINT64_C(0),
    UINT64_C(213343910494208),	// AFI
    UINT64_C(0),
    UINT64_C(249589139505160),	// AG
    UINT64_C(249589139505176),	// AGF
    UINT64_C(213339615526912),	// AGFI
    UINT64_C(3105357824),	// AGFR
    UINT64_C(2802515968),	// AGHI
    UINT64_C(259484744155353),	// AGHIK
    UINT64_C(3104309248),	// AGR
    UINT64_C(3118989312),	// AGRK
    UINT64_C(258385232527482),	// AGSI
    UINT64_C(1241513984),	// AH
    UINT64_C(2802450432),	// AHI
    UINT64_C(259484744155352),	// AHIK
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(249589139505274),	// AHY
    UINT64_C(224334731804672),	// AIH
    UINT64_C(1577058304),	// AL
    UINT64_C(249589139505304),	// ALC
    UINT64_C(249589139505288),	// ALCG
    UINT64_C(3112697856),	// ALCGR
    UINT64_C(3113746432),	// ALCR
    UINT64_C(213352500428800),	// ALFI
    UINT64_C(249589139505162),	// ALG
    UINT64_C(249589139505178),	// ALGF
    UINT64_C(213348205461504),	// ALGFI
    UINT64_C(3105488896),	// ALGFR
    UINT64_C(259484744155355),	// ALGHSIK
    UINT64_C(3104440320),	// ALGR
    UINT64_C(3119120384),	// ALGRK
    UINT64_C(259484744155354),	// ALHSIK
    UINT64_C(7680),	// ALR
    UINT64_C(3120168960),	// ALRK
    UINT64_C(249589139505246),	// ALY
    UINT64_C(6656),	// AR
    UINT64_C(3120037888),	// ARK
    UINT64_C(258385232527466),	// ASI
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(3007971328),	// AXBR
    UINT64_C(249589139505242),	// AY
    UINT64_C(1206910976),	// B
    UINT64_C(1157627904),	// BAL
    UINT64_C(1280),	// BALR
    UINT64_C(1291845632),	// BAS
    UINT64_C(3328),	// BASR
    UINT64_C(3072),	// BASSM
    UINT64_C(1199570944),	// BAsmE
    UINT64_C(1193279488),	// BAsmH
    UINT64_C(1201668096),	// BAsmHE
    UINT64_C(1195376640),	// BAsmL
    UINT64_C(1203765248),	// BAsmLE
    UINT64_C(1197473792),	// BAsmLH
    UINT64_C(1195376640),	// BAsmM
    UINT64_C(1198522368),	// BAsmNE
    UINT64_C(1204813824),	// BAsmNH
    UINT64_C(1196425216),	// BAsmNHE
    UINT64_C(1202716672),	// BAsmNL
    UINT64_C(1194328064),	// BAsmNLE
    UINT64_C(1200619520),	// BAsmNLH
    UINT64_C(1202716672),	// BAsmNM
    UINT64_C(1205862400),	// BAsmNO
    UINT64_C(1204813824),	// BAsmNP
    UINT64_C(1198522368),	// BAsmNZ
    UINT64_C(1192230912),	// BAsmO
    UINT64_C(1193279488),	// BAsmP
    UINT64_C(1199570944),	// BAsmZ
    UINT64_C(1191182336),	// BC
    UINT64_C(1191182336),	// BCAsm
    UINT64_C(1792),	// BCR
    UINT64_C(1792),	// BCRAsm
    UINT64_C(1174405120),	// BCT
    UINT64_C(249589139505222),	// BCTG
    UINT64_C(3108372480),	// BCTGR
    UINT64_C(1536),	// BCTR
    UINT64_C(218802813927424),	// BPP
    UINT64_C(216603790671872),	// BPRP
    UINT64_C(2032),	// BR
    UINT64_C(2802122752),	// BRAS
    UINT64_C(211127707369472),	// BRASL
    UINT64_C(1920),	// BRAsmE
    UINT64_C(1824),	// BRAsmH
    UINT64_C(1952),	// BRAsmHE
    UINT64_C(1856),	// BRAsmL
    UINT64_C(1984),	// BRAsmLE
    UINT64_C(1888),	// BRAsmLH
    UINT64_C(1856),	// BRAsmM
    UINT64_C(1904),	// BRAsmNE
    UINT64_C(2000),	// BRAsmNH
    UINT64_C(1872),	// BRAsmNHE
    UINT64_C(1968),	// BRAsmNL
    UINT64_C(1840),	// BRAsmNLE
    UINT64_C(1936),	// BRAsmNLH
    UINT64_C(1968),	// BRAsmNM
    UINT64_C(2016),	// BRAsmNO
    UINT64_C(2000),	// BRAsmNP
    UINT64_C(1904),	// BRAsmNZ
    UINT64_C(1808),	// BRAsmO
    UINT64_C(1824),	// BRAsmP
    UINT64_C(1920),	// BRAsmZ
    UINT64_C(2802057216),	// BRC
    UINT64_C(2802057216),	// BRCAsm
    UINT64_C(211123412402176),	// BRCL
    UINT64_C(211123412402176),	// BRCLAsm
    UINT64_C(2802188288),	// BRCT
    UINT64_C(2802253824),	// BRCTG
    UINT64_C(224326141870080),	// BRCTH
    UINT64_C(2214592512),	// BRXH
    UINT64_C(259484744155204),	// BRXHG
    UINT64_C(2231369728),	// BRXLE
    UINT64_C(259484744155205),	// BRXLG
    UINT64_C(2816),	// BSM
    UINT64_C(2248146944),	// BXH
    UINT64_C(258385232527428),	// BXHG
    UINT64_C(2264924160),	// BXLE
    UINT64_C(258385232527429),	// BXLEG
    UINT64_C(1493172224),	// C
    UINT64_C(260584255782937),	// CDB
    UINT64_C(3004760064),	// CDBR
    UINT64_C(3012886528),	// CDFBR
    UINT64_C(3012886528),	// CDFBRA
    UINT64_C(3013935104),	// CDGBR
    UINT64_C(3013935104),	// CDGBRA
    UINT64_C(3012624384),	// CDLFBR
    UINT64_C(3013672960),	// CDLGBR
    UINT64_C(3137339392),	// CDS
    UINT64_C(258385232527422),	// CDSG
    UINT64_C(258385232527409),	// CDSY
    UINT64_C(260584255782921),	// CEB
    UINT64_C(3003711488),	// CEBR
    UINT64_C(3012820992),	// CEFBR
    UINT64_C(3012820992),	// CEFBRA
    UINT64_C(3013869568),	// CEGBR
    UINT64_C(3013869568),	// CEGBRA
    UINT64_C(3012558848),	// CELFBR
    UINT64_C(3013607424),	// CELGBR
    UINT64_C(3013148672),	// CFDBR
    UINT64_C(3013148672),	// CFDBRA
    UINT64_C(3013083136),	// CFEBR
    UINT64_C(3013083136),	// CFEBRA
    UINT64_C(213361090363392),	// CFI
    UINT64_C(0),
    UINT64_C(3013214208),	// CFXBR
    UINT64_C(3013214208),	// CFXBRA
    UINT64_C(249589139505184),	// CG
    UINT64_C(3014197248),	// CGDBR
    UINT64_C(3014197248),	// CGDBRA
    UINT64_C(3014131712),	// CGEBR
    UINT64_C(3014131712),	// CGEBRA
    UINT64_C(249589139505200),	// CGF
    UINT64_C(213356795396096),	// CGFI
    UINT64_C(3106930688),	// CGFR
    UINT64_C(217754841907200),	// CGFRL
    UINT64_C(249589139505204),	// CGH
    UINT64_C(2802778112),	// CGHI
    UINT64_C(217720482168832),	// CGHRL
    UINT64_C(252166119882752),	// CGHSI
    UINT64_C(259484744155388),	// CGIB
    UINT64_C(259484744155388),	// CGIBAsm
    UINT64_C(259519103893756),	// CGIBAsmE
    UINT64_C(259493334089980),	// CGIBAsmH
    UINT64_C(259527693828348),	// CGIBAsmHE
    UINT64_C(259501924024572),	// CGIBAsmL
    UINT64_C(259536283762940),	// CGIBAsmLE
    UINT64_C(259510513959164),	// CGIBAsmLH
    UINT64_C(259510513959164),	// CGIBAsmNE
    UINT64_C(259536283762940),	// CGIBAsmNH
    UINT64_C(259501924024572),	// CGIBAsmNHE
    UINT64_C(259527693828348),	// CGIBAsmNL
    UINT64_C(259493334089980),	// CGIBAsmNLE
    UINT64_C(259519103893756),	// CGIBAsmNLH
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(259484744155260),	// CGIJ
    UINT64_C(259484744155260),	// CGIJAsm
    UINT64_C(259519103893628),	// CGIJAsmE
    UINT64_C(259493334089852),	// CGIJAsmH
    UINT64_C(259527693828220),	// CGIJAsmHE
    UINT64_C(259501924024444),	// CGIJAsmL
    UINT64_C(259536283762812),	// CGIJAsmLE
    UINT64_C(259510513959036),	// CGIJAsmLH
    UINT64_C(259510513959036),	// CGIJAsmNE
    UINT64_C(259536283762812),	// CGIJAsmNH
    UINT64_C(259501924024444),	// CGIJAsmNHE
    UINT64_C(259527693828220),	// CGIJAsmNL
    UINT64_C(259493334089852),	// CGIJAsmNLE
    UINT64_C(259519103893628),	// CGIJAsmNLH
    UINT64_C(259484744155248),	// CGIT
    UINT64_C(259484744155248),	// CGITAsm
    UINT64_C(259484744188016),	// CGITAsmE
    UINT64_C(259484744163440),	// CGITAsmH
    UINT64_C(259484744196208),	// CGITAsmHE
    UINT64_C(259484744171632),	// CGITAsmL
    UINT64_C(259484744204400),	// CGITAsmLE
    UINT64_C(259484744179824),	// CGITAsmLH
    UINT64_C(259484744179824),	// CGITAsmNE
    UINT64_C(259484744204400),	// CGITAsmNH
    UINT64_C(259484744171632),	// CGITAsmNHE
    UINT64_C(259484744196208),	// CGITAsmNL
    UINT64_C(259484744163440),	// CGITAsmNLE
    UINT64_C(259484744188016),	// CGITAsmNLH
    UINT64_C(3105882112),	// CGR
    UINT64_C(259484744155364),	// CGRB
    UINT64_C(259484744155364),	// CGRBAsm
    UINT64_C(259484744188132),	// CGRBAsmE
    UINT64_C(259484744163556),	// CGRBAsmH
    UINT64_C(259484744196324),	// CGRBAsmHE
    UINT64_C(259484744171748),	// CGRBAsmL
    UINT64_C(259484744204516),	// CGRBAsmLE
    UINT64_C(259484744179940),	// CGRBAsmLH
    UINT64_C(259484744179940),	// CGRBAsmNE
    UINT64_C(259484744204516),	// CGRBAsmNH
    UINT64_C(259484744171748),	// CGRBAsmNHE
    UINT64_C(259484744196324),	// CGRBAsmNL
    UINT64_C(259484744163556),	// CGRBAsmNLE
    UINT64_C(259484744188132),	// CGRBAsmNLH
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(259484744155236),	// CGRJ
    UINT64_C(259484744155236),	// CGRJAsm
    UINT64_C(259484744188004),	// CGRJAsmE
    UINT64_C(259484744163428),	// CGRJAsmH
    UINT64_C(259484744196196),	// CGRJAsmHE
    UINT64_C(259484744171620),	// CGRJAsmL
    UINT64_C(259484744204388),	// CGRJAsmLE
    UINT64_C(259484744179812),	// CGRJAsmLH
    UINT64_C(259484744179812),	// CGRJAsmNE
    UINT64_C(259484744204388),	// CGRJAsmNH
    UINT64_C(259484744171620),	// CGRJAsmNHE
    UINT64_C(259484744196196),	// CGRJAsmNL
    UINT64_C(259484744163428),	// CGRJAsmNLE
    UINT64_C(259484744188004),	// CGRJAsmNLH
    UINT64_C(217737662038016),	// CGRL
    UINT64_C(3110076416),	// CGRT
    UINT64_C(3110076416),	// CGRTAsm
    UINT64_C(3110109184),	// CGRTAsmE
    UINT64_C(3110084608),	// CGRTAsmH
    UINT64_C(3110117376),	// CGRTAsmHE
    UINT64_C(3110092800),	// CGRTAsmL
    UINT64_C(3110125568),	// CGRTAsmLE
    UINT64_C(3110100992),	// CGRTAsmLH
    UINT64_C(3110100992),	// CGRTAsmNE
    UINT64_C(3110125568),	// CGRTAsmNH
    UINT64_C(3110092800),	// CGRTAsmNHE
    UINT64_C(3110117376),	// CGRTAsmNL
    UINT64_C(3110084608),	// CGRTAsmNLE
    UINT64_C(3110109184),	// CGRTAsmNLH
    UINT64_C(3014262784),	// CGXBR
    UINT64_C(3014262784),	// CGXBRA
    UINT64_C(1224736768),	// CH
    UINT64_C(249589139505357),	// CHF
    UINT64_C(252148940013568),	// CHHSI
    UINT64_C(2802712576),	// CHI
    UINT64_C(0),
    UINT64_C(217724777136128),	// CHRL
    UINT64_C(252183299751936),	// CHSI
    UINT64_C(249589139505273),	// CHY
    UINT64_C(259484744155390),	// CIB
    UINT64_C(259484744155390),	// CIBAsm
    UINT64_C(259519103893758),	// CIBAsmE
    UINT64_C(259493334089982),	// CIBAsmH
    UINT64_C(259527693828350),	// CIBAsmHE
    UINT64_C(259501924024574),	// CIBAsmL
    UINT64_C(259536283762942),	// CIBAsmLE
    UINT64_C(259510513959166),	// CIBAsmLH
    UINT64_C(259510513959166),	// CIBAsmNE
    UINT64_C(259536283762942),	// CIBAsmNH
    UINT64_C(259501924024574),	// CIBAsmNHE
    UINT64_C(259527693828350),	// CIBAsmNL
    UINT64_C(259493334089982),	// CIBAsmNLE
    UINT64_C(259519103893758),	// CIBAsmNLH
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(224356206641152),	// CIH
    UINT64_C(259484744155262),	// CIJ
    UINT64_C(259484744155262),	// CIJAsm
    UINT64_C(259519103893630),	// CIJAsmE
    UINT64_C(259493334089854),	// CIJAsmH
    UINT64_C(259527693828222),	// CIJAsmHE
    UINT64_C(259501924024446),	// CIJAsmL
    UINT64_C(259536283762814),	// CIJAsmLE
    UINT64_C(259510513959038),	// CIJAsmLH
    UINT64_C(259510513959038),	// CIJAsmNE
    UINT64_C(259536283762814),	// CIJAsmNH
    UINT64_C(259501924024446),	// CIJAsmNHE
    UINT64_C(259527693828222),	// CIJAsmNL
    UINT64_C(259493334089854),	// CIJAsmNLE
    UINT64_C(259519103893630),	// CIJAsmNLH
    UINT64_C(259484744155250),	// CIT
    UINT64_C(259484744155250),	// CITAsm
    UINT64_C(259484744188018),	// CITAsmE
    UINT64_C(259484744163442),	// CITAsmH
    UINT64_C(259484744196210),	// CITAsmHE
    UINT64_C(259484744171634),	// CITAsmL
    UINT64_C(259484744204402),	// CITAsmLE
    UINT64_C(259484744179826),	// CITAsmLH
    UINT64_C(259484744179826),	// CITAsmNE
    UINT64_C(259484744204402),	// CITAsmNH
    UINT64_C(259484744171634),	// CITAsmNHE
    UINT64_C(259484744196210),	// CITAsmNL
    UINT64_C(259484744163442),	// CITAsmNLE
    UINT64_C(259484744188018),	// CITAsmNLH
    UINT64_C(1426063360),	// CL
    UINT64_C(234195976716288),	// CLC
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(3013410816),	// CLFDBR
    UINT64_C(3013345280),	// CLFEBR
    UINT64_C(252187594719232),	// CLFHSI
    UINT64_C(213369680297984),	// CLFI
    UINT64_C(0),
    UINT64_C(259484744155251),	// CLFIT
    UINT64_C(259484744155251),	// CLFITAsm
    UINT64_C(259484744188019),	// CLFITAsmE
    UINT64_C(259484744163443),	// CLFITAsmH
    UINT64_C(259484744196211),	// CLFITAsmHE
    UINT64_C(259484744171635),	// CLFITAsmL
    UINT64_C(259484744204403),	// CLFITAsmLE
    UINT64_C(259484744179827),	// CLFITAsmLH
    UINT64_C(259484744179827),	// CLFITAsmNE
    UINT64_C(259484744204403),	// CLFITAsmNH
    UINT64_C(259484744171635),	// CLFITAsmNHE
    UINT64_C(259484744196211),	// CLFITAsmNL
    UINT64_C(259484744163443),	// CLFITAsmNLE
    UINT64_C(259484744188019),	// CLFITAsmNLH
    UINT64_C(3013476352),	// CLFXBR
    UINT64_C(249589139505185),	// CLG
    UINT64_C(3014459392),	// CLGDBR
    UINT64_C(3014393856),	// CLGEBR
    UINT64_C(249589139505201),	// CLGF
    UINT64_C(213365385330688),	// CLGFI
    UINT64_C(3106996224),	// CLGFR
    UINT64_C(217763431841792),	// CLGFRL
    UINT64_C(217729072103424),	// CLGHRL
    UINT64_C(252170414850048),	// CLGHSI
    UINT64_C(259484744155389),	// CLGIB
    UINT64_C(259484744155389),	// CLGIBAsm
    UINT64_C(259519103893757),	// CLGIBAsmE
    UINT64_C(259493334089981),	// CLGIBAsmH
    UINT64_C(259527693828349),	// CLGIBAsmHE
    UINT64_C(259501924024573),	// CLGIBAsmL
    UINT64_C(259536283762941),	// CLGIBAsmLE
    UINT64_C(259510513959165),	// CLGIBAsmLH
    UINT64_C(259510513959165),	// CLGIBAsmNE
    UINT64_C(259536283762941),	// CLGIBAsmNH
    UINT64_C(259501924024573),	// CLGIBAsmNHE
    UINT64_C(259527693828349),	// CLGIBAsmNL
    UINT64_C(259493334089981),	// CLGIBAsmNLE
    UINT64_C(259519103893757),	// CLGIBAsmNLH
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(259484744155261),	// CLGIJ
    UINT64_C(259484744155261),	// CLGIJAsm
    UINT64_C(259519103893629),	// CLGIJAsmE
    UINT64_C(259493334089853),	// CLGIJAsmH
    UINT64_C(259527693828221),	// CLGIJAsmHE
    UINT64_C(259501924024445),	// CLGIJAsmL
    UINT64_C(259536283762813),	// CLGIJAsmLE
    UINT64_C(259510513959037),	// CLGIJAsmLH
    UINT64_C(259510513959037),	// CLGIJAsmNE
    UINT64_C(259536283762813),	// CLGIJAsmNH
    UINT64_C(259501924024445),	// CLGIJAsmNHE
    UINT64_C(259527693828221),	// CLGIJAsmNL
    UINT64_C(259493334089853),	// CLGIJAsmNLE
    UINT64_C(259519103893629),	// CLGIJAsmNLH
    UINT64_C(259484744155249),	// CLGIT
    UINT64_C(259484744155249),	// CLGITAsm
    UINT64_C(259484744188017),	// CLGITAsmE
    UINT64_C(259484744163441),	// CLGITAsmH
    UINT64_C(259484744196209),	// CLGITAsmHE
    UINT64_C(259484744171633),	// CLGITAsmL
    UINT64_C(259484744204401),	// CLGITAsmLE
    UINT64_C(259484744179825),	// CLGITAsmLH
    UINT64_C(259484744179825),	// CLGITAsmNE
    UINT64_C(259484744204401),	// CLGITAsmNH
    UINT64_C(259484744171633),	// CLGITAsmNHE
    UINT64_C(259484744196209),	// CLGITAsmNL
    UINT64_C(259484744163441),	// CLGITAsmNLE
    UINT64_C(259484744188017),	// CLGITAsmNLH
    UINT64_C(3105947648),	// CLGR
    UINT64_C(259484744155365),	// CLGRB
    UINT64_C(259484744155365),	// CLGRBAsm
    UINT64_C(259484744188133),	// CLGRBAsmE
    UINT64_C(259484744163557),	// CLGRBAsmH
    UINT64_C(259484744196325),	// CLGRBAsmHE
    UINT64_C(259484744171749),	// CLGRBAsmL
    UINT64_C(259484744204517),	// CLGRBAsmLE
    UINT64_C(259484744179941),	// CLGRBAsmLH
    UINT64_C(259484744179941),	// CLGRBAsmNE
    UINT64_C(259484744204517),	// CLGRBAsmNH
    UINT64_C(259484744171749),	// CLGRBAsmNHE
    UINT64_C(259484744196325),	// CLGRBAsmNL
    UINT64_C(259484744163557),	// CLGRBAsmNLE
    UINT64_C(259484744188133),	// CLGRBAsmNLH
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(259484744155237),	// CLGRJ
    UINT64_C(259484744155237),	// CLGRJAsm
    UINT64_C(259484744188005),	// CLGRJAsmE
    UINT64_C(259484744163429),	// CLGRJAsmH
    UINT64_C(259484744196197),	// CLGRJAsmHE
    UINT64_C(259484744171621),	// CLGRJAsmL
    UINT64_C(259484744204389),	// CLGRJAsmLE
    UINT64_C(259484744179813),	// CLGRJAsmLH
    UINT64_C(259484744179813),	// CLGRJAsmNE
    UINT64_C(259484744204389),	// CLGRJAsmNH
    UINT64_C(259484744171621),	// CLGRJAsmNHE
    UINT64_C(259484744196197),	// CLGRJAsmNL
    UINT64_C(259484744163429),	// CLGRJAsmNLE
    UINT64_C(259484744188005),	// CLGRJAsmNLH
    UINT64_C(217746251972608),	// CLGRL
    UINT64_C(3110141952),	// CLGRT
    UINT64_C(3110141952),	// CLGRTAsm
    UINT64_C(3110174720),	// CLGRTAsmE
    UINT64_C(3110150144),	// CLGRTAsmH
    UINT64_C(3110182912),	// CLGRTAsmHE
    UINT64_C(3110158336),	// CLGRTAsmL
    UINT64_C(3110191104),	// CLGRTAsmLE
    UINT64_C(3110166528),	// CLGRTAsmLH
    UINT64_C(3110166528),	// CLGRTAsmNE
    UINT64_C(3110191104),	// CLGRTAsmNH
    UINT64_C(3110158336),	// CLGRTAsmNHE
    UINT64_C(3110182912),	// CLGRTAsmNL
    UINT64_C(3110150144),	// CLGRTAsmNLE
    UINT64_C(3110174720),	// CLGRTAsmNLH
    UINT64_C(258385232527403),	// CLGT
    UINT64_C(258385232527403),	// CLGTAsm
    UINT64_C(258419592265771),	// CLGTAsmE
    UINT64_C(258393822461995),	// CLGTAsmH
    UINT64_C(258428182200363),	// CLGTAsmHE
    UINT64_C(258402412396587),	// CLGTAsmL
    UINT64_C(258436772134955),	// CLGTAsmLE
    UINT64_C(258411002331179),	// CLGTAsmLH
    UINT64_C(258411002331179),	// CLGTAsmNE
    UINT64_C(258436772134955),	// CLGTAsmNH
    UINT64_C(258402412396587),	// CLGTAsmNHE
    UINT64_C(258428182200363),	// CLGTAsmNL
    UINT64_C(258393822461995),	// CLGTAsmNLE
    UINT64_C(258419592265771),	// CLGTAsmNLH
    UINT64_C(3014524928),	// CLGXBR
    UINT64_C(249589139505359),	// CLHF
    UINT64_C(252153234980864),	// CLHHSI
    UINT64_C(217733367070720),	// CLHRL
    UINT64_C(2499805184),	// CLI
    UINT64_C(259484744155391),	// CLIB
    UINT64_C(259484744155391),	// CLIBAsm
    UINT64_C(259519103893759),	// CLIBAsmE
    UINT64_C(259493334089983),	// CLIBAsmH
    UINT64_C(259527693828351),	// CLIBAsmHE
    UINT64_C(259501924024575),	// CLIBAsmL
    UINT64_C(259536283762943),	// CLIBAsmLE
    UINT64_C(259510513959167),	// CLIBAsmLH
    UINT64_C(259510513959167),	// CLIBAsmNE
    UINT64_C(259536283762943),	// CLIBAsmNH
    UINT64_C(259501924024575),	// CLIBAsmNHE
    UINT64_C(259527693828351),	// CLIBAsmNL
    UINT64_C(259493334089983),	// CLIBAsmNLE
    UINT64_C(259519103893759),	// CLIBAsmNLH
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(224364796575744),	// CLIH
    UINT64_C(259484744155263),	// CLIJ
    UINT64_C(259484744155263),	// CLIJAsm
    UINT64_C(259519103893631),	// CLIJAsmE
    UINT64_C(259493334089855),	// CLIJAsmH
    UINT64_C(259527693828223),	// CLIJAsmHE
    UINT64_C(259501924024447),	// CLIJAsmL
    UINT64_C(259536283762815),	// CLIJAsmLE
    UINT64_C(259510513959039),	// CLIJAsmLH
    UINT64_C(259510513959039),	// CLIJAsmNE
    UINT64_C(259536283762815),	// CLIJAsmNH
    UINT64_C(259501924024447),	// CLIJAsmNHE
    UINT64_C(259527693828223),	// CLIJAsmNL
    UINT64_C(259493334089855),	// CLIJAsmNLE
    UINT64_C(259519103893631),	// CLIJAsmNLH
    UINT64_C(258385232527445),	// CLIY
    UINT64_C(0),
    UINT64_C(5376),	// CLR
    UINT64_C(259484744155383),	// CLRB
    UINT64_C(259484744155383),	// CLRBAsm
    UINT64_C(259484744188151),	// CLRBAsmE
    UINT64_C(259484744163575),	// CLRBAsmH
    UINT64_C(259484744196343),	// CLRBAsmHE
    UINT64_C(259484744171767),	// CLRBAsmL
    UINT64_C(259484744204535),	// CLRBAsmLE
    UINT64_C(259484744179959),	// CLRBAsmLH
    UINT64_C(259484744179959),	// CLRBAsmNE
    UINT64_C(259484744204535),	// CLRBAsmNH
    UINT64_C(259484744171767),	// CLRBAsmNHE
    UINT64_C(259484744196343),	// CLRBAsmNL
    UINT64_C(259484744163575),	// CLRBAsmNLE
    UINT64_C(259484744188151),	// CLRBAsmNLH
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(259484744155255),	// CLRJ
    UINT64_C(259484744155255),	// CLRJAsm
    UINT64_C(259484744188023),	// CLRJAsmE
    UINT64_C(259484744163447),	// CLRJAsmH
    UINT64_C(259484744196215),	// CLRJAsmHE
    UINT64_C(259484744171639),	// CLRJAsmL
    UINT64_C(259484744204407),	// CLRJAsmLE
    UINT64_C(259484744179831),	// CLRJAsmLH
    UINT64_C(259484744179831),	// CLRJAsmNE
    UINT64_C(259484744204407),	// CLRJAsmNH
    UINT64_C(259484744171639),	// CLRJAsmNHE
    UINT64_C(259484744196215),	// CLRJAsmNL
    UINT64_C(259484744163447),	// CLRJAsmNLE
    UINT64_C(259484744188023),	// CLRJAsmNLH
    UINT64_C(217767726809088),	// CLRL
    UINT64_C(3111321600),	// CLRT
    UINT64_C(3111321600),	// CLRTAsm
    UINT64_C(3111354368),	// CLRTAsmE
    UINT64_C(3111329792),	// CLRTAsmH
    UINT64_C(3111362560),	// CLRTAsmHE
    UINT64_C(3111337984),	// CLRTAsmL
    UINT64_C(3111370752),	// CLRTAsmLE
    UINT64_C(3111346176),	// CLRTAsmLH
    UINT64_C(3111346176),	// CLRTAsmNE
    UINT64_C(3111370752),	// CLRTAsmNH
    UINT64_C(3111337984),	// CLRTAsmNHE
    UINT64_C(3111362560),	// CLRTAsmNL
    UINT64_C(3111329792),	// CLRTAsmNLE
    UINT64_C(3111354368),	// CLRTAsmNLH
    UINT64_C(2992439296),	// CLST
    UINT64_C(0),
    UINT64_C(258385232527395),	// CLT
    UINT64_C(258385232527395),	// CLTAsm
    UINT64_C(258419592265763),	// CLTAsmE
    UINT64_C(258393822461987),	// CLTAsmH
    UINT64_C(258428182200355),	// CLTAsmHE
    UINT64_C(258402412396579),	// CLTAsmL
    UINT64_C(258436772134947),	// CLTAsmLE
    UINT64_C(258411002331171),	// CLTAsmLH
    UINT64_C(258411002331171),	// CLTAsmNE
    UINT64_C(258436772134947),	// CLTAsmNH
    UINT64_C(258402412396579),	// CLTAsmNHE
    UINT64_C(258428182200355),	// CLTAsmNL
    UINT64_C(258393822461987),	// CLTAsmNLE
    UINT64_C(258419592265763),	// CLTAsmNLH
    UINT64_C(249589139505237),	// CLY
    UINT64_C(0),
    UINT64_C(3010592768),	// CPSDRdd
    UINT64_C(3010592768),	// CPSDRds
    UINT64_C(3010592768),	// CPSDRsd
    UINT64_C(3010592768),	// CPSDRss
    UINT64_C(2991390720),	// CPYA
    UINT64_C(6400),	// CR
    UINT64_C(259484744155382),	// CRB
    UINT64_C(259484744155382),	// CRBAsm
    UINT64_C(259484744188150),	// CRBAsmE
    UINT64_C(259484744163574),	// CRBAsmH
    UINT64_C(259484744196342),	// CRBAsmHE
    UINT64_C(259484744171766),	// CRBAsmL
    UINT64_C(259484744204534),	// CRBAsmLE
    UINT64_C(259484744179958),	// CRBAsmLH
    UINT64_C(259484744179958),	// CRBAsmNE
    UINT64_C(259484744204534),	// CRBAsmNH
    UINT64_C(259484744171766),	// CRBAsmNHE
    UINT64_C(259484744196342),	// CRBAsmNL
    UINT64_C(259484744163574),	// CRBAsmNLE
    UINT64_C(259484744188150),	// CRBAsmNLH
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(259484744155254),	// CRJ
    UINT64_C(259484744155254),	// CRJAsm
    UINT64_C(259484744188022),	// CRJAsmE
    UINT64_C(259484744163446),	// CRJAsmH
    UINT64_C(259484744196214),	// CRJAsmHE
    UINT64_C(259484744171638),	// CRJAsmL
    UINT64_C(259484744204406),	// CRJAsmLE
    UINT64_C(259484744179830),	// CRJAsmLH
    UINT64_C(259484744179830),	// CRJAsmNE
    UINT64_C(259484744204406),	// CRJAsmNH
    UINT64_C(259484744171638),	// CRJAsmNHE
    UINT64_C(259484744196214),	// CRJAsmNL
    UINT64_C(259484744163446),	// CRJAsmNLE
    UINT64_C(259484744188022),	// CRJAsmNLH
    UINT64_C(217759136874496),	// CRL
    UINT64_C(3111256064),	// CRT
    UINT64_C(3111256064),	// CRTAsm
    UINT64_C(3111288832),	// CRTAsmE
    UINT64_C(3111264256),	// CRTAsmH
    UINT64_C(3111297024),	// CRTAsmHE
    UINT64_C(3111272448),	// CRTAsmL
    UINT64_C(3111305216),	// CRTAsmLE
    UINT64_C(3111280640),	// CRTAsmLH
    UINT64_C(3111280640),	// CRTAsmNE
    UINT64_C(3111305216),	// CRTAsmNH
    UINT64_C(3111272448),	// CRTAsmNHE
    UINT64_C(3111297024),	// CRTAsmNL
    UINT64_C(3111264256),	// CRTAsmNLE
    UINT64_C(3111288832),	// CRTAsmNLH
    UINT64_C(3120562176),	// CS
    UINT64_C(258385232527408),	// CSG
    UINT64_C(219910915489792),	// CSST
    UINT64_C(258385232527380),	// CSY
    UINT64_C(3007905792),	// CXBR
    UINT64_C(3012952064),	// CXFBR
    UINT64_C(3012952064),	// CXFBRA
    UINT64_C(3014000640),	// CXGBR
    UINT64_C(3014000640),	// CXGBRA
    UINT64_C(3012689920),	// CXLFBR
    UINT64_C(3013738496),	// CXLGBR
    UINT64_C(249589139505241),	// CY
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(260584255782941),	// DDB
    UINT64_C(3005022208),	// DDBR
    UINT64_C(260584255782925),	// DEB
    UINT64_C(3003973632),	// DEBR
    UINT64_C(249589139505303),	// DL
    UINT64_C(249589139505287),	// DLG
    UINT64_C(3112632320),	// DLGR
    UINT64_C(3113680896),	// DLR
    UINT64_C(249589139505165),	// DSG
    UINT64_C(249589139505181),	// DSGF
    UINT64_C(3105685504),	// DSGFR
    UINT64_C(3104636928),	// DSGR
    UINT64_C(3008167936),	// DXBR
    UINT64_C(2991521792),	// EAR
    UINT64_C(219906620522496),	// ECTG
    UINT64_C(3012296704),	// EFPC
    UINT64_C(3001810944),	// ETND
    UINT64_C(1140850688),	// EX
    UINT64_C(217703302299648),	// EXRL
    UINT64_C(3009347584),	// FIDBR
    UINT64_C(3009347584),	// FIDBRA
    UINT64_C(3008823296),	// FIEBR
    UINT64_C(3008823296),	// FIEBRA
    UINT64_C(3007774720),	// FIXBR
    UINT64_C(3007774720),	// FIXBRA
    UINT64_C(3112370176),	// FLOGR
    UINT64_C(0),
    UINT64_C(1124073472),	// IC
    UINT64_C(1124073472),	// IC32
    UINT64_C(249589139505267),	// IC32Y
    UINT64_C(3204448256),	// ICM
    UINT64_C(258385232527488),	// ICMH
    UINT64_C(258385232527489),	// ICMY
    UINT64_C(249589139505267),	// ICY
    UINT64_C(0),
    UINT64_C(211140592271360),	// IIHF
    UINT64_C(0),
    UINT64_C(2768240640),	// IIHH
    UINT64_C(0),
    UINT64_C(2768306176),	// IIHL
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(211144887238656),	// IILF
    UINT64_C(0),
    UINT64_C(2768371712),	// IILH
    UINT64_C(0),
    UINT64_C(2768437248),	// IILL
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(2988572672),	// IPM
    UINT64_C(0),	// InsnE
    UINT64_C(0),	// InsnRI
    UINT64_C(0),	// InsnRIE
    UINT64_C(0),	// InsnRIL
    UINT64_C(0),	// InsnRILU
    UINT64_C(0),	// InsnRIS
    UINT64_C(0),	// InsnRR
    UINT64_C(0),	// InsnRRE
    UINT64_C(0),	// InsnRRF
    UINT64_C(0),	// InsnRRS
    UINT64_C(0),	// InsnRS
    UINT64_C(0),	// InsnRSE
    UINT64_C(0),	// InsnRSI
    UINT64_C(0),	// InsnRSY
    UINT64_C(0),	// InsnRX
    UINT64_C(0),	// InsnRXE
    UINT64_C(0),	// InsnRXF
    UINT64_C(0),	// InsnRXY
    UINT64_C(0),	// InsnS
    UINT64_C(0),	// InsnSI
    UINT64_C(0),	// InsnSIL
    UINT64_C(0),	// InsnSIY
    UINT64_C(0),	// InsnSS
    UINT64_C(0),	// InsnSSE
    UINT64_C(0),	// InsnSSF
    UINT64_C(2817785856),	// J
    UINT64_C(2810445824),	// JAsmE
    UINT64_C(2804154368),	// JAsmH
    UINT64_C(2812542976),	// JAsmHE
    UINT64_C(2806251520),	// JAsmL
    UINT64_C(2814640128),	// JAsmLE
    UINT64_C(2808348672),	// JAsmLH
    UINT64_C(2806251520),	// JAsmM
    UINT64_C(2809397248),	// JAsmNE
    UINT64_C(2815688704),	// JAsmNH
    UINT64_C(2807300096),	// JAsmNHE
    UINT64_C(2813591552),	// JAsmNL
    UINT64_C(2805202944),	// JAsmNLE
    UINT64_C(2811494400),	// JAsmNLH
    UINT64_C(2813591552),	// JAsmNM
    UINT64_C(2816737280),	// JAsmNO
    UINT64_C(2815688704),	// JAsmNP
    UINT64_C(2809397248),	// JAsmNZ
    UINT64_C(2803105792),	// JAsmO
    UINT64_C(2804154368),	// JAsmP
    UINT64_C(2810445824),	// JAsmZ
    UINT64_C(212154204553216),	// JG
    UINT64_C(211673168216064),	// JGAsmE
    UINT64_C(211260851355648),	// JGAsmH
    UINT64_C(211810607169536),	// JGAsmHE
    UINT64_C(211398290309120),	// JGAsmL
    UINT64_C(211948046123008),	// JGAsmLE
    UINT64_C(211535729262592),	// JGAsmLH
    UINT64_C(211398290309120),	// JGAsmM
    UINT64_C(211604448739328),	// JGAsmNE
    UINT64_C(212016765599744),	// JGAsmNH
    UINT64_C(211467009785856),	// JGAsmNHE
    UINT64_C(211879326646272),	// JGAsmNL
    UINT64_C(211329570832384),	// JGAsmNLE
    UINT64_C(211741887692800),	// JGAsmNLH
    UINT64_C(211879326646272),	// JGAsmNM
    UINT64_C(212085485076480),	// JGAsmNO
    UINT64_C(212016765599744),	// JGAsmNP
    UINT64_C(211604448739328),	// JGAsmNZ
    UINT64_C(211192131878912),	// JGAsmO
    UINT64_C(211260851355648),	// JGAsmP
    UINT64_C(211673168216064),	// JGAsmZ
    UINT64_C(1476395008),	// L
    UINT64_C(0),
    UINT64_C(1090519040),	// LA
    UINT64_C(258385232527608),	// LAA
    UINT64_C(258385232527592),	// LAAG
    UINT64_C(258385232527610),	// LAAL
    UINT64_C(258385232527594),	// LAALG
    UINT64_C(1358954496),	// LAE
    UINT64_C(249589139505269),	// LAEY
    UINT64_C(2583691264),	// LAM
    UINT64_C(258385232527514),	// LAMY
    UINT64_C(258385232527604),	// LAN
    UINT64_C(258385232527588),	// LANG
    UINT64_C(258385232527606),	// LAO
    UINT64_C(258385232527590),	// LAOG
    UINT64_C(211106232532992),	// LARL
    UINT64_C(249589139505311),	// LAT
    UINT64_C(258385232527607),	// LAX
    UINT64_C(258385232527591),	// LAXG
    UINT64_C(249589139505265),	// LAY
    UINT64_C(249589139505270),	// LB
    UINT64_C(249589139505344),	// LBH
    UINT64_C(0),
    UINT64_C(3106275328),	// LBR
    UINT64_C(253987186016295),	// LCBB
    UINT64_C(3004366848),	// LCDBR
    UINT64_C(3010658304),	// LCDFR
    UINT64_C(3010658304),	// LCDFR_32
    UINT64_C(3003318272),	// LCEBR
    UINT64_C(3105030144),	// LCGFR
    UINT64_C(3103981568),	// LCGR
    UINT64_C(4864),	// LCR
    UINT64_C(3007512576),	// LCXBR
    UINT64_C(1744830464),	// LD
    UINT64_C(260584255782948),	// LDE32
    UINT64_C(260584255782916),	// LDEB
    UINT64_C(3003383808),	// LDEBR
    UINT64_C(3015770112),	// LDGR
    UINT64_C(10240),	// LDR
    UINT64_C(10240),	// LDR32
    UINT64_C(3007643648),	// LDXBR
    UINT64_C(3007643648),	// LDXBRA
    UINT64_C(260584255783013),	// LDY
    UINT64_C(2013265920),	// LE
    UINT64_C(3007578112),	// LEDBR
    UINT64_C(3007578112),	// LEDBRA
    UINT64_C(0),
    UINT64_C(14336),	// LER
    UINT64_C(3007709184),	// LEXBR
    UINT64_C(3007709184),	// LEXBRA
    UINT64_C(260584255783012),	// LEY
    UINT64_C(2998730752),	// LFAS
    UINT64_C(0),
    UINT64_C(249589139505354),	// LFH
    UINT64_C(249589139505352),	// LFHAT
    UINT64_C(2996633600),	// LFPC
    UINT64_C(249589139505156),	// LG
    UINT64_C(249589139505285),	// LGAT
    UINT64_C(249589139505271),	// LGB
    UINT64_C(3104178176),	// LGBR
    UINT64_C(3016556544),	// LGDR
    UINT64_C(249589139505172),	// LGF
    UINT64_C(211110527500288),	// LGFI
    UINT64_C(3105095680),	// LGFR
    UINT64_C(215555818651648),	// LGFRL
    UINT64_C(249589139505173),	// LGH
    UINT64_C(2802384896),	// LGHI
    UINT64_C(3104243712),	// LGHR
    UINT64_C(215521458913280),	// LGHRL
    UINT64_C(3104047104),	// LGR
    UINT64_C(215538638782464),	// LGRL
    UINT64_C(1207959552),	// LH
    UINT64_C(249589139505348),	// LHH
    UINT64_C(2802319360),	// LHI
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(3106340864),	// LHR
    UINT64_C(215525753880576),	// LHRL
    UINT64_C(249589139505272),	// LHY
    UINT64_C(249589139505300),	// LLC
    UINT64_C(249589139505346),	// LLCH
    UINT64_C(0),
    UINT64_C(3113484288),	// LLCR
    UINT64_C(0),
    UINT64_C(249589139505296),	// LLGC
    UINT64_C(3112435712),	// LLGCR
    UINT64_C(249589139505174),	// LLGF
    UINT64_C(249589139505309),	// LLGFAT
    UINT64_C(3105226752),	// LLGFR
    UINT64_C(215564408586240),	// LLGFRL
    UINT64_C(249589139505297),	// LLGH
    UINT64_C(3112501248),	// LLGHR
    UINT64_C(215530048847872),	// LLGHRL
    UINT64_C(249589139505175),	// LLGT
    UINT64_C(249589139505308),	// LLGTAT
    UINT64_C(3105292288),	// LLGTR
    UINT64_C(249589139505301),	// LLH
    UINT64_C(249589139505350),	// LLHH
    UINT64_C(0),
    UINT64_C(3113549824),	// LLHR
    UINT64_C(215512868978688),	// LLHRL
    UINT64_C(0),
    UINT64_C(211166362075136),	// LLIHF
    UINT64_C(2769027072),	// LLIHH
    UINT64_C(2769092608),	// LLIHL
    UINT64_C(211170657042432),	// LLILF
    UINT64_C(2769158144),	// LLILH
    UINT64_C(2769223680),	// LLILL
    UINT64_C(249589139505210),	// LLZRGF
    UINT64_C(2550136832),	// LM
    UINT64_C(258385232527364),	// LMG
    UINT64_C(258385232527510),	// LMH
    UINT64_C(258385232527512),	// LMY
    UINT64_C(0),
    UINT64_C(3004235776),	// LNDBR
    UINT64_C(3010527232),	// LNDFR
    UINT64_C(3010527232),	// LNDFR_32
    UINT64_C(3003187200),	// LNEBR
    UINT64_C(3104899072),	// LNGFR
    UINT64_C(3103850496),	// LNGR
    UINT64_C(4352),	// LNR
    UINT64_C(3007381504),	// LNXBR
    UINT64_C(258385232527602),	// LOC
    UINT64_C(258385232527602),	// LOCAsm
    UINT64_C(258419592265970),	// LOCAsmE
    UINT64_C(258393822462194),	// LOCAsmH
    UINT64_C(258428182200562),	// LOCAsmHE
    UINT64_C(258402412396786),	// LOCAsmL
    UINT64_C(258436772135154),	// LOCAsmLE
    UINT64_C(258411002331378),	// LOCAsmLH
    UINT64_C(258402412396786),	// LOCAsmM
    UINT64_C(258415297298674),	// LOCAsmNE
    UINT64_C(258441067102450),	// LOCAsmNH
    UINT64_C(258406707364082),	// LOCAsmNHE
    UINT64_C(258432477167858),	// LOCAsmNL
    UINT64_C(258398117429490),	// LOCAsmNLE
    UINT64_C(258423887233266),	// LOCAsmNLH
    UINT64_C(258432477167858),	// LOCAsmNM
    UINT64_C(258445362069746),	// LOCAsmNO
    UINT64_C(258441067102450),	// LOCAsmNP
    UINT64_C(258415297298674),	// LOCAsmNZ
    UINT64_C(258389527494898),	// LOCAsmO
    UINT64_C(258393822462194),	// LOCAsmP
    UINT64_C(258419592265970),	// LOCAsmZ
    UINT64_C(258385232527584),	// LOCFH
    UINT64_C(258385232527584),	// LOCFHAsm
    UINT64_C(258419592265952),	// LOCFHAsmE
    UINT64_C(258393822462176),	// LOCFHAsmH
    UINT64_C(258428182200544),	// LOCFHAsmHE
    UINT64_C(258402412396768),	// LOCFHAsmL
    UINT64_C(258436772135136),	// LOCFHAsmLE
    UINT64_C(258411002331360),	// LOCFHAsmLH
    UINT64_C(258402412396768),	// LOCFHAsmM
    UINT64_C(258415297298656),	// LOCFHAsmNE
    UINT64_C(258441067102432),	// LOCFHAsmNH
    UINT64_C(258406707364064),	// LOCFHAsmNHE
    UINT64_C(258432477167840),	// LOCFHAsmNL
    UINT64_C(258398117429472),	// LOCFHAsmNLE
    UINT64_C(258423887233248),	// LOCFHAsmNLH
    UINT64_C(258432477167840),	// LOCFHAsmNM
    UINT64_C(258445362069728),	// LOCFHAsmNO
    UINT64_C(258441067102432),	// LOCFHAsmNP
    UINT64_C(258415297298656),	// LOCFHAsmNZ
    UINT64_C(258389527494880),	// LOCFHAsmO
    UINT64_C(258393822462176),	// LOCFHAsmP
    UINT64_C(258419592265952),	// LOCFHAsmZ
    UINT64_C(3118465024),	// LOCFHR
    UINT64_C(3118465024),	// LOCFHRAsm
    UINT64_C(3118497792),	// LOCFHRAsmE
    UINT64_C(3118473216),	// LOCFHRAsmH
    UINT64_C(3118505984),	// LOCFHRAsmHE
    UINT64_C(3118481408),	// LOCFHRAsmL
    UINT64_C(3118514176),	// LOCFHRAsmLE
    UINT64_C(3118489600),	// LOCFHRAsmLH
    UINT64_C(3118481408),	// LOCFHRAsmM
    UINT64_C(3118493696),	// LOCFHRAsmNE
    UINT64_C(3118518272),	// LOCFHRAsmNH
    UINT64_C(3118485504),	// LOCFHRAsmNHE
    UINT64_C(3118510080),	// LOCFHRAsmNL
    UINT64_C(3118477312),	// LOCFHRAsmNLE
    UINT64_C(3118501888),	// LOCFHRAsmNLH
    UINT64_C(3118510080),	// LOCFHRAsmNM
    UINT64_C(3118522368),	// LOCFHRAsmNO
    UINT64_C(3118518272),	// LOCFHRAsmNP
    UINT64_C(3118493696),	// LOCFHRAsmNZ
    UINT64_C(3118469120),	// LOCFHRAsmO
    UINT64_C(3118473216),	// LOCFHRAsmP
    UINT64_C(3118497792),	// LOCFHRAsmZ
    UINT64_C(258385232527586),	// LOCG
    UINT64_C(258385232527586),	// LOCGAsm
    UINT64_C(258419592265954),	// LOCGAsmE
    UINT64_C(258393822462178),	// LOCGAsmH
    UINT64_C(258428182200546),	// LOCGAsmHE
    UINT64_C(258402412396770),	// LOCGAsmL
    UINT64_C(258436772135138),	// LOCGAsmLE
    UINT64_C(258411002331362),	// LOCGAsmLH
    UINT64_C(258402412396770),	// LOCGAsmM
    UINT64_C(258415297298658),	// LOCGAsmNE
    UINT64_C(258441067102434),	// LOCGAsmNH
    UINT64_C(258406707364066),	// LOCGAsmNHE
    UINT64_C(258432477167842),	// LOCGAsmNL
    UINT64_C(258398117429474),	// LOCGAsmNLE
    UINT64_C(258423887233250),	// LOCGAsmNLH
    UINT64_C(258432477167842),	// LOCGAsmNM
    UINT64_C(258445362069730),	// LOCGAsmNO
    UINT64_C(258441067102434),	// LOCGAsmNP
    UINT64_C(258415297298658),	// LOCGAsmNZ
    UINT64_C(258389527494882),	// LOCGAsmO
    UINT64_C(258393822462178),	// LOCGAsmP
    UINT64_C(258419592265954),	// LOCGAsmZ
    UINT64_C(259484744155206),	// LOCGHI
    UINT64_C(259484744155206),	// LOCGHIAsm
    UINT64_C(259519103893574),	// LOCGHIAsmE
    UINT64_C(259493334089798),	// LOCGHIAsmH
    UINT64_C(259527693828166),	// LOCGHIAsmHE
    UINT64_C(259501924024390),	// LOCGHIAsmL
    UINT64_C(259536283762758),	// LOCGHIAsmLE
    UINT64_C(259510513958982),	// LOCGHIAsmLH
    UINT64_C(259501924024390),	// LOCGHIAsmM
    UINT64_C(259514808926278),	// LOCGHIAsmNE
    UINT64_C(259540578730054),	// LOCGHIAsmNH
    UINT64_C(259506218991686),	// LOCGHIAsmNHE
    UINT64_C(259531988795462),	// LOCGHIAsmNL
    UINT64_C(259497629057094),	// LOCGHIAsmNLE
    UINT64_C(259523398860870),	// LOCGHIAsmNLH
    UINT64_C(259531988795462),	// LOCGHIAsmNM
    UINT64_C(259544873697350),	// LOCGHIAsmNO
    UINT64_C(259540578730054),	// LOCGHIAsmNP
    UINT64_C(259514808926278),	// LOCGHIAsmNZ
    UINT64_C(259489039122502),	// LOCGHIAsmO
    UINT64_C(259493334089798),	// LOCGHIAsmP
    UINT64_C(259519103893574),	// LOCGHIAsmZ
    UINT64_C(3118596096),	// LOCGR
    UINT64_C(3118596096),	// LOCGRAsm
    UINT64_C(3118628864),	// LOCGRAsmE
    UINT64_C(3118604288),	// LOCGRAsmH
    UINT64_C(3118637056),	// LOCGRAsmHE
    UINT64_C(3118612480),	// LOCGRAsmL
    UINT64_C(3118645248),	// LOCGRAsmLE
    UINT64_C(3118620672),	// LOCGRAsmLH
    UINT64_C(3118612480),	// LOCGRAsmM
    UINT64_C(3118624768),	// LOCGRAsmNE
    UINT64_C(3118649344),	// LOCGRAsmNH
    UINT64_C(3118616576),	// LOCGRAsmNHE
    UINT64_C(3118641152),	// LOCGRAsmNL
    UINT64_C(3118608384),	// LOCGRAsmNLE
    UINT64_C(3118632960),	// LOCGRAsmNLH
    UINT64_C(3118641152),	// LOCGRAsmNM
    UINT64_C(3118653440),	// LOCGRAsmNO
    UINT64_C(3118649344),	// LOCGRAsmNP
    UINT64_C(3118624768),	// LOCGRAsmNZ
    UINT64_C(3118600192),	// LOCGRAsmO
    UINT64_C(3118604288),	// LOCGRAsmP
    UINT64_C(3118628864),	// LOCGRAsmZ
    UINT64_C(259484744155214),	// LOCHHI
    UINT64_C(259484744155214),	// LOCHHIAsm
    UINT64_C(259519103893582),	// LOCHHIAsmE
    UINT64_C(259493334089806),	// LOCHHIAsmH
    UINT64_C(259527693828174),	// LOCHHIAsmHE
    UINT64_C(259501924024398),	// LOCHHIAsmL
    UINT64_C(259536283762766),	// LOCHHIAsmLE
    UINT64_C(259510513958990),	// LOCHHIAsmLH
    UINT64_C(259501924024398),	// LOCHHIAsmM
    UINT64_C(259514808926286),	// LOCHHIAsmNE
    UINT64_C(259540578730062),	// LOCHHIAsmNH
    UINT64_C(259506218991694),	// LOCHHIAsmNHE
    UINT64_C(259531988795470),	// LOCHHIAsmNL
    UINT64_C(259497629057102),	// LOCHHIAsmNLE
    UINT64_C(259523398860878),	// LOCHHIAsmNLH
    UINT64_C(259531988795470),	// LOCHHIAsmNM
    UINT64_C(259544873697358),	// LOCHHIAsmNO
    UINT64_C(259540578730062),	// LOCHHIAsmNP
    UINT64_C(259514808926286),	// LOCHHIAsmNZ
    UINT64_C(259489039122510),	// LOCHHIAsmO
    UINT64_C(259493334089806),	// LOCHHIAsmP
    UINT64_C(259519103893582),	// LOCHHIAsmZ
    UINT64_C(259484744155202),	// LOCHI
    UINT64_C(259484744155202),	// LOCHIAsm
    UINT64_C(259519103893570),	// LOCHIAsmE
    UINT64_C(259493334089794),	// LOCHIAsmH
    UINT64_C(259527693828162),	// LOCHIAsmHE
    UINT64_C(259501924024386),	// LOCHIAsmL
    UINT64_C(259536283762754),	// LOCHIAsmLE
    UINT64_C(259510513958978),	// LOCHIAsmLH
    UINT64_C(259501924024386),	// LOCHIAsmM
    UINT64_C(259514808926274),	// LOCHIAsmNE
    UINT64_C(259540578730050),	// LOCHIAsmNH
    UINT64_C(259506218991682),	// LOCHIAsmNHE
    UINT64_C(259531988795458),	// LOCHIAsmNL
    UINT64_C(259497629057090),	// LOCHIAsmNLE
    UINT64_C(259523398860866),	// LOCHIAsmNLH
    UINT64_C(259531988795458),	// LOCHIAsmNM
    UINT64_C(259544873697346),	// LOCHIAsmNO
    UINT64_C(259540578730050),	// LOCHIAsmNP
    UINT64_C(259514808926274),	// LOCHIAsmNZ
    UINT64_C(259489039122498),	// LOCHIAsmO
    UINT64_C(259493334089794),	// LOCHIAsmP
    UINT64_C(259519103893570),	// LOCHIAsmZ
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(3119644672),	// LOCR
    UINT64_C(3119644672),	// LOCRAsm
    UINT64_C(3119677440),	// LOCRAsmE
    UINT64_C(3119652864),	// LOCRAsmH
    UINT64_C(3119685632),	// LOCRAsmHE
    UINT64_C(3119661056),	// LOCRAsmL
    UINT64_C(3119693824),	// LOCRAsmLE
    UINT64_C(3119669248),	// LOCRAsmLH
    UINT64_C(3119661056),	// LOCRAsmM
    UINT64_C(3119673344),	// LOCRAsmNE
    UINT64_C(3119697920),	// LOCRAsmNH
    UINT64_C(3119665152),	// LOCRAsmNHE
    UINT64_C(3119689728),	// LOCRAsmNL
    UINT64_C(3119656960),	// LOCRAsmNLE
    UINT64_C(3119681536),	// LOCRAsmNLH
    UINT64_C(3119689728),	// LOCRAsmNM
    UINT64_C(3119702016),	// LOCRAsmNO
    UINT64_C(3119697920),	// LOCRAsmNP
    UINT64_C(3119673344),	// LOCRAsmNZ
    UINT64_C(3119648768),	// LOCRAsmO
    UINT64_C(3119652864),	// LOCRAsmP
    UINT64_C(3119677440),	// LOCRAsmZ
    UINT64_C(0),
    UINT64_C(219919505424384),	// LPD
    UINT64_C(3004170240),	// LPDBR
    UINT64_C(3010461696),	// LPDFR
    UINT64_C(3010461696),	// LPDFR_32
    UINT64_C(219923800391680),	// LPDG
    UINT64_C(3003121664),	// LPEBR
    UINT64_C(3104833536),	// LPGFR
    UINT64_C(3103784960),	// LPGR
    UINT64_C(249589139505295),	// LPQ
    UINT64_C(4096),	// LPR
    UINT64_C(3007315968),	// LPXBR
    UINT64_C(6144),	// LR
    UINT64_C(215560113618944),	// LRL
    UINT64_C(0),
    UINT64_C(249589139505182),	// LRV
    UINT64_C(249589139505167),	// LRVG
    UINT64_C(3104768000),	// LRVGR
    UINT64_C(249589139505183),	// LRVH
    UINT64_C(3105816576),	// LRVR
    UINT64_C(249589139505170),	// LT
    UINT64_C(3004301312),	// LTDBR
    UINT64_C(3004301312),	// LTDBRCompare
    UINT64_C(0),
    UINT64_C(3003252736),	// LTEBR
    UINT64_C(3003252736),	// LTEBRCompare
    UINT64_C(0),
    UINT64_C(249589139505154),	// LTG
    UINT64_C(249589139505202),	// LTGF
    UINT64_C(3104964608),	// LTGFR
    UINT64_C(3103916032),	// LTGR
    UINT64_C(4608),	// LTR
    UINT64_C(3007447040),	// LTXBR
    UINT64_C(3007447040),	// LTXBRCompare
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(260584255782917),	// LXDB
    UINT64_C(3003449344),	// LXDBR
    UINT64_C(260584255782918),	// LXEB
    UINT64_C(3003514880),	// LXEBR
    UINT64_C(3009740800),	// LXR
    UINT64_C(249589139505240),	// LY
    UINT64_C(3010789376),	// LZDR
    UINT64_C(3010723840),	// LZER
    UINT64_C(249589139505211),	// LZRF
    UINT64_C(249589139505194),	// LZRG
    UINT64_C(3010854912),	// LZXR
    UINT64_C(260584255782942),	// MADB
    UINT64_C(3005087744),	// MADBR
    UINT64_C(260584255782926),	// MAEB
    UINT64_C(3004039168),	// MAEBR
    UINT64_C(260584255782940),	// MDB
    UINT64_C(3004956672),	// MDBR
    UINT64_C(260584255782924),	// MDEB
    UINT64_C(3003908096),	// MDEBR
    UINT64_C(260584255782935),	// MEEB
    UINT64_C(3004628992),	// MEEBR
    UINT64_C(2802647040),	// MGHI
    UINT64_C(1275068416),	// MH
    UINT64_C(2802581504),	// MHI
    UINT64_C(249589139505276),	// MHY
    UINT64_C(249589139505286),	// MLG
    UINT64_C(3112566784),	// MLGR
    UINT64_C(1895825408),	// MS
    UINT64_C(260584255782943),	// MSDB
    UINT64_C(3005153280),	// MSDBR
    UINT64_C(260584255782927),	// MSEB
    UINT64_C(3004104704),	// MSEBR
    UINT64_C(213309550755840),	// MSFI
    UINT64_C(249589139505164),	// MSG
    UINT64_C(249589139505180),	// MSGF
    UINT64_C(213305255788544),	// MSGFI
    UINT64_C(3105619968),	// MSGFR
    UINT64_C(3104571392),	// MSGR
    UINT64_C(2991718400),	// MSR
    UINT64_C(249589139505233),	// MSY
    UINT64_C(230897441832960),	// MVC
    UINT64_C(238594023227392),	// MVCK
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(252097400406016),	// MVGHI
    UINT64_C(252080220536832),	// MVHHI
    UINT64_C(252114580275200),	// MVHI
    UINT64_C(2449473536),	// MVI
    UINT64_C(258385232527442),	// MVIY
    UINT64_C(2991915008),	// MVST
    UINT64_C(0),
    UINT64_C(3008102400),	// MXBR
    UINT64_C(260584255782919),	// MXDB
    UINT64_C(3003580416),	// MXDBR
    UINT64_C(0),
    UINT64_C(1409286144),	// N
    UINT64_C(233096465088512),	// NC
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(249589139505280),	// NG
    UINT64_C(3112173568),	// NGR
    UINT64_C(3118727168),	// NGRK
    UINT64_C(2483027968),	// NI
    UINT64_C(3002728448),	// NIAI
    UINT64_C(0),
    UINT64_C(211149182205952),	// NIHF
    UINT64_C(0),
    UINT64_C(2768502784),	// NIHH
    UINT64_C(0),
    UINT64_C(2768568320),	// NIHL
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(211153477173248),	// NILF
    UINT64_C(0),
    UINT64_C(2768633856),	// NILH
    UINT64_C(0),
    UINT64_C(2768699392),	// NILL
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(258385232527444),	// NIY
    UINT64_C(5120),	// NR
    UINT64_C(3119775744),	// NRK
    UINT64_C(249589139505189),	// NTSTG
    UINT64_C(249589139505236),	// NY
    UINT64_C(1442840576),	// O
    UINT64_C(235295488344064),	// OC
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(249589139505281),	// OG
    UINT64_C(3112239104),	// OGR
    UINT64_C(3118858240),	// OGRK
    UINT64_C(2516582400),	// OI
    UINT64_C(0),
    UINT64_C(211157772140544),	// OIHF
    UINT64_C(0),
    UINT64_C(2768764928),	// OIHH
    UINT64_C(0),
    UINT64_C(2768830464),	// OIHL
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(211162067107840),	// OILF
    UINT64_C(0),
    UINT64_C(2768896000),	// OILH
    UINT64_C(0),
    UINT64_C(2768961536),	// OILL
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(258385232527446),	// OIY
    UINT64_C(5632),	// OR
    UINT64_C(3119906816),	// ORK
    UINT64_C(249589139505238),	// OY
    UINT64_C(249589139505206),	// PFD
    UINT64_C(217711892234240),	// PFDRL
    UINT64_C(261683767410688),	// PLO
    UINT64_C(3118530560),	// POPCNT
    UINT64_C(3001548800),	// PPA
    UINT64_C(257),	// PR
    UINT64_C(259484744155221),	// RISBG
    UINT64_C(259484744155221),	// RISBG32
    UINT64_C(259484744155225),	// RISBGN
    UINT64_C(259484744155229),	// RISBHG
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(259484744155217),	// RISBLG
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(258385232527389),	// RLL
    UINT64_C(258385232527388),	// RLLG
    UINT64_C(259484744155220),	// RNSBG
    UINT64_C(259484744155222),	// ROSBG
    UINT64_C(259484744155223),	// RXSBG
    UINT64_C(0),
    UINT64_C(1526726656),	// S
    UINT64_C(268),	// SAM24
    UINT64_C(269),	// SAM31
    UINT64_C(270),	// SAM64
    UINT64_C(2991456256),	// SAR
    UINT64_C(260584255782939),	// SDB
    UINT64_C(3004891136),	// SDBR
    UINT64_C(260584255782923),	// SEB
    UINT64_C(3003842560),	// SEBR
    UINT64_C(3011837952),	// SFASR
    UINT64_C(3011772416),	// SFPC
    UINT64_C(249589139505161),	// SG
    UINT64_C(249589139505177),	// SGF
    UINT64_C(3105423360),	// SGFR
    UINT64_C(3104374784),	// SGR
    UINT64_C(3119054848),	// SGRK
    UINT64_C(1258291200),	// SH
    UINT64_C(249589139505275),	// SHY
    UINT64_C(1593835520),	// SL
    UINT64_C(2332033024),	// SLA
    UINT64_C(258385232527581),	// SLAK
    UINT64_C(249589139505305),	// SLB
    UINT64_C(249589139505289),	// SLBG
    UINT64_C(3112763392),	// SLBGR
    UINT64_C(3113811968),	// SLBR
    UINT64_C(213326730625024),	// SLFI
    UINT64_C(249589139505163),	// SLG
    UINT64_C(249589139505179),	// SLGF
    UINT64_C(213322435657728),	// SLGFI
    UINT64_C(3105554432),	// SLGFR
    UINT64_C(3104505856),	// SLGR
    UINT64_C(3119185920),	// SLGRK
    UINT64_C(2298478592),	// SLL
    UINT64_C(258385232527373),	// SLLG
    UINT64_C(258385232527583),	// SLLK
    UINT64_C(7936),	// SLR
    UINT64_C(3120234496),	// SLRK
    UINT64_C(249589139505247),	// SLY
    UINT64_C(1024),	// SPM
    UINT64_C(260584255782933),	// SQDB
    UINT64_C(3004497920),	// SQDBR
    UINT64_C(260584255782932),	// SQEB
    UINT64_C(3004432384),	// SQEBR
    UINT64_C(3004563456),	// SQXBR
    UINT64_C(6912),	// SR
    UINT64_C(2315255808),	// SRA
    UINT64_C(258385232527370),	// SRAG
    UINT64_C(258385232527580),	// SRAK
    UINT64_C(3120103424),	// SRK
    UINT64_C(2281701376),	// SRL
    UINT64_C(258385232527372),	// SRLG
    UINT64_C(258385232527582),	// SRLK
    UINT64_C(2996371456),	// SRNM
    UINT64_C(2998403072),	// SRNMB
    UINT64_C(2998468608),	// SRNMT
    UINT64_C(2992504832),	// SRST
    UINT64_C(0),
    UINT64_C(1342177280),	// ST
    UINT64_C(0),
    UINT64_C(2600468480),	// STAM
    UINT64_C(258385232527515),	// STAMY
    UINT64_C(1107296256),	// STC
    UINT64_C(249589139505347),	// STCH
    UINT64_C(2986672128),	// STCK
    UINT64_C(2994208768),	// STCKE
    UINT64_C(2994470912),	// STCKF
    UINT64_C(0),
    UINT64_C(249589139505266),	// STCY
    UINT64_C(1610612736),	// STD
    UINT64_C(260584255783015),	// STDY
    UINT64_C(1879048192),	// STE
    UINT64_C(260584255783014),	// STEY
    UINT64_C(249589139505355),	// STFH
    UINT64_C(2997878784),	// STFLE
    UINT64_C(2996568064),	// STFPC
    UINT64_C(249589139505188),	// STG
    UINT64_C(215551523684352),	// STGRL
    UINT64_C(1073741824),	// STH
    UINT64_C(249589139505351),	// STHH
    UINT64_C(0),
    UINT64_C(215534343815168),	// STHRL
    UINT64_C(249589139505264),	// STHY
    UINT64_C(2415919104),	// STM
    UINT64_C(258385232527396),	// STMG
    UINT64_C(258385232527398),	// STMH
    UINT64_C(258385232527504),	// STMY
    UINT64_C(0),
    UINT64_C(258385232527603),	// STOC
    UINT64_C(258385232527603),	// STOCAsm
    UINT64_C(258419592265971),	// STOCAsmE
    UINT64_C(258393822462195),	// STOCAsmH
    UINT64_C(258428182200563),	// STOCAsmHE
    UINT64_C(258402412396787),	// STOCAsmL
    UINT64_C(258436772135155),	// STOCAsmLE
    UINT64_C(258411002331379),	// STOCAsmLH
    UINT64_C(258402412396787),	// STOCAsmM
    UINT64_C(258415297298675),	// STOCAsmNE
    UINT64_C(258441067102451),	// STOCAsmNH
    UINT64_C(258406707364083),	// STOCAsmNHE
    UINT64_C(258432477167859),	// STOCAsmNL
    UINT64_C(258398117429491),	// STOCAsmNLE
    UINT64_C(258423887233267),	// STOCAsmNLH
    UINT64_C(258432477167859),	// STOCAsmNM
    UINT64_C(258445362069747),	// STOCAsmNO
    UINT64_C(258441067102451),	// STOCAsmNP
    UINT64_C(258415297298675),	// STOCAsmNZ
    UINT64_C(258389527494899),	// STOCAsmO
    UINT64_C(258393822462195),	// STOCAsmP
    UINT64_C(258419592265971),	// STOCAsmZ
    UINT64_C(258385232527585),	// STOCFH
    UINT64_C(258385232527585),	// STOCFHAsm
    UINT64_C(258419592265953),	// STOCFHAsmE
    UINT64_C(258393822462177),	// STOCFHAsmH
    UINT64_C(258428182200545),	// STOCFHAsmHE
    UINT64_C(258402412396769),	// STOCFHAsmL
    UINT64_C(258436772135137),	// STOCFHAsmLE
    UINT64_C(258411002331361),	// STOCFHAsmLH
    UINT64_C(258402412396769),	// STOCFHAsmM
    UINT64_C(258415297298657),	// STOCFHAsmNE
    UINT64_C(258441067102433),	// STOCFHAsmNH
    UINT64_C(258406707364065),	// STOCFHAsmNHE
    UINT64_C(258432477167841),	// STOCFHAsmNL
    UINT64_C(258398117429473),	// STOCFHAsmNLE
    UINT64_C(258423887233249),	// STOCFHAsmNLH
    UINT64_C(258432477167841),	// STOCFHAsmNM
    UINT64_C(258445362069729),	// STOCFHAsmNO
    UINT64_C(258441067102433),	// STOCFHAsmNP
    UINT64_C(258415297298657),	// STOCFHAsmNZ
    UINT64_C(258389527494881),	// STOCFHAsmO
    UINT64_C(258393822462177),	// STOCFHAsmP
    UINT64_C(258419592265953),	// STOCFHAsmZ
    UINT64_C(258385232527587),	// STOCG
    UINT64_C(258385232527587),	// STOCGAsm
    UINT64_C(258419592265955),	// STOCGAsmE
    UINT64_C(258393822462179),	// STOCGAsmH
    UINT64_C(258428182200547),	// STOCGAsmHE
    UINT64_C(258402412396771),	// STOCGAsmL
    UINT64_C(258436772135139),	// STOCGAsmLE
    UINT64_C(258411002331363),	// STOCGAsmLH
    UINT64_C(258402412396771),	// STOCGAsmM
    UINT64_C(258415297298659),	// STOCGAsmNE
    UINT64_C(258441067102435),	// STOCGAsmNH
    UINT64_C(258406707364067),	// STOCGAsmNHE
    UINT64_C(258432477167843),	// STOCGAsmNL
    UINT64_C(258398117429475),	// STOCGAsmNLE
    UINT64_C(258423887233251),	// STOCGAsmNLH
    UINT64_C(258432477167843),	// STOCGAsmNM
    UINT64_C(258445362069731),	// STOCGAsmNO
    UINT64_C(258441067102435),	// STOCGAsmNP
    UINT64_C(258415297298659),	// STOCGAsmNZ
    UINT64_C(258389527494883),	// STOCGAsmO
    UINT64_C(258393822462179),	// STOCGAsmP
    UINT64_C(258419592265955),	// STOCGAsmZ
    UINT64_C(0),
    UINT64_C(249589139505294),	// STPQ
    UINT64_C(251796752695296),	// STRAG
    UINT64_C(215568703553536),	// STRL
    UINT64_C(249589139505214),	// STRV
    UINT64_C(249589139505199),	// STRVG
    UINT64_C(249589139505215),	// STRVH
    UINT64_C(0),
    UINT64_C(249589139505232),	// STY
    UINT64_C(2560),	// SVC
    UINT64_C(3008036864),	// SXBR
    UINT64_C(249589139505243),	// SY
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(3002859520),	// TABORT
    UINT64_C(267),	// TAM
    UINT64_C(252200479621120),	// TBEGIN
    UINT64_C(252204774588416),	// TBEGINC
    UINT64_C(0),
    UINT64_C(260584255782929),	// TCDB
    UINT64_C(260584255782928),	// TCEB
    UINT64_C(260584255782930),	// TCXB
    UINT64_C(3002597376),	// TEND
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(2432696320),	// TM
    UINT64_C(2801926144),	// TMHH
    UINT64_C(0),
    UINT64_C(2801991680),	// TMHL
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(2801795072),	// TMLH
    UINT64_C(0),
    UINT64_C(2801860608),	// TMLL
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(258385232527441),	// TMY
    UINT64_C(2466250752),	// TS
    UINT64_C(0),
    UINT64_C(253987186016499),	// VA
    UINT64_C(253987186016499),	// VAB
    UINT64_C(253987186016443),	// VAC
    UINT64_C(253987186016497),	// VACC
    UINT64_C(253987186016497),	// VACCB
    UINT64_C(253987186016441),	// VACCC
    UINT64_C(253987253125305),	// VACCCQ
    UINT64_C(253987186024689),	// VACCF
    UINT64_C(253987186028785),	// VACCG
    UINT64_C(253987186020593),	// VACCH
    UINT64_C(253987186032881),	// VACCQ
    UINT64_C(253987253125307),	// VACQ
    UINT64_C(253987186024691),	// VAF
    UINT64_C(253987186028787),	// VAG
    UINT64_C(253987186020595),	// VAH
    UINT64_C(253987186032883),	// VAQ
    UINT64_C(253987186016498),	// VAVG
    UINT64_C(253987186016498),	// VAVGB
    UINT64_C(253987186024690),	// VAVGF
    UINT64_C(253987186028786),	// VAVGG
    UINT64_C(253987186020594),	// VAVGH
    UINT64_C(253987186016496),	// VAVGL
    UINT64_C(253987186016496),	// VAVGLB
    UINT64_C(253987186024688),	// VAVGLF
    UINT64_C(253987186028784),	// VAVGLG
    UINT64_C(253987186020592),	// VAVGLH
    UINT64_C(253987186016451),	// VCDG
    UINT64_C(253987186028739),	// VCDGB
    UINT64_C(253987186016449),	// VCDLG
    UINT64_C(253987186028737),	// VCDLGB
    UINT64_C(253987186016504),	// VCEQ
    UINT64_C(253987186016504),	// VCEQB
    UINT64_C(253987187065080),	// VCEQBS
    UINT64_C(253987186024696),	// VCEQF
    UINT64_C(253987187073272),	// VCEQFS
    UINT64_C(253987186028792),	// VCEQG
    UINT64_C(253987187077368),	// VCEQGS
    UINT64_C(253987186020600),	// VCEQH
    UINT64_C(253987187069176),	// VCEQHS
    UINT64_C(253987186016450),	// VCGD
    UINT64_C(253987186028738),	// VCGDB
    UINT64_C(253987186016507),	// VCH
    UINT64_C(253987186016507),	// VCHB
    UINT64_C(253987187065083),	// VCHBS
    UINT64_C(253987186024699),	// VCHF
    UINT64_C(253987187073275),	// VCHFS
    UINT64_C(253987186028795),	// VCHG
    UINT64_C(253987187077371),	// VCHGS
    UINT64_C(253987186020603),	// VCHH
    UINT64_C(253987187069179),	// VCHHS
    UINT64_C(253987186016505),	// VCHL
    UINT64_C(253987186016505),	// VCHLB
    UINT64_C(253987187065081),	// VCHLBS
    UINT64_C(253987186024697),	// VCHLF
    UINT64_C(253987187073273),	// VCHLFS
    UINT64_C(253987186028793),	// VCHLG
    UINT64_C(253987187077369),	// VCHLGS
    UINT64_C(253987186020601),	// VCHLH
    UINT64_C(253987187069177),	// VCHLHS
    UINT64_C(253987186016358),	// VCKSM
    UINT64_C(253987186016448),	// VCLGD
    UINT64_C(253987186028736),	// VCLGDB
    UINT64_C(253987186016339),	// VCLZ
    UINT64_C(253987186016339),	// VCLZB
    UINT64_C(253987186024531),	// VCLZF
    UINT64_C(253987186028627),	// VCLZG
    UINT64_C(253987186020435),	// VCLZH
    UINT64_C(253987186016338),	// VCTZ
    UINT64_C(253987186016338),	// VCTZB
    UINT64_C(253987186024530),	// VCTZF
    UINT64_C(253987186028626),	// VCTZG
    UINT64_C(253987186020434),	// VCTZH
    UINT64_C(253987186016475),	// VEC
    UINT64_C(253987186016475),	// VECB
    UINT64_C(253987186024667),	// VECF
    UINT64_C(253987186028763),	// VECG
    UINT64_C(253987186020571),	// VECH
    UINT64_C(253987186016473),	// VECL
    UINT64_C(253987186016473),	// VECLB
    UINT64_C(253987186024665),	// VECLF
    UINT64_C(253987186028761),	// VECLG
    UINT64_C(253987186020569),	// VECLH
    UINT64_C(253987186016370),	// VERIM
    UINT64_C(253987186016370),	// VERIMB
    UINT64_C(253987186024562),	// VERIMF
    UINT64_C(253987186028658),	// VERIMG
    UINT64_C(253987186020466),	// VERIMH
    UINT64_C(253987186016307),	// VERLL
    UINT64_C(253987186016307),	// VERLLB
    UINT64_C(253987186024499),	// VERLLF
    UINT64_C(253987186028595),	// VERLLG
    UINT64_C(253987186020403),	// VERLLH
    UINT64_C(253987186016371),	// VERLLV
    UINT64_C(253987186016371),	// VERLLVB
    UINT64_C(253987186024563),	// VERLLVF
    UINT64_C(253987186028659),	// VERLLVG
    UINT64_C(253987186020467),	// VERLLVH
    UINT64_C(253987186016304),	// VESL
    UINT64_C(253987186016304),	// VESLB
    UINT64_C(253987186024496),	// VESLF
    UINT64_C(253987186028592),	// VESLG
    UINT64_C(253987186020400),	// VESLH
    UINT64_C(253987186016368),	// VESLV
    UINT64_C(253987186016368),	// VESLVB
    UINT64_C(253987186024560),	// VESLVF
    UINT64_C(253987186028656),	// VESLVG
    UINT64_C(253987186020464),	// VESLVH
    UINT64_C(253987186016314),	// VESRA
    UINT64_C(253987186016314),	// VESRAB
    UINT64_C(253987186024506),	// VESRAF
    UINT64_C(253987186028602),	// VESRAG
    UINT64_C(253987186020410),	// VESRAH
    UINT64_C(253987186016378),	// VESRAV
    UINT64_C(253987186016378),	// VESRAVB
    UINT64_C(253987186024570),	// VESRAVF
    UINT64_C(253987186028666),	// VESRAVG
    UINT64_C(253987186020474),	// VESRAVH
    UINT64_C(253987186016312),	// VESRL
    UINT64_C(253987186016312),	// VESRLB
    UINT64_C(253987186024504),	// VESRLF
    UINT64_C(253987186028600),	// VESRLG
    UINT64_C(253987186020408),	// VESRLH
    UINT64_C(253987186016376),	// VESRLV
    UINT64_C(253987186016376),	// VESRLVB
    UINT64_C(253987186024568),	// VESRLVF
    UINT64_C(253987186028664),	// VESRLVG
    UINT64_C(253987186020472),	// VESRLVH
    UINT64_C(253987186016483),	// VFA
    UINT64_C(253987186028771),	// VFADB
    UINT64_C(253987186016386),	// VFAE
    UINT64_C(253987186016386),	// VFAEB
    UINT64_C(253987187064962),	// VFAEBS
    UINT64_C(253987186024578),	// VFAEF
    UINT64_C(253987187073154),	// VFAEFS
    UINT64_C(253987186020482),	// VFAEH
    UINT64_C(253987187069058),	// VFAEHS
    UINT64_C(253987188113538),	// VFAEZB
    UINT64_C(253987189162114),	// VFAEZBS
    UINT64_C(253987188121730),	// VFAEZF
    UINT64_C(253987189170306),	// VFAEZFS
    UINT64_C(253987188117634),	// VFAEZH
    UINT64_C(253987189166210),	// VFAEZHS
    UINT64_C(253987186016488),	// VFCE
    UINT64_C(253987186028776),	// VFCEDB
    UINT64_C(253987187077352),	// VFCEDBS
    UINT64_C(253987186016491),	// VFCH
    UINT64_C(253987186028779),	// VFCHDB
    UINT64_C(253987187077355),	// VFCHDBS
    UINT64_C(253987186016490),	// VFCHE
    UINT64_C(253987186028778),	// VFCHEDB
    UINT64_C(253987187077354),	// VFCHEDBS
    UINT64_C(253987186016485),	// VFD
    UINT64_C(253987186028773),	// VFDDB
    UINT64_C(253987186016384),	// VFEE
    UINT64_C(253987186016384),	// VFEEB
    UINT64_C(253987187064960),	// VFEEBS
    UINT64_C(253987186024576),	// VFEEF
    UINT64_C(253987187073152),	// VFEEFS
    UINT64_C(253987186020480),	// VFEEH
    UINT64_C(253987187069056),	// VFEEHS
    UINT64_C(253987188113536),	// VFEEZB
    UINT64_C(253987189162112),	// VFEEZBS
    UINT64_C(253987188121728),	// VFEEZF
    UINT64_C(253987189170304),	// VFEEZFS
    UINT64_C(253987188117632),	// VFEEZH
    UINT64_C(253987189166208),	// VFEEZHS
    UINT64_C(253987186016385),	// VFENE
    UINT64_C(253987186016385),	// VFENEB
    UINT64_C(253987187064961),	// VFENEBS
    UINT64_C(253987186024577),	// VFENEF
    UINT64_C(253987187073153),	// VFENEFS
    UINT64_C(253987186020481),	// VFENEH
    UINT64_C(253987187069057),	// VFENEHS
    UINT64_C(253987188113537),	// VFENEZB
    UINT64_C(253987189162113),	// VFENEZBS
    UINT64_C(253987188121729),	// VFENEZF
    UINT64_C(253987189170305),	// VFENEZFS
    UINT64_C(253987188117633),	// VFENEZH
    UINT64_C(253987189166209),	// VFENEZHS
    UINT64_C(253987186016455),	// VFI
    UINT64_C(253987186028743),	// VFIDB
    UINT64_C(253987186028748),	// VFLCDB
    UINT64_C(253987187077324),	// VFLNDB
    UINT64_C(253987188125900),	// VFLPDB
    UINT64_C(253987186016487),	// VFM
    UINT64_C(253987186016399),	// VFMA
    UINT64_C(253987236348047),	// VFMADB
    UINT64_C(253987186028775),	// VFMDB
    UINT64_C(253987186016398),	// VFMS
    UINT64_C(253987236348046),	// VFMSDB
    UINT64_C(253987186016460),	// VFPSO
    UINT64_C(253987186028748),	// VFPSODB
    UINT64_C(253987186016482),	// VFS
    UINT64_C(253987186028770),	// VFSDB
    UINT64_C(253987186016462),	// VFSQ
    UINT64_C(253987186028750),	// VFSQDB
    UINT64_C(253987186016330),	// VFTCI
    UINT64_C(253987186028618),	// VFTCIDB
    UINT64_C(253987186016324),	// VGBM
    UINT64_C(253987186016275),	// VGEF
    UINT64_C(253987186016274),	// VGEG
    UINT64_C(253987186016436),	// VGFM
    UINT64_C(253987186016444),	// VGFMA
    UINT64_C(253987186016444),	// VGFMAB
    UINT64_C(253987219570876),	// VGFMAF
    UINT64_C(253987236348092),	// VGFMAG
    UINT64_C(253987202793660),	// VGFMAH
    UINT64_C(253987186016436),	// VGFMB
    UINT64_C(253987186024628),	// VGFMF
    UINT64_C(253987186028724),	// VGFMG
    UINT64_C(253987186020532),	// VGFMH
    UINT64_C(253987186016326),	// VGM
    UINT64_C(253987186016326),	// VGMB
    UINT64_C(253987186024518),	// VGMF
    UINT64_C(253987186028614),	// VGMG
    UINT64_C(253987186020422),	// VGMH
    UINT64_C(253987186016348),	// VISTR
    UINT64_C(253987186016348),	// VISTRB
    UINT64_C(253987187064924),	// VISTRBS
    UINT64_C(253987186024540),	// VISTRF
    UINT64_C(253987187073116),	// VISTRFS
    UINT64_C(253987186020444),	// VISTRH
    UINT64_C(253987187069020),	// VISTRHS
    UINT64_C(253987186016262),	// VL
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(253987186016263),	// VLBB
    UINT64_C(253987186016478),	// VLC
    UINT64_C(253987186016478),	// VLCB
    UINT64_C(253987186024670),	// VLCF
    UINT64_C(253987186028766),	// VLCG
    UINT64_C(253987186020574),	// VLCH
    UINT64_C(253987186016452),	// VLDE
    UINT64_C(253987186024644),	// VLDEB
    UINT64_C(253987186016256),	// VLEB
    UINT64_C(253987186016453),	// VLED
    UINT64_C(253987186028741),	// VLEDB
    UINT64_C(253987186016259),	// VLEF
    UINT64_C(253987186016258),	// VLEG
    UINT64_C(253987186016257),	// VLEH
    UINT64_C(253987186016320),	// VLEIB
    UINT64_C(253987186016323),	// VLEIF
    UINT64_C(253987186016322),	// VLEIG
    UINT64_C(253987186016321),	// VLEIH
    UINT64_C(253987186016289),	// VLGV
    UINT64_C(253987186016289),	// VLGVB
    UINT64_C(253987186024481),	// VLGVF
    UINT64_C(253987186028577),	// VLGVG
    UINT64_C(253987186020385),	// VLGVH
    UINT64_C(253987186016311),	// VLL
    UINT64_C(253987186016260),	// VLLEZ
    UINT64_C(253987186016260),	// VLLEZB
    UINT64_C(253987186024452),	// VLLEZF
    UINT64_C(253987186028548),	// VLLEZG
    UINT64_C(253987186020356),	// VLLEZH
    UINT64_C(253987186016310),	// VLM
    UINT64_C(253987186016479),	// VLP
    UINT64_C(253987186016479),	// VLPB
    UINT64_C(253987186024671),	// VLPF
    UINT64_C(253987186028767),	// VLPG
    UINT64_C(253987186020575),	// VLPH
    UINT64_C(253987186016342),	// VLR
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(253987186016261),	// VLREP
    UINT64_C(253987186016261),	// VLREPB
    UINT64_C(253987186024453),	// VLREPF
    UINT64_C(253987186028549),	// VLREPG
    UINT64_C(253987186020357),	// VLREPH
    UINT64_C(253987186016290),	// VLVG
    UINT64_C(253987186016290),	// VLVGB
    UINT64_C(253987186024482),	// VLVGF
    UINT64_C(253987186028578),	// VLVGG
    UINT64_C(253987186020386),	// VLVGH
    UINT64_C(253987186016354),	// VLVGP
    UINT64_C(0),
    UINT64_C(253987186016430),	// VMAE
    UINT64_C(253987186016430),	// VMAEB
    UINT64_C(253987219570862),	// VMAEF
    UINT64_C(253987202793646),	// VMAEH
    UINT64_C(253987186016427),	// VMAH
    UINT64_C(253987186016427),	// VMAHB
    UINT64_C(253987219570859),	// VMAHF
    UINT64_C(253987202793643),	// VMAHH
    UINT64_C(253987186016426),	// VMAL
    UINT64_C(253987186016426),	// VMALB
    UINT64_C(253987186016428),	// VMALE
    UINT64_C(253987186016428),	// VMALEB
    UINT64_C(253987219570860),	// VMALEF
    UINT64_C(253987202793644),	// VMALEH
    UINT64_C(253987219570858),	// VMALF
    UINT64_C(253987186016425),	// VMALH
    UINT64_C(253987186016425),	// VMALHB
    UINT64_C(253987219570857),	// VMALHF
    UINT64_C(253987202793641),	// VMALHH
    UINT64_C(253987202793642),	// VMALHW
    UINT64_C(253987186016429),	// VMALO
    UINT64_C(253987186016429),	// VMALOB
    UINT64_C(253987219570861),	// VMALOF
    UINT64_C(253987202793645),	// VMALOH
    UINT64_C(253987186016431),	// VMAO
    UINT64_C(253987186016431),	// VMAOB
    UINT64_C(253987219570863),	// VMAOF
    UINT64_C(253987202793647),	// VMAOH
    UINT64_C(253987186016422),	// VME
    UINT64_C(253987186016422),	// VMEB
    UINT64_C(253987186024614),	// VMEF
    UINT64_C(253987186020518),	// VMEH
    UINT64_C(253987186016419),	// VMH
    UINT64_C(253987186016419),	// VMHB
    UINT64_C(253987186024611),	// VMHF
    UINT64_C(253987186020515),	// VMHH
    UINT64_C(253987186016418),	// VML
    UINT64_C(253987186016418),	// VMLB
    UINT64_C(253987186016420),	// VMLE
    UINT64_C(253987186016420),	// VMLEB
    UINT64_C(253987186024612),	// VMLEF
    UINT64_C(253987186020516),	// VMLEH
    UINT64_C(253987186024610),	// VMLF
    UINT64_C(253987186016417),	// VMLH
    UINT64_C(253987186016417),	// VMLHB
    UINT64_C(253987186024609),	// VMLHF
    UINT64_C(253987186020513),	// VMLHH
    UINT64_C(253987186020514),	// VMLHW
    UINT64_C(253987186016421),	// VMLO
    UINT64_C(253987186016421),	// VMLOB
    UINT64_C(253987186024613),	// VMLOF
    UINT64_C(253987186020517),	// VMLOH
    UINT64_C(253987186016510),	// VMN
    UINT64_C(253987186016510),	// VMNB
    UINT64_C(253987186024702),	// VMNF
    UINT64_C(253987186028798),	// VMNG
    UINT64_C(253987186020606),	// VMNH
    UINT64_C(253987186016508),	// VMNL
    UINT64_C(253987186016508),	// VMNLB
    UINT64_C(253987186024700),	// VMNLF
    UINT64_C(253987186028796),	// VMNLG
    UINT64_C(253987186020604),	// VMNLH
    UINT64_C(253987186016423),	// VMO
    UINT64_C(253987186016423),	// VMOB
    UINT64_C(253987186024615),	// VMOF
    UINT64_C(253987186020519),	// VMOH
    UINT64_C(253987186016353),	// VMRH
    UINT64_C(253987186016353),	// VMRHB
    UINT64_C(253987186024545),	// VMRHF
    UINT64_C(253987186028641),	// VMRHG
    UINT64_C(253987186020449),	// VMRHH
    UINT64_C(253987186016352),	// VMRL
    UINT64_C(253987186016352),	// VMRLB
    UINT64_C(253987186024544),	// VMRLF
    UINT64_C(253987186028640),	// VMRLG
    UINT64_C(253987186020448),	// VMRLH
    UINT64_C(253987186016511),	// VMX
    UINT64_C(253987186016511),	// VMXB
    UINT64_C(253987186024703),	// VMXF
    UINT64_C(253987186028799),	// VMXG
    UINT64_C(253987186020607),	// VMXH
    UINT64_C(253987186016509),	// VMXL
    UINT64_C(253987186016509),	// VMXLB
    UINT64_C(253987186024701),	// VMXLF
    UINT64_C(253987186028797),	// VMXLG
    UINT64_C(253987186020605),	// VMXLH
    UINT64_C(253987186016360),	// VN
    UINT64_C(253987186016361),	// VNC
    UINT64_C(253987186016363),	// VNO
    UINT64_C(253987186016362),	// VO
    UINT64_C(253991480918084),	// VONE
    UINT64_C(253987186016388),	// VPDI
    UINT64_C(253987186016396),	// VPERM
    UINT64_C(253987186016404),	// VPK
    UINT64_C(253987186024596),	// VPKF
    UINT64_C(253987186028692),	// VPKG
    UINT64_C(253987186020500),	// VPKH
    UINT64_C(253987186016405),	// VPKLS
    UINT64_C(253987186024597),	// VPKLSF
    UINT64_C(253987187073173),	// VPKLSFS
    UINT64_C(253987186028693),	// VPKLSG
    UINT64_C(253987187077269),	// VPKLSGS
    UINT64_C(253987186020501),	// VPKLSH
    UINT64_C(253987187069077),	// VPKLSHS
    UINT64_C(253987186016407),	// VPKS
    UINT64_C(253987186024599),	// VPKSF
    UINT64_C(253987187073175),	// VPKSFS
    UINT64_C(253987186028695),	// VPKSG
    UINT64_C(253987187077271),	// VPKSGS
    UINT64_C(253987186020503),	// VPKSH
    UINT64_C(253987187069079),	// VPKSHS
    UINT64_C(253987186016336),	// VPOPCT
    UINT64_C(253987186016333),	// VREP
    UINT64_C(253987186016333),	// VREPB
    UINT64_C(253987186024525),	// VREPF
    UINT64_C(253987186028621),	// VREPG
    UINT64_C(253987186020429),	// VREPH
    UINT64_C(253987186016325),	// VREPI
    UINT64_C(253987186016325),	// VREPIB
    UINT64_C(253987186024517),	// VREPIF
    UINT64_C(253987186028613),	// VREPIG
    UINT64_C(253987186020421),	// VREPIH
    UINT64_C(253987186016503),	// VS
    UINT64_C(253987186016503),	// VSB
    UINT64_C(253987186016445),	// VSBCBI
    UINT64_C(253987253125309),	// VSBCBIQ
    UINT64_C(253987186016447),	// VSBI
    UINT64_C(253987253125311),	// VSBIQ
    UINT64_C(253987186016501),	// VSCBI
    UINT64_C(253987186016501),	// VSCBIB
    UINT64_C(253987186024693),	// VSCBIF
    UINT64_C(253987186028789),	// VSCBIG
    UINT64_C(253987186020597),	// VSCBIH
    UINT64_C(253987186032885),	// VSCBIQ
    UINT64_C(253987186016283),	// VSCEF
    UINT64_C(253987186016282),	// VSCEG
    UINT64_C(253987186016351),	// VSEG
    UINT64_C(253987186016351),	// VSEGB
    UINT64_C(253987186024543),	// VSEGF
    UINT64_C(253987186020447),	// VSEGH
    UINT64_C(253987186016397),	// VSEL
    UINT64_C(253987186024695),	// VSF
    UINT64_C(253987186028791),	// VSG
    UINT64_C(253987186020599),	// VSH
    UINT64_C(253987186016372),	// VSL
    UINT64_C(253987186016373),	// VSLB
    UINT64_C(253987186016375),	// VSLDB
    UINT64_C(253987186032887),	// VSQ
    UINT64_C(253987186016382),	// VSRA
    UINT64_C(253987186016383),	// VSRAB
    UINT64_C(253987186016380),	// VSRL
    UINT64_C(253987186016381),	// VSRLB
    UINT64_C(253987186016270),	// VST
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(253987186016264),	// VSTEB
    UINT64_C(253987186016267),	// VSTEF
    UINT64_C(253987186016266),	// VSTEG
    UINT64_C(253987186016265),	// VSTEH
    UINT64_C(253987186016319),	// VSTL
    UINT64_C(253987186016318),	// VSTM
    UINT64_C(253987186016394),	// VSTRC
    UINT64_C(253987186016394),	// VSTRCB
    UINT64_C(253987187064970),	// VSTRCBS
    UINT64_C(253987219570826),	// VSTRCF
    UINT64_C(253987220619402),	// VSTRCFS
    UINT64_C(253987202793610),	// VSTRCH
    UINT64_C(253987203842186),	// VSTRCHS
    UINT64_C(253987188113546),	// VSTRCZB
    UINT64_C(253987189162122),	// VSTRCZBS
    UINT64_C(253987221667978),	// VSTRCZF
    UINT64_C(253987222716554),	// VSTRCZFS
    UINT64_C(253987204890762),	// VSTRCZH
    UINT64_C(253987205939338),	// VSTRCZHS
    UINT64_C(253987186016356),	// VSUM
    UINT64_C(253987186016356),	// VSUMB
    UINT64_C(253987186016357),	// VSUMG
    UINT64_C(253987186024549),	// VSUMGF
    UINT64_C(253987186020453),	// VSUMGH
    UINT64_C(253987186020452),	// VSUMH
    UINT64_C(253987186016359),	// VSUMQ
    UINT64_C(253987186024551),	// VSUMQF
    UINT64_C(253987186028647),	// VSUMQG
    UINT64_C(253987186016472),	// VTM
    UINT64_C(253987186016471),	// VUPH
    UINT64_C(253987186016471),	// VUPHB
    UINT64_C(253987186024663),	// VUPHF
    UINT64_C(253987186020567),	// VUPHH
    UINT64_C(253987186016470),	// VUPL
    UINT64_C(253987186016470),	// VUPLB
    UINT64_C(253987186024662),	// VUPLF
    UINT64_C(253987186016469),	// VUPLH
    UINT64_C(253987186016469),	// VUPLHB
    UINT64_C(253987186024661),	// VUPLHF
    UINT64_C(253987186020565),	// VUPLHH
    UINT64_C(253987186020566),	// VUPLHW
    UINT64_C(253987186016468),	// VUPLL
    UINT64_C(253987186016468),	// VUPLLB
    UINT64_C(253987186024660),	// VUPLLF
    UINT64_C(253987186020564),	// VUPLLH
    UINT64_C(253987186016365),	// VX
    UINT64_C(253987186016324),	// VZERO
    UINT64_C(253987186553027),	// WCDGB
    UINT64_C(253987186553025),	// WCDLGB
    UINT64_C(253987186553026),	// WCGDB
    UINT64_C(253987186553024),	// WCLGDB
    UINT64_C(253987186553059),	// WFADB
    UINT64_C(253987186016459),	// WFC
    UINT64_C(253987186028747),	// WFCDB
    UINT64_C(253987186553064),	// WFCEDB
    UINT64_C(253987187601640),	// WFCEDBS
    UINT64_C(253987186553067),	// WFCHDB
    UINT64_C(253987187601643),	// WFCHDBS
    UINT64_C(253987186553066),	// WFCHEDB
    UINT64_C(253987187601642),	// WFCHEDBS
    UINT64_C(253987186553061),	// WFDDB
    UINT64_C(253987186553031),	// WFIDB
    UINT64_C(253987186016458),	// WFK
    UINT64_C(253987186028746),	// WFKDB
    UINT64_C(253987186553036),	// WFLCDB
    UINT64_C(253987187601612),	// WFLNDB
    UINT64_C(253987188650188),	// WFLPDB
    UINT64_C(253987236872335),	// WFMADB
    UINT64_C(253987186553063),	// WFMDB
    UINT64_C(253987236872334),	// WFMSDB
    UINT64_C(253987186553036),	// WFPSODB
    UINT64_C(253987186553058),	// WFSDB
    UINT64_C(253987186553038),	// WFSQDB
    UINT64_C(253987186552906),	// WFTCIDB
    UINT64_C(253987186548932),	// WLDEB
    UINT64_C(253987186553029),	// WLEDB
    UINT64_C(1459617792),	// X
    UINT64_C(236394999971840),	// XC
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(249589139505282),	// XG
    UINT64_C(3112304640),	// XGR
    UINT64_C(3118923776),	// XGRK
    UINT64_C(2533359616),	// XI
    UINT64_C(0),
    UINT64_C(211132002336768),	// XIHF
    UINT64_C(0),
    UINT64_C(211136297304064),	// XILF
    UINT64_C(0),
    UINT64_C(258385232527447),	// XIY
    UINT64_C(5888),	// XR
    UINT64_C(3119972352),	// XRK
    UINT64_C(249589139505239),	// XY
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0)
  };
  const unsigned opcode = MI.getOpcode();
  uint64_t Value = InstBits[opcode];
  uint64_t op = 0;
  (void)op;  // suppress warning
  switch (opcode) {
    case SystemZ::PR:
    case SystemZ::SAM24:
    case SystemZ::SAM31:
    case SystemZ::SAM64:
    case SystemZ::TAM:
    case SystemZ::TEND: {
      break;
    }
    case SystemZ::STRAG: {
      // op: BD1
      op = getBDAddr12Encoding(MI, 0, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      // op: BD2
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case SystemZ::CSST:
    case SystemZ::ECTG: {
      // op: BD1
      op = getBDAddr12Encoding(MI, 0, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      // op: BD2
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      Value |= op & UINT64_C(65535);
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      break;
    }
    case SystemZ::CGHSI:
    case SystemZ::CHHSI:
    case SystemZ::CHSI:
    case SystemZ::CLFHSI:
    case SystemZ::CLGHSI:
    case SystemZ::CLHHSI:
    case SystemZ::MVGHI:
    case SystemZ::MVHHI:
    case SystemZ::MVHI:
    case SystemZ::TBEGIN:
    case SystemZ::TBEGINC: {
      // op: BD1
      op = getBDAddr12Encoding(MI, 0, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case SystemZ::CLI:
    case SystemZ::MVI:
    case SystemZ::NI:
    case SystemZ::OI:
    case SystemZ::TM:
    case SystemZ::XI: {
      // op: BD1
      op = getBDAddr12Encoding(MI, 0, Fixups, STI);
      Value |= op & UINT64_C(65535);
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 16;
      break;
    }
    case SystemZ::LPD:
    case SystemZ::LPDG: {
      // op: BD1
      op = getBDAddr12Encoding(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      // op: BD2
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      Value |= op & UINT64_C(65535);
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      break;
    }
    case SystemZ::InsnSSF: {
      // op: BD1
      op = getBDAddr12Encoding(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      // op: BD2
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      Value |= op & UINT64_C(65535);
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(280375465082880);
      Value |= op & UINT64_C(64424509440);
      break;
    }
    case SystemZ::InsnSSE: {
      // op: BD1
      op = getBDAddr12Encoding(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      // op: BD2
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      Value |= op & UINT64_C(65535);
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(281470681743360);
      break;
    }
    case SystemZ::InsnSIL: {
      // op: BD1
      op = getBDAddr12Encoding(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= op & UINT64_C(65535);
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(281470681743360);
      break;
    }
    case SystemZ::InsnSI: {
      // op: BD1
      op = getBDAddr12Encoding(MI, 1, Fixups, STI);
      Value |= op & UINT64_C(65535);
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 16;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(4278190080);
      break;
    }
    case SystemZ::AGSI:
    case SystemZ::ASI:
    case SystemZ::CLIY:
    case SystemZ::MVIY:
    case SystemZ::NIY:
    case SystemZ::OIY:
    case SystemZ::TMY:
    case SystemZ::XIY: {
      // op: BD1
      op = getBDAddr20Encoding(MI, 0, Fixups, STI);
      Value |= (op & UINT64_C(16777215)) << 8;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      break;
    }
    case SystemZ::InsnSIY: {
      // op: BD1
      op = getBDAddr20Encoding(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(16777215)) << 8;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 32;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(280375465082880);
      Value |= op & UINT64_C(255);
      break;
    }
    case SystemZ::LFAS:
    case SystemZ::LFPC:
    case SystemZ::SRNM:
    case SystemZ::SRNMB:
    case SystemZ::SRNMT:
    case SystemZ::STCK:
    case SystemZ::STCKE:
    case SystemZ::STCKF:
    case SystemZ::STFLE:
    case SystemZ::STFPC:
    case SystemZ::TABORT:
    case SystemZ::TS: {
      // op: BD2
      op = getBDAddr12Encoding(MI, 0, Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case SystemZ::InsnS: {
      // op: BD2
      op = getBDAddr12Encoding(MI, 1, Fixups, STI);
      Value |= op & UINT64_C(65535);
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(4294901760);
      break;
    }
    case SystemZ::CLC:
    case SystemZ::MVC:
    case SystemZ::NC:
    case SystemZ::OC:
    case SystemZ::XC: {
      // op: BDL1
      op = getBDLAddr12Len8Encoding(MI, 0, Fixups, STI);
      Value |= (op & UINT64_C(16777215)) << 16;
      // op: BD2
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case SystemZ::NIAI: {
      // op: I1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 4;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(15);
      break;
    }
    case SystemZ::SVC: {
      // op: I1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(255);
      break;
    }
    case SystemZ::BRCAsm: {
      // op: M1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      // op: RI2
      op = getPC16DBLEncoding(MI, 1, Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case SystemZ::BCAsm: {
      // op: M1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 1, Fixups, STI);
      Value |= op & UINT64_C(1048575);
      break;
    }
    case SystemZ::BPRP: {
      // op: M1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: RI2
      op = getPC12DBLBPPEncoding(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(4095)) << 24;
      // op: RI3
      op = getPC24DBLBPPEncoding(MI, 2, Fixups, STI);
      Value |= op & UINT64_C(16777215);
      break;
    }
    case SystemZ::BPP: {
      // op: M1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: RI2
      op = getPC16DBLBPPEncoding(MI, 1, Fixups, STI);
      Value |= op & UINT64_C(65535);
      // op: BD3
      op = getBDXAddr12Encoding(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      break;
    }
    case SystemZ::BRCLAsm:
    case SystemZ::PFDRL: {
      // op: M1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: RI2
      op = getPC32DBLEncoding(MI, 1, Fixups, STI);
      Value |= op & UINT64_C(4294967295);
      break;
    }
    case SystemZ::PFD: {
      // op: M1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: XBD2
      op = getBDXAddr20Encoding(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(268435455)) << 8;
      break;
    }
    case SystemZ::BRC: {
      // op: M1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      // op: RI2
      op = getPC16DBLEncoding(MI, 2, Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case SystemZ::BC: {
      // op: M1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 2, Fixups, STI);
      Value |= op & UINT64_C(1048575);
      break;
    }
    case SystemZ::BRCL: {
      // op: M1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: RI2
      op = getPC32DBLEncoding(MI, 2, Fixups, STI);
      Value |= op & UINT64_C(4294967295);
      break;
    }
    case SystemZ::MADB:
    case SystemZ::MAEB:
    case SystemZ::MSDB:
    case SystemZ::MSEB: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(1048575)) << 16;
      break;
    }
    case SystemZ::MADBR:
    case SystemZ::MAEBR:
    case SystemZ::MSDBR:
    case SystemZ::MSEBR: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 4;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= op & UINT64_C(15);
      break;
    }
    case SystemZ::SLA:
    case SystemZ::SLL:
    case SystemZ::SRA:
    case SystemZ::SRL: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      // op: BD2
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case SystemZ::CGHI:
    case SystemZ::CHI:
    case SystemZ::LGHI:
    case SystemZ::LHI:
    case SystemZ::LLIHH:
    case SystemZ::LLIHL:
    case SystemZ::LLILH:
    case SystemZ::LLILL:
    case SystemZ::TMHH:
    case SystemZ::TMHL:
    case SystemZ::TMLH:
    case SystemZ::TMLL: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case SystemZ::AGHI:
    case SystemZ::AHI:
    case SystemZ::IIHH:
    case SystemZ::IIHL:
    case SystemZ::IILH:
    case SystemZ::IILL:
    case SystemZ::MGHI:
    case SystemZ::MHI:
    case SystemZ::NIHH:
    case SystemZ::NIHL:
    case SystemZ::NILH:
    case SystemZ::NILL:
    case SystemZ::OIHH:
    case SystemZ::OIHL:
    case SystemZ::OILH:
    case SystemZ::OILL: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case SystemZ::ICM: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 16;
      // op: BD2
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case SystemZ::LAM:
    case SystemZ::LM:
    case SystemZ::STAM:
    case SystemZ::STM: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 16;
      // op: BD2
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case SystemZ::BXH:
    case SystemZ::BXLE:
    case SystemZ::CDS:
    case SystemZ::CS: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 16;
      // op: BD2
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case SystemZ::BRXH:
    case SystemZ::BRXLE: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 16;
      // op: RI2
      op = getPC16DBLEncoding(MI, 3, Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case SystemZ::BRCT:
    case SystemZ::BRCTG: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      // op: RI2
      op = getPC16DBLEncoding(MI, 2, Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case SystemZ::BRAS: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      // op: RI2
      op = getPC16DBLTLSEncoding(MI, 1, Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case SystemZ::BAL:
    case SystemZ::BAS:
    case SystemZ::C:
    case SystemZ::CH:
    case SystemZ::CL:
    case SystemZ::EX:
    case SystemZ::L:
    case SystemZ::LA:
    case SystemZ::LAE:
    case SystemZ::LD:
    case SystemZ::LE:
    case SystemZ::LH:
    case SystemZ::ST:
    case SystemZ::STC:
    case SystemZ::STD:
    case SystemZ::STE:
    case SystemZ::STH: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 1, Fixups, STI);
      Value |= op & UINT64_C(1048575);
      break;
    }
    case SystemZ::A:
    case SystemZ::AH:
    case SystemZ::AL:
    case SystemZ::BCT:
    case SystemZ::IC:
    case SystemZ::IC32:
    case SystemZ::MH:
    case SystemZ::MS:
    case SystemZ::N:
    case SystemZ::O:
    case SystemZ::S:
    case SystemZ::SH:
    case SystemZ::SL:
    case SystemZ::X: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 2, Fixups, STI);
      Value |= op & UINT64_C(1048575);
      break;
    }
    case SystemZ::PLO: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: BD2
      op = getBDAddr12Encoding(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: BD4
      op = getBDAddr12Encoding(MI, 4, Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case SystemZ::VLGVB:
    case SystemZ::VLGVF:
    case SystemZ::VLGVG:
    case SystemZ::VLGVH: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: BD2
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      break;
    }
    case SystemZ::VLGV: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: BD2
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case SystemZ::CLGTAsmE:
    case SystemZ::CLGTAsmH:
    case SystemZ::CLGTAsmHE:
    case SystemZ::CLGTAsmL:
    case SystemZ::CLGTAsmLE:
    case SystemZ::CLGTAsmLH:
    case SystemZ::CLGTAsmNE:
    case SystemZ::CLGTAsmNH:
    case SystemZ::CLGTAsmNHE:
    case SystemZ::CLGTAsmNL:
    case SystemZ::CLGTAsmNLE:
    case SystemZ::CLGTAsmNLH:
    case SystemZ::CLTAsmE:
    case SystemZ::CLTAsmH:
    case SystemZ::CLTAsmHE:
    case SystemZ::CLTAsmL:
    case SystemZ::CLTAsmLE:
    case SystemZ::CLTAsmLH:
    case SystemZ::CLTAsmNE:
    case SystemZ::CLTAsmNH:
    case SystemZ::CLTAsmNHE:
    case SystemZ::CLTAsmNL:
    case SystemZ::CLTAsmNLE:
    case SystemZ::CLTAsmNLH:
    case SystemZ::STOCAsmE:
    case SystemZ::STOCAsmH:
    case SystemZ::STOCAsmHE:
    case SystemZ::STOCAsmL:
    case SystemZ::STOCAsmLE:
    case SystemZ::STOCAsmLH:
    case SystemZ::STOCAsmM:
    case SystemZ::STOCAsmNE:
    case SystemZ::STOCAsmNH:
    case SystemZ::STOCAsmNHE:
    case SystemZ::STOCAsmNL:
    case SystemZ::STOCAsmNLE:
    case SystemZ::STOCAsmNLH:
    case SystemZ::STOCAsmNM:
    case SystemZ::STOCAsmNO:
    case SystemZ::STOCAsmNP:
    case SystemZ::STOCAsmNZ:
    case SystemZ::STOCAsmO:
    case SystemZ::STOCAsmP:
    case SystemZ::STOCAsmZ:
    case SystemZ::STOCFHAsmE:
    case SystemZ::STOCFHAsmH:
    case SystemZ::STOCFHAsmHE:
    case SystemZ::STOCFHAsmL:
    case SystemZ::STOCFHAsmLE:
    case SystemZ::STOCFHAsmLH:
    case SystemZ::STOCFHAsmM:
    case SystemZ::STOCFHAsmNE:
    case SystemZ::STOCFHAsmNH:
    case SystemZ::STOCFHAsmNHE:
    case SystemZ::STOCFHAsmNL:
    case SystemZ::STOCFHAsmNLE:
    case SystemZ::STOCFHAsmNLH:
    case SystemZ::STOCFHAsmNM:
    case SystemZ::STOCFHAsmNO:
    case SystemZ::STOCFHAsmNP:
    case SystemZ::STOCFHAsmNZ:
    case SystemZ::STOCFHAsmO:
    case SystemZ::STOCFHAsmP:
    case SystemZ::STOCFHAsmZ:
    case SystemZ::STOCGAsmE:
    case SystemZ::STOCGAsmH:
    case SystemZ::STOCGAsmHE:
    case SystemZ::STOCGAsmL:
    case SystemZ::STOCGAsmLE:
    case SystemZ::STOCGAsmLH:
    case SystemZ::STOCGAsmM:
    case SystemZ::STOCGAsmNE:
    case SystemZ::STOCGAsmNH:
    case SystemZ::STOCGAsmNHE:
    case SystemZ::STOCGAsmNL:
    case SystemZ::STOCGAsmNLE:
    case SystemZ::STOCGAsmNLH:
    case SystemZ::STOCGAsmNM:
    case SystemZ::STOCGAsmNO:
    case SystemZ::STOCGAsmNP:
    case SystemZ::STOCGAsmNZ:
    case SystemZ::STOCGAsmO:
    case SystemZ::STOCGAsmP:
    case SystemZ::STOCGAsmZ: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: BD2
      op = getBDAddr20Encoding(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(16777215)) << 8;
      break;
    }
    case SystemZ::LOCAsmE:
    case SystemZ::LOCAsmH:
    case SystemZ::LOCAsmHE:
    case SystemZ::LOCAsmL:
    case SystemZ::LOCAsmLE:
    case SystemZ::LOCAsmLH:
    case SystemZ::LOCAsmM:
    case SystemZ::LOCAsmNE:
    case SystemZ::LOCAsmNH:
    case SystemZ::LOCAsmNHE:
    case SystemZ::LOCAsmNL:
    case SystemZ::LOCAsmNLE:
    case SystemZ::LOCAsmNLH:
    case SystemZ::LOCAsmNM:
    case SystemZ::LOCAsmNO:
    case SystemZ::LOCAsmNP:
    case SystemZ::LOCAsmNZ:
    case SystemZ::LOCAsmO:
    case SystemZ::LOCAsmP:
    case SystemZ::LOCAsmZ:
    case SystemZ::LOCFHAsmE:
    case SystemZ::LOCFHAsmH:
    case SystemZ::LOCFHAsmHE:
    case SystemZ::LOCFHAsmL:
    case SystemZ::LOCFHAsmLE:
    case SystemZ::LOCFHAsmLH:
    case SystemZ::LOCFHAsmM:
    case SystemZ::LOCFHAsmNE:
    case SystemZ::LOCFHAsmNH:
    case SystemZ::LOCFHAsmNHE:
    case SystemZ::LOCFHAsmNL:
    case SystemZ::LOCFHAsmNLE:
    case SystemZ::LOCFHAsmNLH:
    case SystemZ::LOCFHAsmNM:
    case SystemZ::LOCFHAsmNO:
    case SystemZ::LOCFHAsmNP:
    case SystemZ::LOCFHAsmNZ:
    case SystemZ::LOCFHAsmO:
    case SystemZ::LOCFHAsmP:
    case SystemZ::LOCFHAsmZ:
    case SystemZ::LOCGAsmE:
    case SystemZ::LOCGAsmH:
    case SystemZ::LOCGAsmHE:
    case SystemZ::LOCGAsmL:
    case SystemZ::LOCGAsmLE:
    case SystemZ::LOCGAsmLH:
    case SystemZ::LOCGAsmM:
    case SystemZ::LOCGAsmNE:
    case SystemZ::LOCGAsmNH:
    case SystemZ::LOCGAsmNHE:
    case SystemZ::LOCGAsmNL:
    case SystemZ::LOCGAsmNLE:
    case SystemZ::LOCGAsmNLH:
    case SystemZ::LOCGAsmNM:
    case SystemZ::LOCGAsmNO:
    case SystemZ::LOCGAsmNP:
    case SystemZ::LOCGAsmNZ:
    case SystemZ::LOCGAsmO:
    case SystemZ::LOCGAsmP:
    case SystemZ::LOCGAsmZ: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: BD2
      op = getBDAddr20Encoding(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(16777215)) << 8;
      break;
    }
    case SystemZ::CGIBAsmE:
    case SystemZ::CGIBAsmH:
    case SystemZ::CGIBAsmHE:
    case SystemZ::CGIBAsmL:
    case SystemZ::CGIBAsmLE:
    case SystemZ::CGIBAsmLH:
    case SystemZ::CGIBAsmNE:
    case SystemZ::CGIBAsmNH:
    case SystemZ::CGIBAsmNHE:
    case SystemZ::CGIBAsmNL:
    case SystemZ::CGIBAsmNLE:
    case SystemZ::CGIBAsmNLH:
    case SystemZ::CIBAsmE:
    case SystemZ::CIBAsmH:
    case SystemZ::CIBAsmHE:
    case SystemZ::CIBAsmL:
    case SystemZ::CIBAsmLE:
    case SystemZ::CIBAsmLH:
    case SystemZ::CIBAsmNE:
    case SystemZ::CIBAsmNH:
    case SystemZ::CIBAsmNHE:
    case SystemZ::CIBAsmNL:
    case SystemZ::CIBAsmNLE:
    case SystemZ::CIBAsmNLH:
    case SystemZ::CLGIBAsmE:
    case SystemZ::CLGIBAsmH:
    case SystemZ::CLGIBAsmHE:
    case SystemZ::CLGIBAsmL:
    case SystemZ::CLGIBAsmLE:
    case SystemZ::CLGIBAsmLH:
    case SystemZ::CLGIBAsmNE:
    case SystemZ::CLGIBAsmNH:
    case SystemZ::CLGIBAsmNHE:
    case SystemZ::CLGIBAsmNL:
    case SystemZ::CLGIBAsmNLE:
    case SystemZ::CLGIBAsmNLH:
    case SystemZ::CLIBAsmE:
    case SystemZ::CLIBAsmH:
    case SystemZ::CLIBAsmHE:
    case SystemZ::CLIBAsmL:
    case SystemZ::CLIBAsmLE:
    case SystemZ::CLIBAsmLH:
    case SystemZ::CLIBAsmNE:
    case SystemZ::CLIBAsmNH:
    case SystemZ::CLIBAsmNHE:
    case SystemZ::CLIBAsmNL:
    case SystemZ::CLIBAsmNLE:
    case SystemZ::CLIBAsmNLH: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 8;
      // op: BD4
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      break;
    }
    case SystemZ::CGIB:
    case SystemZ::CGIBAsm:
    case SystemZ::CIB:
    case SystemZ::CIBAsm:
    case SystemZ::CLGIB:
    case SystemZ::CLGIBAsm:
    case SystemZ::CLIB:
    case SystemZ::CLIBAsm: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 8;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: BD4
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      break;
    }
    case SystemZ::CGIJ:
    case SystemZ::CGIJAsm:
    case SystemZ::CIJ:
    case SystemZ::CIJAsm:
    case SystemZ::CLGIJ:
    case SystemZ::CLGIJAsm:
    case SystemZ::CLIJ:
    case SystemZ::CLIJAsm: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 8;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: RI4
      op = getPC16DBLEncoding(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      break;
    }
    case SystemZ::CGIJAsmE:
    case SystemZ::CGIJAsmH:
    case SystemZ::CGIJAsmHE:
    case SystemZ::CGIJAsmL:
    case SystemZ::CGIJAsmLE:
    case SystemZ::CGIJAsmLH:
    case SystemZ::CGIJAsmNE:
    case SystemZ::CGIJAsmNH:
    case SystemZ::CGIJAsmNHE:
    case SystemZ::CGIJAsmNL:
    case SystemZ::CGIJAsmNLE:
    case SystemZ::CGIJAsmNLH:
    case SystemZ::CIJAsmE:
    case SystemZ::CIJAsmH:
    case SystemZ::CIJAsmHE:
    case SystemZ::CIJAsmL:
    case SystemZ::CIJAsmLE:
    case SystemZ::CIJAsmLH:
    case SystemZ::CIJAsmNE:
    case SystemZ::CIJAsmNH:
    case SystemZ::CIJAsmNHE:
    case SystemZ::CIJAsmNL:
    case SystemZ::CIJAsmNLE:
    case SystemZ::CIJAsmNLH:
    case SystemZ::CLGIJAsmE:
    case SystemZ::CLGIJAsmH:
    case SystemZ::CLGIJAsmHE:
    case SystemZ::CLGIJAsmL:
    case SystemZ::CLGIJAsmLE:
    case SystemZ::CLGIJAsmLH:
    case SystemZ::CLGIJAsmNE:
    case SystemZ::CLGIJAsmNH:
    case SystemZ::CLGIJAsmNHE:
    case SystemZ::CLGIJAsmNL:
    case SystemZ::CLGIJAsmNLE:
    case SystemZ::CLGIJAsmNLH:
    case SystemZ::CLIJAsmE:
    case SystemZ::CLIJAsmH:
    case SystemZ::CLIJAsmHE:
    case SystemZ::CLIJAsmL:
    case SystemZ::CLIJAsmLE:
    case SystemZ::CLIJAsmLH:
    case SystemZ::CLIJAsmNE:
    case SystemZ::CLIJAsmNH:
    case SystemZ::CLIJAsmNHE:
    case SystemZ::CLIJAsmNL:
    case SystemZ::CLIJAsmNLE:
    case SystemZ::CLIJAsmNLH: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 8;
      // op: RI4
      op = getPC16DBLEncoding(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      break;
    }
    case SystemZ::CGITAsmE:
    case SystemZ::CGITAsmH:
    case SystemZ::CGITAsmHE:
    case SystemZ::CGITAsmL:
    case SystemZ::CGITAsmLE:
    case SystemZ::CGITAsmLH:
    case SystemZ::CGITAsmNE:
    case SystemZ::CGITAsmNH:
    case SystemZ::CGITAsmNHE:
    case SystemZ::CGITAsmNL:
    case SystemZ::CGITAsmNLE:
    case SystemZ::CGITAsmNLH:
    case SystemZ::CITAsmE:
    case SystemZ::CITAsmH:
    case SystemZ::CITAsmHE:
    case SystemZ::CITAsmL:
    case SystemZ::CITAsmLE:
    case SystemZ::CITAsmLH:
    case SystemZ::CITAsmNE:
    case SystemZ::CITAsmNH:
    case SystemZ::CITAsmNHE:
    case SystemZ::CITAsmNL:
    case SystemZ::CITAsmNLE:
    case SystemZ::CITAsmNLH:
    case SystemZ::CLFITAsmE:
    case SystemZ::CLFITAsmH:
    case SystemZ::CLFITAsmHE:
    case SystemZ::CLFITAsmL:
    case SystemZ::CLFITAsmLE:
    case SystemZ::CLFITAsmLH:
    case SystemZ::CLFITAsmNE:
    case SystemZ::CLFITAsmNH:
    case SystemZ::CLFITAsmNHE:
    case SystemZ::CLFITAsmNL:
    case SystemZ::CLFITAsmNLE:
    case SystemZ::CLFITAsmNLH:
    case SystemZ::CLGITAsmE:
    case SystemZ::CLGITAsmH:
    case SystemZ::CLGITAsmHE:
    case SystemZ::CLGITAsmL:
    case SystemZ::CLGITAsmLE:
    case SystemZ::CLGITAsmLH:
    case SystemZ::CLGITAsmNE:
    case SystemZ::CLGITAsmNH:
    case SystemZ::CLGITAsmNHE:
    case SystemZ::CLGITAsmNL:
    case SystemZ::CLGITAsmNLE:
    case SystemZ::CLGITAsmNLH: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      break;
    }
    case SystemZ::CGIT:
    case SystemZ::CGITAsm:
    case SystemZ::CIT:
    case SystemZ::CITAsm:
    case SystemZ::CLFIT:
    case SystemZ::CLFITAsm:
    case SystemZ::CLGIT:
    case SystemZ::CLGITAsm: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case SystemZ::CFI:
    case SystemZ::CGFI:
    case SystemZ::CIH:
    case SystemZ::CLFI:
    case SystemZ::CLGFI:
    case SystemZ::CLIH:
    case SystemZ::IIHF:
    case SystemZ::IILF:
    case SystemZ::LGFI:
    case SystemZ::LLIHF:
    case SystemZ::LLILF: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(4294967295);
      break;
    }
    case SystemZ::LOCGHIAsmE:
    case SystemZ::LOCGHIAsmH:
    case SystemZ::LOCGHIAsmHE:
    case SystemZ::LOCGHIAsmL:
    case SystemZ::LOCGHIAsmLE:
    case SystemZ::LOCGHIAsmLH:
    case SystemZ::LOCGHIAsmM:
    case SystemZ::LOCGHIAsmNE:
    case SystemZ::LOCGHIAsmNH:
    case SystemZ::LOCGHIAsmNHE:
    case SystemZ::LOCGHIAsmNL:
    case SystemZ::LOCGHIAsmNLE:
    case SystemZ::LOCGHIAsmNLH:
    case SystemZ::LOCGHIAsmNM:
    case SystemZ::LOCGHIAsmNO:
    case SystemZ::LOCGHIAsmNP:
    case SystemZ::LOCGHIAsmNZ:
    case SystemZ::LOCGHIAsmO:
    case SystemZ::LOCGHIAsmP:
    case SystemZ::LOCGHIAsmZ:
    case SystemZ::LOCHHIAsmE:
    case SystemZ::LOCHHIAsmH:
    case SystemZ::LOCHHIAsmHE:
    case SystemZ::LOCHHIAsmL:
    case SystemZ::LOCHHIAsmLE:
    case SystemZ::LOCHHIAsmLH:
    case SystemZ::LOCHHIAsmM:
    case SystemZ::LOCHHIAsmNE:
    case SystemZ::LOCHHIAsmNH:
    case SystemZ::LOCHHIAsmNHE:
    case SystemZ::LOCHHIAsmNL:
    case SystemZ::LOCHHIAsmNLE:
    case SystemZ::LOCHHIAsmNLH:
    case SystemZ::LOCHHIAsmNM:
    case SystemZ::LOCHHIAsmNO:
    case SystemZ::LOCHHIAsmNP:
    case SystemZ::LOCHHIAsmNZ:
    case SystemZ::LOCHHIAsmO:
    case SystemZ::LOCHHIAsmP:
    case SystemZ::LOCHHIAsmZ:
    case SystemZ::LOCHIAsmE:
    case SystemZ::LOCHIAsmH:
    case SystemZ::LOCHIAsmHE:
    case SystemZ::LOCHIAsmL:
    case SystemZ::LOCHIAsmLE:
    case SystemZ::LOCHIAsmLH:
    case SystemZ::LOCHIAsmM:
    case SystemZ::LOCHIAsmNE:
    case SystemZ::LOCHIAsmNH:
    case SystemZ::LOCHIAsmNHE:
    case SystemZ::LOCHIAsmNL:
    case SystemZ::LOCHIAsmNLE:
    case SystemZ::LOCHIAsmNLH:
    case SystemZ::LOCHIAsmNM:
    case SystemZ::LOCHIAsmNO:
    case SystemZ::LOCHIAsmNP:
    case SystemZ::LOCHIAsmNZ:
    case SystemZ::LOCHIAsmO:
    case SystemZ::LOCHIAsmP:
    case SystemZ::LOCHIAsmZ: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      break;
    }
    case SystemZ::AFI:
    case SystemZ::AGFI:
    case SystemZ::AIH:
    case SystemZ::ALFI:
    case SystemZ::ALGFI:
    case SystemZ::MSFI:
    case SystemZ::MSGFI:
    case SystemZ::NIHF:
    case SystemZ::NILF:
    case SystemZ::OIHF:
    case SystemZ::OILF:
    case SystemZ::SLFI:
    case SystemZ::SLGFI:
    case SystemZ::XIHF:
    case SystemZ::XILF: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(4294967295);
      break;
    }
    case SystemZ::ICMH:
    case SystemZ::ICMY: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: BD2
      op = getBDAddr20Encoding(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(16777215)) << 8;
      break;
    }
    case SystemZ::CLGT:
    case SystemZ::CLGTAsm:
    case SystemZ::CLT:
    case SystemZ::CLTAsm:
    case SystemZ::STOCAsm:
    case SystemZ::STOCFHAsm:
    case SystemZ::STOCGAsm: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: BD2
      op = getBDAddr20Encoding(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(16777215)) << 8;
      break;
    }
    case SystemZ::LOCGHIAsm:
    case SystemZ::LOCHHIAsm:
    case SystemZ::LOCHIAsm: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      break;
    }
    case SystemZ::STOC:
    case SystemZ::STOCFH:
    case SystemZ::STOCG: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: BD2
      op = getBDAddr20Encoding(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(16777215)) << 8;
      break;
    }
    case SystemZ::LOCAsm:
    case SystemZ::LOCFHAsm:
    case SystemZ::LOCGAsm: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: BD2
      op = getBDAddr20Encoding(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(16777215)) << 8;
      break;
    }
    case SystemZ::LOCGHI:
    case SystemZ::LOCHHI:
    case SystemZ::LOCHI: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      break;
    }
    case SystemZ::LOC:
    case SystemZ::LOCFH:
    case SystemZ::LOCG: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: BD2
      op = getBDAddr20Encoding(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(16777215)) << 8;
      break;
    }
    case SystemZ::CGRBAsmE:
    case SystemZ::CGRBAsmH:
    case SystemZ::CGRBAsmHE:
    case SystemZ::CGRBAsmL:
    case SystemZ::CGRBAsmLE:
    case SystemZ::CGRBAsmLH:
    case SystemZ::CGRBAsmNE:
    case SystemZ::CGRBAsmNH:
    case SystemZ::CGRBAsmNHE:
    case SystemZ::CGRBAsmNL:
    case SystemZ::CGRBAsmNLE:
    case SystemZ::CGRBAsmNLH:
    case SystemZ::CLGRBAsmE:
    case SystemZ::CLGRBAsmH:
    case SystemZ::CLGRBAsmHE:
    case SystemZ::CLGRBAsmL:
    case SystemZ::CLGRBAsmLE:
    case SystemZ::CLGRBAsmLH:
    case SystemZ::CLGRBAsmNE:
    case SystemZ::CLGRBAsmNH:
    case SystemZ::CLGRBAsmNHE:
    case SystemZ::CLGRBAsmNL:
    case SystemZ::CLGRBAsmNLE:
    case SystemZ::CLGRBAsmNLH:
    case SystemZ::CLRBAsmE:
    case SystemZ::CLRBAsmH:
    case SystemZ::CLRBAsmHE:
    case SystemZ::CLRBAsmL:
    case SystemZ::CLRBAsmLE:
    case SystemZ::CLRBAsmLH:
    case SystemZ::CLRBAsmNE:
    case SystemZ::CLRBAsmNH:
    case SystemZ::CLRBAsmNHE:
    case SystemZ::CLRBAsmNL:
    case SystemZ::CLRBAsmNLE:
    case SystemZ::CLRBAsmNLH:
    case SystemZ::CRBAsmE:
    case SystemZ::CRBAsmH:
    case SystemZ::CRBAsmHE:
    case SystemZ::CRBAsmL:
    case SystemZ::CRBAsmLE:
    case SystemZ::CRBAsmLH:
    case SystemZ::CRBAsmNE:
    case SystemZ::CRBAsmNH:
    case SystemZ::CRBAsmNHE:
    case SystemZ::CRBAsmNL:
    case SystemZ::CRBAsmNLE:
    case SystemZ::CRBAsmNLH: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: BD4
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      break;
    }
    case SystemZ::CGRB:
    case SystemZ::CGRBAsm:
    case SystemZ::CLGRB:
    case SystemZ::CLGRBAsm:
    case SystemZ::CLRB:
    case SystemZ::CLRBAsm:
    case SystemZ::CRB:
    case SystemZ::CRBAsm: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      // op: BD4
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      break;
    }
    case SystemZ::CGRJ:
    case SystemZ::CGRJAsm:
    case SystemZ::CLGRJ:
    case SystemZ::CLGRJAsm:
    case SystemZ::CLRJ:
    case SystemZ::CLRJAsm:
    case SystemZ::CRJ:
    case SystemZ::CRJAsm: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      // op: RI4
      op = getPC16DBLEncoding(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      break;
    }
    case SystemZ::CGRJAsmE:
    case SystemZ::CGRJAsmH:
    case SystemZ::CGRJAsmHE:
    case SystemZ::CGRJAsmL:
    case SystemZ::CGRJAsmLE:
    case SystemZ::CGRJAsmLH:
    case SystemZ::CGRJAsmNE:
    case SystemZ::CGRJAsmNH:
    case SystemZ::CGRJAsmNHE:
    case SystemZ::CGRJAsmNL:
    case SystemZ::CGRJAsmNLE:
    case SystemZ::CGRJAsmNLH:
    case SystemZ::CLGRJAsmE:
    case SystemZ::CLGRJAsmH:
    case SystemZ::CLGRJAsmHE:
    case SystemZ::CLGRJAsmL:
    case SystemZ::CLGRJAsmLE:
    case SystemZ::CLGRJAsmLH:
    case SystemZ::CLGRJAsmNE:
    case SystemZ::CLGRJAsmNH:
    case SystemZ::CLGRJAsmNHE:
    case SystemZ::CLGRJAsmNL:
    case SystemZ::CLGRJAsmNLE:
    case SystemZ::CLGRJAsmNLH:
    case SystemZ::CLRJAsmE:
    case SystemZ::CLRJAsmH:
    case SystemZ::CLRJAsmHE:
    case SystemZ::CLRJAsmL:
    case SystemZ::CLRJAsmLE:
    case SystemZ::CLRJAsmLH:
    case SystemZ::CLRJAsmNE:
    case SystemZ::CLRJAsmNH:
    case SystemZ::CLRJAsmNHE:
    case SystemZ::CLRJAsmNL:
    case SystemZ::CLRJAsmNLE:
    case SystemZ::CLRJAsmNLH:
    case SystemZ::CRJAsmE:
    case SystemZ::CRJAsmH:
    case SystemZ::CRJAsmHE:
    case SystemZ::CRJAsmL:
    case SystemZ::CRJAsmLE:
    case SystemZ::CRJAsmLH:
    case SystemZ::CRJAsmNE:
    case SystemZ::CRJAsmNH:
    case SystemZ::CRJAsmNHE:
    case SystemZ::CRJAsmNL:
    case SystemZ::CRJAsmNLE:
    case SystemZ::CRJAsmNLH: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: RI4
      op = getPC16DBLEncoding(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      break;
    }
    case SystemZ::RISBG:
    case SystemZ::RISBG32:
    case SystemZ::RISBGN:
    case SystemZ::RISBHG:
    case SystemZ::RISBLG:
    case SystemZ::RNSBG:
    case SystemZ::ROSBG:
    case SystemZ::RXSBG: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: I3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 24;
      // op: I4
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 16;
      // op: I5
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 8;
      break;
    }
    case SystemZ::LAA:
    case SystemZ::LAAG:
    case SystemZ::LAAL:
    case SystemZ::LAALG:
    case SystemZ::LAMY:
    case SystemZ::LAN:
    case SystemZ::LANG:
    case SystemZ::LAO:
    case SystemZ::LAOG:
    case SystemZ::LAX:
    case SystemZ::LAXG:
    case SystemZ::LMG:
    case SystemZ::LMH:
    case SystemZ::LMY:
    case SystemZ::RLL:
    case SystemZ::RLLG:
    case SystemZ::SLAK:
    case SystemZ::SLLG:
    case SystemZ::SLLK:
    case SystemZ::SRAG:
    case SystemZ::SRAK:
    case SystemZ::SRLG:
    case SystemZ::SRLK:
    case SystemZ::STAMY:
    case SystemZ::STMG:
    case SystemZ::STMH:
    case SystemZ::STMY: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: BD2
      op = getBDAddr20Encoding(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(16777215)) << 8;
      break;
    }
    case SystemZ::AGHIK:
    case SystemZ::AHIK:
    case SystemZ::ALGHSIK:
    case SystemZ::ALHSIK: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      break;
    }
    case SystemZ::BXHG:
    case SystemZ::BXLEG:
    case SystemZ::CDSG:
    case SystemZ::CDSY:
    case SystemZ::CSG:
    case SystemZ::CSY: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: BD2
      op = getBDAddr20Encoding(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(16777215)) << 8;
      break;
    }
    case SystemZ::BRXHG:
    case SystemZ::BRXLG: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: RI2
      op = getPC16DBLEncoding(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      break;
    }
    case SystemZ::CGFRL:
    case SystemZ::CGHRL:
    case SystemZ::CGRL:
    case SystemZ::CHRL:
    case SystemZ::CLGFRL:
    case SystemZ::CLGHRL:
    case SystemZ::CLGRL:
    case SystemZ::CLHRL:
    case SystemZ::CLRL:
    case SystemZ::CRL:
    case SystemZ::EXRL:
    case SystemZ::LARL:
    case SystemZ::LGFRL:
    case SystemZ::LGHRL:
    case SystemZ::LGRL:
    case SystemZ::LHRL:
    case SystemZ::LLGFRL:
    case SystemZ::LLGHRL:
    case SystemZ::LLHRL:
    case SystemZ::LRL:
    case SystemZ::STGRL:
    case SystemZ::STHRL:
    case SystemZ::STRL: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: RI2
      op = getPC32DBLEncoding(MI, 1, Fixups, STI);
      Value |= op & UINT64_C(4294967295);
      break;
    }
    case SystemZ::BRCTH: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: RI2
      op = getPC32DBLEncoding(MI, 2, Fixups, STI);
      Value |= op & UINT64_C(4294967295);
      break;
    }
    case SystemZ::BRASL: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: RI2
      op = getPC32DBLTLSEncoding(MI, 1, Fixups, STI);
      Value |= op & UINT64_C(4294967295);
      break;
    }
    case SystemZ::CDB:
    case SystemZ::CEB:
    case SystemZ::LDE32:
    case SystemZ::LDEB:
    case SystemZ::LXDB:
    case SystemZ::LXEB:
    case SystemZ::SQDB:
    case SystemZ::SQEB:
    case SystemZ::TCDB:
    case SystemZ::TCEB:
    case SystemZ::TCXB: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(1048575)) << 16;
      break;
    }
    case SystemZ::LCBB: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(1048575)) << 16;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case SystemZ::ADB:
    case SystemZ::AEB:
    case SystemZ::DDB:
    case SystemZ::DEB:
    case SystemZ::MDB:
    case SystemZ::MDEB:
    case SystemZ::MEEB:
    case SystemZ::MXDB:
    case SystemZ::SDB:
    case SystemZ::SEB: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(1048575)) << 16;
      break;
    }
    case SystemZ::CG:
    case SystemZ::CGF:
    case SystemZ::CGH:
    case SystemZ::CHF:
    case SystemZ::CHY:
    case SystemZ::CLG:
    case SystemZ::CLGF:
    case SystemZ::CLHF:
    case SystemZ::CLY:
    case SystemZ::CY:
    case SystemZ::LAEY:
    case SystemZ::LAT:
    case SystemZ::LAY:
    case SystemZ::LB:
    case SystemZ::LBH:
    case SystemZ::LDY:
    case SystemZ::LEY:
    case SystemZ::LFH:
    case SystemZ::LFHAT:
    case SystemZ::LG:
    case SystemZ::LGAT:
    case SystemZ::LGB:
    case SystemZ::LGF:
    case SystemZ::LGH:
    case SystemZ::LHH:
    case SystemZ::LHY:
    case SystemZ::LLC:
    case SystemZ::LLCH:
    case SystemZ::LLGC:
    case SystemZ::LLGF:
    case SystemZ::LLGFAT:
    case SystemZ::LLGH:
    case SystemZ::LLGT:
    case SystemZ::LLGTAT:
    case SystemZ::LLH:
    case SystemZ::LLHH:
    case SystemZ::LLZRGF:
    case SystemZ::LPQ:
    case SystemZ::LRV:
    case SystemZ::LRVG:
    case SystemZ::LRVH:
    case SystemZ::LT:
    case SystemZ::LTG:
    case SystemZ::LTGF:
    case SystemZ::LY:
    case SystemZ::LZRF:
    case SystemZ::LZRG:
    case SystemZ::NTSTG:
    case SystemZ::STCH:
    case SystemZ::STCY:
    case SystemZ::STDY:
    case SystemZ::STEY:
    case SystemZ::STFH:
    case SystemZ::STG:
    case SystemZ::STHH:
    case SystemZ::STHY:
    case SystemZ::STPQ:
    case SystemZ::STRV:
    case SystemZ::STRVG:
    case SystemZ::STRVH:
    case SystemZ::STY: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: XBD2
      op = getBDXAddr20Encoding(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(268435455)) << 8;
      break;
    }
    case SystemZ::AG:
    case SystemZ::AGF:
    case SystemZ::AHY:
    case SystemZ::ALC:
    case SystemZ::ALCG:
    case SystemZ::ALG:
    case SystemZ::ALGF:
    case SystemZ::ALY:
    case SystemZ::AY:
    case SystemZ::BCTG:
    case SystemZ::DL:
    case SystemZ::DLG:
    case SystemZ::DSG:
    case SystemZ::DSGF:
    case SystemZ::IC32Y:
    case SystemZ::ICY:
    case SystemZ::MHY:
    case SystemZ::MLG:
    case SystemZ::MSG:
    case SystemZ::MSGF:
    case SystemZ::MSY:
    case SystemZ::NG:
    case SystemZ::NY:
    case SystemZ::OG:
    case SystemZ::OY:
    case SystemZ::SG:
    case SystemZ::SGF:
    case SystemZ::SHY:
    case SystemZ::SLB:
    case SystemZ::SLBG:
    case SystemZ::SLG:
    case SystemZ::SLGF:
    case SystemZ::SLY:
    case SystemZ::SY:
    case SystemZ::XG:
    case SystemZ::XY: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: XBD2
      op = getBDXAddr20Encoding(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(268435455)) << 8;
      break;
    }
    case SystemZ::EFPC:
    case SystemZ::ETND:
    case SystemZ::IPM:
    case SystemZ::LZDR:
    case SystemZ::LZER:
    case SystemZ::LZXR:
    case SystemZ::SFASR:
    case SystemZ::SFPC:
    case SystemZ::SPM: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 4;
      break;
    }
    case SystemZ::BALR:
    case SystemZ::BASR:
    case SystemZ::BASSM:
    case SystemZ::BCRAsm:
    case SystemZ::BSM:
    case SystemZ::CDBR:
    case SystemZ::CDFBR:
    case SystemZ::CDGBR:
    case SystemZ::CEBR:
    case SystemZ::CEFBR:
    case SystemZ::CEGBR:
    case SystemZ::CGFR:
    case SystemZ::CGR:
    case SystemZ::CGRTAsmE:
    case SystemZ::CGRTAsmH:
    case SystemZ::CGRTAsmHE:
    case SystemZ::CGRTAsmL:
    case SystemZ::CGRTAsmLE:
    case SystemZ::CGRTAsmLH:
    case SystemZ::CGRTAsmNE:
    case SystemZ::CGRTAsmNH:
    case SystemZ::CGRTAsmNHE:
    case SystemZ::CGRTAsmNL:
    case SystemZ::CGRTAsmNLE:
    case SystemZ::CGRTAsmNLH:
    case SystemZ::CLGFR:
    case SystemZ::CLGR:
    case SystemZ::CLGRTAsmE:
    case SystemZ::CLGRTAsmH:
    case SystemZ::CLGRTAsmHE:
    case SystemZ::CLGRTAsmL:
    case SystemZ::CLGRTAsmLE:
    case SystemZ::CLGRTAsmLH:
    case SystemZ::CLGRTAsmNE:
    case SystemZ::CLGRTAsmNH:
    case SystemZ::CLGRTAsmNHE:
    case SystemZ::CLGRTAsmNL:
    case SystemZ::CLGRTAsmNLE:
    case SystemZ::CLGRTAsmNLH:
    case SystemZ::CLR:
    case SystemZ::CLRTAsmE:
    case SystemZ::CLRTAsmH:
    case SystemZ::CLRTAsmHE:
    case SystemZ::CLRTAsmL:
    case SystemZ::CLRTAsmLE:
    case SystemZ::CLRTAsmLH:
    case SystemZ::CLRTAsmNE:
    case SystemZ::CLRTAsmNH:
    case SystemZ::CLRTAsmNHE:
    case SystemZ::CLRTAsmNL:
    case SystemZ::CLRTAsmNLE:
    case SystemZ::CLRTAsmNLH:
    case SystemZ::CLST:
    case SystemZ::CPYA:
    case SystemZ::CR:
    case SystemZ::CRTAsmE:
    case SystemZ::CRTAsmH:
    case SystemZ::CRTAsmHE:
    case SystemZ::CRTAsmL:
    case SystemZ::CRTAsmLE:
    case SystemZ::CRTAsmLH:
    case SystemZ::CRTAsmNE:
    case SystemZ::CRTAsmNH:
    case SystemZ::CRTAsmNHE:
    case SystemZ::CRTAsmNL:
    case SystemZ::CRTAsmNLE:
    case SystemZ::CRTAsmNLH:
    case SystemZ::CXBR:
    case SystemZ::CXFBR:
    case SystemZ::CXGBR:
    case SystemZ::EAR:
    case SystemZ::FLOGR:
    case SystemZ::LBR:
    case SystemZ::LCDBR:
    case SystemZ::LCDFR:
    case SystemZ::LCDFR_32:
    case SystemZ::LCEBR:
    case SystemZ::LCGFR:
    case SystemZ::LCGR:
    case SystemZ::LCR:
    case SystemZ::LCXBR:
    case SystemZ::LDEBR:
    case SystemZ::LDGR:
    case SystemZ::LDR:
    case SystemZ::LDR32:
    case SystemZ::LDXBR:
    case SystemZ::LEDBR:
    case SystemZ::LER:
    case SystemZ::LEXBR:
    case SystemZ::LGBR:
    case SystemZ::LGDR:
    case SystemZ::LGFR:
    case SystemZ::LGHR:
    case SystemZ::LGR:
    case SystemZ::LHR:
    case SystemZ::LLCR:
    case SystemZ::LLGCR:
    case SystemZ::LLGFR:
    case SystemZ::LLGHR:
    case SystemZ::LLGTR:
    case SystemZ::LLHR:
    case SystemZ::LNDBR:
    case SystemZ::LNDFR:
    case SystemZ::LNDFR_32:
    case SystemZ::LNEBR:
    case SystemZ::LNGFR:
    case SystemZ::LNGR:
    case SystemZ::LNR:
    case SystemZ::LNXBR:
    case SystemZ::LPDBR:
    case SystemZ::LPDFR:
    case SystemZ::LPDFR_32:
    case SystemZ::LPEBR:
    case SystemZ::LPGFR:
    case SystemZ::LPGR:
    case SystemZ::LPR:
    case SystemZ::LPXBR:
    case SystemZ::LR:
    case SystemZ::LRVGR:
    case SystemZ::LRVR:
    case SystemZ::LTDBR:
    case SystemZ::LTDBRCompare:
    case SystemZ::LTEBR:
    case SystemZ::LTEBRCompare:
    case SystemZ::LTGFR:
    case SystemZ::LTGR:
    case SystemZ::LTR:
    case SystemZ::LTXBR:
    case SystemZ::LTXBRCompare:
    case SystemZ::LXDBR:
    case SystemZ::LXEBR:
    case SystemZ::LXR:
    case SystemZ::MVST:
    case SystemZ::POPCNT:
    case SystemZ::SAR:
    case SystemZ::SQDBR:
    case SystemZ::SQEBR:
    case SystemZ::SQXBR:
    case SystemZ::SRST: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 4;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(15);
      break;
    }
    case SystemZ::CGRT:
    case SystemZ::CGRTAsm:
    case SystemZ::CLGRT:
    case SystemZ::CLGRTAsm:
    case SystemZ::CLRT:
    case SystemZ::CLRTAsm:
    case SystemZ::CRT:
    case SystemZ::CRTAsm:
    case SystemZ::PPA: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 4;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(15);
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case SystemZ::AGRK:
    case SystemZ::ALGRK:
    case SystemZ::ALRK:
    case SystemZ::ARK:
    case SystemZ::CPSDRdd:
    case SystemZ::CPSDRds:
    case SystemZ::CPSDRsd:
    case SystemZ::CPSDRss:
    case SystemZ::NGRK:
    case SystemZ::NRK:
    case SystemZ::OGRK:
    case SystemZ::ORK:
    case SystemZ::SGRK:
    case SystemZ::SLGRK:
    case SystemZ::SLRK:
    case SystemZ::SRK:
    case SystemZ::XGRK:
    case SystemZ::XRK: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 4;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(15);
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case SystemZ::ADBR:
    case SystemZ::AEBR:
    case SystemZ::AGFR:
    case SystemZ::AGR:
    case SystemZ::ALCGR:
    case SystemZ::ALCR:
    case SystemZ::ALGFR:
    case SystemZ::ALGR:
    case SystemZ::ALR:
    case SystemZ::AR:
    case SystemZ::AXBR:
    case SystemZ::BCTGR:
    case SystemZ::BCTR:
    case SystemZ::DDBR:
    case SystemZ::DEBR:
    case SystemZ::DLGR:
    case SystemZ::DLR:
    case SystemZ::DSGFR:
    case SystemZ::DSGR:
    case SystemZ::DXBR:
    case SystemZ::LOCFHRAsmE:
    case SystemZ::LOCFHRAsmH:
    case SystemZ::LOCFHRAsmHE:
    case SystemZ::LOCFHRAsmL:
    case SystemZ::LOCFHRAsmLE:
    case SystemZ::LOCFHRAsmLH:
    case SystemZ::LOCFHRAsmM:
    case SystemZ::LOCFHRAsmNE:
    case SystemZ::LOCFHRAsmNH:
    case SystemZ::LOCFHRAsmNHE:
    case SystemZ::LOCFHRAsmNL:
    case SystemZ::LOCFHRAsmNLE:
    case SystemZ::LOCFHRAsmNLH:
    case SystemZ::LOCFHRAsmNM:
    case SystemZ::LOCFHRAsmNO:
    case SystemZ::LOCFHRAsmNP:
    case SystemZ::LOCFHRAsmNZ:
    case SystemZ::LOCFHRAsmO:
    case SystemZ::LOCFHRAsmP:
    case SystemZ::LOCFHRAsmZ:
    case SystemZ::LOCGRAsmE:
    case SystemZ::LOCGRAsmH:
    case SystemZ::LOCGRAsmHE:
    case SystemZ::LOCGRAsmL:
    case SystemZ::LOCGRAsmLE:
    case SystemZ::LOCGRAsmLH:
    case SystemZ::LOCGRAsmM:
    case SystemZ::LOCGRAsmNE:
    case SystemZ::LOCGRAsmNH:
    case SystemZ::LOCGRAsmNHE:
    case SystemZ::LOCGRAsmNL:
    case SystemZ::LOCGRAsmNLE:
    case SystemZ::LOCGRAsmNLH:
    case SystemZ::LOCGRAsmNM:
    case SystemZ::LOCGRAsmNO:
    case SystemZ::LOCGRAsmNP:
    case SystemZ::LOCGRAsmNZ:
    case SystemZ::LOCGRAsmO:
    case SystemZ::LOCGRAsmP:
    case SystemZ::LOCGRAsmZ:
    case SystemZ::LOCRAsmE:
    case SystemZ::LOCRAsmH:
    case SystemZ::LOCRAsmHE:
    case SystemZ::LOCRAsmL:
    case SystemZ::LOCRAsmLE:
    case SystemZ::LOCRAsmLH:
    case SystemZ::LOCRAsmM:
    case SystemZ::LOCRAsmNE:
    case SystemZ::LOCRAsmNH:
    case SystemZ::LOCRAsmNHE:
    case SystemZ::LOCRAsmNL:
    case SystemZ::LOCRAsmNLE:
    case SystemZ::LOCRAsmNLH:
    case SystemZ::LOCRAsmNM:
    case SystemZ::LOCRAsmNO:
    case SystemZ::LOCRAsmNP:
    case SystemZ::LOCRAsmNZ:
    case SystemZ::LOCRAsmO:
    case SystemZ::LOCRAsmP:
    case SystemZ::LOCRAsmZ:
    case SystemZ::MDBR:
    case SystemZ::MDEBR:
    case SystemZ::MEEBR:
    case SystemZ::MLGR:
    case SystemZ::MSGFR:
    case SystemZ::MSGR:
    case SystemZ::MSR:
    case SystemZ::MXBR:
    case SystemZ::MXDBR:
    case SystemZ::NGR:
    case SystemZ::NR:
    case SystemZ::OGR:
    case SystemZ::OR:
    case SystemZ::SDBR:
    case SystemZ::SEBR:
    case SystemZ::SGFR:
    case SystemZ::SGR:
    case SystemZ::SLBGR:
    case SystemZ::SLBR:
    case SystemZ::SLGFR:
    case SystemZ::SLGR:
    case SystemZ::SLR:
    case SystemZ::SR:
    case SystemZ::SXBR:
    case SystemZ::XGR:
    case SystemZ::XR: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 4;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(15);
      break;
    }
    case SystemZ::CFDBR:
    case SystemZ::CFEBR:
    case SystemZ::CFXBR:
    case SystemZ::CGDBR:
    case SystemZ::CGEBR:
    case SystemZ::CGXBR:
    case SystemZ::FIDBR:
    case SystemZ::FIEBR:
    case SystemZ::FIXBR: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 4;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(15);
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case SystemZ::CDFBRA:
    case SystemZ::CDGBRA:
    case SystemZ::CDLFBR:
    case SystemZ::CDLGBR:
    case SystemZ::CEFBRA:
    case SystemZ::CEGBRA:
    case SystemZ::CELFBR:
    case SystemZ::CELGBR:
    case SystemZ::CFDBRA:
    case SystemZ::CFEBRA:
    case SystemZ::CFXBRA:
    case SystemZ::CGDBRA:
    case SystemZ::CGEBRA:
    case SystemZ::CGXBRA:
    case SystemZ::CLFDBR:
    case SystemZ::CLFEBR:
    case SystemZ::CLFXBR:
    case SystemZ::CLGDBR:
    case SystemZ::CLGEBR:
    case SystemZ::CLGXBR:
    case SystemZ::CXFBRA:
    case SystemZ::CXGBRA:
    case SystemZ::CXLFBR:
    case SystemZ::CXLGBR:
    case SystemZ::FIDBRA:
    case SystemZ::FIEBRA:
    case SystemZ::FIXBRA:
    case SystemZ::LDXBRA:
    case SystemZ::LEDBRA:
    case SystemZ::LEXBRA: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 4;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(15);
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 8;
      break;
    }
    case SystemZ::LOCFHRAsm:
    case SystemZ::LOCGRAsm:
    case SystemZ::LOCRAsm: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 4;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(15);
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case SystemZ::LOCFHR:
    case SystemZ::LOCGR:
    case SystemZ::LOCR: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 4;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(15);
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case SystemZ::InsnRXF: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(1048575)) << 16;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(280375465082880);
      Value |= op & UINT64_C(255);
      break;
    }
    case SystemZ::InsnRI: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(65535);
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(4278190080);
      Value |= op & UINT64_C(983040);
      break;
    }
    case SystemZ::InsnRS: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 16;
      // op: BD2
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      Value |= op & UINT64_C(65535);
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(4278190080);
      break;
    }
    case SystemZ::InsnRSI: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 16;
      // op: RI2
      op = getPC16DBLEncoding(MI, 3, Fixups, STI);
      Value |= op & UINT64_C(65535);
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(4278190080);
      break;
    }
    case SystemZ::InsnRX: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 2, Fixups, STI);
      Value |= op & UINT64_C(1048575);
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(4278190080);
      break;
    }
    case SystemZ::InsnRIS: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 8;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: BD4
      op = getBDAddr12Encoding(MI, 4, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(280375465082880);
      Value |= op & UINT64_C(255);
      break;
    }
    case SystemZ::InsnRILU: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(4294967295);
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(280375465082880);
      Value |= op & UINT64_C(64424509440);
      break;
    }
    case SystemZ::InsnRIL: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: I2
      op = getPC32DBLEncoding(MI, 2, Fixups, STI);
      Value |= op & UINT64_C(4294967295);
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(280375465082880);
      Value |= op & UINT64_C(64424509440);
      break;
    }
    case SystemZ::InsnRRS: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      // op: BD4
      op = getBDAddr12Encoding(MI, 4, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(280375465082880);
      Value |= op & UINT64_C(255);
      break;
    }
    case SystemZ::InsnRSE: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: BD2
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(280375465082880);
      Value |= op & UINT64_C(255);
      break;
    }
    case SystemZ::InsnRSY: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: BD2
      op = getBDAddr20Encoding(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(16777215)) << 8;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(280375465082880);
      Value |= op & UINT64_C(255);
      break;
    }
    case SystemZ::InsnRIE: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: I2
      op = getPC16DBLEncoding(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(280375465082880);
      Value |= op & UINT64_C(255);
      break;
    }
    case SystemZ::InsnRXE: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(1048575)) << 16;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(280375465082880);
      Value |= op & UINT64_C(255);
      break;
    }
    case SystemZ::InsnRXY: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      // op: XBD2
      op = getBDXAddr20Encoding(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(268435455)) << 8;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(280375465082880);
      Value |= op & UINT64_C(255);
      break;
    }
    case SystemZ::BCR: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 4;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(15);
      break;
    }
    case SystemZ::InsnRRF: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 4;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(15);
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 8;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(4294901760);
      break;
    }
    case SystemZ::InsnRRE: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 4;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(15);
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(4294901760);
      break;
    }
    case SystemZ::InsnRR: {
      // op: R1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 4;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(15);
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(65280);
      break;
    }
    case SystemZ::BR:
    case SystemZ::BRAsmE:
    case SystemZ::BRAsmH:
    case SystemZ::BRAsmHE:
    case SystemZ::BRAsmL:
    case SystemZ::BRAsmLE:
    case SystemZ::BRAsmLH:
    case SystemZ::BRAsmM:
    case SystemZ::BRAsmNE:
    case SystemZ::BRAsmNH:
    case SystemZ::BRAsmNHE:
    case SystemZ::BRAsmNL:
    case SystemZ::BRAsmNLE:
    case SystemZ::BRAsmNLH:
    case SystemZ::BRAsmNM:
    case SystemZ::BRAsmNO:
    case SystemZ::BRAsmNP:
    case SystemZ::BRAsmNZ:
    case SystemZ::BRAsmO:
    case SystemZ::BRAsmP:
    case SystemZ::BRAsmZ: {
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(15);
      break;
    }
    case SystemZ::MVCK: {
      // op: RBD1
      op = getBDRAddr12Encoding(MI, 0, Fixups, STI);
      Value |= (op & UINT64_C(983040)) << 20;
      Value |= (op & UINT64_C(65535)) << 16;
      // op: BD2
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      Value |= op & UINT64_C(65535);
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      break;
    }
    case SystemZ::InsnSS: {
      // op: RBD1
      op = getBDRAddr12Encoding(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(983040)) << 20;
      Value |= (op & UINT64_C(65535)) << 16;
      // op: BD2
      op = getBDAddr12Encoding(MI, 4, Fixups, STI);
      Value |= op & UINT64_C(65535);
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(280375465082880);
      break;
    }
    case SystemZ::J:
    case SystemZ::JAsmE:
    case SystemZ::JAsmH:
    case SystemZ::JAsmHE:
    case SystemZ::JAsmL:
    case SystemZ::JAsmLE:
    case SystemZ::JAsmLH:
    case SystemZ::JAsmM:
    case SystemZ::JAsmNE:
    case SystemZ::JAsmNH:
    case SystemZ::JAsmNHE:
    case SystemZ::JAsmNL:
    case SystemZ::JAsmNLE:
    case SystemZ::JAsmNLH:
    case SystemZ::JAsmNM:
    case SystemZ::JAsmNO:
    case SystemZ::JAsmNP:
    case SystemZ::JAsmNZ:
    case SystemZ::JAsmO:
    case SystemZ::JAsmP:
    case SystemZ::JAsmZ: {
      // op: RI2
      op = getPC16DBLEncoding(MI, 0, Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
    case SystemZ::JG:
    case SystemZ::JGAsmE:
    case SystemZ::JGAsmH:
    case SystemZ::JGAsmHE:
    case SystemZ::JGAsmL:
    case SystemZ::JGAsmLE:
    case SystemZ::JGAsmLH:
    case SystemZ::JGAsmM:
    case SystemZ::JGAsmNE:
    case SystemZ::JGAsmNH:
    case SystemZ::JGAsmNHE:
    case SystemZ::JGAsmNL:
    case SystemZ::JGAsmNLE:
    case SystemZ::JGAsmNLH:
    case SystemZ::JGAsmNM:
    case SystemZ::JGAsmNO:
    case SystemZ::JGAsmNP:
    case SystemZ::JGAsmNZ:
    case SystemZ::JGAsmO:
    case SystemZ::JGAsmP:
    case SystemZ::JGAsmZ: {
      // op: RI2
      op = getPC32DBLEncoding(MI, 0, Fixups, STI);
      Value |= op & UINT64_C(4294967295);
      break;
    }
    case SystemZ::VONE:
    case SystemZ::VZERO: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      break;
    }
    case SystemZ::VLL:
    case SystemZ::VSTL: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: BD2
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      break;
    }
    case SystemZ::VERLLB:
    case SystemZ::VERLLF:
    case SystemZ::VERLLG:
    case SystemZ::VERLLH:
    case SystemZ::VESLB:
    case SystemZ::VESLF:
    case SystemZ::VESLG:
    case SystemZ::VESLH:
    case SystemZ::VESRAB:
    case SystemZ::VESRAF:
    case SystemZ::VESRAG:
    case SystemZ::VESRAH:
    case SystemZ::VESRLB:
    case SystemZ::VESRLF:
    case SystemZ::VESRLG:
    case SystemZ::VESRLH:
    case SystemZ::VLM:
    case SystemZ::VSTM: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: BD2
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      break;
    }
    case SystemZ::VERLL:
    case SystemZ::VESL:
    case SystemZ::VESRA:
    case SystemZ::VESRL: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: BD2
      op = getBDAddr12Encoding(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case SystemZ::VLVGB:
    case SystemZ::VLVGF:
    case SystemZ::VLVGG:
    case SystemZ::VLVGH: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: BD2
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      break;
    }
    case SystemZ::VLVG: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: BD2
      op = getBDAddr12Encoding(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case SystemZ::VGMB:
    case SystemZ::VGMF:
    case SystemZ::VGMG:
    case SystemZ::VGMH: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 24;
      // op: I3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 16;
      break;
    }
    case SystemZ::VGM: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 24;
      // op: I3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 16;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case SystemZ::VGBM:
    case SystemZ::VREPIB:
    case SystemZ::VREPIF:
    case SystemZ::VREPIG:
    case SystemZ::VREPIH: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      break;
    }
    case SystemZ::VREPI: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case SystemZ::VLEIB:
    case SystemZ::VLEIF:
    case SystemZ::VLEIG:
    case SystemZ::VLEIH: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case SystemZ::VLVGP: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: R2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      // op: R3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      break;
    }
    case SystemZ::VCLZB:
    case SystemZ::VCLZF:
    case SystemZ::VCLZG:
    case SystemZ::VCLZH:
    case SystemZ::VCTZB:
    case SystemZ::VCTZF:
    case SystemZ::VCTZG:
    case SystemZ::VCTZH:
    case SystemZ::VECB:
    case SystemZ::VECF:
    case SystemZ::VECG:
    case SystemZ::VECH:
    case SystemZ::VECLB:
    case SystemZ::VECLF:
    case SystemZ::VECLG:
    case SystemZ::VECLH:
    case SystemZ::VFLCDB:
    case SystemZ::VFLNDB:
    case SystemZ::VFLPDB:
    case SystemZ::VFSQDB:
    case SystemZ::VISTRBS:
    case SystemZ::VISTRFS:
    case SystemZ::VISTRHS:
    case SystemZ::VLCB:
    case SystemZ::VLCF:
    case SystemZ::VLCG:
    case SystemZ::VLCH:
    case SystemZ::VLDEB:
    case SystemZ::VLPB:
    case SystemZ::VLPF:
    case SystemZ::VLPG:
    case SystemZ::VLPH:
    case SystemZ::VLR:
    case SystemZ::VSEGB:
    case SystemZ::VSEGF:
    case SystemZ::VSEGH:
    case SystemZ::VTM:
    case SystemZ::VUPHB:
    case SystemZ::VUPHF:
    case SystemZ::VUPHH:
    case SystemZ::VUPLB:
    case SystemZ::VUPLF:
    case SystemZ::VUPLHB:
    case SystemZ::VUPLHF:
    case SystemZ::VUPLHH:
    case SystemZ::VUPLHW:
    case SystemZ::VUPLLB:
    case SystemZ::VUPLLF:
    case SystemZ::VUPLLH:
    case SystemZ::WFCDB:
    case SystemZ::WFKDB:
    case SystemZ::WFLCDB:
    case SystemZ::WFLNDB:
    case SystemZ::WFLPDB:
    case SystemZ::WFSQDB:
    case SystemZ::WLDEB: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      break;
    }
    case SystemZ::VFTCIDB:
    case SystemZ::WFTCIDB: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: I3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(4095)) << 20;
      break;
    }
    case SystemZ::VFTCI: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: I3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(4095)) << 20;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case SystemZ::VCLZ:
    case SystemZ::VCTZ:
    case SystemZ::VEC:
    case SystemZ::VECL:
    case SystemZ::VLC:
    case SystemZ::VLP:
    case SystemZ::VPOPCT:
    case SystemZ::VSEG:
    case SystemZ::VUPH:
    case SystemZ::VUPL:
    case SystemZ::VUPLH:
    case SystemZ::VUPLL: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case SystemZ::VFSQ:
    case SystemZ::VLDE:
    case SystemZ::WFC:
    case SystemZ::WFK: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case SystemZ::VCDG:
    case SystemZ::VCDLG:
    case SystemZ::VCGD:
    case SystemZ::VCLGD:
    case SystemZ::VFI:
    case SystemZ::VFPSO:
    case SystemZ::VLED: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 16;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      break;
    }
    case SystemZ::VISTR: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      break;
    }
    case SystemZ::VCDGB:
    case SystemZ::VCDLGB:
    case SystemZ::VCGDB:
    case SystemZ::VCLGDB:
    case SystemZ::VFIDB:
    case SystemZ::VLEDB: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 16;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      break;
    }
    case SystemZ::WCDGB:
    case SystemZ::WCDLGB:
    case SystemZ::WCGDB:
    case SystemZ::WCLGDB:
    case SystemZ::WFIDB:
    case SystemZ::WLEDB: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 16;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      break;
    }
    case SystemZ::VFPSODB:
    case SystemZ::VISTRB:
    case SystemZ::VISTRF:
    case SystemZ::VISTRH:
    case SystemZ::WFPSODB: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      break;
    }
    case SystemZ::VAB:
    case SystemZ::VACCB:
    case SystemZ::VACCF:
    case SystemZ::VACCG:
    case SystemZ::VACCH:
    case SystemZ::VACCQ:
    case SystemZ::VAF:
    case SystemZ::VAG:
    case SystemZ::VAH:
    case SystemZ::VAQ:
    case SystemZ::VAVGB:
    case SystemZ::VAVGF:
    case SystemZ::VAVGG:
    case SystemZ::VAVGH:
    case SystemZ::VAVGLB:
    case SystemZ::VAVGLF:
    case SystemZ::VAVGLG:
    case SystemZ::VAVGLH:
    case SystemZ::VCEQB:
    case SystemZ::VCEQBS:
    case SystemZ::VCEQF:
    case SystemZ::VCEQFS:
    case SystemZ::VCEQG:
    case SystemZ::VCEQGS:
    case SystemZ::VCEQH:
    case SystemZ::VCEQHS:
    case SystemZ::VCHB:
    case SystemZ::VCHBS:
    case SystemZ::VCHF:
    case SystemZ::VCHFS:
    case SystemZ::VCHG:
    case SystemZ::VCHGS:
    case SystemZ::VCHH:
    case SystemZ::VCHHS:
    case SystemZ::VCHLB:
    case SystemZ::VCHLBS:
    case SystemZ::VCHLF:
    case SystemZ::VCHLFS:
    case SystemZ::VCHLG:
    case SystemZ::VCHLGS:
    case SystemZ::VCHLH:
    case SystemZ::VCHLHS:
    case SystemZ::VCKSM:
    case SystemZ::VERLLVB:
    case SystemZ::VERLLVF:
    case SystemZ::VERLLVG:
    case SystemZ::VERLLVH:
    case SystemZ::VESLVB:
    case SystemZ::VESLVF:
    case SystemZ::VESLVG:
    case SystemZ::VESLVH:
    case SystemZ::VESRAVB:
    case SystemZ::VESRAVF:
    case SystemZ::VESRAVG:
    case SystemZ::VESRAVH:
    case SystemZ::VESRLVB:
    case SystemZ::VESRLVF:
    case SystemZ::VESRLVG:
    case SystemZ::VESRLVH:
    case SystemZ::VFADB:
    case SystemZ::VFCEDB:
    case SystemZ::VFCEDBS:
    case SystemZ::VFCHDB:
    case SystemZ::VFCHDBS:
    case SystemZ::VFCHEDB:
    case SystemZ::VFCHEDBS:
    case SystemZ::VFDDB:
    case SystemZ::VFEEBS:
    case SystemZ::VFEEFS:
    case SystemZ::VFEEHS:
    case SystemZ::VFEEZB:
    case SystemZ::VFEEZBS:
    case SystemZ::VFEEZF:
    case SystemZ::VFEEZFS:
    case SystemZ::VFEEZH:
    case SystemZ::VFEEZHS:
    case SystemZ::VFENEBS:
    case SystemZ::VFENEFS:
    case SystemZ::VFENEHS:
    case SystemZ::VFENEZB:
    case SystemZ::VFENEZBS:
    case SystemZ::VFENEZF:
    case SystemZ::VFENEZFS:
    case SystemZ::VFENEZH:
    case SystemZ::VFENEZHS:
    case SystemZ::VFMDB:
    case SystemZ::VFSDB:
    case SystemZ::VGFMB:
    case SystemZ::VGFMF:
    case SystemZ::VGFMG:
    case SystemZ::VGFMH:
    case SystemZ::VMEB:
    case SystemZ::VMEF:
    case SystemZ::VMEH:
    case SystemZ::VMHB:
    case SystemZ::VMHF:
    case SystemZ::VMHH:
    case SystemZ::VMLB:
    case SystemZ::VMLEB:
    case SystemZ::VMLEF:
    case SystemZ::VMLEH:
    case SystemZ::VMLF:
    case SystemZ::VMLHB:
    case SystemZ::VMLHF:
    case SystemZ::VMLHH:
    case SystemZ::VMLHW:
    case SystemZ::VMLOB:
    case SystemZ::VMLOF:
    case SystemZ::VMLOH:
    case SystemZ::VMNB:
    case SystemZ::VMNF:
    case SystemZ::VMNG:
    case SystemZ::VMNH:
    case SystemZ::VMNLB:
    case SystemZ::VMNLF:
    case SystemZ::VMNLG:
    case SystemZ::VMNLH:
    case SystemZ::VMOB:
    case SystemZ::VMOF:
    case SystemZ::VMOH:
    case SystemZ::VMRHB:
    case SystemZ::VMRHF:
    case SystemZ::VMRHG:
    case SystemZ::VMRHH:
    case SystemZ::VMRLB:
    case SystemZ::VMRLF:
    case SystemZ::VMRLG:
    case SystemZ::VMRLH:
    case SystemZ::VMXB:
    case SystemZ::VMXF:
    case SystemZ::VMXG:
    case SystemZ::VMXH:
    case SystemZ::VMXLB:
    case SystemZ::VMXLF:
    case SystemZ::VMXLG:
    case SystemZ::VMXLH:
    case SystemZ::VN:
    case SystemZ::VNC:
    case SystemZ::VNO:
    case SystemZ::VO:
    case SystemZ::VPKF:
    case SystemZ::VPKG:
    case SystemZ::VPKH:
    case SystemZ::VPKLSF:
    case SystemZ::VPKLSFS:
    case SystemZ::VPKLSG:
    case SystemZ::VPKLSGS:
    case SystemZ::VPKLSH:
    case SystemZ::VPKLSHS:
    case SystemZ::VPKSF:
    case SystemZ::VPKSFS:
    case SystemZ::VPKSG:
    case SystemZ::VPKSGS:
    case SystemZ::VPKSH:
    case SystemZ::VPKSHS:
    case SystemZ::VSB:
    case SystemZ::VSCBIB:
    case SystemZ::VSCBIF:
    case SystemZ::VSCBIG:
    case SystemZ::VSCBIH:
    case SystemZ::VSCBIQ:
    case SystemZ::VSF:
    case SystemZ::VSG:
    case SystemZ::VSH:
    case SystemZ::VSL:
    case SystemZ::VSLB:
    case SystemZ::VSQ:
    case SystemZ::VSRA:
    case SystemZ::VSRAB:
    case SystemZ::VSRL:
    case SystemZ::VSRLB:
    case SystemZ::VSUMB:
    case SystemZ::VSUMGF:
    case SystemZ::VSUMGH:
    case SystemZ::VSUMH:
    case SystemZ::VSUMQF:
    case SystemZ::VSUMQG:
    case SystemZ::VX:
    case SystemZ::WFADB:
    case SystemZ::WFCEDB:
    case SystemZ::WFCEDBS:
    case SystemZ::WFCHDB:
    case SystemZ::WFCHDBS:
    case SystemZ::WFCHEDB:
    case SystemZ::WFCHEDBS:
    case SystemZ::WFDDB:
    case SystemZ::WFMDB:
    case SystemZ::WFSDB: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      break;
    }
    case SystemZ::VSLDB: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: I4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 16;
      break;
    }
    case SystemZ::VA:
    case SystemZ::VACC:
    case SystemZ::VAVG:
    case SystemZ::VAVGL:
    case SystemZ::VERLLV:
    case SystemZ::VESLV:
    case SystemZ::VESRAV:
    case SystemZ::VESRLV:
    case SystemZ::VGFM:
    case SystemZ::VME:
    case SystemZ::VMH:
    case SystemZ::VML:
    case SystemZ::VMLE:
    case SystemZ::VMLH:
    case SystemZ::VMLO:
    case SystemZ::VMN:
    case SystemZ::VMNL:
    case SystemZ::VMO:
    case SystemZ::VMRH:
    case SystemZ::VMRL:
    case SystemZ::VMX:
    case SystemZ::VMXL:
    case SystemZ::VPDI:
    case SystemZ::VPK:
    case SystemZ::VS:
    case SystemZ::VSCBI:
    case SystemZ::VSUM:
    case SystemZ::VSUMG:
    case SystemZ::VSUMQ: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case SystemZ::VFA:
    case SystemZ::VFD:
    case SystemZ::VFM:
    case SystemZ::VFS: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case SystemZ::VFCE:
    case SystemZ::VFCH:
    case SystemZ::VFCHE: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 16;
      // op: M6
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      break;
    }
    case SystemZ::VCEQ:
    case SystemZ::VCH:
    case SystemZ::VCHL:
    case SystemZ::VFAE:
    case SystemZ::VFEE:
    case SystemZ::VFENE:
    case SystemZ::VPKLS:
    case SystemZ::VPKS: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      break;
    }
    case SystemZ::VFAEZBS:
    case SystemZ::VFAEZFS:
    case SystemZ::VFAEZHS: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(12)) << 20;
      break;
    }
    case SystemZ::VFAEZB:
    case SystemZ::VFAEZF:
    case SystemZ::VFAEZH: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(12)) << 20;
      Value |= (op & UINT64_C(1)) << 20;
      break;
    }
    case SystemZ::VFAEBS:
    case SystemZ::VFAEFS:
    case SystemZ::VFAEHS: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(14)) << 20;
      break;
    }
    case SystemZ::VFAEB:
    case SystemZ::VFAEF:
    case SystemZ::VFAEH:
    case SystemZ::VFEEB:
    case SystemZ::VFEEF:
    case SystemZ::VFEEH:
    case SystemZ::VFENEB:
    case SystemZ::VFENEF:
    case SystemZ::VFENEH: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      break;
    }
    case SystemZ::VACCCQ:
    case SystemZ::VACQ:
    case SystemZ::VFMADB:
    case SystemZ::VFMSDB:
    case SystemZ::VGFMAB:
    case SystemZ::VGFMAF:
    case SystemZ::VGFMAG:
    case SystemZ::VGFMAH:
    case SystemZ::VMAEB:
    case SystemZ::VMAEF:
    case SystemZ::VMAEH:
    case SystemZ::VMAHB:
    case SystemZ::VMAHF:
    case SystemZ::VMAHH:
    case SystemZ::VMALB:
    case SystemZ::VMALEB:
    case SystemZ::VMALEF:
    case SystemZ::VMALEH:
    case SystemZ::VMALF:
    case SystemZ::VMALHB:
    case SystemZ::VMALHF:
    case SystemZ::VMALHH:
    case SystemZ::VMALHW:
    case SystemZ::VMALOB:
    case SystemZ::VMALOF:
    case SystemZ::VMALOH:
    case SystemZ::VMAOB:
    case SystemZ::VMAOF:
    case SystemZ::VMAOH:
    case SystemZ::VPERM:
    case SystemZ::VSBCBIQ:
    case SystemZ::VSBIQ:
    case SystemZ::VSEL:
    case SystemZ::WFMADB:
    case SystemZ::WFMSDB: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: V4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      Value |= (op & UINT64_C(16)) << 4;
      break;
    }
    case SystemZ::VFMA:
    case SystemZ::VFMS: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: V4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      Value |= (op & UINT64_C(16)) << 4;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 16;
      // op: M6
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 24;
      break;
    }
    case SystemZ::VAC:
    case SystemZ::VACCC:
    case SystemZ::VGFMA:
    case SystemZ::VMAE:
    case SystemZ::VMAH:
    case SystemZ::VMAL:
    case SystemZ::VMALE:
    case SystemZ::VMALH:
    case SystemZ::VMALO:
    case SystemZ::VMAO:
    case SystemZ::VSBCBI:
    case SystemZ::VSBI: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: V4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      Value |= (op & UINT64_C(16)) << 4;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 24;
      break;
    }
    case SystemZ::VSTRC: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: V4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      Value |= (op & UINT64_C(16)) << 4;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 24;
      // op: M6
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      break;
    }
    case SystemZ::VSTRCZBS:
    case SystemZ::VSTRCZFS:
    case SystemZ::VSTRCZHS: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: V4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      Value |= (op & UINT64_C(16)) << 4;
      // op: M6
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(12)) << 20;
      break;
    }
    case SystemZ::VSTRCZB:
    case SystemZ::VSTRCZF:
    case SystemZ::VSTRCZH: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: V4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      Value |= (op & UINT64_C(16)) << 4;
      // op: M6
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(12)) << 20;
      Value |= (op & UINT64_C(1)) << 20;
      break;
    }
    case SystemZ::VSTRCBS:
    case SystemZ::VSTRCFS:
    case SystemZ::VSTRCHS: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: V4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      Value |= (op & UINT64_C(16)) << 4;
      // op: M6
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(14)) << 20;
      break;
    }
    case SystemZ::VSTRCB:
    case SystemZ::VSTRCF:
    case SystemZ::VSTRCH: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: V4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      Value |= (op & UINT64_C(16)) << 4;
      // op: M6
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 20;
      break;
    }
    case SystemZ::VERIMB:
    case SystemZ::VERIMF:
    case SystemZ::VERIMG:
    case SystemZ::VERIMH: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: I4
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 16;
      break;
    }
    case SystemZ::VERIM: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 28;
      Value |= (op & UINT64_C(16)) << 5;
      // op: I4
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 16;
      // op: M5
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case SystemZ::VREPB:
    case SystemZ::VREPF:
    case SystemZ::VREPG:
    case SystemZ::VREPH: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      break;
    }
    case SystemZ::VREP: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: V3
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 32;
      Value |= (op & UINT64_C(16)) << 6;
      // op: I2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 16;
      // op: M4
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case SystemZ::VSCEF:
    case SystemZ::VSCEG: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: VBD2
      op = getBDVAddr12Encoding(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(1048575)) << 16;
      Value |= (op & UINT64_C(1048576)) >> 10;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case SystemZ::VGEF:
    case SystemZ::VGEG: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: VBD2
      op = getBDVAddr12Encoding(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(1048575)) << 16;
      Value |= (op & UINT64_C(1048576)) >> 10;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case SystemZ::VL:
    case SystemZ::VLLEZB:
    case SystemZ::VLLEZF:
    case SystemZ::VLLEZG:
    case SystemZ::VLLEZH:
    case SystemZ::VLREPB:
    case SystemZ::VLREPF:
    case SystemZ::VLREPG:
    case SystemZ::VLREPH:
    case SystemZ::VST: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(1048575)) << 16;
      break;
    }
    case SystemZ::VLBB:
    case SystemZ::VLLEZ:
    case SystemZ::VLREP:
    case SystemZ::VSTEB:
    case SystemZ::VSTEF:
    case SystemZ::VSTEG:
    case SystemZ::VSTEH: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(1048575)) << 16;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case SystemZ::VLEB:
    case SystemZ::VLEF:
    case SystemZ::VLEG:
    case SystemZ::VLEH: {
      // op: V1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 36;
      Value |= (op & UINT64_C(16)) << 7;
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(1048575)) << 16;
      // op: M3
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case SystemZ::B:
    case SystemZ::BAsmE:
    case SystemZ::BAsmH:
    case SystemZ::BAsmHE:
    case SystemZ::BAsmL:
    case SystemZ::BAsmLE:
    case SystemZ::BAsmLH:
    case SystemZ::BAsmM:
    case SystemZ::BAsmNE:
    case SystemZ::BAsmNH:
    case SystemZ::BAsmNHE:
    case SystemZ::BAsmNL:
    case SystemZ::BAsmNLE:
    case SystemZ::BAsmNLH:
    case SystemZ::BAsmNM:
    case SystemZ::BAsmNO:
    case SystemZ::BAsmNP:
    case SystemZ::BAsmNZ:
    case SystemZ::BAsmO:
    case SystemZ::BAsmP:
    case SystemZ::BAsmZ: {
      // op: XBD2
      op = getBDXAddr12Encoding(MI, 0, Fixups, STI);
      Value |= op & UINT64_C(1048575);
      break;
    }
    case SystemZ::InsnE: {
      // op: enc
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(65535);
      break;
    }
  default:
    std::string msg;
    raw_string_ostream Msg(msg);
    Msg << "Not supported instr: " << MI;
    report_fatal_error(Msg.str());
  }
  return Value;
}

#ifdef ENABLE_INSTR_PREDICATE_VERIFIER
#undef ENABLE_INSTR_PREDICATE_VERIFIER
#include <sstream>

// Flags for subtarget features that participate in instruction matching.
enum SubtargetFeatureFlag : uint16_t {
  Feature_FeatureDistinctOps = (1ULL << 0),
  Feature_FeatureFastSerialization = (1ULL << 3),
  Feature_FeatureFPExtension = (1ULL << 2),
  Feature_FeatureHighWord = (1ULL << 4),
  Feature_FeatureInterlockedAccess1 = (1ULL << 5),
  Feature_FeatureLoadStoreOnCond = (1ULL << 8),
  Feature_FeaturePopulationCount = (1ULL << 11),
  Feature_FeatureExecutionHint = (1ULL << 1),
  Feature_FeatureLoadAndTrap = (1ULL << 6),
  Feature_FeatureMiscellaneousExtensions = (1ULL << 10),
  Feature_FeatureProcessorAssist = (1ULL << 12),
  Feature_FeatureTransactionalExecution = (1ULL << 13),
  Feature_FeatureLoadAndZeroRightmostByte = (1ULL << 7),
  Feature_FeatureLoadStoreOnCond2 = (1ULL << 9),
  Feature_FeatureVector = (1ULL << 14),
  Feature_None = 0
};

#ifndef NDEBUG
static const char *SubtargetFeatureNames[] = {
  "Feature_FeatureDistinctOps",
  "Feature_FeatureExecutionHint",
  "Feature_FeatureFPExtension",
  "Feature_FeatureFastSerialization",
  "Feature_FeatureHighWord",
  "Feature_FeatureInterlockedAccess1",
  "Feature_FeatureLoadAndTrap",
  "Feature_FeatureLoadAndZeroRightmostByte",
  "Feature_FeatureLoadStoreOnCond",
  "Feature_FeatureLoadStoreOnCond2",
  "Feature_FeatureMiscellaneousExtensions",
  "Feature_FeaturePopulationCount",
  "Feature_FeatureProcessorAssist",
  "Feature_FeatureTransactionalExecution",
  "Feature_FeatureVector",
  nullptr
};

#endif // NDEBUG
uint64_t SystemZMCCodeEmitter::
computeAvailableFeatures(const FeatureBitset& FB) const {
  uint64_t Features = 0;
  if ((FB[SystemZ::FeatureDistinctOps]))
    Features |= Feature_FeatureDistinctOps;
  if ((FB[SystemZ::FeatureFastSerialization]))
    Features |= Feature_FeatureFastSerialization;
  if ((FB[SystemZ::FeatureFPExtension]))
    Features |= Feature_FeatureFPExtension;
  if ((FB[SystemZ::FeatureHighWord]))
    Features |= Feature_FeatureHighWord;
  if ((FB[SystemZ::FeatureInterlockedAccess1]))
    Features |= Feature_FeatureInterlockedAccess1;
  if ((FB[SystemZ::FeatureLoadStoreOnCond]))
    Features |= Feature_FeatureLoadStoreOnCond;
  if ((FB[SystemZ::FeaturePopulationCount]))
    Features |= Feature_FeaturePopulationCount;
  if ((FB[SystemZ::FeatureExecutionHint]))
    Features |= Feature_FeatureExecutionHint;
  if ((FB[SystemZ::FeatureLoadAndTrap]))
    Features |= Feature_FeatureLoadAndTrap;
  if ((FB[SystemZ::FeatureMiscellaneousExtensions]))
    Features |= Feature_FeatureMiscellaneousExtensions;
  if ((FB[SystemZ::FeatureProcessorAssist]))
    Features |= Feature_FeatureProcessorAssist;
  if ((FB[SystemZ::FeatureTransactionalExecution]))
    Features |= Feature_FeatureTransactionalExecution;
  if ((FB[SystemZ::FeatureLoadAndZeroRightmostByte]))
    Features |= Feature_FeatureLoadAndZeroRightmostByte;
  if ((FB[SystemZ::FeatureLoadStoreOnCond2]))
    Features |= Feature_FeatureLoadStoreOnCond2;
  if ((FB[SystemZ::FeatureVector]))
    Features |= Feature_FeatureVector;
  return Features;
}

void SystemZMCCodeEmitter::verifyInstructionPredicates(
    const MCInst &Inst, uint64_t AvailableFeatures) const {
#ifndef NDEBUG
  static uint64_t RequiredFeatures[] = {
    0, // PHI = 0
    0, // INLINEASM = 1
    0, // CFI_INSTRUCTION = 2
    0, // EH_LABEL = 3
    0, // GC_LABEL = 4
    0, // KILL = 5
    0, // EXTRACT_SUBREG = 6
    0, // INSERT_SUBREG = 7
    0, // IMPLICIT_DEF = 8
    0, // SUBREG_TO_REG = 9
    0, // COPY_TO_REGCLASS = 10
    0, // DBG_VALUE = 11
    0, // REG_SEQUENCE = 12
    0, // COPY = 13
    0, // BUNDLE = 14
    0, // LIFETIME_START = 15
    0, // LIFETIME_END = 16
    0, // STACKMAP = 17
    0, // FENTRY_CALL = 18
    0, // PATCHPOINT = 19
    0, // LOAD_STACK_GUARD = 20
    0, // STATEPOINT = 21
    0, // LOCAL_ESCAPE = 22
    0, // FAULTING_OP = 23
    0, // PATCHABLE_OP = 24
    0, // PATCHABLE_FUNCTION_ENTER = 25
    0, // PATCHABLE_RET = 26
    0, // PATCHABLE_FUNCTION_EXIT = 27
    0, // PATCHABLE_TAIL_CALL = 28
    0, // G_ADD = 29
    0, // G_SUB = 30
    0, // G_MUL = 31
    0, // G_SDIV = 32
    0, // G_UDIV = 33
    0, // G_SREM = 34
    0, // G_UREM = 35
    0, // G_AND = 36
    0, // G_OR = 37
    0, // G_XOR = 38
    0, // G_FRAME_INDEX = 39
    0, // G_GLOBAL_VALUE = 40
    0, // G_EXTRACT = 41
    0, // G_UNMERGE_VALUES = 42
    0, // G_INSERT = 43
    0, // G_SEQUENCE = 44
    0, // G_MERGE_VALUES = 45
    0, // G_PTRTOINT = 46
    0, // G_INTTOPTR = 47
    0, // G_BITCAST = 48
    0, // G_LOAD = 49
    0, // G_STORE = 50
    0, // G_BRCOND = 51
    0, // G_BRINDIRECT = 52
    0, // G_INTRINSIC = 53
    0, // G_INTRINSIC_W_SIDE_EFFECTS = 54
    0, // G_ANYEXT = 55
    0, // G_TRUNC = 56
    0, // G_CONSTANT = 57
    0, // G_FCONSTANT = 58
    0, // G_VASTART = 59
    0, // G_VAARG = 60
    0, // G_SEXT = 61
    0, // G_ZEXT = 62
    0, // G_SHL = 63
    0, // G_LSHR = 64
    0, // G_ASHR = 65
    0, // G_ICMP = 66
    0, // G_FCMP = 67
    0, // G_SELECT = 68
    0, // G_UADDE = 69
    0, // G_USUBE = 70
    0, // G_SADDO = 71
    0, // G_SSUBO = 72
    0, // G_UMULO = 73
    0, // G_SMULO = 74
    0, // G_UMULH = 75
    0, // G_SMULH = 76
    0, // G_FADD = 77
    0, // G_FSUB = 78
    0, // G_FMUL = 79
    0, // G_FDIV = 80
    0, // G_FREM = 81
    0, // G_FPOW = 82
    0, // G_FNEG = 83
    0, // G_FPEXT = 84
    0, // G_FPTRUNC = 85
    0, // G_FPTOSI = 86
    0, // G_FPTOUI = 87
    0, // G_SITOFP = 88
    0, // G_UITOFP = 89
    0, // G_GEP = 90
    0, // G_PTR_MASK = 91
    0, // G_BR = 92
    0, // G_INSERT_VECTOR_ELT = 93
    0, // G_EXTRACT_VECTOR_ELT = 94
    0, // A = 95
    0, // ADB = 96
    0, // ADBR = 97
    0, // ADJCALLSTACKDOWN = 98
    0, // ADJCALLSTACKUP = 99
    0, // ADJDYNALLOC = 100
    0, // AEB = 101
    0, // AEBR = 102
    0, // AEXT128_64 = 103
    0, // AFI = 104
    Feature_FeatureHighWord | 0, // AFIMux = 105
    0, // AG = 106
    0, // AGF = 107
    0, // AGFI = 108
    0, // AGFR = 109
    0, // AGHI = 110
    Feature_FeatureDistinctOps | 0, // AGHIK = 111
    0, // AGR = 112
    Feature_FeatureDistinctOps | 0, // AGRK = 113
    0, // AGSI = 114
    0, // AH = 115
    0, // AHI = 116
    Feature_FeatureDistinctOps | 0, // AHIK = 117
    Feature_FeatureHighWord | 0, // AHIMux = 118
    Feature_FeatureHighWord | Feature_FeatureDistinctOps | 0, // AHIMuxK = 119
    0, // AHY = 120
    Feature_FeatureHighWord | 0, // AIH = 121
    0, // AL = 122
    0, // ALC = 123
    0, // ALCG = 124
    0, // ALCGR = 125
    0, // ALCR = 126
    0, // ALFI = 127
    0, // ALG = 128
    0, // ALGF = 129
    0, // ALGFI = 130
    0, // ALGFR = 131
    Feature_FeatureDistinctOps | 0, // ALGHSIK = 132
    0, // ALGR = 133
    Feature_FeatureDistinctOps | 0, // ALGRK = 134
    Feature_FeatureDistinctOps | 0, // ALHSIK = 135
    0, // ALR = 136
    Feature_FeatureDistinctOps | 0, // ALRK = 137
    0, // ALY = 138
    0, // AR = 139
    Feature_FeatureDistinctOps | 0, // ARK = 140
    0, // ASI = 141
    0, // ATOMIC_CMP_SWAPW = 142
    0, // ATOMIC_LOADW_AFI = 143
    0, // ATOMIC_LOADW_AR = 144
    0, // ATOMIC_LOADW_MAX = 145
    0, // ATOMIC_LOADW_MIN = 146
    0, // ATOMIC_LOADW_NILH = 147
    0, // ATOMIC_LOADW_NILHi = 148
    0, // ATOMIC_LOADW_NR = 149
    0, // ATOMIC_LOADW_NRi = 150
    0, // ATOMIC_LOADW_OILH = 151
    0, // ATOMIC_LOADW_OR = 152
    0, // ATOMIC_LOADW_SR = 153
    0, // ATOMIC_LOADW_UMAX = 154
    0, // ATOMIC_LOADW_UMIN = 155
    0, // ATOMIC_LOADW_XILF = 156
    0, // ATOMIC_LOADW_XR = 157
    0, // ATOMIC_LOAD_AFI = 158
    0, // ATOMIC_LOAD_AGFI = 159
    0, // ATOMIC_LOAD_AGHI = 160
    0, // ATOMIC_LOAD_AGR = 161
    0, // ATOMIC_LOAD_AHI = 162
    0, // ATOMIC_LOAD_AR = 163
    0, // ATOMIC_LOAD_MAX_32 = 164
    0, // ATOMIC_LOAD_MAX_64 = 165
    0, // ATOMIC_LOAD_MIN_32 = 166
    0, // ATOMIC_LOAD_MIN_64 = 167
    0, // ATOMIC_LOAD_NGR = 168
    0, // ATOMIC_LOAD_NGRi = 169
    0, // ATOMIC_LOAD_NIHF64 = 170
    0, // ATOMIC_LOAD_NIHF64i = 171
    0, // ATOMIC_LOAD_NIHH64 = 172
    0, // ATOMIC_LOAD_NIHH64i = 173
    0, // ATOMIC_LOAD_NIHL64 = 174
    0, // ATOMIC_LOAD_NIHL64i = 175
    0, // ATOMIC_LOAD_NILF = 176
    0, // ATOMIC_LOAD_NILF64 = 177
    0, // ATOMIC_LOAD_NILF64i = 178
    0, // ATOMIC_LOAD_NILFi = 179
    0, // ATOMIC_LOAD_NILH = 180
    0, // ATOMIC_LOAD_NILH64 = 181
    0, // ATOMIC_LOAD_NILH64i = 182
    0, // ATOMIC_LOAD_NILHi = 183
    0, // ATOMIC_LOAD_NILL = 184
    0, // ATOMIC_LOAD_NILL64 = 185
    0, // ATOMIC_LOAD_NILL64i = 186
    0, // ATOMIC_LOAD_NILLi = 187
    0, // ATOMIC_LOAD_NR = 188
    0, // ATOMIC_LOAD_NRi = 189
    0, // ATOMIC_LOAD_OGR = 190
    0, // ATOMIC_LOAD_OIHF64 = 191
    0, // ATOMIC_LOAD_OIHH64 = 192
    0, // ATOMIC_LOAD_OIHL64 = 193
    0, // ATOMIC_LOAD_OILF = 194
    0, // ATOMIC_LOAD_OILF64 = 195
    0, // ATOMIC_LOAD_OILH = 196
    0, // ATOMIC_LOAD_OILH64 = 197
    0, // ATOMIC_LOAD_OILL = 198
    0, // ATOMIC_LOAD_OILL64 = 199
    0, // ATOMIC_LOAD_OR = 200
    0, // ATOMIC_LOAD_SGR = 201
    0, // ATOMIC_LOAD_SR = 202
    0, // ATOMIC_LOAD_UMAX_32 = 203
    0, // ATOMIC_LOAD_UMAX_64 = 204
    0, // ATOMIC_LOAD_UMIN_32 = 205
    0, // ATOMIC_LOAD_UMIN_64 = 206
    0, // ATOMIC_LOAD_XGR = 207
    0, // ATOMIC_LOAD_XIHF64 = 208
    0, // ATOMIC_LOAD_XILF = 209
    0, // ATOMIC_LOAD_XILF64 = 210
    0, // ATOMIC_LOAD_XR = 211
    0, // ATOMIC_SWAPW = 212
    0, // ATOMIC_SWAP_32 = 213
    0, // ATOMIC_SWAP_64 = 214
    0, // AXBR = 215
    0, // AY = 216
    0, // B = 217
    0, // BAL = 218
    0, // BALR = 219
    0, // BAS = 220
    0, // BASR = 221
    0, // BASSM = 222
    0, // BAsmE = 223
    0, // BAsmH = 224
    0, // BAsmHE = 225
    0, // BAsmL = 226
    0, // BAsmLE = 227
    0, // BAsmLH = 228
    0, // BAsmM = 229
    0, // BAsmNE = 230
    0, // BAsmNH = 231
    0, // BAsmNHE = 232
    0, // BAsmNL = 233
    0, // BAsmNLE = 234
    0, // BAsmNLH = 235
    0, // BAsmNM = 236
    0, // BAsmNO = 237
    0, // BAsmNP = 238
    0, // BAsmNZ = 239
    0, // BAsmO = 240
    0, // BAsmP = 241
    0, // BAsmZ = 242
    0, // BC = 243
    0, // BCAsm = 244
    0, // BCR = 245
    0, // BCRAsm = 246
    0, // BCT = 247
    0, // BCTG = 248
    0, // BCTGR = 249
    0, // BCTR = 250
    Feature_FeatureExecutionHint | 0, // BPP = 251
    Feature_FeatureExecutionHint | 0, // BPRP = 252
    0, // BR = 253
    0, // BRAS = 254
    0, // BRASL = 255
    0, // BRAsmE = 256
    0, // BRAsmH = 257
    0, // BRAsmHE = 258
    0, // BRAsmL = 259
    0, // BRAsmLE = 260
    0, // BRAsmLH = 261
    0, // BRAsmM = 262
    0, // BRAsmNE = 263
    0, // BRAsmNH = 264
    0, // BRAsmNHE = 265
    0, // BRAsmNL = 266
    0, // BRAsmNLE = 267
    0, // BRAsmNLH = 268
    0, // BRAsmNM = 269
    0, // BRAsmNO = 270
    0, // BRAsmNP = 271
    0, // BRAsmNZ = 272
    0, // BRAsmO = 273
    0, // BRAsmP = 274
    0, // BRAsmZ = 275
    0, // BRC = 276
    0, // BRCAsm = 277
    0, // BRCL = 278
    0, // BRCLAsm = 279
    0, // BRCT = 280
    0, // BRCTG = 281
    Feature_FeatureHighWord | 0, // BRCTH = 282
    0, // BRXH = 283
    0, // BRXHG = 284
    0, // BRXLE = 285
    0, // BRXLG = 286
    0, // BSM = 287
    0, // BXH = 288
    0, // BXHG = 289
    0, // BXLE = 290
    0, // BXLEG = 291
    0, // C = 292
    0, // CDB = 293
    0, // CDBR = 294
    0, // CDFBR = 295
    Feature_FeatureFPExtension | 0, // CDFBRA = 296
    0, // CDGBR = 297
    Feature_FeatureFPExtension | 0, // CDGBRA = 298
    Feature_FeatureFPExtension | 0, // CDLFBR = 299
    Feature_FeatureFPExtension | 0, // CDLGBR = 300
    0, // CDS = 301
    0, // CDSG = 302
    0, // CDSY = 303
    0, // CEB = 304
    0, // CEBR = 305
    0, // CEFBR = 306
    Feature_FeatureFPExtension | 0, // CEFBRA = 307
    0, // CEGBR = 308
    Feature_FeatureFPExtension | 0, // CEGBRA = 309
    Feature_FeatureFPExtension | 0, // CELFBR = 310
    Feature_FeatureFPExtension | 0, // CELGBR = 311
    0, // CFDBR = 312
    Feature_FeatureFPExtension | 0, // CFDBRA = 313
    0, // CFEBR = 314
    Feature_FeatureFPExtension | 0, // CFEBRA = 315
    0, // CFI = 316
    Feature_FeatureHighWord | 0, // CFIMux = 317
    0, // CFXBR = 318
    Feature_FeatureFPExtension | 0, // CFXBRA = 319
    0, // CG = 320
    0, // CGDBR = 321
    Feature_FeatureFPExtension | 0, // CGDBRA = 322
    0, // CGEBR = 323
    Feature_FeatureFPExtension | 0, // CGEBRA = 324
    0, // CGF = 325
    0, // CGFI = 326
    0, // CGFR = 327
    0, // CGFRL = 328
    0, // CGH = 329
    0, // CGHI = 330
    0, // CGHRL = 331
    0, // CGHSI = 332
    0, // CGIB = 333
    0, // CGIBAsm = 334
    0, // CGIBAsmE = 335
    0, // CGIBAsmH = 336
    0, // CGIBAsmHE = 337
    0, // CGIBAsmL = 338
    0, // CGIBAsmLE = 339
    0, // CGIBAsmLH = 340
    0, // CGIBAsmNE = 341
    0, // CGIBAsmNH = 342
    0, // CGIBAsmNHE = 343
    0, // CGIBAsmNL = 344
    0, // CGIBAsmNLE = 345
    0, // CGIBAsmNLH = 346
    0, // CGIBCall = 347
    0, // CGIBReturn = 348
    0, // CGIJ = 349
    0, // CGIJAsm = 350
    0, // CGIJAsmE = 351
    0, // CGIJAsmH = 352
    0, // CGIJAsmHE = 353
    0, // CGIJAsmL = 354
    0, // CGIJAsmLE = 355
    0, // CGIJAsmLH = 356
    0, // CGIJAsmNE = 357
    0, // CGIJAsmNH = 358
    0, // CGIJAsmNHE = 359
    0, // CGIJAsmNL = 360
    0, // CGIJAsmNLE = 361
    0, // CGIJAsmNLH = 362
    0, // CGIT = 363
    0, // CGITAsm = 364
    0, // CGITAsmE = 365
    0, // CGITAsmH = 366
    0, // CGITAsmHE = 367
    0, // CGITAsmL = 368
    0, // CGITAsmLE = 369
    0, // CGITAsmLH = 370
    0, // CGITAsmNE = 371
    0, // CGITAsmNH = 372
    0, // CGITAsmNHE = 373
    0, // CGITAsmNL = 374
    0, // CGITAsmNLE = 375
    0, // CGITAsmNLH = 376
    0, // CGR = 377
    0, // CGRB = 378
    0, // CGRBAsm = 379
    0, // CGRBAsmE = 380
    0, // CGRBAsmH = 381
    0, // CGRBAsmHE = 382
    0, // CGRBAsmL = 383
    0, // CGRBAsmLE = 384
    0, // CGRBAsmLH = 385
    0, // CGRBAsmNE = 386
    0, // CGRBAsmNH = 387
    0, // CGRBAsmNHE = 388
    0, // CGRBAsmNL = 389
    0, // CGRBAsmNLE = 390
    0, // CGRBAsmNLH = 391
    0, // CGRBCall = 392
    0, // CGRBReturn = 393
    0, // CGRJ = 394
    0, // CGRJAsm = 395
    0, // CGRJAsmE = 396
    0, // CGRJAsmH = 397
    0, // CGRJAsmHE = 398
    0, // CGRJAsmL = 399
    0, // CGRJAsmLE = 400
    0, // CGRJAsmLH = 401
    0, // CGRJAsmNE = 402
    0, // CGRJAsmNH = 403
    0, // CGRJAsmNHE = 404
    0, // CGRJAsmNL = 405
    0, // CGRJAsmNLE = 406
    0, // CGRJAsmNLH = 407
    0, // CGRL = 408
    0, // CGRT = 409
    0, // CGRTAsm = 410
    0, // CGRTAsmE = 411
    0, // CGRTAsmH = 412
    0, // CGRTAsmHE = 413
    0, // CGRTAsmL = 414
    0, // CGRTAsmLE = 415
    0, // CGRTAsmLH = 416
    0, // CGRTAsmNE = 417
    0, // CGRTAsmNH = 418
    0, // CGRTAsmNHE = 419
    0, // CGRTAsmNL = 420
    0, // CGRTAsmNLE = 421
    0, // CGRTAsmNLH = 422
    0, // CGXBR = 423
    Feature_FeatureFPExtension | 0, // CGXBRA = 424
    0, // CH = 425
    Feature_FeatureHighWord | 0, // CHF = 426
    0, // CHHSI = 427
    0, // CHI = 428
    Feature_FeatureHighWord | 0, // CHIMux = 429
    0, // CHRL = 430
    0, // CHSI = 431
    0, // CHY = 432
    0, // CIB = 433
    0, // CIBAsm = 434
    0, // CIBAsmE = 435
    0, // CIBAsmH = 436
    0, // CIBAsmHE = 437
    0, // CIBAsmL = 438
    0, // CIBAsmLE = 439
    0, // CIBAsmLH = 440
    0, // CIBAsmNE = 441
    0, // CIBAsmNH = 442
    0, // CIBAsmNHE = 443
    0, // CIBAsmNL = 444
    0, // CIBAsmNLE = 445
    0, // CIBAsmNLH = 446
    0, // CIBCall = 447
    0, // CIBReturn = 448
    Feature_FeatureHighWord | 0, // CIH = 449
    0, // CIJ = 450
    0, // CIJAsm = 451
    0, // CIJAsmE = 452
    0, // CIJAsmH = 453
    0, // CIJAsmHE = 454
    0, // CIJAsmL = 455
    0, // CIJAsmLE = 456
    0, // CIJAsmLH = 457
    0, // CIJAsmNE = 458
    0, // CIJAsmNH = 459
    0, // CIJAsmNHE = 460
    0, // CIJAsmNL = 461
    0, // CIJAsmNLE = 462
    0, // CIJAsmNLH = 463
    0, // CIT = 464
    0, // CITAsm = 465
    0, // CITAsmE = 466
    0, // CITAsmH = 467
    0, // CITAsmHE = 468
    0, // CITAsmL = 469
    0, // CITAsmLE = 470
    0, // CITAsmLH = 471
    0, // CITAsmNE = 472
    0, // CITAsmNH = 473
    0, // CITAsmNHE = 474
    0, // CITAsmNL = 475
    0, // CITAsmNLE = 476
    0, // CITAsmNLH = 477
    0, // CL = 478
    0, // CLC = 479
    0, // CLCLoop = 480
    0, // CLCSequence = 481
    Feature_FeatureFPExtension | 0, // CLFDBR = 482
    Feature_FeatureFPExtension | 0, // CLFEBR = 483
    0, // CLFHSI = 484
    0, // CLFI = 485
    Feature_FeatureHighWord | 0, // CLFIMux = 486
    0, // CLFIT = 487
    0, // CLFITAsm = 488
    0, // CLFITAsmE = 489
    0, // CLFITAsmH = 490
    0, // CLFITAsmHE = 491
    0, // CLFITAsmL = 492
    0, // CLFITAsmLE = 493
    0, // CLFITAsmLH = 494
    0, // CLFITAsmNE = 495
    0, // CLFITAsmNH = 496
    0, // CLFITAsmNHE = 497
    0, // CLFITAsmNL = 498
    0, // CLFITAsmNLE = 499
    0, // CLFITAsmNLH = 500
    Feature_FeatureFPExtension | 0, // CLFXBR = 501
    0, // CLG = 502
    Feature_FeatureFPExtension | 0, // CLGDBR = 503
    Feature_FeatureFPExtension | 0, // CLGEBR = 504
    0, // CLGF = 505
    0, // CLGFI = 506
    0, // CLGFR = 507
    0, // CLGFRL = 508
    0, // CLGHRL = 509
    0, // CLGHSI = 510
    0, // CLGIB = 511
    0, // CLGIBAsm = 512
    0, // CLGIBAsmE = 513
    0, // CLGIBAsmH = 514
    0, // CLGIBAsmHE = 515
    0, // CLGIBAsmL = 516
    0, // CLGIBAsmLE = 517
    0, // CLGIBAsmLH = 518
    0, // CLGIBAsmNE = 519
    0, // CLGIBAsmNH = 520
    0, // CLGIBAsmNHE = 521
    0, // CLGIBAsmNL = 522
    0, // CLGIBAsmNLE = 523
    0, // CLGIBAsmNLH = 524
    0, // CLGIBCall = 525
    0, // CLGIBReturn = 526
    0, // CLGIJ = 527
    0, // CLGIJAsm = 528
    0, // CLGIJAsmE = 529
    0, // CLGIJAsmH = 530
    0, // CLGIJAsmHE = 531
    0, // CLGIJAsmL = 532
    0, // CLGIJAsmLE = 533
    0, // CLGIJAsmLH = 534
    0, // CLGIJAsmNE = 535
    0, // CLGIJAsmNH = 536
    0, // CLGIJAsmNHE = 537
    0, // CLGIJAsmNL = 538
    0, // CLGIJAsmNLE = 539
    0, // CLGIJAsmNLH = 540
    0, // CLGIT = 541
    0, // CLGITAsm = 542
    0, // CLGITAsmE = 543
    0, // CLGITAsmH = 544
    0, // CLGITAsmHE = 545
    0, // CLGITAsmL = 546
    0, // CLGITAsmLE = 547
    0, // CLGITAsmLH = 548
    0, // CLGITAsmNE = 549
    0, // CLGITAsmNH = 550
    0, // CLGITAsmNHE = 551
    0, // CLGITAsmNL = 552
    0, // CLGITAsmNLE = 553
    0, // CLGITAsmNLH = 554
    0, // CLGR = 555
    0, // CLGRB = 556
    0, // CLGRBAsm = 557
    0, // CLGRBAsmE = 558
    0, // CLGRBAsmH = 559
    0, // CLGRBAsmHE = 560
    0, // CLGRBAsmL = 561
    0, // CLGRBAsmLE = 562
    0, // CLGRBAsmLH = 563
    0, // CLGRBAsmNE = 564
    0, // CLGRBAsmNH = 565
    0, // CLGRBAsmNHE = 566
    0, // CLGRBAsmNL = 567
    0, // CLGRBAsmNLE = 568
    0, // CLGRBAsmNLH = 569
    0, // CLGRBCall = 570
    0, // CLGRBReturn = 571
    0, // CLGRJ = 572
    0, // CLGRJAsm = 573
    0, // CLGRJAsmE = 574
    0, // CLGRJAsmH = 575
    0, // CLGRJAsmHE = 576
    0, // CLGRJAsmL = 577
    0, // CLGRJAsmLE = 578
    0, // CLGRJAsmLH = 579
    0, // CLGRJAsmNE = 580
    0, // CLGRJAsmNH = 581
    0, // CLGRJAsmNHE = 582
    0, // CLGRJAsmNL = 583
    0, // CLGRJAsmNLE = 584
    0, // CLGRJAsmNLH = 585
    0, // CLGRL = 586
    0, // CLGRT = 587
    0, // CLGRTAsm = 588
    0, // CLGRTAsmE = 589
    0, // CLGRTAsmH = 590
    0, // CLGRTAsmHE = 591
    0, // CLGRTAsmL = 592
    0, // CLGRTAsmLE = 593
    0, // CLGRTAsmLH = 594
    0, // CLGRTAsmNE = 595
    0, // CLGRTAsmNH = 596
    0, // CLGRTAsmNHE = 597
    0, // CLGRTAsmNL = 598
    0, // CLGRTAsmNLE = 599
    0, // CLGRTAsmNLH = 600
    Feature_FeatureMiscellaneousExtensions | 0, // CLGT = 601
    Feature_FeatureMiscellaneousExtensions | 0, // CLGTAsm = 602
    Feature_FeatureMiscellaneousExtensions | 0, // CLGTAsmE = 603
    Feature_FeatureMiscellaneousExtensions | 0, // CLGTAsmH = 604
    Feature_FeatureMiscellaneousExtensions | 0, // CLGTAsmHE = 605
    Feature_FeatureMiscellaneousExtensions | 0, // CLGTAsmL = 606
    Feature_FeatureMiscellaneousExtensions | 0, // CLGTAsmLE = 607
    Feature_FeatureMiscellaneousExtensions | 0, // CLGTAsmLH = 608
    Feature_FeatureMiscellaneousExtensions | 0, // CLGTAsmNE = 609
    Feature_FeatureMiscellaneousExtensions | 0, // CLGTAsmNH = 610
    Feature_FeatureMiscellaneousExtensions | 0, // CLGTAsmNHE = 611
    Feature_FeatureMiscellaneousExtensions | 0, // CLGTAsmNL = 612
    Feature_FeatureMiscellaneousExtensions | 0, // CLGTAsmNLE = 613
    Feature_FeatureMiscellaneousExtensions | 0, // CLGTAsmNLH = 614
    Feature_FeatureFPExtension | 0, // CLGXBR = 615
    Feature_FeatureHighWord | 0, // CLHF = 616
    0, // CLHHSI = 617
    0, // CLHRL = 618
    0, // CLI = 619
    0, // CLIB = 620
    0, // CLIBAsm = 621
    0, // CLIBAsmE = 622
    0, // CLIBAsmH = 623
    0, // CLIBAsmHE = 624
    0, // CLIBAsmL = 625
    0, // CLIBAsmLE = 626
    0, // CLIBAsmLH = 627
    0, // CLIBAsmNE = 628
    0, // CLIBAsmNH = 629
    0, // CLIBAsmNHE = 630
    0, // CLIBAsmNL = 631
    0, // CLIBAsmNLE = 632
    0, // CLIBAsmNLH = 633
    0, // CLIBCall = 634
    0, // CLIBReturn = 635
    Feature_FeatureHighWord | 0, // CLIH = 636
    0, // CLIJ = 637
    0, // CLIJAsm = 638
    0, // CLIJAsmE = 639
    0, // CLIJAsmH = 640
    0, // CLIJAsmHE = 641
    0, // CLIJAsmL = 642
    0, // CLIJAsmLE = 643
    0, // CLIJAsmLH = 644
    0, // CLIJAsmNE = 645
    0, // CLIJAsmNH = 646
    0, // CLIJAsmNHE = 647
    0, // CLIJAsmNL = 648
    0, // CLIJAsmNLE = 649
    0, // CLIJAsmNLH = 650
    0, // CLIY = 651
    Feature_FeatureHighWord | 0, // CLMux = 652
    0, // CLR = 653
    0, // CLRB = 654
    0, // CLRBAsm = 655
    0, // CLRBAsmE = 656
    0, // CLRBAsmH = 657
    0, // CLRBAsmHE = 658
    0, // CLRBAsmL = 659
    0, // CLRBAsmLE = 660
    0, // CLRBAsmLH = 661
    0, // CLRBAsmNE = 662
    0, // CLRBAsmNH = 663
    0, // CLRBAsmNHE = 664
    0, // CLRBAsmNL = 665
    0, // CLRBAsmNLE = 666
    0, // CLRBAsmNLH = 667
    0, // CLRBCall = 668
    0, // CLRBReturn = 669
    0, // CLRJ = 670
    0, // CLRJAsm = 671
    0, // CLRJAsmE = 672
    0, // CLRJAsmH = 673
    0, // CLRJAsmHE = 674
    0, // CLRJAsmL = 675
    0, // CLRJAsmLE = 676
    0, // CLRJAsmLH = 677
    0, // CLRJAsmNE = 678
    0, // CLRJAsmNH = 679
    0, // CLRJAsmNHE = 680
    0, // CLRJAsmNL = 681
    0, // CLRJAsmNLE = 682
    0, // CLRJAsmNLH = 683
    0, // CLRL = 684
    0, // CLRT = 685
    0, // CLRTAsm = 686
    0, // CLRTAsmE = 687
    0, // CLRTAsmH = 688
    0, // CLRTAsmHE = 689
    0, // CLRTAsmL = 690
    0, // CLRTAsmLE = 691
    0, // CLRTAsmLH = 692
    0, // CLRTAsmNE = 693
    0, // CLRTAsmNH = 694
    0, // CLRTAsmNHE = 695
    0, // CLRTAsmNL = 696
    0, // CLRTAsmNLE = 697
    0, // CLRTAsmNLH = 698
    0, // CLST = 699
    0, // CLSTLoop = 700
    Feature_FeatureMiscellaneousExtensions | 0, // CLT = 701
    Feature_FeatureMiscellaneousExtensions | 0, // CLTAsm = 702
    Feature_FeatureMiscellaneousExtensions | 0, // CLTAsmE = 703
    Feature_FeatureMiscellaneousExtensions | 0, // CLTAsmH = 704
    Feature_FeatureMiscellaneousExtensions | 0, // CLTAsmHE = 705
    Feature_FeatureMiscellaneousExtensions | 0, // CLTAsmL = 706
    Feature_FeatureMiscellaneousExtensions | 0, // CLTAsmLE = 707
    Feature_FeatureMiscellaneousExtensions | 0, // CLTAsmLH = 708
    Feature_FeatureMiscellaneousExtensions | 0, // CLTAsmNE = 709
    Feature_FeatureMiscellaneousExtensions | 0, // CLTAsmNH = 710
    Feature_FeatureMiscellaneousExtensions | 0, // CLTAsmNHE = 711
    Feature_FeatureMiscellaneousExtensions | 0, // CLTAsmNL = 712
    Feature_FeatureMiscellaneousExtensions | 0, // CLTAsmNLE = 713
    Feature_FeatureMiscellaneousExtensions | 0, // CLTAsmNLH = 714
    0, // CLY = 715
    Feature_FeatureHighWord | 0, // CMux = 716
    0, // CPSDRdd = 717
    0, // CPSDRds = 718
    0, // CPSDRsd = 719
    0, // CPSDRss = 720
    0, // CPYA = 721
    0, // CR = 722
    0, // CRB = 723
    0, // CRBAsm = 724
    0, // CRBAsmE = 725
    0, // CRBAsmH = 726
    0, // CRBAsmHE = 727
    0, // CRBAsmL = 728
    0, // CRBAsmLE = 729
    0, // CRBAsmLH = 730
    0, // CRBAsmNE = 731
    0, // CRBAsmNH = 732
    0, // CRBAsmNHE = 733
    0, // CRBAsmNL = 734
    0, // CRBAsmNLE = 735
    0, // CRBAsmNLH = 736
    0, // CRBCall = 737
    0, // CRBReturn = 738
    0, // CRJ = 739
    0, // CRJAsm = 740
    0, // CRJAsmE = 741
    0, // CRJAsmH = 742
    0, // CRJAsmHE = 743
    0, // CRJAsmL = 744
    0, // CRJAsmLE = 745
    0, // CRJAsmLH = 746
    0, // CRJAsmNE = 747
    0, // CRJAsmNH = 748
    0, // CRJAsmNHE = 749
    0, // CRJAsmNL = 750
    0, // CRJAsmNLE = 751
    0, // CRJAsmNLH = 752
    0, // CRL = 753
    0, // CRT = 754
    0, // CRTAsm = 755
    0, // CRTAsmE = 756
    0, // CRTAsmH = 757
    0, // CRTAsmHE = 758
    0, // CRTAsmL = 759
    0, // CRTAsmLE = 760
    0, // CRTAsmLH = 761
    0, // CRTAsmNE = 762
    0, // CRTAsmNH = 763
    0, // CRTAsmNHE = 764
    0, // CRTAsmNL = 765
    0, // CRTAsmNLE = 766
    0, // CRTAsmNLH = 767
    0, // CS = 768
    0, // CSG = 769
    0, // CSST = 770
    0, // CSY = 771
    0, // CXBR = 772
    0, // CXFBR = 773
    Feature_FeatureFPExtension | 0, // CXFBRA = 774
    0, // CXGBR = 775
    Feature_FeatureFPExtension | 0, // CXGBRA = 776
    Feature_FeatureFPExtension | 0, // CXLFBR = 777
    Feature_FeatureFPExtension | 0, // CXLGBR = 778
    0, // CY = 779
    0, // CallBASR = 780
    0, // CallBCR = 781
    0, // CallBR = 782
    0, // CallBRASL = 783
    0, // CallBRCL = 784
    0, // CallJG = 785
    0, // CondReturn = 786
    0, // CondStore16 = 787
    0, // CondStore16Inv = 788
    Feature_FeatureHighWord | 0, // CondStore16Mux = 789
    Feature_FeatureHighWord | 0, // CondStore16MuxInv = 790
    0, // CondStore32 = 791
    0, // CondStore32Inv = 792
    Feature_FeatureLoadStoreOnCond2 | 0, // CondStore32Mux = 793
    Feature_FeatureLoadStoreOnCond2 | 0, // CondStore32MuxInv = 794
    0, // CondStore64 = 795
    0, // CondStore64Inv = 796
    0, // CondStore8 = 797
    0, // CondStore8Inv = 798
    Feature_FeatureHighWord | 0, // CondStore8Mux = 799
    Feature_FeatureHighWord | 0, // CondStore8MuxInv = 800
    0, // CondStoreF32 = 801
    0, // CondStoreF32Inv = 802
    0, // CondStoreF64 = 803
    0, // CondStoreF64Inv = 804
    0, // CondTrap = 805
    0, // DDB = 806
    0, // DDBR = 807
    0, // DEB = 808
    0, // DEBR = 809
    0, // DL = 810
    0, // DLG = 811
    0, // DLGR = 812
    0, // DLR = 813
    0, // DSG = 814
    0, // DSGF = 815
    0, // DSGFR = 816
    0, // DSGR = 817
    0, // DXBR = 818
    0, // EAR = 819
    0, // ECTG = 820
    0, // EFPC = 821
    Feature_FeatureTransactionalExecution | 0, // ETND = 822
    0, // EX = 823
    0, // EXRL = 824
    0, // FIDBR = 825
    Feature_FeatureFPExtension | 0, // FIDBRA = 826
    0, // FIEBR = 827
    Feature_FeatureFPExtension | 0, // FIEBRA = 828
    0, // FIXBR = 829
    Feature_FeatureFPExtension | 0, // FIXBRA = 830
    0, // FLOGR = 831
    0, // GOT = 832
    0, // IC = 833
    0, // IC32 = 834
    0, // IC32Y = 835
    0, // ICM = 836
    0, // ICMH = 837
    0, // ICMY = 838
    0, // ICY = 839
    Feature_FeatureHighWord | 0, // IIFMux = 840
    0, // IIHF = 841
    0, // IIHF64 = 842
    0, // IIHH = 843
    0, // IIHH64 = 844
    0, // IIHL = 845
    0, // IIHL64 = 846
    Feature_FeatureHighWord | 0, // IIHMux = 847
    0, // IILF = 848
    0, // IILF64 = 849
    0, // IILH = 850
    0, // IILH64 = 851
    0, // IILL = 852
    0, // IILL64 = 853
    Feature_FeatureHighWord | 0, // IILMux = 854
    0, // IPM = 855
    0, // InsnE = 856
    0, // InsnRI = 857
    0, // InsnRIE = 858
    0, // InsnRIL = 859
    0, // InsnRILU = 860
    0, // InsnRIS = 861
    0, // InsnRR = 862
    0, // InsnRRE = 863
    0, // InsnRRF = 864
    0, // InsnRRS = 865
    0, // InsnRS = 866
    0, // InsnRSE = 867
    0, // InsnRSI = 868
    0, // InsnRSY = 869
    0, // InsnRX = 870
    0, // InsnRXE = 871
    0, // InsnRXF = 872
    0, // InsnRXY = 873
    0, // InsnS = 874
    0, // InsnSI = 875
    0, // InsnSIL = 876
    0, // InsnSIY = 877
    0, // InsnSS = 878
    0, // InsnSSE = 879
    0, // InsnSSF = 880
    0, // J = 881
    0, // JAsmE = 882
    0, // JAsmH = 883
    0, // JAsmHE = 884
    0, // JAsmL = 885
    0, // JAsmLE = 886
    0, // JAsmLH = 887
    0, // JAsmM = 888
    0, // JAsmNE = 889
    0, // JAsmNH = 890
    0, // JAsmNHE = 891
    0, // JAsmNL = 892
    0, // JAsmNLE = 893
    0, // JAsmNLH = 894
    0, // JAsmNM = 895
    0, // JAsmNO = 896
    0, // JAsmNP = 897
    0, // JAsmNZ = 898
    0, // JAsmO = 899
    0, // JAsmP = 900
    0, // JAsmZ = 901
    0, // JG = 902
    0, // JGAsmE = 903
    0, // JGAsmH = 904
    0, // JGAsmHE = 905
    0, // JGAsmL = 906
    0, // JGAsmLE = 907
    0, // JGAsmLH = 908
    0, // JGAsmM = 909
    0, // JGAsmNE = 910
    0, // JGAsmNH = 911
    0, // JGAsmNHE = 912
    0, // JGAsmNL = 913
    0, // JGAsmNLE = 914
    0, // JGAsmNLH = 915
    0, // JGAsmNM = 916
    0, // JGAsmNO = 917
    0, // JGAsmNP = 918
    0, // JGAsmNZ = 919
    0, // JGAsmO = 920
    0, // JGAsmP = 921
    0, // JGAsmZ = 922
    0, // L = 923
    0, // L128 = 924
    0, // LA = 925
    Feature_FeatureInterlockedAccess1 | 0, // LAA = 926
    Feature_FeatureInterlockedAccess1 | 0, // LAAG = 927
    Feature_FeatureInterlockedAccess1 | 0, // LAAL = 928
    Feature_FeatureInterlockedAccess1 | 0, // LAALG = 929
    0, // LAE = 930
    0, // LAEY = 931
    0, // LAM = 932
    0, // LAMY = 933
    Feature_FeatureInterlockedAccess1 | 0, // LAN = 934
    Feature_FeatureInterlockedAccess1 | 0, // LANG = 935
    Feature_FeatureInterlockedAccess1 | 0, // LAO = 936
    Feature_FeatureInterlockedAccess1 | 0, // LAOG = 937
    0, // LARL = 938
    Feature_FeatureLoadAndTrap | 0, // LAT = 939
    Feature_FeatureInterlockedAccess1 | 0, // LAX = 940
    Feature_FeatureInterlockedAccess1 | 0, // LAXG = 941
    0, // LAY = 942
    0, // LB = 943
    Feature_FeatureHighWord | 0, // LBH = 944
    Feature_FeatureHighWord | 0, // LBMux = 945
    0, // LBR = 946
    Feature_FeatureVector | 0, // LCBB = 947
    0, // LCDBR = 948
    0, // LCDFR = 949
    0, // LCDFR_32 = 950
    0, // LCEBR = 951
    0, // LCGFR = 952
    0, // LCGR = 953
    0, // LCR = 954
    0, // LCXBR = 955
    0, // LD = 956
    0, // LDE32 = 957
    0, // LDEB = 958
    0, // LDEBR = 959
    0, // LDGR = 960
    0, // LDR = 961
    0, // LDR32 = 962
    0, // LDXBR = 963
    Feature_FeatureFPExtension | 0, // LDXBRA = 964
    0, // LDY = 965
    0, // LE = 966
    0, // LEDBR = 967
    Feature_FeatureFPExtension | 0, // LEDBRA = 968
    Feature_FeatureVector | 0, // LEFR = 969
    0, // LER = 970
    0, // LEXBR = 971
    Feature_FeatureFPExtension | 0, // LEXBRA = 972
    0, // LEY = 973
    0, // LFAS = 974
    Feature_FeatureVector | 0, // LFER = 975
    Feature_FeatureHighWord | 0, // LFH = 976
    Feature_FeatureLoadAndTrap | 0, // LFHAT = 977
    0, // LFPC = 978
    0, // LG = 979
    Feature_FeatureLoadAndTrap | 0, // LGAT = 980
    0, // LGB = 981
    0, // LGBR = 982
    0, // LGDR = 983
    0, // LGF = 984
    0, // LGFI = 985
    0, // LGFR = 986
    0, // LGFRL = 987
    0, // LGH = 988
    0, // LGHI = 989
    0, // LGHR = 990
    0, // LGHRL = 991
    0, // LGR = 992
    0, // LGRL = 993
    0, // LH = 994
    Feature_FeatureHighWord | 0, // LHH = 995
    0, // LHI = 996
    Feature_FeatureHighWord | 0, // LHIMux = 997
    Feature_FeatureHighWord | 0, // LHMux = 998
    0, // LHR = 999
    0, // LHRL = 1000
    0, // LHY = 1001
    0, // LLC = 1002
    Feature_FeatureHighWord | 0, // LLCH = 1003
    Feature_FeatureHighWord | 0, // LLCMux = 1004
    0, // LLCR = 1005
    Feature_FeatureHighWord | 0, // LLCRMux = 1006
    0, // LLGC = 1007
    0, // LLGCR = 1008
    0, // LLGF = 1009
    Feature_FeatureLoadAndTrap | 0, // LLGFAT = 1010
    0, // LLGFR = 1011
    0, // LLGFRL = 1012
    0, // LLGH = 1013
    0, // LLGHR = 1014
    0, // LLGHRL = 1015
    0, // LLGT = 1016
    Feature_FeatureLoadAndTrap | 0, // LLGTAT = 1017
    0, // LLGTR = 1018
    0, // LLH = 1019
    Feature_FeatureHighWord | 0, // LLHH = 1020
    Feature_FeatureHighWord | 0, // LLHMux = 1021
    0, // LLHR = 1022
    0, // LLHRL = 1023
    Feature_FeatureHighWord | 0, // LLHRMux = 1024
    0, // LLIHF = 1025
    0, // LLIHH = 1026
    0, // LLIHL = 1027
    0, // LLILF = 1028
    0, // LLILH = 1029
    0, // LLILL = 1030
    Feature_FeatureLoadAndZeroRightmostByte | 0, // LLZRGF = 1031
    0, // LM = 1032
    0, // LMG = 1033
    0, // LMH = 1034
    0, // LMY = 1035
    Feature_FeatureHighWord | 0, // LMux = 1036
    0, // LNDBR = 1037
    0, // LNDFR = 1038
    0, // LNDFR_32 = 1039
    0, // LNEBR = 1040
    0, // LNGFR = 1041
    0, // LNGR = 1042
    0, // LNR = 1043
    0, // LNXBR = 1044
    Feature_FeatureLoadStoreOnCond | 0, // LOC = 1045
    Feature_FeatureLoadStoreOnCond | 0, // LOCAsm = 1046
    Feature_FeatureLoadStoreOnCond | 0, // LOCAsmE = 1047
    Feature_FeatureLoadStoreOnCond | 0, // LOCAsmH = 1048
    Feature_FeatureLoadStoreOnCond | 0, // LOCAsmHE = 1049
    Feature_FeatureLoadStoreOnCond | 0, // LOCAsmL = 1050
    Feature_FeatureLoadStoreOnCond | 0, // LOCAsmLE = 1051
    Feature_FeatureLoadStoreOnCond | 0, // LOCAsmLH = 1052
    Feature_FeatureLoadStoreOnCond | 0, // LOCAsmM = 1053
    Feature_FeatureLoadStoreOnCond | 0, // LOCAsmNE = 1054
    Feature_FeatureLoadStoreOnCond | 0, // LOCAsmNH = 1055
    Feature_FeatureLoadStoreOnCond | 0, // LOCAsmNHE = 1056
    Feature_FeatureLoadStoreOnCond | 0, // LOCAsmNL = 1057
    Feature_FeatureLoadStoreOnCond | 0, // LOCAsmNLE = 1058
    Feature_FeatureLoadStoreOnCond | 0, // LOCAsmNLH = 1059
    Feature_FeatureLoadStoreOnCond | 0, // LOCAsmNM = 1060
    Feature_FeatureLoadStoreOnCond | 0, // LOCAsmNO = 1061
    Feature_FeatureLoadStoreOnCond | 0, // LOCAsmNP = 1062
    Feature_FeatureLoadStoreOnCond | 0, // LOCAsmNZ = 1063
    Feature_FeatureLoadStoreOnCond | 0, // LOCAsmO = 1064
    Feature_FeatureLoadStoreOnCond | 0, // LOCAsmP = 1065
    Feature_FeatureLoadStoreOnCond | 0, // LOCAsmZ = 1066
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFH = 1067
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHAsm = 1068
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHAsmE = 1069
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHAsmH = 1070
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHAsmHE = 1071
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHAsmL = 1072
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHAsmLE = 1073
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHAsmLH = 1074
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHAsmM = 1075
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHAsmNE = 1076
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHAsmNH = 1077
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHAsmNHE = 1078
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHAsmNL = 1079
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHAsmNLE = 1080
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHAsmNLH = 1081
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHAsmNM = 1082
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHAsmNO = 1083
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHAsmNP = 1084
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHAsmNZ = 1085
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHAsmO = 1086
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHAsmP = 1087
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHAsmZ = 1088
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHR = 1089
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHRAsm = 1090
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHRAsmE = 1091
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHRAsmH = 1092
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHRAsmHE = 1093
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHRAsmL = 1094
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHRAsmLE = 1095
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHRAsmLH = 1096
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHRAsmM = 1097
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHRAsmNE = 1098
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHRAsmNH = 1099
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHRAsmNHE = 1100
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHRAsmNL = 1101
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHRAsmNLE = 1102
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHRAsmNLH = 1103
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHRAsmNM = 1104
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHRAsmNO = 1105
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHRAsmNP = 1106
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHRAsmNZ = 1107
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHRAsmO = 1108
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHRAsmP = 1109
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCFHRAsmZ = 1110
    Feature_FeatureLoadStoreOnCond | 0, // LOCG = 1111
    Feature_FeatureLoadStoreOnCond | 0, // LOCGAsm = 1112
    Feature_FeatureLoadStoreOnCond | 0, // LOCGAsmE = 1113
    Feature_FeatureLoadStoreOnCond | 0, // LOCGAsmH = 1114
    Feature_FeatureLoadStoreOnCond | 0, // LOCGAsmHE = 1115
    Feature_FeatureLoadStoreOnCond | 0, // LOCGAsmL = 1116
    Feature_FeatureLoadStoreOnCond | 0, // LOCGAsmLE = 1117
    Feature_FeatureLoadStoreOnCond | 0, // LOCGAsmLH = 1118
    Feature_FeatureLoadStoreOnCond | 0, // LOCGAsmM = 1119
    Feature_FeatureLoadStoreOnCond | 0, // LOCGAsmNE = 1120
    Feature_FeatureLoadStoreOnCond | 0, // LOCGAsmNH = 1121
    Feature_FeatureLoadStoreOnCond | 0, // LOCGAsmNHE = 1122
    Feature_FeatureLoadStoreOnCond | 0, // LOCGAsmNL = 1123
    Feature_FeatureLoadStoreOnCond | 0, // LOCGAsmNLE = 1124
    Feature_FeatureLoadStoreOnCond | 0, // LOCGAsmNLH = 1125
    Feature_FeatureLoadStoreOnCond | 0, // LOCGAsmNM = 1126
    Feature_FeatureLoadStoreOnCond | 0, // LOCGAsmNO = 1127
    Feature_FeatureLoadStoreOnCond | 0, // LOCGAsmNP = 1128
    Feature_FeatureLoadStoreOnCond | 0, // LOCGAsmNZ = 1129
    Feature_FeatureLoadStoreOnCond | 0, // LOCGAsmO = 1130
    Feature_FeatureLoadStoreOnCond | 0, // LOCGAsmP = 1131
    Feature_FeatureLoadStoreOnCond | 0, // LOCGAsmZ = 1132
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCGHI = 1133
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCGHIAsm = 1134
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCGHIAsmE = 1135
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCGHIAsmH = 1136
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCGHIAsmHE = 1137
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCGHIAsmL = 1138
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCGHIAsmLE = 1139
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCGHIAsmLH = 1140
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCGHIAsmM = 1141
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCGHIAsmNE = 1142
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCGHIAsmNH = 1143
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCGHIAsmNHE = 1144
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCGHIAsmNL = 1145
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCGHIAsmNLE = 1146
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCGHIAsmNLH = 1147
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCGHIAsmNM = 1148
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCGHIAsmNO = 1149
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCGHIAsmNP = 1150
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCGHIAsmNZ = 1151
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCGHIAsmO = 1152
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCGHIAsmP = 1153
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCGHIAsmZ = 1154
    Feature_FeatureLoadStoreOnCond | 0, // LOCGR = 1155
    Feature_FeatureLoadStoreOnCond | 0, // LOCGRAsm = 1156
    Feature_FeatureLoadStoreOnCond | 0, // LOCGRAsmE = 1157
    Feature_FeatureLoadStoreOnCond | 0, // LOCGRAsmH = 1158
    Feature_FeatureLoadStoreOnCond | 0, // LOCGRAsmHE = 1159
    Feature_FeatureLoadStoreOnCond | 0, // LOCGRAsmL = 1160
    Feature_FeatureLoadStoreOnCond | 0, // LOCGRAsmLE = 1161
    Feature_FeatureLoadStoreOnCond | 0, // LOCGRAsmLH = 1162
    Feature_FeatureLoadStoreOnCond | 0, // LOCGRAsmM = 1163
    Feature_FeatureLoadStoreOnCond | 0, // LOCGRAsmNE = 1164
    Feature_FeatureLoadStoreOnCond | 0, // LOCGRAsmNH = 1165
    Feature_FeatureLoadStoreOnCond | 0, // LOCGRAsmNHE = 1166
    Feature_FeatureLoadStoreOnCond | 0, // LOCGRAsmNL = 1167
    Feature_FeatureLoadStoreOnCond | 0, // LOCGRAsmNLE = 1168
    Feature_FeatureLoadStoreOnCond | 0, // LOCGRAsmNLH = 1169
    Feature_FeatureLoadStoreOnCond | 0, // LOCGRAsmNM = 1170
    Feature_FeatureLoadStoreOnCond | 0, // LOCGRAsmNO = 1171
    Feature_FeatureLoadStoreOnCond | 0, // LOCGRAsmNP = 1172
    Feature_FeatureLoadStoreOnCond | 0, // LOCGRAsmNZ = 1173
    Feature_FeatureLoadStoreOnCond | 0, // LOCGRAsmO = 1174
    Feature_FeatureLoadStoreOnCond | 0, // LOCGRAsmP = 1175
    Feature_FeatureLoadStoreOnCond | 0, // LOCGRAsmZ = 1176
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHHI = 1177
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHHIAsm = 1178
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHHIAsmE = 1179
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHHIAsmH = 1180
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHHIAsmHE = 1181
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHHIAsmL = 1182
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHHIAsmLE = 1183
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHHIAsmLH = 1184
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHHIAsmM = 1185
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHHIAsmNE = 1186
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHHIAsmNH = 1187
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHHIAsmNHE = 1188
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHHIAsmNL = 1189
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHHIAsmNLE = 1190
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHHIAsmNLH = 1191
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHHIAsmNM = 1192
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHHIAsmNO = 1193
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHHIAsmNP = 1194
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHHIAsmNZ = 1195
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHHIAsmO = 1196
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHHIAsmP = 1197
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHHIAsmZ = 1198
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHI = 1199
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHIAsm = 1200
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHIAsmE = 1201
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHIAsmH = 1202
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHIAsmHE = 1203
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHIAsmL = 1204
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHIAsmLE = 1205
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHIAsmLH = 1206
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHIAsmM = 1207
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHIAsmNE = 1208
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHIAsmNH = 1209
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHIAsmNHE = 1210
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHIAsmNL = 1211
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHIAsmNLE = 1212
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHIAsmNLH = 1213
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHIAsmNM = 1214
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHIAsmNO = 1215
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHIAsmNP = 1216
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHIAsmNZ = 1217
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHIAsmO = 1218
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHIAsmP = 1219
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHIAsmZ = 1220
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCHIMux = 1221
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCMux = 1222
    Feature_FeatureLoadStoreOnCond | 0, // LOCR = 1223
    Feature_FeatureLoadStoreOnCond | 0, // LOCRAsm = 1224
    Feature_FeatureLoadStoreOnCond | 0, // LOCRAsmE = 1225
    Feature_FeatureLoadStoreOnCond | 0, // LOCRAsmH = 1226
    Feature_FeatureLoadStoreOnCond | 0, // LOCRAsmHE = 1227
    Feature_FeatureLoadStoreOnCond | 0, // LOCRAsmL = 1228
    Feature_FeatureLoadStoreOnCond | 0, // LOCRAsmLE = 1229
    Feature_FeatureLoadStoreOnCond | 0, // LOCRAsmLH = 1230
    Feature_FeatureLoadStoreOnCond | 0, // LOCRAsmM = 1231
    Feature_FeatureLoadStoreOnCond | 0, // LOCRAsmNE = 1232
    Feature_FeatureLoadStoreOnCond | 0, // LOCRAsmNH = 1233
    Feature_FeatureLoadStoreOnCond | 0, // LOCRAsmNHE = 1234
    Feature_FeatureLoadStoreOnCond | 0, // LOCRAsmNL = 1235
    Feature_FeatureLoadStoreOnCond | 0, // LOCRAsmNLE = 1236
    Feature_FeatureLoadStoreOnCond | 0, // LOCRAsmNLH = 1237
    Feature_FeatureLoadStoreOnCond | 0, // LOCRAsmNM = 1238
    Feature_FeatureLoadStoreOnCond | 0, // LOCRAsmNO = 1239
    Feature_FeatureLoadStoreOnCond | 0, // LOCRAsmNP = 1240
    Feature_FeatureLoadStoreOnCond | 0, // LOCRAsmNZ = 1241
    Feature_FeatureLoadStoreOnCond | 0, // LOCRAsmO = 1242
    Feature_FeatureLoadStoreOnCond | 0, // LOCRAsmP = 1243
    Feature_FeatureLoadStoreOnCond | 0, // LOCRAsmZ = 1244
    Feature_FeatureLoadStoreOnCond2 | 0, // LOCRMux = 1245
    Feature_FeatureInterlockedAccess1 | 0, // LPD = 1246
    0, // LPDBR = 1247
    0, // LPDFR = 1248
    0, // LPDFR_32 = 1249
    Feature_FeatureInterlockedAccess1 | 0, // LPDG = 1250
    0, // LPEBR = 1251
    0, // LPGFR = 1252
    0, // LPGR = 1253
    0, // LPQ = 1254
    0, // LPR = 1255
    0, // LPXBR = 1256
    0, // LR = 1257
    0, // LRL = 1258
    Feature_FeatureHighWord | 0, // LRMux = 1259
    0, // LRV = 1260
    0, // LRVG = 1261
    0, // LRVGR = 1262
    0, // LRVH = 1263
    0, // LRVR = 1264
    0, // LT = 1265
    0, // LTDBR = 1266
    0, // LTDBRCompare = 1267
    0, // LTDBRCompare_VecPseudo = 1268
    0, // LTEBR = 1269
    0, // LTEBRCompare = 1270
    0, // LTEBRCompare_VecPseudo = 1271
    0, // LTG = 1272
    0, // LTGF = 1273
    0, // LTGFR = 1274
    0, // LTGR = 1275
    0, // LTR = 1276
    0, // LTXBR = 1277
    0, // LTXBRCompare = 1278
    0, // LTXBRCompare_VecPseudo = 1279
    0, // LX = 1280
    0, // LXDB = 1281
    0, // LXDBR = 1282
    0, // LXEB = 1283
    0, // LXEBR = 1284
    0, // LXR = 1285
    0, // LY = 1286
    0, // LZDR = 1287
    0, // LZER = 1288
    Feature_FeatureLoadAndZeroRightmostByte | 0, // LZRF = 1289
    Feature_FeatureLoadAndZeroRightmostByte | 0, // LZRG = 1290
    0, // LZXR = 1291
    0, // MADB = 1292
    0, // MADBR = 1293
    0, // MAEB = 1294
    0, // MAEBR = 1295
    0, // MDB = 1296
    0, // MDBR = 1297
    0, // MDEB = 1298
    0, // MDEBR = 1299
    0, // MEEB = 1300
    0, // MEEBR = 1301
    0, // MGHI = 1302
    0, // MH = 1303
    0, // MHI = 1304
    0, // MHY = 1305
    0, // MLG = 1306
    0, // MLGR = 1307
    0, // MS = 1308
    0, // MSDB = 1309
    0, // MSDBR = 1310
    0, // MSEB = 1311
    0, // MSEBR = 1312
    0, // MSFI = 1313
    0, // MSG = 1314
    0, // MSGF = 1315
    0, // MSGFI = 1316
    0, // MSGFR = 1317
    0, // MSGR = 1318
    0, // MSR = 1319
    0, // MSY = 1320
    0, // MVC = 1321
    0, // MVCK = 1322
    0, // MVCLoop = 1323
    0, // MVCSequence = 1324
    0, // MVGHI = 1325
    0, // MVHHI = 1326
    0, // MVHI = 1327
    0, // MVI = 1328
    0, // MVIY = 1329
    0, // MVST = 1330
    0, // MVSTLoop = 1331
    0, // MXBR = 1332
    0, // MXDB = 1333
    0, // MXDBR = 1334
    0, // MemBarrier = 1335
    0, // N = 1336
    0, // NC = 1337
    0, // NCLoop = 1338
    0, // NCSequence = 1339
    0, // NG = 1340
    0, // NGR = 1341
    Feature_FeatureDistinctOps | 0, // NGRK = 1342
    0, // NI = 1343
    Feature_FeatureExecutionHint | 0, // NIAI = 1344
    Feature_FeatureHighWord | 0, // NIFMux = 1345
    0, // NIHF = 1346
    0, // NIHF64 = 1347
    0, // NIHH = 1348
    0, // NIHH64 = 1349
    0, // NIHL = 1350
    0, // NIHL64 = 1351
    Feature_FeatureHighWord | 0, // NIHMux = 1352
    0, // NILF = 1353
    0, // NILF64 = 1354
    0, // NILH = 1355
    0, // NILH64 = 1356
    0, // NILL = 1357
    0, // NILL64 = 1358
    Feature_FeatureHighWord | 0, // NILMux = 1359
    0, // NIY = 1360
    0, // NR = 1361
    Feature_FeatureDistinctOps | 0, // NRK = 1362
    Feature_FeatureTransactionalExecution | 0, // NTSTG = 1363
    0, // NY = 1364
    0, // O = 1365
    0, // OC = 1366
    0, // OCLoop = 1367
    0, // OCSequence = 1368
    0, // OG = 1369
    0, // OGR = 1370
    Feature_FeatureDistinctOps | 0, // OGRK = 1371
    0, // OI = 1372
    Feature_FeatureHighWord | 0, // OIFMux = 1373
    0, // OIHF = 1374
    0, // OIHF64 = 1375
    0, // OIHH = 1376
    0, // OIHH64 = 1377
    0, // OIHL = 1378
    0, // OIHL64 = 1379
    Feature_FeatureHighWord | 0, // OIHMux = 1380
    0, // OILF = 1381
    0, // OILF64 = 1382
    0, // OILH = 1383
    0, // OILH64 = 1384
    0, // OILL = 1385
    0, // OILL64 = 1386
    Feature_FeatureHighWord | 0, // OILMux = 1387
    0, // OIY = 1388
    0, // OR = 1389
    Feature_FeatureDistinctOps | 0, // ORK = 1390
    0, // OY = 1391
    0, // PFD = 1392
    0, // PFDRL = 1393
    0, // PLO = 1394
    Feature_FeaturePopulationCount | 0, // POPCNT = 1395
    Feature_FeatureProcessorAssist | 0, // PPA = 1396
    0, // PR = 1397
    0, // RISBG = 1398
    0, // RISBG32 = 1399
    Feature_FeatureMiscellaneousExtensions | 0, // RISBGN = 1400
    Feature_FeatureHighWord | 0, // RISBHG = 1401
    Feature_FeatureHighWord | 0, // RISBHH = 1402
    Feature_FeatureHighWord | 0, // RISBHL = 1403
    Feature_FeatureHighWord | 0, // RISBLG = 1404
    Feature_FeatureHighWord | 0, // RISBLH = 1405
    Feature_FeatureHighWord | 0, // RISBLL = 1406
    Feature_FeatureHighWord | 0, // RISBMux = 1407
    0, // RLL = 1408
    0, // RLLG = 1409
    0, // RNSBG = 1410
    0, // ROSBG = 1411
    0, // RXSBG = 1412
    0, // Return = 1413
    0, // S = 1414
    0, // SAM24 = 1415
    0, // SAM31 = 1416
    0, // SAM64 = 1417
    0, // SAR = 1418
    0, // SDB = 1419
    0, // SDBR = 1420
    0, // SEB = 1421
    0, // SEBR = 1422
    0, // SFASR = 1423
    0, // SFPC = 1424
    0, // SG = 1425
    0, // SGF = 1426
    0, // SGFR = 1427
    0, // SGR = 1428
    Feature_FeatureDistinctOps | 0, // SGRK = 1429
    0, // SH = 1430
    0, // SHY = 1431
    0, // SL = 1432
    0, // SLA = 1433
    Feature_FeatureDistinctOps | 0, // SLAK = 1434
    0, // SLB = 1435
    0, // SLBG = 1436
    0, // SLBGR = 1437
    0, // SLBR = 1438
    0, // SLFI = 1439
    0, // SLG = 1440
    0, // SLGF = 1441
    0, // SLGFI = 1442
    0, // SLGFR = 1443
    0, // SLGR = 1444
    Feature_FeatureDistinctOps | 0, // SLGRK = 1445
    0, // SLL = 1446
    0, // SLLG = 1447
    Feature_FeatureDistinctOps | 0, // SLLK = 1448
    0, // SLR = 1449
    Feature_FeatureDistinctOps | 0, // SLRK = 1450
    0, // SLY = 1451
    0, // SPM = 1452
    0, // SQDB = 1453
    0, // SQDBR = 1454
    0, // SQEB = 1455
    0, // SQEBR = 1456
    0, // SQXBR = 1457
    0, // SR = 1458
    0, // SRA = 1459
    0, // SRAG = 1460
    Feature_FeatureDistinctOps | 0, // SRAK = 1461
    Feature_FeatureDistinctOps | 0, // SRK = 1462
    0, // SRL = 1463
    0, // SRLG = 1464
    Feature_FeatureDistinctOps | 0, // SRLK = 1465
    0, // SRNM = 1466
    Feature_FeatureFPExtension | 0, // SRNMB = 1467
    0, // SRNMT = 1468
    0, // SRST = 1469
    0, // SRSTLoop = 1470
    0, // ST = 1471
    0, // ST128 = 1472
    0, // STAM = 1473
    0, // STAMY = 1474
    0, // STC = 1475
    Feature_FeatureHighWord | 0, // STCH = 1476
    0, // STCK = 1477
    0, // STCKE = 1478
    0, // STCKF = 1479
    Feature_FeatureHighWord | 0, // STCMux = 1480
    0, // STCY = 1481
    0, // STD = 1482
    0, // STDY = 1483
    0, // STE = 1484
    0, // STEY = 1485
    Feature_FeatureHighWord | 0, // STFH = 1486
    0, // STFLE = 1487
    0, // STFPC = 1488
    0, // STG = 1489
    0, // STGRL = 1490
    0, // STH = 1491
    Feature_FeatureHighWord | 0, // STHH = 1492
    Feature_FeatureHighWord | 0, // STHMux = 1493
    0, // STHRL = 1494
    0, // STHY = 1495
    0, // STM = 1496
    0, // STMG = 1497
    0, // STMH = 1498
    0, // STMY = 1499
    Feature_FeatureHighWord | 0, // STMux = 1500
    Feature_FeatureLoadStoreOnCond | 0, // STOC = 1501
    Feature_FeatureLoadStoreOnCond | 0, // STOCAsm = 1502
    Feature_FeatureLoadStoreOnCond | 0, // STOCAsmE = 1503
    Feature_FeatureLoadStoreOnCond | 0, // STOCAsmH = 1504
    Feature_FeatureLoadStoreOnCond | 0, // STOCAsmHE = 1505
    Feature_FeatureLoadStoreOnCond | 0, // STOCAsmL = 1506
    Feature_FeatureLoadStoreOnCond | 0, // STOCAsmLE = 1507
    Feature_FeatureLoadStoreOnCond | 0, // STOCAsmLH = 1508
    Feature_FeatureLoadStoreOnCond | 0, // STOCAsmM = 1509
    Feature_FeatureLoadStoreOnCond | 0, // STOCAsmNE = 1510
    Feature_FeatureLoadStoreOnCond | 0, // STOCAsmNH = 1511
    Feature_FeatureLoadStoreOnCond | 0, // STOCAsmNHE = 1512
    Feature_FeatureLoadStoreOnCond | 0, // STOCAsmNL = 1513
    Feature_FeatureLoadStoreOnCond | 0, // STOCAsmNLE = 1514
    Feature_FeatureLoadStoreOnCond | 0, // STOCAsmNLH = 1515
    Feature_FeatureLoadStoreOnCond | 0, // STOCAsmNM = 1516
    Feature_FeatureLoadStoreOnCond | 0, // STOCAsmNO = 1517
    Feature_FeatureLoadStoreOnCond | 0, // STOCAsmNP = 1518
    Feature_FeatureLoadStoreOnCond | 0, // STOCAsmNZ = 1519
    Feature_FeatureLoadStoreOnCond | 0, // STOCAsmO = 1520
    Feature_FeatureLoadStoreOnCond | 0, // STOCAsmP = 1521
    Feature_FeatureLoadStoreOnCond | 0, // STOCAsmZ = 1522
    Feature_FeatureLoadStoreOnCond2 | 0, // STOCFH = 1523
    Feature_FeatureLoadStoreOnCond2 | 0, // STOCFHAsm = 1524
    Feature_FeatureLoadStoreOnCond2 | 0, // STOCFHAsmE = 1525
    Feature_FeatureLoadStoreOnCond2 | 0, // STOCFHAsmH = 1526
    Feature_FeatureLoadStoreOnCond2 | 0, // STOCFHAsmHE = 1527
    Feature_FeatureLoadStoreOnCond2 | 0, // STOCFHAsmL = 1528
    Feature_FeatureLoadStoreOnCond2 | 0, // STOCFHAsmLE = 1529
    Feature_FeatureLoadStoreOnCond2 | 0, // STOCFHAsmLH = 1530
    Feature_FeatureLoadStoreOnCond2 | 0, // STOCFHAsmM = 1531
    Feature_FeatureLoadStoreOnCond2 | 0, // STOCFHAsmNE = 1532
    Feature_FeatureLoadStoreOnCond2 | 0, // STOCFHAsmNH = 1533
    Feature_FeatureLoadStoreOnCond2 | 0, // STOCFHAsmNHE = 1534
    Feature_FeatureLoadStoreOnCond2 | 0, // STOCFHAsmNL = 1535
    Feature_FeatureLoadStoreOnCond2 | 0, // STOCFHAsmNLE = 1536
    Feature_FeatureLoadStoreOnCond2 | 0, // STOCFHAsmNLH = 1537
    Feature_FeatureLoadStoreOnCond2 | 0, // STOCFHAsmNM = 1538
    Feature_FeatureLoadStoreOnCond2 | 0, // STOCFHAsmNO = 1539
    Feature_FeatureLoadStoreOnCond2 | 0, // STOCFHAsmNP = 1540
    Feature_FeatureLoadStoreOnCond2 | 0, // STOCFHAsmNZ = 1541
    Feature_FeatureLoadStoreOnCond2 | 0, // STOCFHAsmO = 1542
    Feature_FeatureLoadStoreOnCond2 | 0, // STOCFHAsmP = 1543
    Feature_FeatureLoadStoreOnCond2 | 0, // STOCFHAsmZ = 1544
    Feature_FeatureLoadStoreOnCond | 0, // STOCG = 1545
    Feature_FeatureLoadStoreOnCond | 0, // STOCGAsm = 1546
    Feature_FeatureLoadStoreOnCond | 0, // STOCGAsmE = 1547
    Feature_FeatureLoadStoreOnCond | 0, // STOCGAsmH = 1548
    Feature_FeatureLoadStoreOnCond | 0, // STOCGAsmHE = 1549
    Feature_FeatureLoadStoreOnCond | 0, // STOCGAsmL = 1550
    Feature_FeatureLoadStoreOnCond | 0, // STOCGAsmLE = 1551
    Feature_FeatureLoadStoreOnCond | 0, // STOCGAsmLH = 1552
    Feature_FeatureLoadStoreOnCond | 0, // STOCGAsmM = 1553
    Feature_FeatureLoadStoreOnCond | 0, // STOCGAsmNE = 1554
    Feature_FeatureLoadStoreOnCond | 0, // STOCGAsmNH = 1555
    Feature_FeatureLoadStoreOnCond | 0, // STOCGAsmNHE = 1556
    Feature_FeatureLoadStoreOnCond | 0, // STOCGAsmNL = 1557
    Feature_FeatureLoadStoreOnCond | 0, // STOCGAsmNLE = 1558
    Feature_FeatureLoadStoreOnCond | 0, // STOCGAsmNLH = 1559
    Feature_FeatureLoadStoreOnCond | 0, // STOCGAsmNM = 1560
    Feature_FeatureLoadStoreOnCond | 0, // STOCGAsmNO = 1561
    Feature_FeatureLoadStoreOnCond | 0, // STOCGAsmNP = 1562
    Feature_FeatureLoadStoreOnCond | 0, // STOCGAsmNZ = 1563
    Feature_FeatureLoadStoreOnCond | 0, // STOCGAsmO = 1564
    Feature_FeatureLoadStoreOnCond | 0, // STOCGAsmP = 1565
    Feature_FeatureLoadStoreOnCond | 0, // STOCGAsmZ = 1566
    Feature_FeatureLoadStoreOnCond2 | 0, // STOCMux = 1567
    0, // STPQ = 1568
    0, // STRAG = 1569
    0, // STRL = 1570
    0, // STRV = 1571
    0, // STRVG = 1572
    0, // STRVH = 1573
    0, // STX = 1574
    0, // STY = 1575
    0, // SVC = 1576
    0, // SXBR = 1577
    0, // SY = 1578
    0, // Select32 = 1579
    Feature_FeatureHighWord | 0, // Select32Mux = 1580
    0, // Select64 = 1581
    0, // SelectF128 = 1582
    0, // SelectF32 = 1583
    0, // SelectF64 = 1584
    0, // Serialize = 1585
    Feature_FeatureTransactionalExecution | 0, // TABORT = 1586
    0, // TAM = 1587
    Feature_FeatureTransactionalExecution | 0, // TBEGIN = 1588
    Feature_FeatureTransactionalExecution | 0, // TBEGINC = 1589
    Feature_FeatureTransactionalExecution | 0, // TBEGIN_nofloat = 1590
    0, // TCDB = 1591
    0, // TCEB = 1592
    0, // TCXB = 1593
    Feature_FeatureTransactionalExecution | 0, // TEND = 1594
    0, // TLS_GDCALL = 1595
    0, // TLS_LDCALL = 1596
    0, // TM = 1597
    0, // TMHH = 1598
    0, // TMHH64 = 1599
    0, // TMHL = 1600
    0, // TMHL64 = 1601
    Feature_FeatureHighWord | 0, // TMHMux = 1602
    0, // TMLH = 1603
    0, // TMLH64 = 1604
    0, // TMLL = 1605
    0, // TMLL64 = 1606
    Feature_FeatureHighWord | 0, // TMLMux = 1607
    0, // TMY = 1608
    0, // TS = 1609
    0, // Trap = 1610
    Feature_FeatureVector | 0, // VA = 1611
    Feature_FeatureVector | 0, // VAB = 1612
    Feature_FeatureVector | 0, // VAC = 1613
    Feature_FeatureVector | 0, // VACC = 1614
    Feature_FeatureVector | 0, // VACCB = 1615
    Feature_FeatureVector | 0, // VACCC = 1616
    Feature_FeatureVector | 0, // VACCCQ = 1617
    Feature_FeatureVector | 0, // VACCF = 1618
    Feature_FeatureVector | 0, // VACCG = 1619
    Feature_FeatureVector | 0, // VACCH = 1620
    Feature_FeatureVector | 0, // VACCQ = 1621
    Feature_FeatureVector | 0, // VACQ = 1622
    Feature_FeatureVector | 0, // VAF = 1623
    Feature_FeatureVector | 0, // VAG = 1624
    Feature_FeatureVector | 0, // VAH = 1625
    Feature_FeatureVector | 0, // VAQ = 1626
    Feature_FeatureVector | 0, // VAVG = 1627
    Feature_FeatureVector | 0, // VAVGB = 1628
    Feature_FeatureVector | 0, // VAVGF = 1629
    Feature_FeatureVector | 0, // VAVGG = 1630
    Feature_FeatureVector | 0, // VAVGH = 1631
    Feature_FeatureVector | 0, // VAVGL = 1632
    Feature_FeatureVector | 0, // VAVGLB = 1633
    Feature_FeatureVector | 0, // VAVGLF = 1634
    Feature_FeatureVector | 0, // VAVGLG = 1635
    Feature_FeatureVector | 0, // VAVGLH = 1636
    Feature_FeatureVector | 0, // VCDG = 1637
    Feature_FeatureVector | 0, // VCDGB = 1638
    Feature_FeatureVector | 0, // VCDLG = 1639
    Feature_FeatureVector | 0, // VCDLGB = 1640
    Feature_FeatureVector | 0, // VCEQ = 1641
    Feature_FeatureVector | 0, // VCEQB = 1642
    Feature_FeatureVector | 0, // VCEQBS = 1643
    Feature_FeatureVector | 0, // VCEQF = 1644
    Feature_FeatureVector | 0, // VCEQFS = 1645
    Feature_FeatureVector | 0, // VCEQG = 1646
    Feature_FeatureVector | 0, // VCEQGS = 1647
    Feature_FeatureVector | 0, // VCEQH = 1648
    Feature_FeatureVector | 0, // VCEQHS = 1649
    Feature_FeatureVector | 0, // VCGD = 1650
    Feature_FeatureVector | 0, // VCGDB = 1651
    Feature_FeatureVector | 0, // VCH = 1652
    Feature_FeatureVector | 0, // VCHB = 1653
    Feature_FeatureVector | 0, // VCHBS = 1654
    Feature_FeatureVector | 0, // VCHF = 1655
    Feature_FeatureVector | 0, // VCHFS = 1656
    Feature_FeatureVector | 0, // VCHG = 1657
    Feature_FeatureVector | 0, // VCHGS = 1658
    Feature_FeatureVector | 0, // VCHH = 1659
    Feature_FeatureVector | 0, // VCHHS = 1660
    Feature_FeatureVector | 0, // VCHL = 1661
    Feature_FeatureVector | 0, // VCHLB = 1662
    Feature_FeatureVector | 0, // VCHLBS = 1663
    Feature_FeatureVector | 0, // VCHLF = 1664
    Feature_FeatureVector | 0, // VCHLFS = 1665
    Feature_FeatureVector | 0, // VCHLG = 1666
    Feature_FeatureVector | 0, // VCHLGS = 1667
    Feature_FeatureVector | 0, // VCHLH = 1668
    Feature_FeatureVector | 0, // VCHLHS = 1669
    Feature_FeatureVector | 0, // VCKSM = 1670
    Feature_FeatureVector | 0, // VCLGD = 1671
    Feature_FeatureVector | 0, // VCLGDB = 1672
    Feature_FeatureVector | 0, // VCLZ = 1673
    Feature_FeatureVector | 0, // VCLZB = 1674
    Feature_FeatureVector | 0, // VCLZF = 1675
    Feature_FeatureVector | 0, // VCLZG = 1676
    Feature_FeatureVector | 0, // VCLZH = 1677
    Feature_FeatureVector | 0, // VCTZ = 1678
    Feature_FeatureVector | 0, // VCTZB = 1679
    Feature_FeatureVector | 0, // VCTZF = 1680
    Feature_FeatureVector | 0, // VCTZG = 1681
    Feature_FeatureVector | 0, // VCTZH = 1682
    Feature_FeatureVector | 0, // VEC = 1683
    Feature_FeatureVector | 0, // VECB = 1684
    Feature_FeatureVector | 0, // VECF = 1685
    Feature_FeatureVector | 0, // VECG = 1686
    Feature_FeatureVector | 0, // VECH = 1687
    Feature_FeatureVector | 0, // VECL = 1688
    Feature_FeatureVector | 0, // VECLB = 1689
    Feature_FeatureVector | 0, // VECLF = 1690
    Feature_FeatureVector | 0, // VECLG = 1691
    Feature_FeatureVector | 0, // VECLH = 1692
    Feature_FeatureVector | 0, // VERIM = 1693
    Feature_FeatureVector | 0, // VERIMB = 1694
    Feature_FeatureVector | 0, // VERIMF = 1695
    Feature_FeatureVector | 0, // VERIMG = 1696
    Feature_FeatureVector | 0, // VERIMH = 1697
    Feature_FeatureVector | 0, // VERLL = 1698
    Feature_FeatureVector | 0, // VERLLB = 1699
    Feature_FeatureVector | 0, // VERLLF = 1700
    Feature_FeatureVector | 0, // VERLLG = 1701
    Feature_FeatureVector | 0, // VERLLH = 1702
    Feature_FeatureVector | 0, // VERLLV = 1703
    Feature_FeatureVector | 0, // VERLLVB = 1704
    Feature_FeatureVector | 0, // VERLLVF = 1705
    Feature_FeatureVector | 0, // VERLLVG = 1706
    Feature_FeatureVector | 0, // VERLLVH = 1707
    Feature_FeatureVector | 0, // VESL = 1708
    Feature_FeatureVector | 0, // VESLB = 1709
    Feature_FeatureVector | 0, // VESLF = 1710
    Feature_FeatureVector | 0, // VESLG = 1711
    Feature_FeatureVector | 0, // VESLH = 1712
    Feature_FeatureVector | 0, // VESLV = 1713
    Feature_FeatureVector | 0, // VESLVB = 1714
    Feature_FeatureVector | 0, // VESLVF = 1715
    Feature_FeatureVector | 0, // VESLVG = 1716
    Feature_FeatureVector | 0, // VESLVH = 1717
    Feature_FeatureVector | 0, // VESRA = 1718
    Feature_FeatureVector | 0, // VESRAB = 1719
    Feature_FeatureVector | 0, // VESRAF = 1720
    Feature_FeatureVector | 0, // VESRAG = 1721
    Feature_FeatureVector | 0, // VESRAH = 1722
    Feature_FeatureVector | 0, // VESRAV = 1723
    Feature_FeatureVector | 0, // VESRAVB = 1724
    Feature_FeatureVector | 0, // VESRAVF = 1725
    Feature_FeatureVector | 0, // VESRAVG = 1726
    Feature_FeatureVector | 0, // VESRAVH = 1727
    Feature_FeatureVector | 0, // VESRL = 1728
    Feature_FeatureVector | 0, // VESRLB = 1729
    Feature_FeatureVector | 0, // VESRLF = 1730
    Feature_FeatureVector | 0, // VESRLG = 1731
    Feature_FeatureVector | 0, // VESRLH = 1732
    Feature_FeatureVector | 0, // VESRLV = 1733
    Feature_FeatureVector | 0, // VESRLVB = 1734
    Feature_FeatureVector | 0, // VESRLVF = 1735
    Feature_FeatureVector | 0, // VESRLVG = 1736
    Feature_FeatureVector | 0, // VESRLVH = 1737
    Feature_FeatureVector | 0, // VFA = 1738
    Feature_FeatureVector | 0, // VFADB = 1739
    Feature_FeatureVector | 0, // VFAE = 1740
    Feature_FeatureVector | 0, // VFAEB = 1741
    Feature_FeatureVector | 0, // VFAEBS = 1742
    Feature_FeatureVector | 0, // VFAEF = 1743
    Feature_FeatureVector | 0, // VFAEFS = 1744
    Feature_FeatureVector | 0, // VFAEH = 1745
    Feature_FeatureVector | 0, // VFAEHS = 1746
    Feature_FeatureVector | 0, // VFAEZB = 1747
    Feature_FeatureVector | 0, // VFAEZBS = 1748
    Feature_FeatureVector | 0, // VFAEZF = 1749
    Feature_FeatureVector | 0, // VFAEZFS = 1750
    Feature_FeatureVector | 0, // VFAEZH = 1751
    Feature_FeatureVector | 0, // VFAEZHS = 1752
    Feature_FeatureVector | 0, // VFCE = 1753
    Feature_FeatureVector | 0, // VFCEDB = 1754
    Feature_FeatureVector | 0, // VFCEDBS = 1755
    Feature_FeatureVector | 0, // VFCH = 1756
    Feature_FeatureVector | 0, // VFCHDB = 1757
    Feature_FeatureVector | 0, // VFCHDBS = 1758
    Feature_FeatureVector | 0, // VFCHE = 1759
    Feature_FeatureVector | 0, // VFCHEDB = 1760
    Feature_FeatureVector | 0, // VFCHEDBS = 1761
    Feature_FeatureVector | 0, // VFD = 1762
    Feature_FeatureVector | 0, // VFDDB = 1763
    Feature_FeatureVector | 0, // VFEE = 1764
    Feature_FeatureVector | 0, // VFEEB = 1765
    Feature_FeatureVector | 0, // VFEEBS = 1766
    Feature_FeatureVector | 0, // VFEEF = 1767
    Feature_FeatureVector | 0, // VFEEFS = 1768
    Feature_FeatureVector | 0, // VFEEH = 1769
    Feature_FeatureVector | 0, // VFEEHS = 1770
    Feature_FeatureVector | 0, // VFEEZB = 1771
    Feature_FeatureVector | 0, // VFEEZBS = 1772
    Feature_FeatureVector | 0, // VFEEZF = 1773
    Feature_FeatureVector | 0, // VFEEZFS = 1774
    Feature_FeatureVector | 0, // VFEEZH = 1775
    Feature_FeatureVector | 0, // VFEEZHS = 1776
    Feature_FeatureVector | 0, // VFENE = 1777
    Feature_FeatureVector | 0, // VFENEB = 1778
    Feature_FeatureVector | 0, // VFENEBS = 1779
    Feature_FeatureVector | 0, // VFENEF = 1780
    Feature_FeatureVector | 0, // VFENEFS = 1781
    Feature_FeatureVector | 0, // VFENEH = 1782
    Feature_FeatureVector | 0, // VFENEHS = 1783
    Feature_FeatureVector | 0, // VFENEZB = 1784
    Feature_FeatureVector | 0, // VFENEZBS = 1785
    Feature_FeatureVector | 0, // VFENEZF = 1786
    Feature_FeatureVector | 0, // VFENEZFS = 1787
    Feature_FeatureVector | 0, // VFENEZH = 1788
    Feature_FeatureVector | 0, // VFENEZHS = 1789
    Feature_FeatureVector | 0, // VFI = 1790
    Feature_FeatureVector | 0, // VFIDB = 1791
    Feature_FeatureVector | 0, // VFLCDB = 1792
    Feature_FeatureVector | 0, // VFLNDB = 1793
    Feature_FeatureVector | 0, // VFLPDB = 1794
    Feature_FeatureVector | 0, // VFM = 1795
    Feature_FeatureVector | 0, // VFMA = 1796
    Feature_FeatureVector | 0, // VFMADB = 1797
    Feature_FeatureVector | 0, // VFMDB = 1798
    Feature_FeatureVector | 0, // VFMS = 1799
    Feature_FeatureVector | 0, // VFMSDB = 1800
    Feature_FeatureVector | 0, // VFPSO = 1801
    Feature_FeatureVector | 0, // VFPSODB = 1802
    Feature_FeatureVector | 0, // VFS = 1803
    Feature_FeatureVector | 0, // VFSDB = 1804
    Feature_FeatureVector | 0, // VFSQ = 1805
    Feature_FeatureVector | 0, // VFSQDB = 1806
    Feature_FeatureVector | 0, // VFTCI = 1807
    Feature_FeatureVector | 0, // VFTCIDB = 1808
    Feature_FeatureVector | 0, // VGBM = 1809
    Feature_FeatureVector | 0, // VGEF = 1810
    Feature_FeatureVector | 0, // VGEG = 1811
    Feature_FeatureVector | 0, // VGFM = 1812
    Feature_FeatureVector | 0, // VGFMA = 1813
    Feature_FeatureVector | 0, // VGFMAB = 1814
    Feature_FeatureVector | 0, // VGFMAF = 1815
    Feature_FeatureVector | 0, // VGFMAG = 1816
    Feature_FeatureVector | 0, // VGFMAH = 1817
    Feature_FeatureVector | 0, // VGFMB = 1818
    Feature_FeatureVector | 0, // VGFMF = 1819
    Feature_FeatureVector | 0, // VGFMG = 1820
    Feature_FeatureVector | 0, // VGFMH = 1821
    Feature_FeatureVector | 0, // VGM = 1822
    Feature_FeatureVector | 0, // VGMB = 1823
    Feature_FeatureVector | 0, // VGMF = 1824
    Feature_FeatureVector | 0, // VGMG = 1825
    Feature_FeatureVector | 0, // VGMH = 1826
    Feature_FeatureVector | 0, // VISTR = 1827
    Feature_FeatureVector | 0, // VISTRB = 1828
    Feature_FeatureVector | 0, // VISTRBS = 1829
    Feature_FeatureVector | 0, // VISTRF = 1830
    Feature_FeatureVector | 0, // VISTRFS = 1831
    Feature_FeatureVector | 0, // VISTRH = 1832
    Feature_FeatureVector | 0, // VISTRHS = 1833
    Feature_FeatureVector | 0, // VL = 1834
    Feature_FeatureVector | 0, // VL32 = 1835
    Feature_FeatureVector | 0, // VL64 = 1836
    Feature_FeatureVector | 0, // VLBB = 1837
    Feature_FeatureVector | 0, // VLC = 1838
    Feature_FeatureVector | 0, // VLCB = 1839
    Feature_FeatureVector | 0, // VLCF = 1840
    Feature_FeatureVector | 0, // VLCG = 1841
    Feature_FeatureVector | 0, // VLCH = 1842
    Feature_FeatureVector | 0, // VLDE = 1843
    Feature_FeatureVector | 0, // VLDEB = 1844
    Feature_FeatureVector | 0, // VLEB = 1845
    Feature_FeatureVector | 0, // VLED = 1846
    Feature_FeatureVector | 0, // VLEDB = 1847
    Feature_FeatureVector | 0, // VLEF = 1848
    Feature_FeatureVector | 0, // VLEG = 1849
    Feature_FeatureVector | 0, // VLEH = 1850
    Feature_FeatureVector | 0, // VLEIB = 1851
    Feature_FeatureVector | 0, // VLEIF = 1852
    Feature_FeatureVector | 0, // VLEIG = 1853
    Feature_FeatureVector | 0, // VLEIH = 1854
    Feature_FeatureVector | 0, // VLGV = 1855
    Feature_FeatureVector | 0, // VLGVB = 1856
    Feature_FeatureVector | 0, // VLGVF = 1857
    Feature_FeatureVector | 0, // VLGVG = 1858
    Feature_FeatureVector | 0, // VLGVH = 1859
    Feature_FeatureVector | 0, // VLL = 1860
    Feature_FeatureVector | 0, // VLLEZ = 1861
    Feature_FeatureVector | 0, // VLLEZB = 1862
    Feature_FeatureVector | 0, // VLLEZF = 1863
    Feature_FeatureVector | 0, // VLLEZG = 1864
    Feature_FeatureVector | 0, // VLLEZH = 1865
    Feature_FeatureVector | 0, // VLM = 1866
    Feature_FeatureVector | 0, // VLP = 1867
    Feature_FeatureVector | 0, // VLPB = 1868
    Feature_FeatureVector | 0, // VLPF = 1869
    Feature_FeatureVector | 0, // VLPG = 1870
    Feature_FeatureVector | 0, // VLPH = 1871
    Feature_FeatureVector | 0, // VLR = 1872
    Feature_FeatureVector | 0, // VLR32 = 1873
    Feature_FeatureVector | 0, // VLR64 = 1874
    Feature_FeatureVector | 0, // VLREP = 1875
    Feature_FeatureVector | 0, // VLREPB = 1876
    Feature_FeatureVector | 0, // VLREPF = 1877
    Feature_FeatureVector | 0, // VLREPG = 1878
    Feature_FeatureVector | 0, // VLREPH = 1879
    Feature_FeatureVector | 0, // VLVG = 1880
    Feature_FeatureVector | 0, // VLVGB = 1881
    Feature_FeatureVector | 0, // VLVGF = 1882
    Feature_FeatureVector | 0, // VLVGG = 1883
    Feature_FeatureVector | 0, // VLVGH = 1884
    Feature_FeatureVector | 0, // VLVGP = 1885
    Feature_FeatureVector | 0, // VLVGP32 = 1886
    Feature_FeatureVector | 0, // VMAE = 1887
    Feature_FeatureVector | 0, // VMAEB = 1888
    Feature_FeatureVector | 0, // VMAEF = 1889
    Feature_FeatureVector | 0, // VMAEH = 1890
    Feature_FeatureVector | 0, // VMAH = 1891
    Feature_FeatureVector | 0, // VMAHB = 1892
    Feature_FeatureVector | 0, // VMAHF = 1893
    Feature_FeatureVector | 0, // VMAHH = 1894
    Feature_FeatureVector | 0, // VMAL = 1895
    Feature_FeatureVector | 0, // VMALB = 1896
    Feature_FeatureVector | 0, // VMALE = 1897
    Feature_FeatureVector | 0, // VMALEB = 1898
    Feature_FeatureVector | 0, // VMALEF = 1899
    Feature_FeatureVector | 0, // VMALEH = 1900
    Feature_FeatureVector | 0, // VMALF = 1901
    Feature_FeatureVector | 0, // VMALH = 1902
    Feature_FeatureVector | 0, // VMALHB = 1903
    Feature_FeatureVector | 0, // VMALHF = 1904
    Feature_FeatureVector | 0, // VMALHH = 1905
    Feature_FeatureVector | 0, // VMALHW = 1906
    Feature_FeatureVector | 0, // VMALO = 1907
    Feature_FeatureVector | 0, // VMALOB = 1908
    Feature_FeatureVector | 0, // VMALOF = 1909
    Feature_FeatureVector | 0, // VMALOH = 1910
    Feature_FeatureVector | 0, // VMAO = 1911
    Feature_FeatureVector | 0, // VMAOB = 1912
    Feature_FeatureVector | 0, // VMAOF = 1913
    Feature_FeatureVector | 0, // VMAOH = 1914
    Feature_FeatureVector | 0, // VME = 1915
    Feature_FeatureVector | 0, // VMEB = 1916
    Feature_FeatureVector | 0, // VMEF = 1917
    Feature_FeatureVector | 0, // VMEH = 1918
    Feature_FeatureVector | 0, // VMH = 1919
    Feature_FeatureVector | 0, // VMHB = 1920
    Feature_FeatureVector | 0, // VMHF = 1921
    Feature_FeatureVector | 0, // VMHH = 1922
    Feature_FeatureVector | 0, // VML = 1923
    Feature_FeatureVector | 0, // VMLB = 1924
    Feature_FeatureVector | 0, // VMLE = 1925
    Feature_FeatureVector | 0, // VMLEB = 1926
    Feature_FeatureVector | 0, // VMLEF = 1927
    Feature_FeatureVector | 0, // VMLEH = 1928
    Feature_FeatureVector | 0, // VMLF = 1929
    Feature_FeatureVector | 0, // VMLH = 1930
    Feature_FeatureVector | 0, // VMLHB = 1931
    Feature_FeatureVector | 0, // VMLHF = 1932
    Feature_FeatureVector | 0, // VMLHH = 1933
    Feature_FeatureVector | 0, // VMLHW = 1934
    Feature_FeatureVector | 0, // VMLO = 1935
    Feature_FeatureVector | 0, // VMLOB = 1936
    Feature_FeatureVector | 0, // VMLOF = 1937
    Feature_FeatureVector | 0, // VMLOH = 1938
    Feature_FeatureVector | 0, // VMN = 1939
    Feature_FeatureVector | 0, // VMNB = 1940
    Feature_FeatureVector | 0, // VMNF = 1941
    Feature_FeatureVector | 0, // VMNG = 1942
    Feature_FeatureVector | 0, // VMNH = 1943
    Feature_FeatureVector | 0, // VMNL = 1944
    Feature_FeatureVector | 0, // VMNLB = 1945
    Feature_FeatureVector | 0, // VMNLF = 1946
    Feature_FeatureVector | 0, // VMNLG = 1947
    Feature_FeatureVector | 0, // VMNLH = 1948
    Feature_FeatureVector | 0, // VMO = 1949
    Feature_FeatureVector | 0, // VMOB = 1950
    Feature_FeatureVector | 0, // VMOF = 1951
    Feature_FeatureVector | 0, // VMOH = 1952
    Feature_FeatureVector | 0, // VMRH = 1953
    Feature_FeatureVector | 0, // VMRHB = 1954
    Feature_FeatureVector | 0, // VMRHF = 1955
    Feature_FeatureVector | 0, // VMRHG = 1956
    Feature_FeatureVector | 0, // VMRHH = 1957
    Feature_FeatureVector | 0, // VMRL = 1958
    Feature_FeatureVector | 0, // VMRLB = 1959
    Feature_FeatureVector | 0, // VMRLF = 1960
    Feature_FeatureVector | 0, // VMRLG = 1961
    Feature_FeatureVector | 0, // VMRLH = 1962
    Feature_FeatureVector | 0, // VMX = 1963
    Feature_FeatureVector | 0, // VMXB = 1964
    Feature_FeatureVector | 0, // VMXF = 1965
    Feature_FeatureVector | 0, // VMXG = 1966
    Feature_FeatureVector | 0, // VMXH = 1967
    Feature_FeatureVector | 0, // VMXL = 1968
    Feature_FeatureVector | 0, // VMXLB = 1969
    Feature_FeatureVector | 0, // VMXLF = 1970
    Feature_FeatureVector | 0, // VMXLG = 1971
    Feature_FeatureVector | 0, // VMXLH = 1972
    Feature_FeatureVector | 0, // VN = 1973
    Feature_FeatureVector | 0, // VNC = 1974
    Feature_FeatureVector | 0, // VNO = 1975
    Feature_FeatureVector | 0, // VO = 1976
    Feature_FeatureVector | 0, // VONE = 1977
    Feature_FeatureVector | 0, // VPDI = 1978
    Feature_FeatureVector | 0, // VPERM = 1979
    Feature_FeatureVector | 0, // VPK = 1980
    Feature_FeatureVector | 0, // VPKF = 1981
    Feature_FeatureVector | 0, // VPKG = 1982
    Feature_FeatureVector | 0, // VPKH = 1983
    Feature_FeatureVector | 0, // VPKLS = 1984
    Feature_FeatureVector | 0, // VPKLSF = 1985
    Feature_FeatureVector | 0, // VPKLSFS = 1986
    Feature_FeatureVector | 0, // VPKLSG = 1987
    Feature_FeatureVector | 0, // VPKLSGS = 1988
    Feature_FeatureVector | 0, // VPKLSH = 1989
    Feature_FeatureVector | 0, // VPKLSHS = 1990
    Feature_FeatureVector | 0, // VPKS = 1991
    Feature_FeatureVector | 0, // VPKSF = 1992
    Feature_FeatureVector | 0, // VPKSFS = 1993
    Feature_FeatureVector | 0, // VPKSG = 1994
    Feature_FeatureVector | 0, // VPKSGS = 1995
    Feature_FeatureVector | 0, // VPKSH = 1996
    Feature_FeatureVector | 0, // VPKSHS = 1997
    Feature_FeatureVector | 0, // VPOPCT = 1998
    Feature_FeatureVector | 0, // VREP = 1999
    Feature_FeatureVector | 0, // VREPB = 2000
    Feature_FeatureVector | 0, // VREPF = 2001
    Feature_FeatureVector | 0, // VREPG = 2002
    Feature_FeatureVector | 0, // VREPH = 2003
    Feature_FeatureVector | 0, // VREPI = 2004
    Feature_FeatureVector | 0, // VREPIB = 2005
    Feature_FeatureVector | 0, // VREPIF = 2006
    Feature_FeatureVector | 0, // VREPIG = 2007
    Feature_FeatureVector | 0, // VREPIH = 2008
    Feature_FeatureVector | 0, // VS = 2009
    Feature_FeatureVector | 0, // VSB = 2010
    Feature_FeatureVector | 0, // VSBCBI = 2011
    Feature_FeatureVector | 0, // VSBCBIQ = 2012
    Feature_FeatureVector | 0, // VSBI = 2013
    Feature_FeatureVector | 0, // VSBIQ = 2014
    Feature_FeatureVector | 0, // VSCBI = 2015
    Feature_FeatureVector | 0, // VSCBIB = 2016
    Feature_FeatureVector | 0, // VSCBIF = 2017
    Feature_FeatureVector | 0, // VSCBIG = 2018
    Feature_FeatureVector | 0, // VSCBIH = 2019
    Feature_FeatureVector | 0, // VSCBIQ = 2020
    Feature_FeatureVector | 0, // VSCEF = 2021
    Feature_FeatureVector | 0, // VSCEG = 2022
    Feature_FeatureVector | 0, // VSEG = 2023
    Feature_FeatureVector | 0, // VSEGB = 2024
    Feature_FeatureVector | 0, // VSEGF = 2025
    Feature_FeatureVector | 0, // VSEGH = 2026
    Feature_FeatureVector | 0, // VSEL = 2027
    Feature_FeatureVector | 0, // VSF = 2028
    Feature_FeatureVector | 0, // VSG = 2029
    Feature_FeatureVector | 0, // VSH = 2030
    Feature_FeatureVector | 0, // VSL = 2031
    Feature_FeatureVector | 0, // VSLB = 2032
    Feature_FeatureVector | 0, // VSLDB = 2033
    Feature_FeatureVector | 0, // VSQ = 2034
    Feature_FeatureVector | 0, // VSRA = 2035
    Feature_FeatureVector | 0, // VSRAB = 2036
    Feature_FeatureVector | 0, // VSRL = 2037
    Feature_FeatureVector | 0, // VSRLB = 2038
    Feature_FeatureVector | 0, // VST = 2039
    Feature_FeatureVector | 0, // VST32 = 2040
    Feature_FeatureVector | 0, // VST64 = 2041
    Feature_FeatureVector | 0, // VSTEB = 2042
    Feature_FeatureVector | 0, // VSTEF = 2043
    Feature_FeatureVector | 0, // VSTEG = 2044
    Feature_FeatureVector | 0, // VSTEH = 2045
    Feature_FeatureVector | 0, // VSTL = 2046
    Feature_FeatureVector | 0, // VSTM = 2047
    Feature_FeatureVector | 0, // VSTRC = 2048
    Feature_FeatureVector | 0, // VSTRCB = 2049
    Feature_FeatureVector | 0, // VSTRCBS = 2050
    Feature_FeatureVector | 0, // VSTRCF = 2051
    Feature_FeatureVector | 0, // VSTRCFS = 2052
    Feature_FeatureVector | 0, // VSTRCH = 2053
    Feature_FeatureVector | 0, // VSTRCHS = 2054
    Feature_FeatureVector | 0, // VSTRCZB = 2055
    Feature_FeatureVector | 0, // VSTRCZBS = 2056
    Feature_FeatureVector | 0, // VSTRCZF = 2057
    Feature_FeatureVector | 0, // VSTRCZFS = 2058
    Feature_FeatureVector | 0, // VSTRCZH = 2059
    Feature_FeatureVector | 0, // VSTRCZHS = 2060
    Feature_FeatureVector | 0, // VSUM = 2061
    Feature_FeatureVector | 0, // VSUMB = 2062
    Feature_FeatureVector | 0, // VSUMG = 2063
    Feature_FeatureVector | 0, // VSUMGF = 2064
    Feature_FeatureVector | 0, // VSUMGH = 2065
    Feature_FeatureVector | 0, // VSUMH = 2066
    Feature_FeatureVector | 0, // VSUMQ = 2067
    Feature_FeatureVector | 0, // VSUMQF = 2068
    Feature_FeatureVector | 0, // VSUMQG = 2069
    Feature_FeatureVector | 0, // VTM = 2070
    Feature_FeatureVector | 0, // VUPH = 2071
    Feature_FeatureVector | 0, // VUPHB = 2072
    Feature_FeatureVector | 0, // VUPHF = 2073
    Feature_FeatureVector | 0, // VUPHH = 2074
    Feature_FeatureVector | 0, // VUPL = 2075
    Feature_FeatureVector | 0, // VUPLB = 2076
    Feature_FeatureVector | 0, // VUPLF = 2077
    Feature_FeatureVector | 0, // VUPLH = 2078
    Feature_FeatureVector | 0, // VUPLHB = 2079
    Feature_FeatureVector | 0, // VUPLHF = 2080
    Feature_FeatureVector | 0, // VUPLHH = 2081
    Feature_FeatureVector | 0, // VUPLHW = 2082
    Feature_FeatureVector | 0, // VUPLL = 2083
    Feature_FeatureVector | 0, // VUPLLB = 2084
    Feature_FeatureVector | 0, // VUPLLF = 2085
    Feature_FeatureVector | 0, // VUPLLH = 2086
    Feature_FeatureVector | 0, // VX = 2087
    Feature_FeatureVector | 0, // VZERO = 2088
    Feature_FeatureVector | 0, // WCDGB = 2089
    Feature_FeatureVector | 0, // WCDLGB = 2090
    Feature_FeatureVector | 0, // WCGDB = 2091
    Feature_FeatureVector | 0, // WCLGDB = 2092
    Feature_FeatureVector | 0, // WFADB = 2093
    Feature_FeatureVector | 0, // WFC = 2094
    Feature_FeatureVector | 0, // WFCDB = 2095
    Feature_FeatureVector | 0, // WFCEDB = 2096
    Feature_FeatureVector | 0, // WFCEDBS = 2097
    Feature_FeatureVector | 0, // WFCHDB = 2098
    Feature_FeatureVector | 0, // WFCHDBS = 2099
    Feature_FeatureVector | 0, // WFCHEDB = 2100
    Feature_FeatureVector | 0, // WFCHEDBS = 2101
    Feature_FeatureVector | 0, // WFDDB = 2102
    Feature_FeatureVector | 0, // WFIDB = 2103
    Feature_FeatureVector | 0, // WFK = 2104
    Feature_FeatureVector | 0, // WFKDB = 2105
    Feature_FeatureVector | 0, // WFLCDB = 2106
    Feature_FeatureVector | 0, // WFLNDB = 2107
    Feature_FeatureVector | 0, // WFLPDB = 2108
    Feature_FeatureVector | 0, // WFMADB = 2109
    Feature_FeatureVector | 0, // WFMDB = 2110
    Feature_FeatureVector | 0, // WFMSDB = 2111
    Feature_FeatureVector | 0, // WFPSODB = 2112
    Feature_FeatureVector | 0, // WFSDB = 2113
    Feature_FeatureVector | 0, // WFSQDB = 2114
    Feature_FeatureVector | 0, // WFTCIDB = 2115
    Feature_FeatureVector | 0, // WLDEB = 2116
    Feature_FeatureVector | 0, // WLEDB = 2117
    0, // X = 2118
    0, // XC = 2119
    0, // XCLoop = 2120
    0, // XCSequence = 2121
    0, // XG = 2122
    0, // XGR = 2123
    Feature_FeatureDistinctOps | 0, // XGRK = 2124
    0, // XI = 2125
    Feature_FeatureHighWord | 0, // XIFMux = 2126
    0, // XIHF = 2127
    0, // XIHF64 = 2128
    0, // XILF = 2129
    0, // XILF64 = 2130
    0, // XIY = 2131
    0, // XR = 2132
    Feature_FeatureDistinctOps | 0, // XRK = 2133
    0, // XY = 2134
    0, // ZEXT128_32 = 2135
    0, // ZEXT128_64 = 2136
  };

  assert(Inst.getOpcode() < 2137);
  uint64_t MissingFeatures =
      (AvailableFeatures & RequiredFeatures[Inst.getOpcode()]) ^
      RequiredFeatures[Inst.getOpcode()];
  if (MissingFeatures) {
    std::ostringstream Msg;
    Msg << "Attempting to emit " << MCII.getName(Inst.getOpcode()).str()
        << " instruction but the ";
    for (unsigned i = 0; i < 8 * sizeof(MissingFeatures); ++i)
      if (MissingFeatures & (1ULL << i))
        Msg << SubtargetFeatureNames[i] << " ";
    Msg << "predicate(s) are not met";
    report_fatal_error(Msg.str());
  }
#else
// Silence unused variable warning on targets that don't use MCII for other purposes (e.g. BPF).
(void)MCII;
#endif // NDEBUG
}
#endif
