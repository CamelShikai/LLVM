/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void SystemZInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ 'l', 'a', 'a', 9, 0,
  /* 5 */ 'v', 'f', 'a', 9, 0,
  /* 10 */ 's', 'l', 'a', 9, 0,
  /* 15 */ 'v', 'g', 'f', 'm', 'a', 9, 0,
  /* 22 */ 'v', 'f', 'm', 'a', 9, 0,
  /* 28 */ 'p', 'p', 'a', 9, 0,
  /* 33 */ 'l', 'e', 'd', 'b', 'r', 'a', 9, 0,
  /* 41 */ 'c', 'f', 'd', 'b', 'r', 'a', 9, 0,
  /* 49 */ 'c', 'g', 'd', 'b', 'r', 'a', 9, 0,
  /* 57 */ 'f', 'i', 'd', 'b', 'r', 'a', 9, 0,
  /* 65 */ 'c', 'f', 'e', 'b', 'r', 'a', 9, 0,
  /* 73 */ 'c', 'g', 'e', 'b', 'r', 'a', 9, 0,
  /* 81 */ 'f', 'i', 'e', 'b', 'r', 'a', 9, 0,
  /* 89 */ 'c', 'd', 'f', 'b', 'r', 'a', 9, 0,
  /* 97 */ 'c', 'e', 'f', 'b', 'r', 'a', 9, 0,
  /* 105 */ 'c', 'x', 'f', 'b', 'r', 'a', 9, 0,
  /* 113 */ 'c', 'd', 'g', 'b', 'r', 'a', 9, 0,
  /* 121 */ 'c', 'e', 'g', 'b', 'r', 'a', 9, 0,
  /* 129 */ 'c', 'x', 'g', 'b', 'r', 'a', 9, 0,
  /* 137 */ 'l', 'd', 'x', 'b', 'r', 'a', 9, 0,
  /* 145 */ 'l', 'e', 'x', 'b', 'r', 'a', 9, 0,
  /* 153 */ 'c', 'f', 'x', 'b', 'r', 'a', 9, 0,
  /* 161 */ 'c', 'g', 'x', 'b', 'r', 'a', 9, 0,
  /* 169 */ 'f', 'i', 'x', 'b', 'r', 'a', 9, 0,
  /* 177 */ 'v', 'e', 's', 'r', 'a', 9, 0,
  /* 184 */ 'v', 's', 'r', 'a', 9, 0,
  /* 190 */ 'v', 'a', 9, 0,
  /* 194 */ 'c', 'p', 'y', 'a', 9, 0,
  /* 200 */ 'v', 'g', 'f', 'm', 'a', 'b', 9, 0,
  /* 208 */ 'v', 'e', 's', 'r', 'a', 'b', 9, 0,
  /* 216 */ 'v', 's', 'r', 'a', 'b', 9, 0,
  /* 223 */ 'v', 'a', 'b', 9, 0,
  /* 228 */ 'l', 'c', 'b', 'b', 9, 0,
  /* 234 */ 'v', 'l', 'b', 'b', 9, 0,
  /* 240 */ 'v', 'a', 'c', 'c', 'b', 9, 0,
  /* 247 */ 'v', 'e', 'c', 'b', 9, 0,
  /* 253 */ 'v', 'l', 'c', 'b', 9, 0,
  /* 259 */ 'v', 's', 't', 'r', 'c', 'b', 9, 0,
  /* 267 */ 'v', 'f', 'a', 'd', 'b', 9, 0,
  /* 274 */ 'w', 'f', 'a', 'd', 'b', 9, 0,
  /* 281 */ 'v', 'f', 'm', 'a', 'd', 'b', 9, 0,
  /* 289 */ 'w', 'f', 'm', 'a', 'd', 'b', 9, 0,
  /* 297 */ 'w', 'f', 'c', 'd', 'b', 9, 0,
  /* 304 */ 'v', 'f', 'l', 'c', 'd', 'b', 9, 0,
  /* 312 */ 'w', 'f', 'l', 'c', 'd', 'b', 9, 0,
  /* 320 */ 't', 'c', 'd', 'b', 9, 0,
  /* 326 */ 'v', 'f', 'd', 'd', 'b', 9, 0,
  /* 333 */ 'w', 'f', 'd', 'd', 'b', 9, 0,
  /* 340 */ 'v', 'f', 'c', 'e', 'd', 'b', 9, 0,
  /* 348 */ 'w', 'f', 'c', 'e', 'd', 'b', 9, 0,
  /* 356 */ 'v', 'f', 'c', 'h', 'e', 'd', 'b', 9, 0,
  /* 365 */ 'w', 'f', 'c', 'h', 'e', 'd', 'b', 9, 0,
  /* 374 */ 'v', 'l', 'e', 'd', 'b', 9, 0,
  /* 381 */ 'w', 'l', 'e', 'd', 'b', 9, 0,
  /* 388 */ 'v', 'c', 'g', 'd', 'b', 9, 0,
  /* 395 */ 'w', 'c', 'g', 'd', 'b', 9, 0,
  /* 402 */ 'v', 'c', 'l', 'g', 'd', 'b', 9, 0,
  /* 410 */ 'w', 'c', 'l', 'g', 'd', 'b', 9, 0,
  /* 418 */ 'v', 'f', 'c', 'h', 'd', 'b', 9, 0,
  /* 426 */ 'w', 'f', 'c', 'h', 'd', 'b', 9, 0,
  /* 434 */ 'v', 'f', 't', 'c', 'i', 'd', 'b', 9, 0,
  /* 443 */ 'w', 'f', 't', 'c', 'i', 'd', 'b', 9, 0,
  /* 452 */ 'v', 'f', 'i', 'd', 'b', 9, 0,
  /* 459 */ 'w', 'f', 'i', 'd', 'b', 9, 0,
  /* 466 */ 'w', 'f', 'k', 'd', 'b', 9, 0,
  /* 473 */ 'v', 's', 'l', 'd', 'b', 9, 0,
  /* 480 */ 'v', 'f', 'm', 'd', 'b', 9, 0,
  /* 487 */ 'w', 'f', 'm', 'd', 'b', 9, 0,
  /* 494 */ 'v', 'f', 'l', 'n', 'd', 'b', 9, 0,
  /* 502 */ 'w', 'f', 'l', 'n', 'd', 'b', 9, 0,
  /* 510 */ 'v', 'f', 'p', 's', 'o', 'd', 'b', 9, 0,
  /* 519 */ 'w', 'f', 'p', 's', 'o', 'd', 'b', 9, 0,
  /* 528 */ 'v', 'f', 'l', 'p', 'd', 'b', 9, 0,
  /* 536 */ 'w', 'f', 'l', 'p', 'd', 'b', 9, 0,
  /* 544 */ 'v', 'f', 's', 'q', 'd', 'b', 9, 0,
  /* 552 */ 'w', 'f', 's', 'q', 'd', 'b', 9, 0,
  /* 560 */ 'v', 'f', 's', 'd', 'b', 9, 0,
  /* 567 */ 'w', 'f', 's', 'd', 'b', 9, 0,
  /* 574 */ 'v', 'f', 'm', 's', 'd', 'b', 9, 0,
  /* 582 */ 'w', 'f', 'm', 's', 'd', 'b', 9, 0,
  /* 590 */ 'l', 'x', 'd', 'b', 9, 0,
  /* 596 */ 'm', 'x', 'd', 'b', 9, 0,
  /* 602 */ 'v', 'f', 'a', 'e', 'b', 9, 0,
  /* 609 */ 'v', 'm', 'a', 'e', 'b', 9, 0,
  /* 616 */ 't', 'c', 'e', 'b', 9, 0,
  /* 622 */ 'v', 'l', 'd', 'e', 'b', 9, 0,
  /* 629 */ 'w', 'l', 'd', 'e', 'b', 9, 0,
  /* 636 */ 'm', 'd', 'e', 'b', 9, 0,
  /* 642 */ 'v', 'f', 'e', 'e', 'b', 9, 0,
  /* 649 */ 'm', 'e', 'e', 'b', 9, 0,
  /* 655 */ 'v', 'm', 'a', 'l', 'e', 'b', 9, 0,
  /* 663 */ 'v', 'm', 'l', 'e', 'b', 9, 0,
  /* 670 */ 'v', 'l', 'e', 'b', 9, 0,
  /* 676 */ 'v', 'm', 'e', 'b', 9, 0,
  /* 682 */ 'v', 'f', 'e', 'n', 'e', 'b', 9, 0,
  /* 690 */ 's', 'q', 'e', 'b', 9, 0,
  /* 696 */ 'm', 's', 'e', 'b', 9, 0,
  /* 702 */ 'v', 's', 't', 'e', 'b', 9, 0,
  /* 709 */ 'l', 'x', 'e', 'b', 9, 0,
  /* 715 */ 'v', 'c', 'd', 'g', 'b', 9, 0,
  /* 722 */ 'w', 'c', 'd', 'g', 'b', 9, 0,
  /* 729 */ 'v', 's', 'e', 'g', 'b', 9, 0,
  /* 736 */ 'v', 'c', 'd', 'l', 'g', 'b', 9, 0,
  /* 744 */ 'w', 'c', 'd', 'l', 'g', 'b', 9, 0,
  /* 752 */ 'v', 'a', 'v', 'g', 'b', 9, 0,
  /* 759 */ 'v', 'l', 'v', 'g', 'b', 9, 0,
  /* 766 */ 'v', 'm', 'a', 'h', 'b', 9, 0,
  /* 773 */ 'v', 'c', 'h', 'b', 9, 0,
  /* 779 */ 'v', 'm', 'a', 'l', 'h', 'b', 9, 0,
  /* 787 */ 'v', 'm', 'l', 'h', 'b', 9, 0,
  /* 794 */ 'v', 'u', 'p', 'l', 'h', 'b', 9, 0,
  /* 802 */ 'v', 'm', 'h', 'b', 9, 0,
  /* 808 */ 'v', 'u', 'p', 'h', 'b', 9, 0,
  /* 815 */ 'v', 'm', 'r', 'h', 'b', 9, 0,
  /* 822 */ 'v', 's', 'c', 'b', 'i', 'b', 9, 0,
  /* 830 */ 'c', 'i', 'b', 9, 0,
  /* 835 */ 'v', 'l', 'e', 'i', 'b', 9, 0,
  /* 842 */ 'c', 'g', 'i', 'b', 9, 0,
  /* 848 */ 'c', 'l', 'g', 'i', 'b', 9, 0,
  /* 855 */ 'c', 'l', 'i', 'b', 9, 0,
  /* 861 */ 'v', 'r', 'e', 'p', 'i', 'b', 9, 0,
  /* 869 */ 'v', 'm', 'a', 'l', 'b', 9, 0,
  /* 876 */ 'v', 'e', 'c', 'l', 'b', 9, 0,
  /* 883 */ 'v', 'a', 'v', 'g', 'l', 'b', 9, 0,
  /* 891 */ 'v', 'c', 'h', 'l', 'b', 9, 0,
  /* 898 */ 'v', 'u', 'p', 'l', 'l', 'b', 9, 0,
  /* 906 */ 'v', 'e', 'r', 'l', 'l', 'b', 9, 0,
  /* 914 */ 'v', 'm', 'l', 'b', 9, 0,
  /* 920 */ 'v', 'm', 'n', 'l', 'b', 9, 0,
  /* 927 */ 'v', 'u', 'p', 'l', 'b', 9, 0,
  /* 934 */ 'v', 'm', 'r', 'l', 'b', 9, 0,
  /* 941 */ 'v', 'e', 's', 'r', 'l', 'b', 9, 0,
  /* 949 */ 'v', 's', 'r', 'l', 'b', 9, 0,
  /* 956 */ 'v', 'e', 's', 'l', 'b', 9, 0,
  /* 963 */ 'v', 's', 'l', 'b', 9, 0,
  /* 969 */ 'v', 'm', 'x', 'l', 'b', 9, 0,
  /* 976 */ 'v', 'g', 'f', 'm', 'b', 9, 0,
  /* 983 */ 'v', 'g', 'm', 'b', 9, 0,
  /* 989 */ 'v', 'e', 'r', 'i', 'm', 'b', 9, 0,
  /* 997 */ 's', 'r', 'n', 'm', 'b', 9, 0,
  /* 1004 */ 'v', 's', 'u', 'm', 'b', 9, 0,
  /* 1011 */ 'v', 'm', 'n', 'b', 9, 0,
  /* 1017 */ 'v', 'm', 'a', 'o', 'b', 9, 0,
  /* 1024 */ 'v', 'm', 'a', 'l', 'o', 'b', 9, 0,
  /* 1032 */ 'v', 'm', 'l', 'o', 'b', 9, 0,
  /* 1039 */ 'v', 'm', 'o', 'b', 9, 0,
  /* 1045 */ 'v', 'l', 'r', 'e', 'p', 'b', 9, 0,
  /* 1053 */ 'v', 'r', 'e', 'p', 'b', 9, 0,
  /* 1060 */ 'v', 'l', 'p', 'b', 9, 0,
  /* 1066 */ 'v', 'c', 'e', 'q', 'b', 9, 0,
  /* 1073 */ 'c', 'r', 'b', 9, 0,
  /* 1078 */ 'c', 'g', 'r', 'b', 9, 0,
  /* 1084 */ 'c', 'l', 'g', 'r', 'b', 9, 0,
  /* 1091 */ 'c', 'l', 'r', 'b', 9, 0,
  /* 1097 */ 'v', 'i', 's', 't', 'r', 'b', 9, 0,
  /* 1105 */ 'v', 's', 'b', 9, 0,
  /* 1110 */ 'v', 'e', 's', 'r', 'a', 'v', 'b', 9, 0,
  /* 1119 */ 'v', 'l', 'g', 'v', 'b', 9, 0,
  /* 1126 */ 'v', 'e', 'r', 'l', 'l', 'v', 'b', 9, 0,
  /* 1135 */ 'v', 'e', 's', 'r', 'l', 'v', 'b', 9, 0,
  /* 1144 */ 'v', 'e', 's', 'l', 'v', 'b', 9, 0,
  /* 1152 */ 't', 'c', 'x', 'b', 9, 0,
  /* 1158 */ 'v', 'm', 'x', 'b', 9, 0,
  /* 1164 */ 'v', 's', 't', 'r', 'c', 'z', 'b', 9, 0,
  /* 1173 */ 'v', 'f', 'a', 'e', 'z', 'b', 9, 0,
  /* 1181 */ 'v', 'f', 'e', 'e', 'z', 'b', 9, 0,
  /* 1189 */ 'v', 'l', 'l', 'e', 'z', 'b', 9, 0,
  /* 1197 */ 'v', 'f', 'e', 'n', 'e', 'z', 'b', 9, 0,
  /* 1206 */ 'v', 'c', 'l', 'z', 'b', 9, 0,
  /* 1213 */ 'v', 'c', 't', 'z', 'b', 9, 0,
  /* 1220 */ 'v', 'a', 'c', 9, 0,
  /* 1225 */ 'b', 'c', 9, 0,
  /* 1229 */ 'v', 'a', 'c', 'c', 9, 0,
  /* 1235 */ 'v', 'a', 'c', 'c', 'c', 9, 0,
  /* 1242 */ 'v', 'e', 'c', 9, 0,
  /* 1247 */ 'w', 'f', 'c', 9, 0,
  /* 1252 */ 'l', 'l', 'g', 'c', 9, 0,
  /* 1258 */ 'i', 'c', 9, 0,
  /* 1262 */ 'a', 'l', 'c', 9, 0,
  /* 1267 */ 'c', 'l', 'c', 9, 0,
  /* 1272 */ 'l', 'l', 'c', 9, 0,
  /* 1277 */ 'v', 'l', 'c', 9, 0,
  /* 1282 */ 't', 'b', 'e', 'g', 'i', 'n', 'c', 9, 0,
  /* 1291 */ 'v', 'n', 'c', 9, 0,
  /* 1296 */ 'l', 'o', 'c', 9, 0,
  /* 1301 */ 's', 't', 'o', 'c', 9, 0,
  /* 1307 */ 'e', 'f', 'p', 'c', 9, 0,
  /* 1313 */ 'l', 'f', 'p', 'c', 9, 0,
  /* 1319 */ 's', 'f', 'p', 'c', 9, 0,
  /* 1325 */ 's', 't', 'f', 'p', 'c', 9, 0,
  /* 1332 */ 'b', 'r', 'c', 9, 0,
  /* 1337 */ 'v', 's', 't', 'r', 'c', 9, 0,
  /* 1344 */ 's', 't', 'c', 9, 0,
  /* 1349 */ 'm', 'v', 'c', 9, 0,
  /* 1354 */ 's', 'v', 'c', 9, 0,
  /* 1359 */ 'x', 'c', 9, 0,
  /* 1363 */ 'v', 'l', 'e', 'd', 9, 0,
  /* 1369 */ 'p', 'f', 'd', 9, 0,
  /* 1374 */ 'v', 'f', 'd', 9, 0,
  /* 1379 */ 'v', 'c', 'g', 'd', 9, 0,
  /* 1385 */ 'v', 'c', 'l', 'g', 'd', 9, 0,
  /* 1392 */ 'l', 'd', 9, 0,
  /* 1396 */ 'e', 't', 'n', 'd', 9, 0,
  /* 1402 */ 'l', 'p', 'd', 9, 0,
  /* 1407 */ 's', 't', 'd', 9, 0,
  /* 1412 */ 'v', 'f', 'a', 'e', 9, 0,
  /* 1418 */ 'l', 'a', 'e', 9, 0,
  /* 1423 */ 'v', 'm', 'a', 'e', 9, 0,
  /* 1429 */ 'c', 'i', 'b', 'e', 9, 0,
  /* 1435 */ 'c', 'g', 'i', 'b', 'e', 9, 0,
  /* 1442 */ 'c', 'l', 'g', 'i', 'b', 'e', 9, 0,
  /* 1450 */ 'c', 'l', 'i', 'b', 'e', 9, 0,
  /* 1457 */ 'c', 'r', 'b', 'e', 9, 0,
  /* 1463 */ 'c', 'g', 'r', 'b', 'e', 9, 0,
  /* 1470 */ 'c', 'l', 'g', 'r', 'b', 'e', 9, 0,
  /* 1478 */ 'c', 'l', 'r', 'b', 'e', 9, 0,
  /* 1485 */ 'v', 'f', 'c', 'e', 9, 0,
  /* 1491 */ 'l', 'o', 'c', 'e', 9, 0,
  /* 1497 */ 's', 't', 'o', 'c', 'e', 9, 0,
  /* 1504 */ 'v', 'l', 'd', 'e', 9, 0,
  /* 1510 */ 'v', 'f', 'e', 'e', 9, 0,
  /* 1516 */ 'l', 'o', 'c', 'g', 'e', 9, 0,
  /* 1523 */ 's', 't', 'o', 'c', 'g', 'e', 9, 0,
  /* 1531 */ 'j', 'g', 'e', 9, 0,
  /* 1536 */ 'c', 'i', 'b', 'h', 'e', 9, 0,
  /* 1543 */ 'c', 'g', 'i', 'b', 'h', 'e', 9, 0,
  /* 1551 */ 'c', 'l', 'g', 'i', 'b', 'h', 'e', 9, 0,
  /* 1560 */ 'c', 'l', 'i', 'b', 'h', 'e', 9, 0,
  /* 1568 */ 'c', 'r', 'b', 'h', 'e', 9, 0,
  /* 1575 */ 'c', 'g', 'r', 'b', 'h', 'e', 9, 0,
  /* 1583 */ 'c', 'l', 'g', 'r', 'b', 'h', 'e', 9, 0,
  /* 1592 */ 'c', 'l', 'r', 'b', 'h', 'e', 9, 0,
  /* 1600 */ 'v', 'f', 'c', 'h', 'e', 9, 0,
  /* 1607 */ 'l', 'o', 'c', 'h', 'e', 9, 0,
  /* 1614 */ 's', 't', 'o', 'c', 'h', 'e', 9, 0,
  /* 1622 */ 'l', 'o', 'c', 'f', 'h', 'e', 9, 0,
  /* 1630 */ 's', 't', 'o', 'c', 'f', 'h', 'e', 9, 0,
  /* 1639 */ 'l', 'o', 'c', 'g', 'h', 'e', 9, 0,
  /* 1647 */ 's', 't', 'o', 'c', 'g', 'h', 'e', 9, 0,
  /* 1656 */ 'j', 'g', 'h', 'e', 9, 0,
  /* 1662 */ 'l', 'o', 'c', 'f', 'h', 'h', 'e', 9, 0,
  /* 1671 */ 's', 't', 'o', 'c', 'f', 'h', 'h', 'e', 9, 0,
  /* 1681 */ 'l', 'o', 'c', 'h', 'i', 'h', 'e', 9, 0,
  /* 1690 */ 'l', 'o', 'c', 'g', 'h', 'i', 'h', 'e', 9, 0,
  /* 1700 */ 'l', 'o', 'c', 'h', 'h', 'i', 'h', 'e', 9, 0,
  /* 1710 */ 'c', 'i', 'j', 'h', 'e', 9, 0,
  /* 1717 */ 'c', 'g', 'i', 'j', 'h', 'e', 9, 0,
  /* 1725 */ 'c', 'l', 'g', 'i', 'j', 'h', 'e', 9, 0,
  /* 1734 */ 'c', 'l', 'i', 'j', 'h', 'e', 9, 0,
  /* 1742 */ 'c', 'r', 'j', 'h', 'e', 9, 0,
  /* 1749 */ 'c', 'g', 'r', 'j', 'h', 'e', 9, 0,
  /* 1757 */ 'c', 'l', 'g', 'r', 'j', 'h', 'e', 9, 0,
  /* 1766 */ 'c', 'l', 'r', 'j', 'h', 'e', 9, 0,
  /* 1774 */ 'c', 'i', 'b', 'n', 'h', 'e', 9, 0,
  /* 1782 */ 'c', 'g', 'i', 'b', 'n', 'h', 'e', 9, 0,
  /* 1791 */ 'c', 'l', 'g', 'i', 'b', 'n', 'h', 'e', 9, 0,
  /* 1801 */ 'c', 'l', 'i', 'b', 'n', 'h', 'e', 9, 0,
  /* 1810 */ 'c', 'r', 'b', 'n', 'h', 'e', 9, 0,
  /* 1818 */ 'c', 'g', 'r', 'b', 'n', 'h', 'e', 9, 0,
  /* 1827 */ 'c', 'l', 'g', 'r', 'b', 'n', 'h', 'e', 9, 0,
  /* 1837 */ 'c', 'l', 'r', 'b', 'n', 'h', 'e', 9, 0,
  /* 1846 */ 'l', 'o', 'c', 'n', 'h', 'e', 9, 0,
  /* 1854 */ 's', 't', 'o', 'c', 'n', 'h', 'e', 9, 0,
  /* 1863 */ 'l', 'o', 'c', 'g', 'n', 'h', 'e', 9, 0,
  /* 1872 */ 's', 't', 'o', 'c', 'g', 'n', 'h', 'e', 9, 0,
  /* 1882 */ 'j', 'g', 'n', 'h', 'e', 9, 0,
  /* 1889 */ 'l', 'o', 'c', 'f', 'h', 'n', 'h', 'e', 9, 0,
  /* 1899 */ 's', 't', 'o', 'c', 'f', 'h', 'n', 'h', 'e', 9, 0,
  /* 1910 */ 'l', 'o', 'c', 'h', 'i', 'n', 'h', 'e', 9, 0,
  /* 1920 */ 'l', 'o', 'c', 'g', 'h', 'i', 'n', 'h', 'e', 9, 0,
  /* 1931 */ 'l', 'o', 'c', 'h', 'h', 'i', 'n', 'h', 'e', 9, 0,
  /* 1942 */ 'c', 'i', 'j', 'n', 'h', 'e', 9, 0,
  /* 1950 */ 'c', 'g', 'i', 'j', 'n', 'h', 'e', 9, 0,
  /* 1959 */ 'c', 'l', 'g', 'i', 'j', 'n', 'h', 'e', 9, 0,
  /* 1969 */ 'c', 'l', 'i', 'j', 'n', 'h', 'e', 9, 0,
  /* 1978 */ 'c', 'r', 'j', 'n', 'h', 'e', 9, 0,
  /* 1986 */ 'c', 'g', 'r', 'j', 'n', 'h', 'e', 9, 0,
  /* 1995 */ 'c', 'l', 'g', 'r', 'j', 'n', 'h', 'e', 9, 0,
  /* 2005 */ 'c', 'l', 'r', 'j', 'n', 'h', 'e', 9, 0,
  /* 2014 */ 'l', 'o', 'c', 'r', 'n', 'h', 'e', 9, 0,
  /* 2023 */ 'l', 'o', 'c', 'g', 'r', 'n', 'h', 'e', 9, 0,
  /* 2033 */ 'l', 'o', 'c', 'f', 'h', 'r', 'n', 'h', 'e', 9, 0,
  /* 2044 */ 'c', 'l', 'g', 't', 'n', 'h', 'e', 9, 0,
  /* 2053 */ 'c', 'i', 't', 'n', 'h', 'e', 9, 0,
  /* 2061 */ 'c', 'l', 'f', 'i', 't', 'n', 'h', 'e', 9, 0,
  /* 2071 */ 'c', 'g', 'i', 't', 'n', 'h', 'e', 9, 0,
  /* 2080 */ 'c', 'l', 'g', 'i', 't', 'n', 'h', 'e', 9, 0,
  /* 2090 */ 'c', 'l', 't', 'n', 'h', 'e', 9, 0,
  /* 2098 */ 'c', 'r', 't', 'n', 'h', 'e', 9, 0,
  /* 2106 */ 'c', 'g', 'r', 't', 'n', 'h', 'e', 9, 0,
  /* 2115 */ 'c', 'l', 'g', 'r', 't', 'n', 'h', 'e', 9, 0,
  /* 2125 */ 'c', 'l', 'r', 't', 'n', 'h', 'e', 9, 0,
  /* 2134 */ 'l', 'o', 'c', 'r', 'h', 'e', 9, 0,
  /* 2142 */ 'l', 'o', 'c', 'g', 'r', 'h', 'e', 9, 0,
  /* 2151 */ 'l', 'o', 'c', 'f', 'h', 'r', 'h', 'e', 9, 0,
  /* 2161 */ 'c', 'l', 'g', 't', 'h', 'e', 9, 0,
  /* 2169 */ 'c', 'i', 't', 'h', 'e', 9, 0,
  /* 2176 */ 'c', 'l', 'f', 'i', 't', 'h', 'e', 9, 0,
  /* 2185 */ 'c', 'g', 'i', 't', 'h', 'e', 9, 0,
  /* 2193 */ 'c', 'l', 'g', 'i', 't', 'h', 'e', 9, 0,
  /* 2202 */ 'c', 'l', 't', 'h', 'e', 9, 0,
  /* 2209 */ 'c', 'r', 't', 'h', 'e', 9, 0,
  /* 2216 */ 'c', 'g', 'r', 't', 'h', 'e', 9, 0,
  /* 2224 */ 'c', 'l', 'g', 'r', 't', 'h', 'e', 9, 0,
  /* 2233 */ 'c', 'l', 'r', 't', 'h', 'e', 9, 0,
  /* 2241 */ 'l', 'o', 'c', 'h', 'i', 'e', 9, 0,
  /* 2249 */ 'l', 'o', 'c', 'g', 'h', 'i', 'e', 9, 0,
  /* 2258 */ 'l', 'o', 'c', 'h', 'h', 'i', 'e', 9, 0,
  /* 2267 */ 'c', 'i', 'j', 'e', 9, 0,
  /* 2273 */ 'c', 'g', 'i', 'j', 'e', 9, 0,
  /* 2280 */ 'c', 'l', 'g', 'i', 'j', 'e', 9, 0,
  /* 2288 */ 'c', 'l', 'i', 'j', 'e', 9, 0,
  /* 2295 */ 'c', 'r', 'j', 'e', 9, 0,
  /* 2301 */ 'c', 'g', 'r', 'j', 'e', 9, 0,
  /* 2308 */ 'c', 'l', 'g', 'r', 'j', 'e', 9, 0,
  /* 2316 */ 'c', 'l', 'r', 'j', 'e', 9, 0,
  /* 2323 */ 's', 't', 'c', 'k', 'e', 9, 0,
  /* 2330 */ 'v', 'm', 'a', 'l', 'e', 9, 0,
  /* 2337 */ 'c', 'i', 'b', 'l', 'e', 9, 0,
  /* 2344 */ 'c', 'g', 'i', 'b', 'l', 'e', 9, 0,
  /* 2352 */ 'c', 'l', 'g', 'i', 'b', 'l', 'e', 9, 0,
  /* 2361 */ 'c', 'l', 'i', 'b', 'l', 'e', 9, 0,
  /* 2369 */ 'c', 'r', 'b', 'l', 'e', 9, 0,
  /* 2376 */ 'c', 'g', 'r', 'b', 'l', 'e', 9, 0,
  /* 2384 */ 'c', 'l', 'g', 'r', 'b', 'l', 'e', 9, 0,
  /* 2393 */ 'c', 'l', 'r', 'b', 'l', 'e', 9, 0,
  /* 2401 */ 'l', 'o', 'c', 'l', 'e', 9, 0,
  /* 2408 */ 's', 't', 'o', 'c', 'l', 'e', 9, 0,
  /* 2416 */ 's', 't', 'f', 'l', 'e', 9, 0,
  /* 2423 */ 'l', 'o', 'c', 'g', 'l', 'e', 9, 0,
  /* 2431 */ 's', 't', 'o', 'c', 'g', 'l', 'e', 9, 0,
  /* 2440 */ 'j', 'g', 'l', 'e', 9, 0,
  /* 2446 */ 'l', 'o', 'c', 'f', 'h', 'l', 'e', 9, 0,
  /* 2455 */ 's', 't', 'o', 'c', 'f', 'h', 'l', 'e', 9, 0,
  /* 2465 */ 'l', 'o', 'c', 'h', 'i', 'l', 'e', 9, 0,
  /* 2474 */ 'l', 'o', 'c', 'g', 'h', 'i', 'l', 'e', 9, 0,
  /* 2484 */ 'l', 'o', 'c', 'h', 'h', 'i', 'l', 'e', 9, 0,
  /* 2494 */ 'c', 'i', 'j', 'l', 'e', 9, 0,
  /* 2501 */ 'c', 'g', 'i', 'j', 'l', 'e', 9, 0,
  /* 2509 */ 'c', 'l', 'g', 'i', 'j', 'l', 'e', 9, 0,
  /* 2518 */ 'c', 'l', 'i', 'j', 'l', 'e', 9, 0,
  /* 2526 */ 'c', 'r', 'j', 'l', 'e', 9, 0,
  /* 2533 */ 'c', 'g', 'r', 'j', 'l', 'e', 9, 0,
  /* 2541 */ 'c', 'l', 'g', 'r', 'j', 'l', 'e', 9, 0,
  /* 2550 */ 'c', 'l', 'r', 'j', 'l', 'e', 9, 0,
  /* 2558 */ 'v', 'm', 'l', 'e', 9, 0,
  /* 2564 */ 'c', 'i', 'b', 'n', 'l', 'e', 9, 0,
  /* 2572 */ 'c', 'g', 'i', 'b', 'n', 'l', 'e', 9, 0,
  /* 2581 */ 'c', 'l', 'g', 'i', 'b', 'n', 'l', 'e', 9, 0,
  /* 2591 */ 'c', 'l', 'i', 'b', 'n', 'l', 'e', 9, 0,
  /* 2600 */ 'c', 'r', 'b', 'n', 'l', 'e', 9, 0,
  /* 2608 */ 'c', 'g', 'r', 'b', 'n', 'l', 'e', 9, 0,
  /* 2617 */ 'c', 'l', 'g', 'r', 'b', 'n', 'l', 'e', 9, 0,
  /* 2627 */ 'c', 'l', 'r', 'b', 'n', 'l', 'e', 9, 0,
  /* 2636 */ 'l', 'o', 'c', 'n', 'l', 'e', 9, 0,
  /* 2644 */ 's', 't', 'o', 'c', 'n', 'l', 'e', 9, 0,
  /* 2653 */ 'l', 'o', 'c', 'g', 'n', 'l', 'e', 9, 0,
  /* 2662 */ 's', 't', 'o', 'c', 'g', 'n', 'l', 'e', 9, 0,
  /* 2672 */ 'j', 'g', 'n', 'l', 'e', 9, 0,
  /* 2679 */ 'l', 'o', 'c', 'f', 'h', 'n', 'l', 'e', 9, 0,
  /* 2689 */ 's', 't', 'o', 'c', 'f', 'h', 'n', 'l', 'e', 9, 0,
  /* 2700 */ 'l', 'o', 'c', 'h', 'i', 'n', 'l', 'e', 9, 0,
  /* 2710 */ 'l', 'o', 'c', 'g', 'h', 'i', 'n', 'l', 'e', 9, 0,
  /* 2721 */ 'l', 'o', 'c', 'h', 'h', 'i', 'n', 'l', 'e', 9, 0,
  /* 2732 */ 'c', 'i', 'j', 'n', 'l', 'e', 9, 0,
  /* 2740 */ 'c', 'g', 'i', 'j', 'n', 'l', 'e', 9, 0,
  /* 2749 */ 'c', 'l', 'g', 'i', 'j', 'n', 'l', 'e', 9, 0,
  /* 2759 */ 'c', 'l', 'i', 'j', 'n', 'l', 'e', 9, 0,
  /* 2768 */ 'c', 'r', 'j', 'n', 'l', 'e', 9, 0,
  /* 2776 */ 'c', 'g', 'r', 'j', 'n', 'l', 'e', 9, 0,
  /* 2785 */ 'c', 'l', 'g', 'r', 'j', 'n', 'l', 'e', 9, 0,
  /* 2795 */ 'c', 'l', 'r', 'j', 'n', 'l', 'e', 9, 0,
  /* 2804 */ 'l', 'o', 'c', 'r', 'n', 'l', 'e', 9, 0,
  /* 2813 */ 'l', 'o', 'c', 'g', 'r', 'n', 'l', 'e', 9, 0,
  /* 2823 */ 'l', 'o', 'c', 'f', 'h', 'r', 'n', 'l', 'e', 9, 0,
  /* 2834 */ 'c', 'l', 'g', 't', 'n', 'l', 'e', 9, 0,
  /* 2843 */ 'c', 'i', 't', 'n', 'l', 'e', 9, 0,
  /* 2851 */ 'c', 'l', 'f', 'i', 't', 'n', 'l', 'e', 9, 0,
  /* 2861 */ 'c', 'g', 'i', 't', 'n', 'l', 'e', 9, 0,
  /* 2870 */ 'c', 'l', 'g', 'i', 't', 'n', 'l', 'e', 9, 0,
  /* 2880 */ 'c', 'l', 't', 'n', 'l', 'e', 9, 0,
  /* 2888 */ 'c', 'r', 't', 'n', 'l', 'e', 9, 0,
  /* 2896 */ 'c', 'g', 'r', 't', 'n', 'l', 'e', 9, 0,
  /* 2905 */ 'c', 'l', 'g', 'r', 't', 'n', 'l', 'e', 9, 0,
  /* 2915 */ 'c', 'l', 'r', 't', 'n', 'l', 'e', 9, 0,
  /* 2924 */ 'l', 'o', 'c', 'r', 'l', 'e', 9, 0,
  /* 2932 */ 'l', 'o', 'c', 'g', 'r', 'l', 'e', 9, 0,
  /* 2941 */ 'l', 'o', 'c', 'f', 'h', 'r', 'l', 'e', 9, 0,
  /* 2951 */ 'c', 'l', 'g', 't', 'l', 'e', 9, 0,
  /* 2959 */ 'c', 'i', 't', 'l', 'e', 9, 0,
  /* 2966 */ 'c', 'l', 'f', 'i', 't', 'l', 'e', 9, 0,
  /* 2975 */ 'c', 'g', 'i', 't', 'l', 'e', 9, 0,
  /* 2983 */ 'c', 'l', 'g', 'i', 't', 'l', 'e', 9, 0,
  /* 2992 */ 'c', 'l', 't', 'l', 'e', 9, 0,
  /* 2999 */ 'c', 'r', 't', 'l', 'e', 9, 0,
  /* 3006 */ 'c', 'g', 'r', 't', 'l', 'e', 9, 0,
  /* 3014 */ 'c', 'l', 'g', 'r', 't', 'l', 'e', 9, 0,
  /* 3023 */ 'c', 'l', 'r', 't', 'l', 'e', 9, 0,
  /* 3031 */ 'b', 'x', 'l', 'e', 9, 0,
  /* 3037 */ 'b', 'r', 'x', 'l', 'e', 9, 0,
  /* 3044 */ 'v', 'm', 'e', 9, 0,
  /* 3049 */ 'c', 'i', 'b', 'n', 'e', 9, 0,
  /* 3056 */ 'c', 'g', 'i', 'b', 'n', 'e', 9, 0,
  /* 3064 */ 'c', 'l', 'g', 'i', 'b', 'n', 'e', 9, 0,
  /* 3073 */ 'c', 'l', 'i', 'b', 'n', 'e', 9, 0,
  /* 3081 */ 'c', 'r', 'b', 'n', 'e', 9, 0,
  /* 3088 */ 'c', 'g', 'r', 'b', 'n', 'e', 9, 0,
  /* 3096 */ 'c', 'l', 'g', 'r', 'b', 'n', 'e', 9, 0,
  /* 3105 */ 'c', 'l', 'r', 'b', 'n', 'e', 9, 0,
  /* 3113 */ 'l', 'o', 'c', 'n', 'e', 9, 0,
  /* 3120 */ 's', 't', 'o', 'c', 'n', 'e', 9, 0,
  /* 3128 */ 'v', 'f', 'e', 'n', 'e', 9, 0,
  /* 3135 */ 'l', 'o', 'c', 'g', 'n', 'e', 9, 0,
  /* 3143 */ 's', 't', 'o', 'c', 'g', 'n', 'e', 9, 0,
  /* 3152 */ 'j', 'g', 'n', 'e', 9, 0,
  /* 3158 */ 'l', 'o', 'c', 'f', 'h', 'n', 'e', 9, 0,
  /* 3167 */ 's', 't', 'o', 'c', 'f', 'h', 'n', 'e', 9, 0,
  /* 3177 */ 'l', 'o', 'c', 'h', 'i', 'n', 'e', 9, 0,
  /* 3186 */ 'l', 'o', 'c', 'g', 'h', 'i', 'n', 'e', 9, 0,
  /* 3196 */ 'l', 'o', 'c', 'h', 'h', 'i', 'n', 'e', 9, 0,
  /* 3206 */ 'c', 'i', 'j', 'n', 'e', 9, 0,
  /* 3213 */ 'c', 'g', 'i', 'j', 'n', 'e', 9, 0,
  /* 3221 */ 'c', 'l', 'g', 'i', 'j', 'n', 'e', 9, 0,
  /* 3230 */ 'c', 'l', 'i', 'j', 'n', 'e', 9, 0,
  /* 3238 */ 'c', 'r', 'j', 'n', 'e', 9, 0,
  /* 3245 */ 'c', 'g', 'r', 'j', 'n', 'e', 9, 0,
  /* 3253 */ 'c', 'l', 'g', 'r', 'j', 'n', 'e', 9, 0,
  /* 3262 */ 'c', 'l', 'r', 'j', 'n', 'e', 9, 0,
  /* 3270 */ 'v', 'o', 'n', 'e', 9, 0,
  /* 3276 */ 'l', 'o', 'c', 'r', 'n', 'e', 9, 0,
  /* 3284 */ 'l', 'o', 'c', 'g', 'r', 'n', 'e', 9, 0,
  /* 3293 */ 'l', 'o', 'c', 'f', 'h', 'r', 'n', 'e', 9, 0,
  /* 3303 */ 'c', 'l', 'g', 't', 'n', 'e', 9, 0,
  /* 3311 */ 'c', 'i', 't', 'n', 'e', 9, 0,
  /* 3318 */ 'c', 'l', 'f', 'i', 't', 'n', 'e', 9, 0,
  /* 3327 */ 'c', 'g', 'i', 't', 'n', 'e', 9, 0,
  /* 3335 */ 'c', 'l', 'g', 'i', 't', 'n', 'e', 9, 0,
  /* 3344 */ 'c', 'l', 't', 'n', 'e', 9, 0,
  /* 3351 */ 'c', 'r', 't', 'n', 'e', 9, 0,
  /* 3358 */ 'c', 'g', 'r', 't', 'n', 'e', 9, 0,
  /* 3366 */ 'c', 'l', 'g', 'r', 't', 'n', 'e', 9, 0,
  /* 3375 */ 'c', 'l', 'r', 't', 'n', 'e', 9, 0,
  /* 3383 */ 'l', 'o', 'c', 'r', 'e', 9, 0,
  /* 3390 */ 'l', 'o', 'c', 'g', 'r', 'e', 9, 0,
  /* 3398 */ 'l', 'o', 'c', 'f', 'h', 'r', 'e', 9, 0,
  /* 3407 */ 'c', 'l', 'g', 't', 'e', 9, 0,
  /* 3414 */ 'c', 'i', 't', 'e', 9, 0,
  /* 3420 */ 'c', 'l', 'f', 'i', 't', 'e', 9, 0,
  /* 3428 */ 'c', 'g', 'i', 't', 'e', 9, 0,
  /* 3435 */ 'c', 'l', 'g', 'i', 't', 'e', 9, 0,
  /* 3443 */ 'c', 'l', 't', 'e', 9, 0,
  /* 3449 */ 'c', 'r', 't', 'e', 9, 0,
  /* 3455 */ 'c', 'g', 'r', 't', 'e', 9, 0,
  /* 3462 */ 'c', 'l', 'g', 'r', 't', 'e', 9, 0,
  /* 3470 */ 'c', 'l', 'r', 't', 'e', 9, 0,
  /* 3477 */ 's', 't', 'e', 9, 0,
  /* 3482 */ 'v', 'g', 'f', 'm', 'a', 'f', 9, 0,
  /* 3490 */ 'v', 'e', 's', 'r', 'a', 'f', 9, 0,
  /* 3498 */ 'v', 'a', 'f', 9, 0,
  /* 3503 */ 'v', 'a', 'c', 'c', 'f', 9, 0,
  /* 3510 */ 'v', 'e', 'c', 'f', 9, 0,
  /* 3516 */ 'v', 'l', 'c', 'f', 9, 0,
  /* 3522 */ 'v', 's', 't', 'r', 'c', 'f', 9, 0,
  /* 3530 */ 'v', 'f', 'a', 'e', 'f', 9, 0,
  /* 3537 */ 'v', 'm', 'a', 'e', 'f', 9, 0,
  /* 3544 */ 'v', 's', 'c', 'e', 'f', 9, 0,
  /* 3551 */ 'v', 'f', 'e', 'e', 'f', 9, 0,
  /* 3558 */ 'v', 'g', 'e', 'f', 9, 0,
  /* 3564 */ 'v', 'm', 'a', 'l', 'e', 'f', 9, 0,
  /* 3572 */ 'v', 'm', 'l', 'e', 'f', 9, 0,
  /* 3579 */ 'v', 'l', 'e', 'f', 9, 0,
  /* 3585 */ 'v', 'm', 'e', 'f', 9, 0,
  /* 3591 */ 'v', 'f', 'e', 'n', 'e', 'f', 9, 0,
  /* 3599 */ 'v', 's', 't', 'e', 'f', 9, 0,
  /* 3606 */ 'a', 'g', 'f', 9, 0,
  /* 3611 */ 'c', 'g', 'f', 9, 0,
  /* 3616 */ 'v', 's', 'e', 'g', 'f', 9, 0,
  /* 3623 */ 'a', 'l', 'g', 'f', 9, 0,
  /* 3629 */ 'c', 'l', 'g', 'f', 9, 0,
  /* 3635 */ 'l', 'l', 'g', 'f', 9, 0,
  /* 3641 */ 's', 'l', 'g', 'f', 9, 0,
  /* 3647 */ 'v', 's', 'u', 'm', 'g', 'f', 9, 0,
  /* 3655 */ 'l', 'l', 'z', 'r', 'g', 'f', 9, 0,
  /* 3663 */ 'd', 's', 'g', 'f', 9, 0,
  /* 3669 */ 'm', 's', 'g', 'f', 9, 0,
  /* 3675 */ 'l', 't', 'g', 'f', 9, 0,
  /* 3681 */ 'v', 'a', 'v', 'g', 'f', 9, 0,
  /* 3688 */ 'v', 'l', 'v', 'g', 'f', 9, 0,
  /* 3695 */ 'v', 'm', 'a', 'h', 'f', 9, 0,
  /* 3702 */ 'v', 'c', 'h', 'f', 9, 0,
  /* 3708 */ 'i', 'i', 'h', 'f', 9, 0,
  /* 3714 */ 'l', 'l', 'i', 'h', 'f', 9, 0,
  /* 3721 */ 'n', 'i', 'h', 'f', 9, 0,
  /* 3727 */ 'o', 'i', 'h', 'f', 9, 0,
  /* 3733 */ 'x', 'i', 'h', 'f', 9, 0,
  /* 3739 */ 'v', 'm', 'a', 'l', 'h', 'f', 9, 0,
  /* 3747 */ 'c', 'l', 'h', 'f', 9, 0,
  /* 3753 */ 'v', 'm', 'l', 'h', 'f', 9, 0,
  /* 3760 */ 'v', 'u', 'p', 'l', 'h', 'f', 9, 0,
  /* 3768 */ 'v', 'm', 'h', 'f', 9, 0,
  /* 3774 */ 'v', 'u', 'p', 'h', 'f', 9, 0,
  /* 3781 */ 'v', 'm', 'r', 'h', 'f', 9, 0,
  /* 3788 */ 'v', 's', 'c', 'b', 'i', 'f', 9, 0,
  /* 3796 */ 'v', 'l', 'e', 'i', 'f', 9, 0,
  /* 3803 */ 'v', 'r', 'e', 'p', 'i', 'f', 9, 0,
  /* 3811 */ 's', 't', 'c', 'k', 'f', 9, 0,
  /* 3818 */ 'v', 'p', 'k', 'f', 9, 0,
  /* 3824 */ 'v', 'm', 'a', 'l', 'f', 9, 0,
  /* 3831 */ 'v', 'e', 'c', 'l', 'f', 9, 0,
  /* 3838 */ 'v', 'a', 'v', 'g', 'l', 'f', 9, 0,
  /* 3846 */ 'v', 'c', 'h', 'l', 'f', 9, 0,
  /* 3853 */ 'i', 'i', 'l', 'f', 9, 0,
  /* 3859 */ 'l', 'l', 'i', 'l', 'f', 9, 0,
  /* 3866 */ 'n', 'i', 'l', 'f', 9, 0,
  /* 3872 */ 'o', 'i', 'l', 'f', 9, 0,
  /* 3878 */ 'x', 'i', 'l', 'f', 9, 0,
  /* 3884 */ 'v', 'u', 'p', 'l', 'l', 'f', 9, 0,
  /* 3892 */ 'v', 'e', 'r', 'l', 'l', 'f', 9, 0,
  /* 3900 */ 'v', 'm', 'l', 'f', 9, 0,
  /* 3906 */ 'v', 'm', 'n', 'l', 'f', 9, 0,
  /* 3913 */ 'v', 'u', 'p', 'l', 'f', 9, 0,
  /* 3920 */ 'v', 'm', 'r', 'l', 'f', 9, 0,
  /* 3927 */ 'v', 'e', 's', 'r', 'l', 'f', 9, 0,
  /* 3935 */ 'v', 'e', 's', 'l', 'f', 9, 0,
  /* 3942 */ 'v', 'm', 'x', 'l', 'f', 9, 0,
  /* 3949 */ 'v', 'g', 'f', 'm', 'f', 9, 0,
  /* 3956 */ 'v', 'g', 'm', 'f', 9, 0,
  /* 3962 */ 'v', 'e', 'r', 'i', 'm', 'f', 9, 0,
  /* 3970 */ 'v', 'm', 'n', 'f', 9, 0,
  /* 3976 */ 'v', 'm', 'a', 'o', 'f', 9, 0,
  /* 3983 */ 'v', 'm', 'a', 'l', 'o', 'f', 9, 0,
  /* 3991 */ 'v', 'm', 'l', 'o', 'f', 9, 0,
  /* 3998 */ 'v', 'm', 'o', 'f', 9, 0,
  /* 4004 */ 'v', 'l', 'r', 'e', 'p', 'f', 9, 0,
  /* 4012 */ 'v', 'r', 'e', 'p', 'f', 9, 0,
  /* 4019 */ 'v', 'l', 'p', 'f', 9, 0,
  /* 4025 */ 'v', 'c', 'e', 'q', 'f', 9, 0,
  /* 4032 */ 'v', 's', 'u', 'm', 'q', 'f', 9, 0,
  /* 4040 */ 'v', 'i', 's', 't', 'r', 'f', 9, 0,
  /* 4048 */ 'l', 'z', 'r', 'f', 9, 0,
  /* 4054 */ 'v', 'p', 'k', 's', 'f', 9, 0,
  /* 4061 */ 'v', 'p', 'k', 'l', 's', 'f', 9, 0,
  /* 4069 */ 'v', 's', 'f', 9, 0,
  /* 4074 */ 'v', 'e', 's', 'r', 'a', 'v', 'f', 9, 0,
  /* 4083 */ 'v', 'l', 'g', 'v', 'f', 9, 0,
  /* 4090 */ 'v', 'e', 'r', 'l', 'l', 'v', 'f', 9, 0,
  /* 4099 */ 'v', 'e', 's', 'r', 'l', 'v', 'f', 9, 0,
  /* 4108 */ 'v', 'e', 's', 'l', 'v', 'f', 9, 0,
  /* 4116 */ 'v', 'm', 'x', 'f', 9, 0,
  /* 4122 */ 'v', 's', 't', 'r', 'c', 'z', 'f', 9, 0,
  /* 4131 */ 'v', 'f', 'a', 'e', 'z', 'f', 9, 0,
  /* 4139 */ 'v', 'f', 'e', 'e', 'z', 'f', 9, 0,
  /* 4147 */ 'v', 'l', 'l', 'e', 'z', 'f', 9, 0,
  /* 4155 */ 'v', 'f', 'e', 'n', 'e', 'z', 'f', 9, 0,
  /* 4164 */ 'v', 'c', 'l', 'z', 'f', 9, 0,
  /* 4171 */ 'v', 'c', 't', 'z', 'f', 9, 0,
  /* 4178 */ 'l', 'a', 'a', 'g', 9, 0,
  /* 4184 */ 'v', 'g', 'f', 'm', 'a', 'g', 9, 0,
  /* 4192 */ 'v', 'e', 's', 'r', 'a', 'g', 9, 0,
  /* 4200 */ 's', 't', 'r', 'a', 'g', 9, 0,
  /* 4207 */ 'v', 'a', 'g', 9, 0,
  /* 4212 */ 's', 'l', 'b', 'g', 9, 0,
  /* 4218 */ 'r', 'i', 's', 'b', 'g', 9, 0,
  /* 4225 */ 'r', 'n', 's', 'b', 'g', 9, 0,
  /* 4232 */ 'r', 'o', 's', 'b', 'g', 9, 0,
  /* 4239 */ 'r', 'x', 's', 'b', 'g', 9, 0,
  /* 4246 */ 'v', 'a', 'c', 'c', 'g', 9, 0,
  /* 4253 */ 'v', 'e', 'c', 'g', 9, 0,
  /* 4259 */ 'a', 'l', 'c', 'g', 9, 0,
  /* 4265 */ 'v', 'l', 'c', 'g', 9, 0,
  /* 4271 */ 'l', 'o', 'c', 'g', 9, 0,
  /* 4277 */ 's', 't', 'o', 'c', 'g', 9, 0,
  /* 4284 */ 'v', 'c', 'd', 'g', 9, 0,
  /* 4290 */ 'l', 'p', 'd', 'g', 9, 0,
  /* 4296 */ 'v', 's', 'c', 'e', 'g', 9, 0,
  /* 4303 */ 'v', 'g', 'e', 'g', 9, 0,
  /* 4309 */ 'v', 'l', 'e', 'g', 9, 0,
  /* 4315 */ 'b', 'x', 'l', 'e', 'g', 9, 0,
  /* 4322 */ 'v', 's', 'e', 'g', 9, 0,
  /* 4328 */ 'v', 's', 't', 'e', 'g', 9, 0,
  /* 4335 */ 'v', 'a', 'v', 'g', 'g', 9, 0,
  /* 4342 */ 'v', 'l', 'v', 'g', 'g', 9, 0,
  /* 4349 */ 'r', 'i', 's', 'b', 'h', 'g', 9, 0,
  /* 4357 */ 'v', 'c', 'h', 'g', 9, 0,
  /* 4363 */ 'v', 'm', 'r', 'h', 'g', 9, 0,
  /* 4370 */ 'b', 'x', 'h', 'g', 9, 0,
  /* 4376 */ 'b', 'r', 'x', 'h', 'g', 9, 0,
  /* 4383 */ 'v', 's', 'c', 'b', 'i', 'g', 9, 0,
  /* 4391 */ 'v', 'l', 'e', 'i', 'g', 9, 0,
  /* 4398 */ 'v', 'r', 'e', 'p', 'i', 'g', 9, 0,
  /* 4406 */ 'j', 'g', 9, 0,
  /* 4410 */ 'v', 'p', 'k', 'g', 9, 0,
  /* 4416 */ 'l', 'a', 'a', 'l', 'g', 9, 0,
  /* 4423 */ 'r', 'i', 's', 'b', 'l', 'g', 9, 0,
  /* 4431 */ 'v', 'e', 'c', 'l', 'g', 9, 0,
  /* 4438 */ 'v', 'c', 'd', 'l', 'g', 9, 0,
  /* 4445 */ 'v', 'a', 'v', 'g', 'l', 'g', 9, 0,
  /* 4453 */ 'v', 'c', 'h', 'l', 'g', 9, 0,
  /* 4460 */ 'v', 'e', 'r', 'l', 'l', 'g', 9, 0,
  /* 4468 */ 's', 'l', 'l', 'g', 9, 0,
  /* 4474 */ 'm', 'l', 'g', 9, 0,
  /* 4479 */ 'v', 'm', 'n', 'l', 'g', 9, 0,
  /* 4486 */ 'v', 'm', 'r', 'l', 'g', 9, 0,
  /* 4493 */ 'v', 'e', 's', 'r', 'l', 'g', 9, 0,
  /* 4501 */ 'v', 'e', 's', 'l', 'g', 9, 0,
  /* 4508 */ 'v', 'm', 'x', 'l', 'g', 9, 0,
  /* 4515 */ 'b', 'r', 'x', 'l', 'g', 9, 0,
  /* 4522 */ 'v', 'g', 'f', 'm', 'g', 9, 0,
  /* 4529 */ 'v', 'g', 'm', 'g', 9, 0,
  /* 4535 */ 'v', 'e', 'r', 'i', 'm', 'g', 9, 0,
  /* 4543 */ 'l', 'm', 'g', 9, 0,
  /* 4548 */ 's', 't', 'm', 'g', 9, 0,
  /* 4554 */ 'v', 's', 'u', 'm', 'g', 9, 0,
  /* 4561 */ 'l', 'a', 'n', 'g', 9, 0,
  /* 4567 */ 'v', 'm', 'n', 'g', 9, 0,
  /* 4573 */ 'l', 'a', 'o', 'g', 9, 0,
  /* 4579 */ 'v', 'l', 'r', 'e', 'p', 'g', 9, 0,
  /* 4587 */ 'v', 'r', 'e', 'p', 'g', 9, 0,
  /* 4594 */ 'v', 'l', 'p', 'g', 9, 0,
  /* 4600 */ 'v', 'c', 'e', 'q', 'g', 9, 0,
  /* 4607 */ 'v', 's', 'u', 'm', 'q', 'g', 9, 0,
  /* 4615 */ 'l', 'z', 'r', 'g', 9, 0,
  /* 4621 */ 'c', 's', 'g', 9, 0,
  /* 4626 */ 'c', 'd', 's', 'g', 9, 0,
  /* 4632 */ 'v', 'p', 'k', 's', 'g', 9, 0,
  /* 4639 */ 'v', 'p', 'k', 'l', 's', 'g', 9, 0,
  /* 4647 */ 'm', 's', 'g', 9, 0,
  /* 4652 */ 'v', 's', 'g', 9, 0,
  /* 4657 */ 'b', 'c', 't', 'g', 9, 0,
  /* 4663 */ 'e', 'c', 't', 'g', 9, 0,
  /* 4669 */ 'b', 'r', 'c', 't', 'g', 9, 0,
  /* 4676 */ 'l', 't', 'g', 9, 0,
  /* 4681 */ 'n', 't', 's', 't', 'g', 9, 0,
  /* 4688 */ 'v', 'e', 's', 'r', 'a', 'v', 'g', 9, 0,
  /* 4697 */ 'v', 'a', 'v', 'g', 9, 0,
  /* 4703 */ 'v', 'l', 'g', 'v', 'g', 9, 0,
  /* 4710 */ 'v', 'e', 'r', 'l', 'l', 'v', 'g', 9, 0,
  /* 4719 */ 'v', 'e', 's', 'r', 'l', 'v', 'g', 9, 0,
  /* 4728 */ 'v', 'e', 's', 'l', 'v', 'g', 9, 0,
  /* 4736 */ 'v', 'l', 'v', 'g', 9, 0,
  /* 4742 */ 'l', 'r', 'v', 'g', 9, 0,
  /* 4748 */ 's', 't', 'r', 'v', 'g', 9, 0,
  /* 4755 */ 'l', 'a', 'x', 'g', 9, 0,
  /* 4761 */ 'v', 'm', 'x', 'g', 9, 0,
  /* 4767 */ 'v', 'l', 'l', 'e', 'z', 'g', 9, 0,
  /* 4775 */ 'v', 'c', 'l', 'z', 'g', 9, 0,
  /* 4782 */ 'v', 'c', 't', 'z', 'g', 9, 0,
  /* 4789 */ 'v', 'g', 'f', 'm', 'a', 'h', 9, 0,
  /* 4797 */ 'v', 'm', 'a', 'h', 9, 0,
  /* 4803 */ 'v', 'e', 's', 'r', 'a', 'h', 9, 0,
  /* 4811 */ 'v', 'a', 'h', 9, 0,
  /* 4816 */ 'c', 'i', 'b', 'h', 9, 0,
  /* 4822 */ 'c', 'g', 'i', 'b', 'h', 9, 0,
  /* 4829 */ 'c', 'l', 'g', 'i', 'b', 'h', 9, 0,
  /* 4837 */ 'c', 'l', 'i', 'b', 'h', 9, 0,
  /* 4844 */ 'l', 'b', 'h', 9, 0,
  /* 4849 */ 'c', 'r', 'b', 'h', 9, 0,
  /* 4855 */ 'c', 'g', 'r', 'b', 'h', 9, 0,
  /* 4862 */ 'c', 'l', 'g', 'r', 'b', 'h', 9, 0,
  /* 4870 */ 'c', 'l', 'r', 'b', 'h', 9, 0,
  /* 4877 */ 'v', 'a', 'c', 'c', 'h', 9, 0,
  /* 4884 */ 'v', 'e', 'c', 'h', 9, 0,
  /* 4890 */ 'v', 'f', 'c', 'h', 9, 0,
  /* 4896 */ 'l', 'l', 'c', 'h', 9, 0,
  /* 4902 */ 'v', 'l', 'c', 'h', 9, 0,
  /* 4908 */ 'l', 'o', 'c', 'h', 9, 0,
  /* 4914 */ 's', 't', 'o', 'c', 'h', 9, 0,
  /* 4921 */ 'v', 's', 't', 'r', 'c', 'h', 9, 0,
  /* 4929 */ 's', 't', 'c', 'h', 9, 0,
  /* 4935 */ 'v', 'c', 'h', 9, 0,
  /* 4940 */ 'v', 'f', 'a', 'e', 'h', 9, 0,
  /* 4947 */ 'v', 'm', 'a', 'e', 'h', 9, 0,
  /* 4954 */ 'v', 'f', 'e', 'e', 'h', 9, 0,
  /* 4961 */ 'v', 'm', 'a', 'l', 'e', 'h', 9, 0,
  /* 4969 */ 'v', 'm', 'l', 'e', 'h', 9, 0,
  /* 4976 */ 'v', 'l', 'e', 'h', 9, 0,
  /* 4982 */ 'v', 'm', 'e', 'h', 9, 0,
  /* 4988 */ 'v', 'f', 'e', 'n', 'e', 'h', 9, 0,
  /* 4996 */ 'v', 's', 't', 'e', 'h', 9, 0,
  /* 5003 */ 'l', 'o', 'c', 'f', 'h', 9, 0,
  /* 5010 */ 's', 't', 'o', 'c', 'f', 'h', 9, 0,
  /* 5018 */ 'l', 'f', 'h', 9, 0,
  /* 5023 */ 's', 't', 'f', 'h', 9, 0,
  /* 5029 */ 'l', 'o', 'c', 'g', 'h', 9, 0,
  /* 5036 */ 's', 't', 'o', 'c', 'g', 'h', 9, 0,
  /* 5044 */ 'v', 's', 'e', 'g', 'h', 9, 0,
  /* 5051 */ 'j', 'g', 'h', 9, 0,
  /* 5056 */ 'l', 'l', 'g', 'h', 9, 0,
  /* 5062 */ 'v', 's', 'u', 'm', 'g', 'h', 9, 0,
  /* 5070 */ 'v', 'a', 'v', 'g', 'h', 9, 0,
  /* 5077 */ 'v', 'l', 'v', 'g', 'h', 9, 0,
  /* 5084 */ 'v', 'm', 'a', 'h', 'h', 9, 0,
  /* 5091 */ 'v', 'c', 'h', 'h', 9, 0,
  /* 5097 */ 'l', 'o', 'c', 'f', 'h', 'h', 9, 0,
  /* 5105 */ 's', 't', 'o', 'c', 'f', 'h', 'h', 9, 0,
  /* 5114 */ 'i', 'i', 'h', 'h', 9, 0,
  /* 5120 */ 'l', 'l', 'i', 'h', 'h', 9, 0,
  /* 5127 */ 'n', 'i', 'h', 'h', 9, 0,
  /* 5133 */ 'o', 'i', 'h', 'h', 9, 0,
  /* 5139 */ 'v', 'm', 'a', 'l', 'h', 'h', 9, 0,
  /* 5147 */ 'l', 'l', 'h', 'h', 9, 0,
  /* 5153 */ 'v', 'm', 'l', 'h', 'h', 9, 0,
  /* 5160 */ 'v', 'u', 'p', 'l', 'h', 'h', 9, 0,
  /* 5168 */ 't', 'm', 'h', 'h', 9, 0,
  /* 5174 */ 'v', 'm', 'h', 'h', 9, 0,
  /* 5180 */ 'v', 'u', 'p', 'h', 'h', 9, 0,
  /* 5187 */ 'v', 'm', 'r', 'h', 'h', 9, 0,
  /* 5194 */ 's', 't', 'h', 'h', 9, 0,
  /* 5200 */ 'a', 'i', 'h', 9, 0,
  /* 5205 */ 'v', 's', 'c', 'b', 'i', 'h', 9, 0,
  /* 5213 */ 'c', 'i', 'h', 9, 0,
  /* 5218 */ 'v', 'l', 'e', 'i', 'h', 9, 0,
  /* 5225 */ 'l', 'o', 'c', 'h', 'i', 'h', 9, 0,
  /* 5233 */ 'l', 'o', 'c', 'g', 'h', 'i', 'h', 9, 0,
  /* 5242 */ 'l', 'o', 'c', 'h', 'h', 'i', 'h', 9, 0,
  /* 5251 */ 'c', 'l', 'i', 'h', 9, 0,
  /* 5257 */ 'v', 'r', 'e', 'p', 'i', 'h', 9, 0,
  /* 5265 */ 'c', 'i', 'j', 'h', 9, 0,
  /* 5271 */ 'c', 'g', 'i', 'j', 'h', 9, 0,
  /* 5278 */ 'c', 'l', 'g', 'i', 'j', 'h', 9, 0,
  /* 5286 */ 'c', 'l', 'i', 'j', 'h', 9, 0,
  /* 5293 */ 'c', 'r', 'j', 'h', 9, 0,
  /* 5299 */ 'c', 'g', 'r', 'j', 'h', 9, 0,
  /* 5306 */ 'c', 'l', 'g', 'r', 'j', 'h', 9, 0,
  /* 5314 */ 'c', 'l', 'r', 'j', 'h', 9, 0,
  /* 5321 */ 'v', 'p', 'k', 'h', 9, 0,
  /* 5327 */ 'v', 'm', 'a', 'l', 'h', 9, 0,
  /* 5334 */ 'c', 'i', 'b', 'l', 'h', 9, 0,
  /* 5341 */ 'c', 'g', 'i', 'b', 'l', 'h', 9, 0,
  /* 5349 */ 'c', 'l', 'g', 'i', 'b', 'l', 'h', 9, 0,
  /* 5358 */ 'c', 'l', 'i', 'b', 'l', 'h', 9, 0,
  /* 5366 */ 'c', 'r', 'b', 'l', 'h', 9, 0,
  /* 5373 */ 'c', 'g', 'r', 'b', 'l', 'h', 9, 0,
  /* 5381 */ 'c', 'l', 'g', 'r', 'b', 'l', 'h', 9, 0,
  /* 5390 */ 'c', 'l', 'r', 'b', 'l', 'h', 9, 0,
  /* 5398 */ 'v', 'e', 'c', 'l', 'h', 9, 0,
  /* 5405 */ 'l', 'o', 'c', 'l', 'h', 9, 0,
  /* 5412 */ 's', 't', 'o', 'c', 'l', 'h', 9, 0,
  /* 5420 */ 'l', 'o', 'c', 'g', 'l', 'h', 9, 0,
  /* 5428 */ 's', 't', 'o', 'c', 'g', 'l', 'h', 9, 0,
  /* 5437 */ 'j', 'g', 'l', 'h', 9, 0,
  /* 5443 */ 'v', 'a', 'v', 'g', 'l', 'h', 9, 0,
  /* 5451 */ 'v', 'c', 'h', 'l', 'h', 9, 0,
  /* 5458 */ 'l', 'o', 'c', 'f', 'h', 'l', 'h', 9, 0,
  /* 5467 */ 's', 't', 'o', 'c', 'f', 'h', 'l', 'h', 9, 0,
  /* 5477 */ 'l', 'o', 'c', 'h', 'i', 'l', 'h', 9, 0,
  /* 5486 */ 'l', 'o', 'c', 'g', 'h', 'i', 'l', 'h', 9, 0,
  /* 5496 */ 'l', 'o', 'c', 'h', 'h', 'i', 'l', 'h', 9, 0,
  /* 5506 */ 'i', 'i', 'l', 'h', 9, 0,
  /* 5512 */ 'l', 'l', 'i', 'l', 'h', 9, 0,
  /* 5519 */ 'n', 'i', 'l', 'h', 9, 0,
  /* 5525 */ 'o', 'i', 'l', 'h', 9, 0,
  /* 5531 */ 'c', 'i', 'j', 'l', 'h', 9, 0,
  /* 5538 */ 'c', 'g', 'i', 'j', 'l', 'h', 9, 0,
  /* 5546 */ 'c', 'l', 'g', 'i', 'j', 'l', 'h', 9, 0,
  /* 5555 */ 'c', 'l', 'i', 'j', 'l', 'h', 9, 0,
  /* 5563 */ 'c', 'r', 'j', 'l', 'h', 9, 0,
  /* 5570 */ 'c', 'g', 'r', 'j', 'l', 'h', 9, 0,
  /* 5578 */ 'c', 'l', 'g', 'r', 'j', 'l', 'h', 9, 0,
  /* 5587 */ 'c', 'l', 'r', 'j', 'l', 'h', 9, 0,
  /* 5595 */ 'v', 'u', 'p', 'l', 'l', 'h', 9, 0,
  /* 5603 */ 'v', 'e', 'r', 'l', 'l', 'h', 9, 0,
  /* 5611 */ 't', 'm', 'l', 'h', 9, 0,
  /* 5617 */ 'v', 'm', 'l', 'h', 9, 0,
  /* 5623 */ 'c', 'i', 'b', 'n', 'l', 'h', 9, 0,
  /* 5631 */ 'c', 'g', 'i', 'b', 'n', 'l', 'h', 9, 0,
  /* 5640 */ 'c', 'l', 'g', 'i', 'b', 'n', 'l', 'h', 9, 0,
  /* 5650 */ 'c', 'l', 'i', 'b', 'n', 'l', 'h', 9, 0,
  /* 5659 */ 'c', 'r', 'b', 'n', 'l', 'h', 9, 0,
  /* 5667 */ 'c', 'g', 'r', 'b', 'n', 'l', 'h', 9, 0,
  /* 5676 */ 'c', 'l', 'g', 'r', 'b', 'n', 'l', 'h', 9, 0,
  /* 5686 */ 'c', 'l', 'r', 'b', 'n', 'l', 'h', 9, 0,
  /* 5695 */ 'l', 'o', 'c', 'n', 'l', 'h', 9, 0,
  /* 5703 */ 's', 't', 'o', 'c', 'n', 'l', 'h', 9, 0,
  /* 5712 */ 'l', 'o', 'c', 'g', 'n', 'l', 'h', 9, 0,
  /* 5721 */ 's', 't', 'o', 'c', 'g', 'n', 'l', 'h', 9, 0,
  /* 5731 */ 'j', 'g', 'n', 'l', 'h', 9, 0,
  /* 5738 */ 'l', 'o', 'c', 'f', 'h', 'n', 'l', 'h', 9, 0,
  /* 5748 */ 's', 't', 'o', 'c', 'f', 'h', 'n', 'l', 'h', 9, 0,
  /* 5759 */ 'l', 'o', 'c', 'h', 'i', 'n', 'l', 'h', 9, 0,
  /* 5769 */ 'l', 'o', 'c', 'g', 'h', 'i', 'n', 'l', 'h', 9, 0,
  /* 5780 */ 'l', 'o', 'c', 'h', 'h', 'i', 'n', 'l', 'h', 9, 0,
  /* 5791 */ 'c', 'i', 'j', 'n', 'l', 'h', 9, 0,
  /* 5799 */ 'c', 'g', 'i', 'j', 'n', 'l', 'h', 9, 0,
  /* 5808 */ 'c', 'l', 'g', 'i', 'j', 'n', 'l', 'h', 9, 0,
  /* 5818 */ 'c', 'l', 'i', 'j', 'n', 'l', 'h', 9, 0,
  /* 5827 */ 'c', 'r', 'j', 'n', 'l', 'h', 9, 0,
  /* 5835 */ 'c', 'g', 'r', 'j', 'n', 'l', 'h', 9, 0,
  /* 5844 */ 'c', 'l', 'g', 'r', 'j', 'n', 'l', 'h', 9, 0,
  /* 5854 */ 'c', 'l', 'r', 'j', 'n', 'l', 'h', 9, 0,
  /* 5863 */ 'v', 'm', 'n', 'l', 'h', 9, 0,
  /* 5870 */ 'l', 'o', 'c', 'r', 'n', 'l', 'h', 9, 0,
  /* 5879 */ 'l', 'o', 'c', 'g', 'r', 'n', 'l', 'h', 9, 0,
  /* 5889 */ 'l', 'o', 'c', 'f', 'h', 'r', 'n', 'l', 'h', 9, 0,
  /* 5900 */ 'c', 'l', 'g', 't', 'n', 'l', 'h', 9, 0,
  /* 5909 */ 'c', 'i', 't', 'n', 'l', 'h', 9, 0,
  /* 5917 */ 'c', 'l', 'f', 'i', 't', 'n', 'l', 'h', 9, 0,
  /* 5927 */ 'c', 'g', 'i', 't', 'n', 'l', 'h', 9, 0,
  /* 5936 */ 'c', 'l', 'g', 'i', 't', 'n', 'l', 'h', 9, 0,
  /* 5946 */ 'c', 'l', 't', 'n', 'l', 'h', 9, 0,
  /* 5954 */ 'c', 'r', 't', 'n', 'l', 'h', 9, 0,
  /* 5962 */ 'c', 'g', 'r', 't', 'n', 'l', 'h', 9, 0,
  /* 5971 */ 'c', 'l', 'g', 'r', 't', 'n', 'l', 'h', 9, 0,
  /* 5981 */ 'c', 'l', 'r', 't', 'n', 'l', 'h', 9, 0,
  /* 5990 */ 'v', 'u', 'p', 'l', 'h', 9, 0,
  /* 5997 */ 'l', 'o', 'c', 'r', 'l', 'h', 9, 0,
  /* 6005 */ 'l', 'o', 'c', 'g', 'r', 'l', 'h', 9, 0,
  /* 6014 */ 'l', 'o', 'c', 'f', 'h', 'r', 'l', 'h', 9, 0,
  /* 6024 */ 'v', 'm', 'r', 'l', 'h', 9, 0,
  /* 6031 */ 'v', 'e', 's', 'r', 'l', 'h', 9, 0,
  /* 6039 */ 'v', 'e', 's', 'l', 'h', 9, 0,
  /* 6046 */ 'c', 'l', 'g', 't', 'l', 'h', 9, 0,
  /* 6054 */ 'c', 'i', 't', 'l', 'h', 9, 0,
  /* 6061 */ 'c', 'l', 'f', 'i', 't', 'l', 'h', 9, 0,
  /* 6070 */ 'c', 'g', 'i', 't', 'l', 'h', 9, 0,
  /* 6078 */ 'c', 'l', 'g', 'i', 't', 'l', 'h', 9, 0,
  /* 6087 */ 'c', 'l', 't', 'l', 'h', 9, 0,
  /* 6094 */ 'c', 'r', 't', 'l', 'h', 9, 0,
  /* 6101 */ 'c', 'g', 'r', 't', 'l', 'h', 9, 0,
  /* 6109 */ 'c', 'l', 'g', 'r', 't', 'l', 'h', 9, 0,
  /* 6118 */ 'c', 'l', 'r', 't', 'l', 'h', 9, 0,
  /* 6126 */ 'v', 'm', 'x', 'l', 'h', 9, 0,
  /* 6133 */ 'i', 'c', 'm', 'h', 9, 0,
  /* 6139 */ 'v', 'g', 'f', 'm', 'h', 9, 0,
  /* 6146 */ 'v', 'g', 'm', 'h', 9, 0,
  /* 6152 */ 'v', 'e', 'r', 'i', 'm', 'h', 9, 0,
  /* 6160 */ 'l', 'm', 'h', 9, 0,
  /* 6165 */ 's', 't', 'm', 'h', 9, 0,
  /* 6171 */ 'v', 's', 'u', 'm', 'h', 9, 0,
  /* 6178 */ 'v', 'm', 'h', 9, 0,
  /* 6183 */ 'c', 'i', 'b', 'n', 'h', 9, 0,
  /* 6190 */ 'c', 'g', 'i', 'b', 'n', 'h', 9, 0,
  /* 6198 */ 'c', 'l', 'g', 'i', 'b', 'n', 'h', 9, 0,
  /* 6207 */ 'c', 'l', 'i', 'b', 'n', 'h', 9, 0,
  /* 6215 */ 'c', 'r', 'b', 'n', 'h', 9, 0,
  /* 6222 */ 'c', 'g', 'r', 'b', 'n', 'h', 9, 0,
  /* 6230 */ 'c', 'l', 'g', 'r', 'b', 'n', 'h', 9, 0,
  /* 6239 */ 'c', 'l', 'r', 'b', 'n', 'h', 9, 0,
  /* 6247 */ 'l', 'o', 'c', 'n', 'h', 9, 0,
  /* 6254 */ 's', 't', 'o', 'c', 'n', 'h', 9, 0,
  /* 6262 */ 'l', 'o', 'c', 'g', 'n', 'h', 9, 0,
  /* 6270 */ 's', 't', 'o', 'c', 'g', 'n', 'h', 9, 0,
  /* 6279 */ 'j', 'g', 'n', 'h', 9, 0,
  /* 6285 */ 'l', 'o', 'c', 'f', 'h', 'n', 'h', 9, 0,
  /* 6294 */ 's', 't', 'o', 'c', 'f', 'h', 'n', 'h', 9, 0,
  /* 6304 */ 'l', 'o', 'c', 'h', 'i', 'n', 'h', 9, 0,
  /* 6313 */ 'l', 'o', 'c', 'g', 'h', 'i', 'n', 'h', 9, 0,
  /* 6323 */ 'l', 'o', 'c', 'h', 'h', 'i', 'n', 'h', 9, 0,
  /* 6333 */ 'c', 'i', 'j', 'n', 'h', 9, 0,
  /* 6340 */ 'c', 'g', 'i', 'j', 'n', 'h', 9, 0,
  /* 6348 */ 'c', 'l', 'g', 'i', 'j', 'n', 'h', 9, 0,
  /* 6357 */ 'c', 'l', 'i', 'j', 'n', 'h', 9, 0,
  /* 6365 */ 'c', 'r', 'j', 'n', 'h', 9, 0,
  /* 6372 */ 'c', 'g', 'r', 'j', 'n', 'h', 9, 0,
  /* 6380 */ 'c', 'l', 'g', 'r', 'j', 'n', 'h', 9, 0,
  /* 6389 */ 'c', 'l', 'r', 'j', 'n', 'h', 9, 0,
  /* 6397 */ 'v', 'm', 'n', 'h', 9, 0,
  /* 6403 */ 'l', 'o', 'c', 'r', 'n', 'h', 9, 0,
  /* 6411 */ 'l', 'o', 'c', 'g', 'r', 'n', 'h', 9, 0,
  /* 6420 */ 'l', 'o', 'c', 'f', 'h', 'r', 'n', 'h', 9, 0,
  /* 6430 */ 'c', 'l', 'g', 't', 'n', 'h', 9, 0,
  /* 6438 */ 'c', 'i', 't', 'n', 'h', 9, 0,
  /* 6445 */ 'c', 'l', 'f', 'i', 't', 'n', 'h', 9, 0,
  /* 6454 */ 'c', 'g', 'i', 't', 'n', 'h', 9, 0,
  /* 6462 */ 'c', 'l', 'g', 'i', 't', 'n', 'h', 9, 0,
  /* 6471 */ 'c', 'l', 't', 'n', 'h', 9, 0,
  /* 6478 */ 'c', 'r', 't', 'n', 'h', 9, 0,
  /* 6485 */ 'c', 'g', 'r', 't', 'n', 'h', 9, 0,
  /* 6493 */ 'c', 'l', 'g', 'r', 't', 'n', 'h', 9, 0,
  /* 6502 */ 'c', 'l', 'r', 't', 'n', 'h', 9, 0,
  /* 6510 */ 'v', 'm', 'a', 'o', 'h', 9, 0,
  /* 6517 */ 'v', 'm', 'a', 'l', 'o', 'h', 9, 0,
  /* 6525 */ 'v', 'm', 'l', 'o', 'h', 9, 0,
  /* 6532 */ 'v', 'm', 'o', 'h', 9, 0,
  /* 6538 */ 'v', 'l', 'r', 'e', 'p', 'h', 9, 0,
  /* 6546 */ 'v', 'r', 'e', 'p', 'h', 9, 0,
  /* 6553 */ 'v', 'l', 'p', 'h', 9, 0,
  /* 6559 */ 'v', 'u', 'p', 'h', 9, 0,
  /* 6565 */ 'v', 'c', 'e', 'q', 'h', 9, 0,
  /* 6572 */ 'l', 'o', 'c', 'r', 'h', 9, 0,
  /* 6579 */ 'l', 'o', 'c', 'g', 'r', 'h', 9, 0,
  /* 6587 */ 'l', 'o', 'c', 'f', 'h', 'r', 'h', 9, 0,
  /* 6596 */ 'v', 'm', 'r', 'h', 9, 0,
  /* 6602 */ 'v', 'i', 's', 't', 'r', 'h', 9, 0,
  /* 6610 */ 'v', 'p', 'k', 's', 'h', 9, 0,
  /* 6617 */ 'v', 'p', 'k', 'l', 's', 'h', 9, 0,
  /* 6625 */ 'v', 's', 'h', 9, 0,
  /* 6630 */ 'b', 'r', 'c', 't', 'h', 9, 0,
  /* 6637 */ 'c', 'l', 'g', 't', 'h', 9, 0,
  /* 6644 */ 'c', 'i', 't', 'h', 9, 0,
  /* 6650 */ 'c', 'l', 'f', 'i', 't', 'h', 9, 0,
  /* 6658 */ 'c', 'g', 'i', 't', 'h', 9, 0,
  /* 6665 */ 'c', 'l', 'g', 'i', 't', 'h', 9, 0,
  /* 6673 */ 'c', 'l', 't', 'h', 9, 0,
  /* 6679 */ 'c', 'r', 't', 'h', 9, 0,
  /* 6685 */ 'c', 'g', 'r', 't', 'h', 9, 0,
  /* 6692 */ 'c', 'l', 'g', 'r', 't', 'h', 9, 0,
  /* 6700 */ 'c', 'l', 'r', 't', 'h', 9, 0,
  /* 6707 */ 's', 't', 'h', 9, 0,
  /* 6712 */ 'v', 'e', 's', 'r', 'a', 'v', 'h', 9, 0,
  /* 6721 */ 'v', 'l', 'g', 'v', 'h', 9, 0,
  /* 6728 */ 'v', 'e', 'r', 'l', 'l', 'v', 'h', 9, 0,
  /* 6737 */ 'v', 'e', 's', 'r', 'l', 'v', 'h', 9, 0,
  /* 6746 */ 'v', 'e', 's', 'l', 'v', 'h', 9, 0,
  /* 6754 */ 'l', 'r', 'v', 'h', 9, 0,
  /* 6760 */ 's', 't', 'r', 'v', 'h', 9, 0,
  /* 6767 */ 'b', 'x', 'h', 9, 0,
  /* 6772 */ 'v', 'm', 'x', 'h', 9, 0,
  /* 6778 */ 'b', 'r', 'x', 'h', 9, 0,
  /* 6784 */ 'v', 's', 't', 'r', 'c', 'z', 'h', 9, 0,
  /* 6793 */ 'v', 'f', 'a', 'e', 'z', 'h', 9, 0,
  /* 6801 */ 'v', 'f', 'e', 'e', 'z', 'h', 9, 0,
  /* 6809 */ 'v', 'l', 'l', 'e', 'z', 'h', 9, 0,
  /* 6817 */ 'v', 'f', 'e', 'n', 'e', 'z', 'h', 9, 0,
  /* 6826 */ 'v', 'c', 'l', 'z', 'h', 9, 0,
  /* 6833 */ 'v', 'c', 't', 'z', 'h', 9, 0,
  /* 6840 */ 'n', 'i', 'a', 'i', 9, 0,
  /* 6846 */ 'v', 's', 'b', 'c', 'b', 'i', 9, 0,
  /* 6854 */ 'v', 's', 'c', 'b', 'i', 9, 0,
  /* 6861 */ 'v', 's', 'b', 'i', 9, 0,
  /* 6867 */ 'v', 'f', 't', 'c', 'i', 9, 0,
  /* 6874 */ 'v', 'p', 'd', 'i', 9, 0,
  /* 6880 */ 'a', 'f', 'i', 9, 0,
  /* 6885 */ 'c', 'f', 'i', 9, 0,
  /* 6890 */ 'a', 'g', 'f', 'i', 9, 0,
  /* 6896 */ 'c', 'g', 'f', 'i', 9, 0,
  /* 6902 */ 'a', 'l', 'g', 'f', 'i', 9, 0,
  /* 6909 */ 'c', 'l', 'g', 'f', 'i', 9, 0,
  /* 6916 */ 's', 'l', 'g', 'f', 'i', 9, 0,
  /* 6923 */ 'm', 's', 'g', 'f', 'i', 9, 0,
  /* 6930 */ 'a', 'l', 'f', 'i', 9, 0,
  /* 6936 */ 'c', 'l', 'f', 'i', 9, 0,
  /* 6942 */ 's', 'l', 'f', 'i', 9, 0,
  /* 6948 */ 'm', 's', 'f', 'i', 9, 0,
  /* 6954 */ 'v', 'f', 'i', 9, 0,
  /* 6959 */ 'a', 'h', 'i', 9, 0,
  /* 6964 */ 'l', 'o', 'c', 'h', 'i', 9, 0,
  /* 6971 */ 'a', 'g', 'h', 'i', 9, 0,
  /* 6977 */ 'l', 'o', 'c', 'g', 'h', 'i', 9, 0,
  /* 6985 */ 'l', 'g', 'h', 'i', 9, 0,
  /* 6991 */ 'm', 'g', 'h', 'i', 9, 0,
  /* 6997 */ 'm', 'v', 'g', 'h', 'i', 9, 0,
  /* 7004 */ 'l', 'o', 'c', 'h', 'h', 'i', 9, 0,
  /* 7012 */ 'm', 'v', 'h', 'h', 'i', 9, 0,
  /* 7019 */ 'l', 'h', 'i', 9, 0,
  /* 7024 */ 'm', 'h', 'i', 9, 0,
  /* 7029 */ 'm', 'v', 'h', 'i', 9, 0,
  /* 7035 */ 'c', 'l', 'i', 9, 0,
  /* 7040 */ 'n', 'i', 9, 0,
  /* 7044 */ 'o', 'i', 9, 0,
  /* 7048 */ 'v', 'r', 'e', 'p', 'i', 9, 0,
  /* 7055 */ 'a', 's', 'i', 9, 0,
  /* 7060 */ 'a', 'g', 's', 'i', 9, 0,
  /* 7066 */ 'c', 'h', 's', 'i', 9, 0,
  /* 7072 */ 'c', 'l', 'f', 'h', 's', 'i', 9, 0,
  /* 7080 */ 'c', 'g', 'h', 's', 'i', 9, 0,
  /* 7087 */ 'c', 'l', 'g', 'h', 's', 'i', 9, 0,
  /* 7095 */ 'c', 'h', 'h', 's', 'i', 9, 0,
  /* 7102 */ 'c', 'l', 'h', 'h', 's', 'i', 9, 0,
  /* 7110 */ 'm', 'v', 'i', 9, 0,
  /* 7115 */ 'x', 'i', 9, 0,
  /* 7119 */ 'c', 'i', 'j', 9, 0,
  /* 7124 */ 'c', 'g', 'i', 'j', 9, 0,
  /* 7130 */ 'c', 'l', 'g', 'i', 'j', 9, 0,
  /* 7137 */ 'c', 'l', 'i', 'j', 9, 0,
  /* 7143 */ 'c', 'r', 'j', 9, 0,
  /* 7148 */ 'c', 'g', 'r', 'j', 9, 0,
  /* 7154 */ 'c', 'l', 'g', 'r', 'j', 9, 0,
  /* 7161 */ 'c', 'l', 'r', 'j', 9, 0,
  /* 7167 */ 's', 'l', 'a', 'k', 9, 0,
  /* 7173 */ 's', 'r', 'a', 'k', 9, 0,
  /* 7179 */ 's', 't', 'c', 'k', 9, 0,
  /* 7185 */ 'm', 'v', 'c', 'k', 9, 0,
  /* 7191 */ 'w', 'f', 'k', 9, 0,
  /* 7196 */ 'a', 'h', 'i', 'k', 9, 0,
  /* 7202 */ 'a', 'g', 'h', 'i', 'k', 9, 0,
  /* 7209 */ 'a', 'l', 'g', 'h', 's', 'i', 'k', 9, 0,
  /* 7218 */ 'a', 'l', 'h', 's', 'i', 'k', 9, 0,
  /* 7226 */ 's', 'l', 'l', 'k', 9, 0,
  /* 7232 */ 's', 'r', 'l', 'k', 9, 0,
  /* 7238 */ 'v', 'p', 'k', 9, 0,
  /* 7243 */ 'a', 'r', 'k', 9, 0,
  /* 7248 */ 'a', 'g', 'r', 'k', 9, 0,
  /* 7254 */ 'a', 'l', 'g', 'r', 'k', 9, 0,
  /* 7261 */ 's', 'l', 'g', 'r', 'k', 9, 0,
  /* 7268 */ 'n', 'g', 'r', 'k', 9, 0,
  /* 7274 */ 'o', 'g', 'r', 'k', 9, 0,
  /* 7280 */ 's', 'g', 'r', 'k', 9, 0,
  /* 7286 */ 'x', 'g', 'r', 'k', 9, 0,
  /* 7292 */ 'a', 'l', 'r', 'k', 9, 0,
  /* 7298 */ 's', 'l', 'r', 'k', 9, 0,
  /* 7304 */ 'n', 'r', 'k', 9, 0,
  /* 7309 */ 'o', 'r', 'k', 9, 0,
  /* 7314 */ 's', 'r', 'k', 9, 0,
  /* 7319 */ 'x', 'r', 'k', 9, 0,
  /* 7324 */ 'l', 'a', 'a', 'l', 9, 0,
  /* 7330 */ 'b', 'a', 'l', 9, 0,
  /* 7335 */ 'v', 'm', 'a', 'l', 9, 0,
  /* 7341 */ 'c', 'i', 'b', 'l', 9, 0,
  /* 7347 */ 'c', 'g', 'i', 'b', 'l', 9, 0,
  /* 7354 */ 'c', 'l', 'g', 'i', 'b', 'l', 9, 0,
  /* 7362 */ 'c', 'l', 'i', 'b', 'l', 9, 0,
  /* 7369 */ 'c', 'r', 'b', 'l', 9, 0,
  /* 7375 */ 'c', 'g', 'r', 'b', 'l', 9, 0,
  /* 7382 */ 'c', 'l', 'g', 'r', 'b', 'l', 9, 0,
  /* 7390 */ 'c', 'l', 'r', 'b', 'l', 9, 0,
  /* 7397 */ 'v', 'e', 'c', 'l', 9, 0,
  /* 7403 */ 'l', 'o', 'c', 'l', 9, 0,
  /* 7409 */ 's', 't', 'o', 'c', 'l', 9, 0,
  /* 7416 */ 'b', 'r', 'c', 'l', 9, 0,
  /* 7422 */ 'd', 'l', 9, 0,
  /* 7426 */ 'v', 's', 'e', 'l', 9, 0,
  /* 7432 */ 'l', 'o', 'c', 'g', 'l', 9, 0,
  /* 7439 */ 's', 't', 'o', 'c', 'g', 'l', 9, 0,
  /* 7447 */ 'j', 'g', 'l', 9, 0,
  /* 7452 */ 'v', 'a', 'v', 'g', 'l', 9, 0,
  /* 7459 */ 'v', 'c', 'h', 'l', 9, 0,
  /* 7465 */ 'l', 'o', 'c', 'f', 'h', 'l', 9, 0,
  /* 7473 */ 's', 't', 'o', 'c', 'f', 'h', 'l', 9, 0,
  /* 7482 */ 'i', 'i', 'h', 'l', 9, 0,
  /* 7488 */ 'l', 'l', 'i', 'h', 'l', 9, 0,
  /* 7495 */ 'n', 'i', 'h', 'l', 9, 0,
  /* 7501 */ 'o', 'i', 'h', 'l', 9, 0,
  /* 7507 */ 't', 'm', 'h', 'l', 9, 0,
  /* 7513 */ 'l', 'o', 'c', 'h', 'i', 'l', 9, 0,
  /* 7521 */ 'l', 'o', 'c', 'g', 'h', 'i', 'l', 9, 0,
  /* 7530 */ 'l', 'o', 'c', 'h', 'h', 'i', 'l', 9, 0,
  /* 7539 */ 'c', 'i', 'j', 'l', 9, 0,
  /* 7545 */ 'c', 'g', 'i', 'j', 'l', 9, 0,
  /* 7552 */ 'c', 'l', 'g', 'i', 'j', 'l', 9, 0,
  /* 7560 */ 'c', 'l', 'i', 'j', 'l', 9, 0,
  /* 7567 */ 'c', 'r', 'j', 'l', 9, 0,
  /* 7573 */ 'c', 'g', 'r', 'j', 'l', 9, 0,
  /* 7580 */ 'c', 'l', 'g', 'r', 'j', 'l', 9, 0,
  /* 7588 */ 'c', 'l', 'r', 'j', 'l', 9, 0,
  /* 7595 */ 'i', 'i', 'l', 'l', 9, 0,
  /* 7601 */ 'l', 'l', 'i', 'l', 'l', 9, 0,
  /* 7608 */ 'n', 'i', 'l', 'l', 9, 0,
  /* 7614 */ 'o', 'i', 'l', 'l', 9, 0,
  /* 7620 */ 't', 'm', 'l', 'l', 9, 0,
  /* 7626 */ 'v', 'u', 'p', 'l', 'l', 9, 0,
  /* 7633 */ 'v', 'e', 'r', 'l', 'l', 9, 0,
  /* 7640 */ 's', 'l', 'l', 9, 0,
  /* 7645 */ 'v', 'l', 'l', 9, 0,
  /* 7650 */ 'v', 'm', 'l', 9, 0,
  /* 7655 */ 'c', 'i', 'b', 'n', 'l', 9, 0,
  /* 7662 */ 'c', 'g', 'i', 'b', 'n', 'l', 9, 0,
  /* 7670 */ 'c', 'l', 'g', 'i', 'b', 'n', 'l', 9, 0,
  /* 7679 */ 'c', 'l', 'i', 'b', 'n', 'l', 9, 0,
  /* 7687 */ 'c', 'r', 'b', 'n', 'l', 9, 0,
  /* 7694 */ 'c', 'g', 'r', 'b', 'n', 'l', 9, 0,
  /* 7702 */ 'c', 'l', 'g', 'r', 'b', 'n', 'l', 9, 0,
  /* 7711 */ 'c', 'l', 'r', 'b', 'n', 'l', 9, 0,
  /* 7719 */ 'l', 'o', 'c', 'n', 'l', 9, 0,
  /* 7726 */ 's', 't', 'o', 'c', 'n', 'l', 9, 0,
  /* 7734 */ 'l', 'o', 'c', 'g', 'n', 'l', 9, 0,
  /* 7742 */ 's', 't', 'o', 'c', 'g', 'n', 'l', 9, 0,
  /* 7751 */ 'j', 'g', 'n', 'l', 9, 0,
  /* 7757 */ 'l', 'o', 'c', 'f', 'h', 'n', 'l', 9, 0,
  /* 7766 */ 's', 't', 'o', 'c', 'f', 'h', 'n', 'l', 9, 0,
  /* 7776 */ 'l', 'o', 'c', 'h', 'i', 'n', 'l', 9, 0,
  /* 7785 */ 'l', 'o', 'c', 'g', 'h', 'i', 'n', 'l', 9, 0,
  /* 7795 */ 'l', 'o', 'c', 'h', 'h', 'i', 'n', 'l', 9, 0,
  /* 7805 */ 'c', 'i', 'j', 'n', 'l', 9, 0,
  /* 7812 */ 'c', 'g', 'i', 'j', 'n', 'l', 9, 0,
  /* 7820 */ 'c', 'l', 'g', 'i', 'j', 'n', 'l', 9, 0,
  /* 7829 */ 'c', 'l', 'i', 'j', 'n', 'l', 9, 0,
  /* 7837 */ 'c', 'r', 'j', 'n', 'l', 9, 0,
  /* 7844 */ 'c', 'g', 'r', 'j', 'n', 'l', 9, 0,
  /* 7852 */ 'c', 'l', 'g', 'r', 'j', 'n', 'l', 9, 0,
  /* 7861 */ 'c', 'l', 'r', 'j', 'n', 'l', 9, 0,
  /* 7869 */ 'v', 'm', 'n', 'l', 9, 0,
  /* 7875 */ 'l', 'o', 'c', 'r', 'n', 'l', 9, 0,
  /* 7883 */ 'l', 'o', 'c', 'g', 'r', 'n', 'l', 9, 0,
  /* 7892 */ 'l', 'o', 'c', 'f', 'h', 'r', 'n', 'l', 9, 0,
  /* 7902 */ 'c', 'l', 'g', 't', 'n', 'l', 9, 0,
  /* 7910 */ 'c', 'i', 't', 'n', 'l', 9, 0,
  /* 7917 */ 'c', 'l', 'f', 'i', 't', 'n', 'l', 9, 0,
  /* 7926 */ 'c', 'g', 'i', 't', 'n', 'l', 9, 0,
  /* 7934 */ 'c', 'l', 'g', 'i', 't', 'n', 'l', 9, 0,
  /* 7943 */ 'c', 'l', 't', 'n', 'l', 9, 0,
  /* 7950 */ 'c', 'r', 't', 'n', 'l', 9, 0,
  /* 7957 */ 'c', 'g', 'r', 't', 'n', 'l', 9, 0,
  /* 7965 */ 'c', 'l', 'g', 'r', 't', 'n', 'l', 9, 0,
  /* 7974 */ 'c', 'l', 'r', 't', 'n', 'l', 9, 0,
  /* 7982 */ 'v', 'u', 'p', 'l', 9, 0,
  /* 7988 */ 'l', 'a', 'r', 'l', 9, 0,
  /* 7994 */ 'l', 'o', 'c', 'r', 'l', 9, 0,
  /* 8001 */ 'p', 'f', 'd', 'r', 'l', 9, 0,
  /* 8008 */ 'c', 'g', 'f', 'r', 'l', 9, 0,
  /* 8015 */ 'c', 'l', 'g', 'f', 'r', 'l', 9, 0,
  /* 8023 */ 'l', 'l', 'g', 'f', 'r', 'l', 9, 0,
  /* 8031 */ 'l', 'o', 'c', 'g', 'r', 'l', 9, 0,
  /* 8039 */ 'c', 'l', 'g', 'r', 'l', 9, 0,
  /* 8046 */ 's', 't', 'g', 'r', 'l', 9, 0,
  /* 8053 */ 'c', 'h', 'r', 'l', 9, 0,
  /* 8059 */ 'l', 'o', 'c', 'f', 'h', 'r', 'l', 9, 0,
  /* 8068 */ 'c', 'g', 'h', 'r', 'l', 9, 0,
  /* 8075 */ 'c', 'l', 'g', 'h', 'r', 'l', 9, 0,
  /* 8083 */ 'l', 'l', 'g', 'h', 'r', 'l', 9, 0,
  /* 8091 */ 'c', 'l', 'h', 'r', 'l', 9, 0,
  /* 8098 */ 'l', 'l', 'h', 'r', 'l', 9, 0,
  /* 8105 */ 's', 't', 'h', 'r', 'l', 9, 0,
  /* 8112 */ 'c', 'l', 'r', 'l', 9, 0,
  /* 8118 */ 'v', 'm', 'r', 'l', 9, 0,
  /* 8124 */ 'v', 'e', 's', 'r', 'l', 9, 0,
  /* 8131 */ 'v', 's', 'r', 'l', 9, 0,
  /* 8137 */ 's', 't', 'r', 'l', 9, 0,
  /* 8143 */ 'e', 'x', 'r', 'l', 9, 0,
  /* 8149 */ 'b', 'r', 'a', 's', 'l', 9, 0,
  /* 8156 */ 'v', 'e', 's', 'l', 9, 0,
  /* 8162 */ 'v', 's', 'l', 9, 0,
  /* 8167 */ 'c', 'l', 'g', 't', 'l', 9, 0,
  /* 8174 */ 'c', 'i', 't', 'l', 9, 0,
  /* 8180 */ 'c', 'l', 'f', 'i', 't', 'l', 9, 0,
  /* 8188 */ 'c', 'g', 'i', 't', 'l', 9, 0,
  /* 8195 */ 'c', 'l', 'g', 'i', 't', 'l', 9, 0,
  /* 8203 */ 'c', 'l', 't', 'l', 9, 0,
  /* 8209 */ 'c', 'r', 't', 'l', 9, 0,
  /* 8215 */ 'c', 'g', 'r', 't', 'l', 9, 0,
  /* 8222 */ 'c', 'l', 'g', 'r', 't', 'l', 9, 0,
  /* 8230 */ 'c', 'l', 'r', 't', 'l', 9, 0,
  /* 8237 */ 'v', 's', 't', 'l', 9, 0,
  /* 8243 */ 'v', 'l', 9, 0,
  /* 8247 */ 'v', 'm', 'x', 'l', 9, 0,
  /* 8253 */ 'l', 'a', 'm', 9, 0,
  /* 8258 */ 's', 't', 'a', 'm', 9, 0,
  /* 8264 */ 'v', 'g', 'b', 'm', 9, 0,
  /* 8270 */ 'i', 'c', 'm', 9, 0,
  /* 8275 */ 'l', 'o', 'c', 'm', 9, 0,
  /* 8281 */ 's', 't', 'o', 'c', 'm', 9, 0,
  /* 8288 */ 'v', 'g', 'f', 'm', 9, 0,
  /* 8294 */ 'v', 'f', 'm', 9, 0,
  /* 8299 */ 'l', 'o', 'c', 'g', 'm', 9, 0,
  /* 8306 */ 's', 't', 'o', 'c', 'g', 'm', 9, 0,
  /* 8314 */ 'j', 'g', 'm', 9, 0,
  /* 8319 */ 'v', 'g', 'm', 9, 0,
  /* 8324 */ 'l', 'o', 'c', 'f', 'h', 'm', 9, 0,
  /* 8332 */ 's', 't', 'o', 'c', 'f', 'h', 'm', 9, 0,
  /* 8341 */ 'l', 'o', 'c', 'h', 'i', 'm', 9, 0,
  /* 8349 */ 'l', 'o', 'c', 'g', 'h', 'i', 'm', 9, 0,
  /* 8358 */ 'l', 'o', 'c', 'h', 'h', 'i', 'm', 9, 0,
  /* 8367 */ 'v', 'e', 'r', 'i', 'm', 9, 0,
  /* 8374 */ 'j', 'm', 9, 0,
  /* 8378 */ 'v', 'l', 'm', 9, 0,
  /* 8383 */ 'b', 'n', 'm', 9, 0,
  /* 8388 */ 'l', 'o', 'c', 'n', 'm', 9, 0,
  /* 8395 */ 's', 't', 'o', 'c', 'n', 'm', 9, 0,
  /* 8403 */ 'l', 'o', 'c', 'g', 'n', 'm', 9, 0,
  /* 8411 */ 's', 't', 'o', 'c', 'g', 'n', 'm', 9, 0,
  /* 8420 */ 'j', 'g', 'n', 'm', 9, 0,
  /* 8426 */ 'l', 'o', 'c', 'f', 'h', 'n', 'm', 9, 0,
  /* 8435 */ 's', 't', 'o', 'c', 'f', 'h', 'n', 'm', 9, 0,
  /* 8445 */ 'l', 'o', 'c', 'h', 'i', 'n', 'm', 9, 0,
  /* 8454 */ 'l', 'o', 'c', 'g', 'h', 'i', 'n', 'm', 9, 0,
  /* 8464 */ 'l', 'o', 'c', 'h', 'h', 'i', 'n', 'm', 9, 0,
  /* 8474 */ 'j', 'n', 'm', 9, 0,
  /* 8479 */ 'l', 'o', 'c', 'r', 'n', 'm', 9, 0,
  /* 8487 */ 'l', 'o', 'c', 'g', 'r', 'n', 'm', 9, 0,
  /* 8496 */ 'l', 'o', 'c', 'f', 'h', 'r', 'n', 'm', 9, 0,
  /* 8506 */ 's', 'r', 'n', 'm', 9, 0,
  /* 8512 */ 'i', 'p', 'm', 9, 0,
  /* 8517 */ 's', 'p', 'm', 9, 0,
  /* 8522 */ 'l', 'o', 'c', 'r', 'm', 9, 0,
  /* 8529 */ 'v', 'p', 'e', 'r', 'm', 9, 0,
  /* 8536 */ 'l', 'o', 'c', 'g', 'r', 'm', 9, 0,
  /* 8544 */ 'l', 'o', 'c', 'f', 'h', 'r', 'm', 9, 0,
  /* 8553 */ 'b', 's', 'm', 9, 0,
  /* 8558 */ 'v', 'c', 'k', 's', 'm', 9, 0,
  /* 8565 */ 'b', 'a', 's', 's', 'm', 9, 0,
  /* 8572 */ 'v', 's', 't', 'm', 9, 0,
  /* 8578 */ 'v', 't', 'm', 9, 0,
  /* 8583 */ 'v', 's', 'u', 'm', 9, 0,
  /* 8589 */ 'l', 'a', 'n', 9, 0,
  /* 8594 */ 'r', 'i', 's', 'b', 'g', 'n', 9, 0,
  /* 8602 */ 't', 'b', 'e', 'g', 'i', 'n', 9, 0,
  /* 8610 */ 'v', 'm', 'n', 9, 0,
  /* 8615 */ 'v', 'n', 9, 0,
  /* 8619 */ 'l', 'a', 'o', 9, 0,
  /* 8624 */ 'v', 'm', 'a', 'o', 9, 0,
  /* 8630 */ 'b', 'o', 9, 0,
  /* 8634 */ 'l', 'o', 'c', 'o', 9, 0,
  /* 8640 */ 's', 't', 'o', 'c', 'o', 9, 0,
  /* 8647 */ 'l', 'o', 'c', 'g', 'o', 9, 0,
  /* 8654 */ 's', 't', 'o', 'c', 'g', 'o', 9, 0,
  /* 8662 */ 'j', 'g', 'o', 9, 0,
  /* 8667 */ 'l', 'o', 'c', 'f', 'h', 'o', 9, 0,
  /* 8675 */ 's', 't', 'o', 'c', 'f', 'h', 'o', 9, 0,
  /* 8684 */ 'l', 'o', 'c', 'h', 'i', 'o', 9, 0,
  /* 8692 */ 'l', 'o', 'c', 'g', 'h', 'i', 'o', 9, 0,
  /* 8701 */ 'l', 'o', 'c', 'h', 'h', 'i', 'o', 9, 0,
  /* 8710 */ 'j', 'o', 9, 0,
  /* 8714 */ 'v', 'm', 'a', 'l', 'o', 9, 0,
  /* 8721 */ 'v', 'm', 'l', 'o', 9, 0,
  /* 8727 */ 'p', 'l', 'o', 9, 0,
  /* 8732 */ 'v', 'm', 'o', 9, 0,
  /* 8737 */ 'b', 'n', 'o', 9, 0,
  /* 8742 */ 'l', 'o', 'c', 'n', 'o', 9, 0,
  /* 8749 */ 's', 't', 'o', 'c', 'n', 'o', 9, 0,
  /* 8757 */ 'l', 'o', 'c', 'g', 'n', 'o', 9, 0,
  /* 8765 */ 's', 't', 'o', 'c', 'g', 'n', 'o', 9, 0,
  /* 8774 */ 'j', 'g', 'n', 'o', 9, 0,
  /* 8780 */ 'l', 'o', 'c', 'f', 'h', 'n', 'o', 9, 0,
  /* 8789 */ 's', 't', 'o', 'c', 'f', 'h', 'n', 'o', 9, 0,
  /* 8799 */ 'l', 'o', 'c', 'h', 'i', 'n', 'o', 9, 0,
  /* 8808 */ 'l', 'o', 'c', 'g', 'h', 'i', 'n', 'o', 9, 0,
  /* 8818 */ 'l', 'o', 'c', 'h', 'h', 'i', 'n', 'o', 9, 0,
  /* 8828 */ 'j', 'n', 'o', 9, 0,
  /* 8833 */ 'l', 'o', 'c', 'r', 'n', 'o', 9, 0,
  /* 8841 */ 'l', 'o', 'c', 'g', 'r', 'n', 'o', 9, 0,
  /* 8850 */ 'l', 'o', 'c', 'f', 'h', 'r', 'n', 'o', 9, 0,
  /* 8860 */ 'v', 'n', 'o', 9, 0,
  /* 8865 */ 'l', 'o', 'c', 'r', 'o', 9, 0,
  /* 8872 */ 'v', 'z', 'e', 'r', 'o', 9, 0,
  /* 8879 */ 'l', 'o', 'c', 'g', 'r', 'o', 9, 0,
  /* 8887 */ 'l', 'o', 'c', 'f', 'h', 'r', 'o', 9, 0,
  /* 8896 */ 'v', 'f', 'p', 's', 'o', 9, 0,
  /* 8903 */ 'v', 'o', 9, 0,
  /* 8907 */ 'b', 'p', 9, 0,
  /* 8911 */ 'l', 'o', 'c', 'p', 9, 0,
  /* 8917 */ 's', 't', 'o', 'c', 'p', 9, 0,
  /* 8924 */ 'v', 'l', 'r', 'e', 'p', 9, 0,
  /* 8931 */ 'v', 'r', 'e', 'p', 9, 0,
  /* 8937 */ 'l', 'o', 'c', 'g', 'p', 9, 0,
  /* 8944 */ 's', 't', 'o', 'c', 'g', 'p', 9, 0,
  /* 8952 */ 'j', 'g', 'p', 9, 0,
  /* 8957 */ 'v', 'l', 'v', 'g', 'p', 9, 0,
  /* 8964 */ 'l', 'o', 'c', 'f', 'h', 'p', 9, 0,
  /* 8972 */ 's', 't', 'o', 'c', 'f', 'h', 'p', 9, 0,
  /* 8981 */ 'l', 'o', 'c', 'h', 'i', 'p', 9, 0,
  /* 8989 */ 'l', 'o', 'c', 'g', 'h', 'i', 'p', 9, 0,
  /* 8998 */ 'l', 'o', 'c', 'h', 'h', 'i', 'p', 9, 0,
  /* 9007 */ 'j', 'p', 9, 0,
  /* 9011 */ 'v', 'l', 'p', 9, 0,
  /* 9016 */ 'b', 'n', 'p', 9, 0,
  /* 9021 */ 'l', 'o', 'c', 'n', 'p', 9, 0,
  /* 9028 */ 's', 't', 'o', 'c', 'n', 'p', 9, 0,
  /* 9036 */ 'l', 'o', 'c', 'g', 'n', 'p', 9, 0,
  /* 9044 */ 's', 't', 'o', 'c', 'g', 'n', 'p', 9, 0,
  /* 9053 */ 'j', 'g', 'n', 'p', 9, 0,
  /* 9059 */ 'l', 'o', 'c', 'f', 'h', 'n', 'p', 9, 0,
  /* 9068 */ 's', 't', 'o', 'c', 'f', 'h', 'n', 'p', 9, 0,
  /* 9078 */ 'l', 'o', 'c', 'h', 'i', 'n', 'p', 9, 0,
  /* 9087 */ 'l', 'o', 'c', 'g', 'h', 'i', 'n', 'p', 9, 0,
  /* 9097 */ 'l', 'o', 'c', 'h', 'h', 'i', 'n', 'p', 9, 0,
  /* 9107 */ 'j', 'n', 'p', 9, 0,
  /* 9112 */ 'l', 'o', 'c', 'r', 'n', 'p', 9, 0,
  /* 9120 */ 'l', 'o', 'c', 'g', 'r', 'n', 'p', 9, 0,
  /* 9129 */ 'l', 'o', 'c', 'f', 'h', 'r', 'n', 'p', 9, 0,
  /* 9139 */ 'b', 'p', 'p', 9, 0,
  /* 9144 */ 'l', 'o', 'c', 'r', 'p', 9, 0,
  /* 9151 */ 'l', 'o', 'c', 'g', 'r', 'p', 9, 0,
  /* 9159 */ 'l', 'o', 'c', 'f', 'h', 'r', 'p', 9, 0,
  /* 9168 */ 'b', 'p', 'r', 'p', 9, 0,
  /* 9174 */ 'v', 'a', 'q', 9, 0,
  /* 9179 */ 'v', 'a', 'c', 'q', 9, 0,
  /* 9185 */ 'v', 'a', 'c', 'c', 'q', 9, 0,
  /* 9192 */ 'v', 'a', 'c', 'c', 'c', 'q', 9, 0,
  /* 9200 */ 'v', 'c', 'e', 'q', 9, 0,
  /* 9206 */ 'v', 's', 'b', 'c', 'b', 'i', 'q', 9, 0,
  /* 9215 */ 'v', 's', 'c', 'b', 'i', 'q', 9, 0,
  /* 9223 */ 'v', 's', 'b', 'i', 'q', 9, 0,
  /* 9230 */ 'v', 's', 'u', 'm', 'q', 9, 0,
  /* 9237 */ 'l', 'p', 'q', 9, 0,
  /* 9242 */ 's', 't', 'p', 'q', 9, 0,
  /* 9248 */ 'v', 'f', 's', 'q', 9, 0,
  /* 9254 */ 'v', 's', 'q', 9, 0,
  /* 9259 */ 'e', 'a', 'r', 9, 0,
  /* 9264 */ 's', 'a', 'r', 9, 0,
  /* 9269 */ 'm', 'a', 'd', 'b', 'r', 9, 0,
  /* 9276 */ 'l', 'c', 'd', 'b', 'r', 9, 0,
  /* 9283 */ 'd', 'd', 'b', 'r', 9, 0,
  /* 9289 */ 'l', 'e', 'd', 'b', 'r', 9, 0,
  /* 9296 */ 'c', 'f', 'd', 'b', 'r', 9, 0,
  /* 9303 */ 'c', 'l', 'f', 'd', 'b', 'r', 9, 0,
  /* 9311 */ 'c', 'g', 'd', 'b', 'r', 9, 0,
  /* 9318 */ 'c', 'l', 'g', 'd', 'b', 'r', 9, 0,
  /* 9326 */ 'f', 'i', 'd', 'b', 'r', 9, 0,
  /* 9333 */ 'm', 'd', 'b', 'r', 9, 0,
  /* 9339 */ 'l', 'n', 'd', 'b', 'r', 9, 0,
  /* 9346 */ 'l', 'p', 'd', 'b', 'r', 9, 0,
  /* 9353 */ 's', 'q', 'd', 'b', 'r', 9, 0,
  /* 9360 */ 'm', 's', 'd', 'b', 'r', 9, 0,
  /* 9367 */ 'l', 't', 'd', 'b', 'r', 9, 0,
  /* 9374 */ 'l', 'x', 'd', 'b', 'r', 9, 0,
  /* 9381 */ 'm', 'x', 'd', 'b', 'r', 9, 0,
  /* 9388 */ 'm', 'a', 'e', 'b', 'r', 9, 0,
  /* 9395 */ 'l', 'c', 'e', 'b', 'r', 9, 0,
  /* 9402 */ 'l', 'd', 'e', 'b', 'r', 9, 0,
  /* 9409 */ 'm', 'd', 'e', 'b', 'r', 9, 0,
  /* 9416 */ 'm', 'e', 'e', 'b', 'r', 9, 0,
  /* 9423 */ 'c', 'f', 'e', 'b', 'r', 9, 0,
  /* 9430 */ 'c', 'l', 'f', 'e', 'b', 'r', 9, 0,
  /* 9438 */ 'c', 'g', 'e', 'b', 'r', 9, 0,
  /* 9445 */ 'c', 'l', 'g', 'e', 'b', 'r', 9, 0,
  /* 9453 */ 'f', 'i', 'e', 'b', 'r', 9, 0,
  /* 9460 */ 'l', 'n', 'e', 'b', 'r', 9, 0,
  /* 9467 */ 'l', 'p', 'e', 'b', 'r', 9, 0,
  /* 9474 */ 's', 'q', 'e', 'b', 'r', 9, 0,
  /* 9481 */ 'm', 's', 'e', 'b', 'r', 9, 0,
  /* 9488 */ 'l', 't', 'e', 'b', 'r', 9, 0,
  /* 9495 */ 'l', 'x', 'e', 'b', 'r', 9, 0,
  /* 9502 */ 'c', 'd', 'f', 'b', 'r', 9, 0,
  /* 9509 */ 'c', 'e', 'f', 'b', 'r', 9, 0,
  /* 9516 */ 'c', 'd', 'l', 'f', 'b', 'r', 9, 0,
  /* 9524 */ 'c', 'e', 'l', 'f', 'b', 'r', 9, 0,
  /* 9532 */ 'c', 'x', 'l', 'f', 'b', 'r', 9, 0,
  /* 9540 */ 'c', 'x', 'f', 'b', 'r', 9, 0,
  /* 9547 */ 'c', 'd', 'g', 'b', 'r', 9, 0,
  /* 9554 */ 'c', 'e', 'g', 'b', 'r', 9, 0,
  /* 9561 */ 'c', 'd', 'l', 'g', 'b', 'r', 9, 0,
  /* 9569 */ 'c', 'e', 'l', 'g', 'b', 'r', 9, 0,
  /* 9577 */ 'c', 'x', 'l', 'g', 'b', 'r', 9, 0,
  /* 9585 */ 'c', 'x', 'g', 'b', 'r', 9, 0,
  /* 9592 */ 's', 'l', 'b', 'r', 9, 0,
  /* 9598 */ 'a', 'x', 'b', 'r', 9, 0,
  /* 9604 */ 'l', 'c', 'x', 'b', 'r', 9, 0,
  /* 9611 */ 'l', 'd', 'x', 'b', 'r', 9, 0,
  /* 9618 */ 'l', 'e', 'x', 'b', 'r', 9, 0,
  /* 9625 */ 'c', 'f', 'x', 'b', 'r', 9, 0,
  /* 9632 */ 'c', 'l', 'f', 'x', 'b', 'r', 9, 0,
  /* 9640 */ 'c', 'g', 'x', 'b', 'r', 9, 0,
  /* 9647 */ 'c', 'l', 'g', 'x', 'b', 'r', 9, 0,
  /* 9655 */ 'f', 'i', 'x', 'b', 'r', 9, 0,
  /* 9662 */ 'm', 'x', 'b', 'r', 9, 0,
  /* 9668 */ 'l', 'n', 'x', 'b', 'r', 9, 0,
  /* 9675 */ 'l', 'p', 'x', 'b', 'r', 9, 0,
  /* 9682 */ 's', 'q', 'x', 'b', 'r', 9, 0,
  /* 9689 */ 's', 'x', 'b', 'r', 9, 0,
  /* 9695 */ 'l', 't', 'x', 'b', 'r', 9, 0,
  /* 9702 */ 'b', 'c', 'r', 9, 0,
  /* 9707 */ 'l', 'l', 'g', 'c', 'r', 9, 0,
  /* 9714 */ 'a', 'l', 'c', 'r', 9, 0,
  /* 9720 */ 'l', 'l', 'c', 'r', 9, 0,
  /* 9726 */ 'l', 'o', 'c', 'r', 9, 0,
  /* 9732 */ 'l', 'g', 'd', 'r', 9, 0,
  /* 9738 */ 'l', 'd', 'r', 9, 0,
  /* 9743 */ 'c', 'p', 's', 'd', 'r', 9, 0,
  /* 9750 */ 'l', 'z', 'd', 'r', 9, 0,
  /* 9756 */ 'b', 'e', 'r', 9, 0,
  /* 9761 */ 'b', 'h', 'e', 'r', 9, 0,
  /* 9767 */ 'b', 'n', 'h', 'e', 'r', 9, 0,
  /* 9774 */ 'b', 'l', 'e', 'r', 9, 0,
  /* 9780 */ 'b', 'n', 'l', 'e', 'r', 9, 0,
  /* 9787 */ 'b', 'n', 'e', 'r', 9, 0,
  /* 9793 */ 'l', 'z', 'e', 'r', 9, 0,
  /* 9799 */ 'l', 'c', 'd', 'f', 'r', 9, 0,
  /* 9806 */ 'l', 'n', 'd', 'f', 'r', 9, 0,
  /* 9813 */ 'l', 'p', 'd', 'f', 'r', 9, 0,
  /* 9820 */ 'a', 'g', 'f', 'r', 9, 0,
  /* 9826 */ 'l', 'c', 'g', 'f', 'r', 9, 0,
  /* 9833 */ 'a', 'l', 'g', 'f', 'r', 9, 0,
  /* 9840 */ 'c', 'l', 'g', 'f', 'r', 9, 0,
  /* 9847 */ 'l', 'l', 'g', 'f', 'r', 9, 0,
  /* 9854 */ 's', 'l', 'g', 'f', 'r', 9, 0,
  /* 9861 */ 'l', 'n', 'g', 'f', 'r', 9, 0,
  /* 9868 */ 'l', 'p', 'g', 'f', 'r', 9, 0,
  /* 9875 */ 'd', 's', 'g', 'f', 'r', 9, 0,
  /* 9882 */ 'm', 's', 'g', 'f', 'r', 9, 0,
  /* 9889 */ 'l', 't', 'g', 'f', 'r', 9, 0,
  /* 9896 */ 'a', 'g', 'r', 9, 0,
  /* 9901 */ 's', 'l', 'b', 'g', 'r', 9, 0,
  /* 9908 */ 'a', 'l', 'c', 'g', 'r', 9, 0,
  /* 9915 */ 'l', 'o', 'c', 'g', 'r', 9, 0,
  /* 9922 */ 'l', 'd', 'g', 'r', 9, 0,
  /* 9928 */ 'a', 'l', 'g', 'r', 9, 0,
  /* 9934 */ 'c', 'l', 'g', 'r', 9, 0,
  /* 9940 */ 'd', 'l', 'g', 'r', 9, 0,
  /* 9946 */ 'm', 'l', 'g', 'r', 9, 0,
  /* 9952 */ 's', 'l', 'g', 'r', 9, 0,
  /* 9958 */ 'l', 'n', 'g', 'r', 9, 0,
  /* 9964 */ 'f', 'l', 'o', 'g', 'r', 9, 0,
  /* 9971 */ 'l', 'p', 'g', 'r', 9, 0,
  /* 9977 */ 'd', 's', 'g', 'r', 9, 0,
  /* 9983 */ 'm', 's', 'g', 'r', 9, 0,
  /* 9989 */ 'b', 'c', 't', 'g', 'r', 9, 0,
  /* 9996 */ 'l', 't', 'g', 'r', 9, 0,
  /* 10002 */ 'l', 'r', 'v', 'g', 'r', 9, 0,
  /* 10009 */ 'x', 'g', 'r', 9, 0,
  /* 10014 */ 'b', 'h', 'r', 9, 0,
  /* 10019 */ 'l', 'o', 'c', 'f', 'h', 'r', 9, 0,
  /* 10027 */ 'l', 'l', 'g', 'h', 'r', 9, 0,
  /* 10034 */ 'b', 'l', 'h', 'r', 9, 0,
  /* 10040 */ 'l', 'l', 'h', 'r', 9, 0,
  /* 10046 */ 'b', 'n', 'l', 'h', 'r', 9, 0,
  /* 10053 */ 'b', 'n', 'h', 'r', 9, 0,
  /* 10059 */ 'b', 'a', 'l', 'r', 9, 0,
  /* 10065 */ 'b', 'l', 'r', 9, 0,
  /* 10070 */ 'c', 'l', 'r', 9, 0,
  /* 10075 */ 'd', 'l', 'r', 9, 0,
  /* 10080 */ 'b', 'n', 'l', 'r', 9, 0,
  /* 10086 */ 's', 'l', 'r', 9, 0,
  /* 10091 */ 'v', 'l', 'r', 9, 0,
  /* 10096 */ 'b', 'm', 'r', 9, 0,
  /* 10101 */ 'b', 'n', 'm', 'r', 9, 0,
  /* 10107 */ 'l', 'n', 'r', 9, 0,
  /* 10112 */ 'b', 'o', 'r', 9, 0,
  /* 10117 */ 'b', 'n', 'o', 'r', 9, 0,
  /* 10123 */ 'b', 'p', 'r', 9, 0,
  /* 10128 */ 'l', 'p', 'r', 9, 0,
  /* 10133 */ 'b', 'n', 'p', 'r', 9, 0,
  /* 10139 */ 'b', 'a', 's', 'r', 9, 0,
  /* 10145 */ 's', 'f', 'a', 's', 'r', 9, 0,
  /* 10152 */ 'm', 's', 'r', 9, 0,
  /* 10157 */ 'b', 'c', 't', 'r', 9, 0,
  /* 10163 */ 'l', 'l', 'g', 't', 'r', 9, 0,
  /* 10170 */ 'l', 't', 'r', 9, 0,
  /* 10175 */ 'v', 'i', 's', 't', 'r', 9, 0,
  /* 10182 */ 'l', 'r', 'v', 'r', 9, 0,
  /* 10188 */ 'l', 'x', 'r', 9, 0,
  /* 10193 */ 'l', 'z', 'x', 'r', 9, 0,
  /* 10199 */ 'b', 'z', 'r', 9, 0,
  /* 10204 */ 'b', 'n', 'z', 'r', 9, 0,
  /* 10210 */ 'b', 'a', 's', 9, 0,
  /* 10215 */ 'l', 'f', 'a', 's', 9, 0,
  /* 10221 */ 'b', 'r', 'a', 's', 9, 0,
  /* 10227 */ 'v', 's', 't', 'r', 'c', 'b', 's', 9, 0,
  /* 10236 */ 'v', 'f', 'c', 'e', 'd', 'b', 's', 9, 0,
  /* 10245 */ 'w', 'f', 'c', 'e', 'd', 'b', 's', 9, 0,
  /* 10254 */ 'v', 'f', 'c', 'h', 'e', 'd', 'b', 's', 9, 0,
  /* 10264 */ 'w', 'f', 'c', 'h', 'e', 'd', 'b', 's', 9, 0,
  /* 10274 */ 'v', 'f', 'c', 'h', 'd', 'b', 's', 9, 0,
  /* 10283 */ 'w', 'f', 'c', 'h', 'd', 'b', 's', 9, 0,
  /* 10292 */ 'v', 'f', 'a', 'e', 'b', 's', 9, 0,
  /* 10300 */ 'v', 'f', 'e', 'e', 'b', 's', 9, 0,
  /* 10308 */ 'v', 'f', 'e', 'n', 'e', 'b', 's', 9, 0,
  /* 10317 */ 'v', 'c', 'h', 'b', 's', 9, 0,
  /* 10324 */ 'v', 'c', 'h', 'l', 'b', 's', 9, 0,
  /* 10332 */ 'v', 'c', 'e', 'q', 'b', 's', 9, 0,
  /* 10340 */ 'v', 'i', 's', 't', 'r', 'b', 's', 9, 0,
  /* 10349 */ 'v', 's', 't', 'r', 'c', 'z', 'b', 's', 9, 0,
  /* 10359 */ 'v', 'f', 'a', 'e', 'z', 'b', 's', 9, 0,
  /* 10368 */ 'v', 'f', 'e', 'e', 'z', 'b', 's', 9, 0,
  /* 10377 */ 'v', 'f', 'e', 'n', 'e', 'z', 'b', 's', 9, 0,
  /* 10387 */ 'c', 's', 9, 0,
  /* 10391 */ 'c', 'd', 's', 9, 0,
  /* 10396 */ 'v', 's', 't', 'r', 'c', 'f', 's', 9, 0,
  /* 10405 */ 'v', 'f', 'a', 'e', 'f', 's', 9, 0,
  /* 10413 */ 'v', 'f', 'e', 'e', 'f', 's', 9, 0,
  /* 10421 */ 'v', 'f', 'e', 'n', 'e', 'f', 's', 9, 0,
  /* 10430 */ 'v', 'c', 'h', 'f', 's', 9, 0,
  /* 10437 */ 'v', 'c', 'h', 'l', 'f', 's', 9, 0,
  /* 10445 */ 'v', 'c', 'e', 'q', 'f', 's', 9, 0,
  /* 10453 */ 'v', 'i', 's', 't', 'r', 'f', 's', 9, 0,
  /* 10462 */ 'v', 'p', 'k', 's', 'f', 's', 9, 0,
  /* 10470 */ 'v', 'p', 'k', 'l', 's', 'f', 's', 9, 0,
  /* 10479 */ 'v', 'f', 's', 9, 0,
  /* 10484 */ 'v', 's', 't', 'r', 'c', 'z', 'f', 's', 9, 0,
  /* 10494 */ 'v', 'f', 'a', 'e', 'z', 'f', 's', 9, 0,
  /* 10503 */ 'v', 'f', 'e', 'e', 'z', 'f', 's', 9, 0,
  /* 10512 */ 'v', 'f', 'e', 'n', 'e', 'z', 'f', 's', 9, 0,
  /* 10522 */ 'v', 'c', 'h', 'g', 's', 9, 0,
  /* 10529 */ 'v', 'c', 'h', 'l', 'g', 's', 9, 0,
  /* 10537 */ 'v', 'c', 'e', 'q', 'g', 's', 9, 0,
  /* 10545 */ 'v', 'p', 'k', 's', 'g', 's', 9, 0,
  /* 10553 */ 'v', 'p', 'k', 'l', 's', 'g', 's', 9, 0,
  /* 10562 */ 'v', 's', 't', 'r', 'c', 'h', 's', 9, 0,
  /* 10571 */ 'v', 'f', 'a', 'e', 'h', 's', 9, 0,
  /* 10579 */ 'v', 'f', 'e', 'e', 'h', 's', 9, 0,
  /* 10587 */ 'v', 'f', 'e', 'n', 'e', 'h', 's', 9, 0,
  /* 10596 */ 'v', 'c', 'h', 'h', 's', 9, 0,
  /* 10603 */ 'v', 'c', 'h', 'l', 'h', 's', 9, 0,
  /* 10611 */ 'v', 'c', 'e', 'q', 'h', 's', 9, 0,
  /* 10619 */ 'v', 'i', 's', 't', 'r', 'h', 's', 9, 0,
  /* 10628 */ 'v', 'p', 'k', 's', 'h', 's', 9, 0,
  /* 10636 */ 'v', 'p', 'k', 'l', 's', 'h', 's', 9, 0,
  /* 10645 */ 'v', 's', 't', 'r', 'c', 'z', 'h', 's', 9, 0,
  /* 10655 */ 'v', 'f', 'a', 'e', 'z', 'h', 's', 9, 0,
  /* 10664 */ 'v', 'f', 'e', 'e', 'z', 'h', 's', 9, 0,
  /* 10673 */ 'v', 'f', 'e', 'n', 'e', 'z', 'h', 's', 9, 0,
  /* 10683 */ 'v', 'p', 'k', 's', 9, 0,
  /* 10689 */ 'v', 'p', 'k', 'l', 's', 9, 0,
  /* 10696 */ 'v', 'f', 'm', 's', 9, 0,
  /* 10702 */ 't', 's', 9, 0,
  /* 10706 */ 'v', 's', 9, 0,
  /* 10710 */ 'l', 'l', 'g', 'f', 'a', 't', 9, 0,
  /* 10718 */ 'l', 'g', 'a', 't', 9, 0,
  /* 10724 */ 'l', 'f', 'h', 'a', 't', 9, 0,
  /* 10731 */ 'l', 'a', 't', 9, 0,
  /* 10736 */ 'l', 'l', 'g', 't', 'a', 't', 9, 0,
  /* 10744 */ 'b', 'c', 't', 9, 0,
  /* 10749 */ 'v', 'p', 'o', 'p', 'c', 't', 9, 0,
  /* 10757 */ 'b', 'r', 'c', 't', 9, 0,
  /* 10763 */ 'c', 'l', 'g', 't', 9, 0,
  /* 10769 */ 'l', 'l', 'g', 't', 9, 0,
  /* 10775 */ 'c', 'i', 't', 9, 0,
  /* 10780 */ 'c', 'l', 'f', 'i', 't', 9, 0,
  /* 10787 */ 'c', 'g', 'i', 't', 9, 0,
  /* 10793 */ 'c', 'l', 'g', 'i', 't', 9, 0,
  /* 10800 */ 'c', 'l', 't', 9, 0,
  /* 10805 */ 's', 'r', 'n', 'm', 't', 9, 0,
  /* 10812 */ 'p', 'o', 'p', 'c', 'n', 't', 9, 0,
  /* 10820 */ 'c', 'r', 't', 9, 0,
  /* 10825 */ 'c', 'g', 'r', 't', 9, 0,
  /* 10831 */ 'c', 'l', 'g', 'r', 't', 9, 0,
  /* 10838 */ 'c', 'l', 'r', 't', 9, 0,
  /* 10844 */ 't', 'a', 'b', 'o', 'r', 't', 9, 0,
  /* 10852 */ 'c', 'l', 's', 't', 9, 0,
  /* 10858 */ 's', 'r', 's', 't', 9, 0,
  /* 10864 */ 'c', 's', 's', 't', 9, 0,
  /* 10870 */ 'm', 'v', 's', 't', 9, 0,
  /* 10876 */ 'v', 'e', 's', 'r', 'a', 'v', 9, 0,
  /* 10884 */ 'v', 'l', 'g', 'v', 9, 0,
  /* 10890 */ 'v', 'e', 'r', 'l', 'l', 'v', 9, 0,
  /* 10898 */ 'v', 'e', 's', 'r', 'l', 'v', 9, 0,
  /* 10906 */ 'v', 'e', 's', 'l', 'v', 9, 0,
  /* 10913 */ 'l', 'r', 'v', 9, 0,
  /* 10918 */ 's', 't', 'r', 'v', 9, 0,
  /* 10924 */ 'v', 'm', 'a', 'l', 'h', 'w', 9, 0,
  /* 10932 */ 'v', 'm', 'l', 'h', 'w', 9, 0,
  /* 10939 */ 'v', 'u', 'p', 'l', 'h', 'w', 9, 0,
  /* 10947 */ 'l', 'a', 'x', 9, 0,
  /* 10952 */ 'e', 'x', 9, 0,
  /* 10956 */ 'v', 'm', 'x', 9, 0,
  /* 10961 */ 'v', 'x', 9, 0,
  /* 10965 */ 'l', 'a', 'y', 9, 0,
  /* 10970 */ 'i', 'c', 'y', 9, 0,
  /* 10975 */ 's', 't', 'c', 'y', 9, 0,
  /* 10981 */ 'l', 'd', 'y', 9, 0,
  /* 10986 */ 's', 't', 'd', 'y', 9, 0,
  /* 10992 */ 'l', 'a', 'e', 'y', 9, 0,
  /* 10998 */ 'l', 'e', 'y', 9, 0,
  /* 11003 */ 's', 't', 'e', 'y', 9, 0,
  /* 11009 */ 'a', 'h', 'y', 9, 0,
  /* 11014 */ 'c', 'h', 'y', 9, 0,
  /* 11019 */ 'l', 'h', 'y', 9, 0,
  /* 11024 */ 'm', 'h', 'y', 9, 0,
  /* 11029 */ 's', 'h', 'y', 9, 0,
  /* 11034 */ 's', 't', 'h', 'y', 9, 0,
  /* 11040 */ 'c', 'l', 'i', 'y', 9, 0,
  /* 11046 */ 'n', 'i', 'y', 9, 0,
  /* 11051 */ 'o', 'i', 'y', 9, 0,
  /* 11056 */ 'm', 'v', 'i', 'y', 9, 0,
  /* 11062 */ 'x', 'i', 'y', 9, 0,
  /* 11067 */ 'a', 'l', 'y', 9, 0,
  /* 11072 */ 'c', 'l', 'y', 9, 0,
  /* 11077 */ 's', 'l', 'y', 9, 0,
  /* 11082 */ 'l', 'a', 'm', 'y', 9, 0,
  /* 11088 */ 's', 't', 'a', 'm', 'y', 9, 0,
  /* 11095 */ 'i', 'c', 'm', 'y', 9, 0,
  /* 11101 */ 'l', 'm', 'y', 9, 0,
  /* 11106 */ 's', 't', 'm', 'y', 9, 0,
  /* 11112 */ 'n', 'y', 9, 0,
  /* 11116 */ 'o', 'y', 9, 0,
  /* 11120 */ 'c', 's', 'y', 9, 0,
  /* 11125 */ 'c', 'd', 's', 'y', 9, 0,
  /* 11131 */ 'm', 's', 'y', 9, 0,
  /* 11136 */ 's', 't', 'y', 9, 0,
  /* 11141 */ 'x', 'y', 9, 0,
  /* 11145 */ 'b', 'z', 9, 0,
  /* 11149 */ 'l', 'o', 'c', 'z', 9, 0,
  /* 11155 */ 's', 't', 'o', 'c', 'z', 9, 0,
  /* 11162 */ 'v', 'l', 'l', 'e', 'z', 9, 0,
  /* 11169 */ 'l', 'o', 'c', 'g', 'z', 9, 0,
  /* 11176 */ 's', 't', 'o', 'c', 'g', 'z', 9, 0,
  /* 11184 */ 'j', 'g', 'z', 9, 0,
  /* 11189 */ 'l', 'o', 'c', 'f', 'h', 'z', 9, 0,
  /* 11197 */ 's', 't', 'o', 'c', 'f', 'h', 'z', 9, 0,
  /* 11206 */ 'l', 'o', 'c', 'h', 'i', 'z', 9, 0,
  /* 11214 */ 'l', 'o', 'c', 'g', 'h', 'i', 'z', 9, 0,
  /* 11223 */ 'l', 'o', 'c', 'h', 'h', 'i', 'z', 9, 0,
  /* 11232 */ 'j', 'z', 9, 0,
  /* 11236 */ 'v', 'c', 'l', 'z', 9, 0,
  /* 11242 */ 'b', 'n', 'z', 9, 0,
  /* 11247 */ 'l', 'o', 'c', 'n', 'z', 9, 0,
  /* 11254 */ 's', 't', 'o', 'c', 'n', 'z', 9, 0,
  /* 11262 */ 'l', 'o', 'c', 'g', 'n', 'z', 9, 0,
  /* 11270 */ 's', 't', 'o', 'c', 'g', 'n', 'z', 9, 0,
  /* 11279 */ 'j', 'g', 'n', 'z', 9, 0,
  /* 11285 */ 'l', 'o', 'c', 'f', 'h', 'n', 'z', 9, 0,
  /* 11294 */ 's', 't', 'o', 'c', 'f', 'h', 'n', 'z', 9, 0,
  /* 11304 */ 'l', 'o', 'c', 'h', 'i', 'n', 'z', 9, 0,
  /* 11313 */ 'l', 'o', 'c', 'g', 'h', 'i', 'n', 'z', 9, 0,
  /* 11323 */ 'l', 'o', 'c', 'h', 'h', 'i', 'n', 'z', 9, 0,
  /* 11333 */ 'j', 'n', 'z', 9, 0,
  /* 11338 */ 'l', 'o', 'c', 'r', 'n', 'z', 9, 0,
  /* 11346 */ 'l', 'o', 'c', 'g', 'r', 'n', 'z', 9, 0,
  /* 11355 */ 'l', 'o', 'c', 'f', 'h', 'r', 'n', 'z', 9, 0,
  /* 11365 */ 'l', 'o', 'c', 'r', 'z', 9, 0,
  /* 11372 */ 'l', 'o', 'c', 'g', 'r', 'z', 9, 0,
  /* 11380 */ 'l', 'o', 'c', 'f', 'h', 'r', 'z', 9, 0,
  /* 11389 */ 'v', 'c', 't', 'z', 9, 0,
  /* 11395 */ '.', 'i', 'n', 's', 'n', 32, 'e', ',', 0,
  /* 11404 */ '.', 'i', 'n', 's', 'n', 32, 'r', 'i', 'e', ',', 0,
  /* 11415 */ '.', 'i', 'n', 's', 'n', 32, 'r', 'r', 'e', ',', 0,
  /* 11426 */ '.', 'i', 'n', 's', 'n', 32, 'r', 's', 'e', ',', 0,
  /* 11437 */ '.', 'i', 'n', 's', 'n', 32, 's', 's', 'e', ',', 0,
  /* 11448 */ '.', 'i', 'n', 's', 'n', 32, 'r', 'x', 'e', ',', 0,
  /* 11459 */ '.', 'i', 'n', 's', 'n', 32, 'r', 'r', 'f', ',', 0,
  /* 11470 */ '.', 'i', 'n', 's', 'n', 32, 's', 's', 'f', ',', 0,
  /* 11481 */ '.', 'i', 'n', 's', 'n', 32, 'r', 'x', 'f', ',', 0,
  /* 11492 */ '.', 'i', 'n', 's', 'n', 32, 'r', 'i', ',', 0,
  /* 11502 */ '.', 'i', 'n', 's', 'n', 32, 's', 'i', ',', 0,
  /* 11512 */ '.', 'i', 'n', 's', 'n', 32, 'r', 's', 'i', ',', 0,
  /* 11523 */ '.', 'i', 'n', 's', 'n', 32, 'r', 'i', 'l', ',', 0,
  /* 11534 */ '.', 'i', 'n', 's', 'n', 32, 's', 'i', 'l', ',', 0,
  /* 11545 */ '.', 'i', 'n', 's', 'n', 32, 'r', 'r', ',', 0,
  /* 11555 */ '.', 'i', 'n', 's', 'n', 32, 's', ',', 0,
  /* 11564 */ '.', 'i', 'n', 's', 'n', 32, 'r', 'i', 's', ',', 0,
  /* 11575 */ '.', 'i', 'n', 's', 'n', 32, 'r', 's', ',', 0,
  /* 11585 */ '.', 'i', 'n', 's', 'n', 32, 'r', 'r', 's', ',', 0,
  /* 11596 */ '.', 'i', 'n', 's', 'n', 32, 's', 's', ',', 0,
  /* 11606 */ '.', 'i', 'n', 's', 'n', 32, 'r', 'i', 'l', 'u', ',', 0,
  /* 11618 */ '.', 'i', 'n', 's', 'n', 32, 'r', 'x', ',', 0,
  /* 11628 */ '.', 'i', 'n', 's', 'n', 32, 's', 'i', 'y', ',', 0,
  /* 11639 */ '.', 'i', 'n', 's', 'n', 32, 'r', 's', 'y', ',', 0,
  /* 11650 */ '.', 'i', 'n', 's', 'n', 32, 'r', 'x', 'y', ',', 0,
  /* 11661 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'P', 'a', 't', 'c', 'h', 'a', 'b', 'l', 'e', 32, 'R', 'E', 'T', '.', 0,
  /* 11692 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 11715 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'a', 'i', 'l', 32, 'C', 'a', 'l', 'l', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 11738 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 11760 */ 's', 'a', 'm', '3', '1', 0,
  /* 11766 */ 's', 'a', 'm', '2', '4', 0,
  /* 11772 */ 's', 'a', 'm', '6', '4', 0,
  /* 11778 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 11791 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 11798 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 11808 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 11823 */ 'c', 'i', 'b', 0,
  /* 11827 */ 'c', 'g', 'i', 'b', 0,
  /* 11832 */ 'c', 'l', 'g', 'i', 'b', 0,
  /* 11838 */ 'c', 'l', 'i', 'b', 0,
  /* 11843 */ 'c', 'r', 'b', 0,
  /* 11847 */ 'c', 'g', 'r', 'b', 0,
  /* 11852 */ 'c', 'l', 'g', 'r', 'b', 0,
  /* 11858 */ 'c', 'l', 'r', 'b', 0,
  /* 11863 */ 'l', 'o', 'c', 0,
  /* 11867 */ 's', 't', 'o', 'c', 0,
  /* 11872 */ 't', 'e', 'n', 'd', 0,
  /* 11877 */ 'l', 'o', 'c', 'g', 0,
  /* 11882 */ 's', 't', 'o', 'c', 'g', 0,
  /* 11888 */ 'j', 'g', 0,
  /* 11891 */ 'l', 'o', 'c', 'f', 'h', 0,
  /* 11897 */ 's', 't', 'o', 'c', 'f', 'h', 0,
  /* 11904 */ 'l', 'o', 'c', 'h', 'i', 0,
  /* 11910 */ 'l', 'o', 'c', 'g', 'h', 'i', 0,
  /* 11917 */ 'l', 'o', 'c', 'h', 'h', 'i', 0,
  /* 11924 */ 'c', 'i', 'j', 0,
  /* 11928 */ 'c', 'g', 'i', 'j', 0,
  /* 11933 */ 'c', 'l', 'g', 'i', 'j', 0,
  /* 11939 */ 'c', 'l', 'i', 'j', 0,
  /* 11944 */ 'c', 'r', 'j', 0,
  /* 11948 */ 'c', 'g', 'r', 'j', 0,
  /* 11953 */ 'c', 'l', 'g', 'r', 'j', 0,
  /* 11959 */ 'c', 'l', 'r', 'j', 0,
  /* 11964 */ '#', 32, 'F', 'E', 'n', 't', 'r', 'y', 32, 'c', 'a', 'l', 'l', 0,
  /* 11978 */ 't', 'a', 'm', 0,
  /* 11982 */ 'l', 'o', 'c', 'r', 0,
  /* 11987 */ 'l', 'o', 'c', 'g', 'r', 0,
  /* 11993 */ 'l', 'o', 'c', 'f', 'h', 'r', 0,
  /* 12000 */ 'p', 'r', 0,
  /* 12003 */ 'c', 'l', 'g', 't', 0,
  /* 12008 */ 'c', 'i', 't', 0,
  /* 12012 */ 'c', 'l', 'f', 'i', 't', 0,
  /* 12018 */ 'c', 'g', 'i', 't', 0,
  /* 12023 */ 'c', 'l', 'g', 'i', 't', 0,
  /* 12029 */ 'c', 'l', 't', 0,
  /* 12033 */ 'c', 'r', 't', 0,
  /* 12037 */ 'c', 'g', 'r', 't', 0,
  /* 12042 */ 'c', 'l', 'g', 'r', 't', 0,
  /* 12048 */ 'c', 'l', 'r', 't', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    11799U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    11792U,	// BUNDLE
    11809U,	// LIFETIME_START
    11779U,	// LIFETIME_END
    0U,	// STACKMAP
    11965U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    11693U,	// PATCHABLE_FUNCTION_ENTER
    11662U,	// PATCHABLE_RET
    11739U,	// PATCHABLE_FUNCTION_EXIT
    11716U,	// PATCHABLE_TAIL_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_SEQUENCE
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    16387U,	// A
    16654U,	// ADB
    16802871U,	// ADBR
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ADJDYNALLOC
    16989U,	// AEB
    16802990U,	// AEBR
    0U,	// AEXT128_64
    33577697U,	// AFI
    0U,	// AFIMux
    20565U,	// AG
    19991U,	// AGF
    33577707U,	// AGFI
    16803421U,	// AGFR
    50355004U,	// AGHI
    604003363U,	// AGHIK
    16803497U,	// AGR
    604003409U,	// AGRK
    83925909U,	// AGSI
    21178U,	// AH
    50354992U,	// AHI
    604003357U,	// AHIK
    0U,	// AHIMux
    0U,	// AHIMuxK
    27394U,	// AHY
    33576017U,	// AIH
    23711U,	// AL
    17647U,	// ALC
    20644U,	// ALCG
    16803509U,	// ALCGR
    16803315U,	// ALCR
    100686611U,	// ALFI
    20803U,	// ALG
    20008U,	// ALGF
    100686583U,	// ALGFI
    16803434U,	// ALGFR
    604003370U,	// ALGHSIK
    16803529U,	// ALGR
    604003415U,	// ALGRK
    604003379U,	// ALHSIK
    16803661U,	// ALR
    604003453U,	// ALRK
    27452U,	// ALY
    16802861U,	// AR
    604003404U,	// ARK
    83925904U,	// ASI
    0U,	// ATOMIC_CMP_SWAPW
    0U,	// ATOMIC_LOADW_AFI
    0U,	// ATOMIC_LOADW_AR
    0U,	// ATOMIC_LOADW_MAX
    0U,	// ATOMIC_LOADW_MIN
    0U,	// ATOMIC_LOADW_NILH
    0U,	// ATOMIC_LOADW_NILHi
    0U,	// ATOMIC_LOADW_NR
    0U,	// ATOMIC_LOADW_NRi
    0U,	// ATOMIC_LOADW_OILH
    0U,	// ATOMIC_LOADW_OR
    0U,	// ATOMIC_LOADW_SR
    0U,	// ATOMIC_LOADW_UMAX
    0U,	// ATOMIC_LOADW_UMIN
    0U,	// ATOMIC_LOADW_XILF
    0U,	// ATOMIC_LOADW_XR
    0U,	// ATOMIC_LOAD_AFI
    0U,	// ATOMIC_LOAD_AGFI
    0U,	// ATOMIC_LOAD_AGHI
    0U,	// ATOMIC_LOAD_AGR
    0U,	// ATOMIC_LOAD_AHI
    0U,	// ATOMIC_LOAD_AR
    0U,	// ATOMIC_LOAD_MAX_32
    0U,	// ATOMIC_LOAD_MAX_64
    0U,	// ATOMIC_LOAD_MIN_32
    0U,	// ATOMIC_LOAD_MIN_64
    0U,	// ATOMIC_LOAD_NGR
    0U,	// ATOMIC_LOAD_NGRi
    0U,	// ATOMIC_LOAD_NIHF64
    0U,	// ATOMIC_LOAD_NIHF64i
    0U,	// ATOMIC_LOAD_NIHH64
    0U,	// ATOMIC_LOAD_NIHH64i
    0U,	// ATOMIC_LOAD_NIHL64
    0U,	// ATOMIC_LOAD_NIHL64i
    0U,	// ATOMIC_LOAD_NILF
    0U,	// ATOMIC_LOAD_NILF64
    0U,	// ATOMIC_LOAD_NILF64i
    0U,	// ATOMIC_LOAD_NILFi
    0U,	// ATOMIC_LOAD_NILH
    0U,	// ATOMIC_LOAD_NILH64
    0U,	// ATOMIC_LOAD_NILH64i
    0U,	// ATOMIC_LOAD_NILHi
    0U,	// ATOMIC_LOAD_NILL
    0U,	// ATOMIC_LOAD_NILL64
    0U,	// ATOMIC_LOAD_NILL64i
    0U,	// ATOMIC_LOAD_NILLi
    0U,	// ATOMIC_LOAD_NR
    0U,	// ATOMIC_LOAD_NRi
    0U,	// ATOMIC_LOAD_OGR
    0U,	// ATOMIC_LOAD_OIHF64
    0U,	// ATOMIC_LOAD_OIHH64
    0U,	// ATOMIC_LOAD_OIHL64
    0U,	// ATOMIC_LOAD_OILF
    0U,	// ATOMIC_LOAD_OILF64
    0U,	// ATOMIC_LOAD_OILH
    0U,	// ATOMIC_LOAD_OILH64
    0U,	// ATOMIC_LOAD_OILL
    0U,	// ATOMIC_LOAD_OILL64
    0U,	// ATOMIC_LOAD_OR
    0U,	// ATOMIC_LOAD_SGR
    0U,	// ATOMIC_LOAD_SR
    0U,	// ATOMIC_LOAD_UMAX_32
    0U,	// ATOMIC_LOAD_UMAX_64
    0U,	// ATOMIC_LOAD_UMIN_32
    0U,	// ATOMIC_LOAD_UMIN_64
    0U,	// ATOMIC_LOAD_XGR
    0U,	// ATOMIC_LOAD_XIHF64
    0U,	// ATOMIC_LOAD_XILF
    0U,	// ATOMIC_LOAD_XILF64
    0U,	// ATOMIC_LOAD_XR
    0U,	// ATOMIC_SWAPW
    0U,	// ATOMIC_SWAP_32
    0U,	// ATOMIC_SWAP_64
    16803199U,	// AXBR
    27351U,	// AY
    49358U,	// B
    117464227U,	// BAL
    67135308U,	// BALR
    117467107U,	// BAS
    67135388U,	// BASR
    67133814U,	// BASSM
    50584U,	// BAsmE
    53971U,	// BAsmH
    50691U,	// BAsmHE
    56496U,	// BAsmL
    51492U,	// BAsmLE
    54489U,	// BAsmLH
    57419U,	// BAsmM
    52204U,	// BAsmNE
    55338U,	// BAsmNH
    50929U,	// BAsmNHE
    56810U,	// BAsmNL
    51719U,	// BAsmNLE
    54778U,	// BAsmNLH
    57536U,	// BAsmNM
    57890U,	// BAsmNO
    58169U,	// BAsmNP
    60395U,	// BAsmNZ
    57783U,	// BAsmO
    58060U,	// BAsmP
    60298U,	// BAsmZ
    601650U,	// BC
    1131722U,	// BCAsm
    1650226U,	// BCR
    136406503U,	// BCRAsm
    27129U,	// BCT
    21042U,	// BCTG
    16803590U,	// BCTGR
    16803758U,	// BCTR
    1227449268U,	// BPP
    1764320209U,	// BPRP
    3171385U,	// BR
    167798766U,	// BRAS
    167796694U,	// BRASL
    3171869U,	// BRAsmE
    3172127U,	// BRAsmH
    3171874U,	// BRAsmHE
    3172178U,	// BRAsmL
    3171887U,	// BRAsmLE
    3172147U,	// BRAsmLH
    3172209U,	// BRAsmM
    3171900U,	// BRAsmNE
    3172166U,	// BRAsmNH
    3171880U,	// BRAsmNHE
    3172193U,	// BRAsmNL
    3171893U,	// BRAsmNLE
    3172159U,	// BRAsmNLH
    3172214U,	// BRAsmNM
    3172230U,	// BRAsmNO
    3172246U,	// BRAsmNP
    3172317U,	// BRAsmNZ
    3172225U,	// BRAsmO
    3172236U,	// BRAsmP
    3172312U,	// BRAsmZ
    185151127U,	// BRC
    136922421U,	// BRCAsm
    185151089U,	// BRCL
    136928505U,	// BRCLAsm
    184576518U,	// BRCT
    184570430U,	// BRCTG
    184572391U,	// BRCTH
    553671291U,	// BRXH
    553668889U,	// BRXHG
    553667550U,	// BRXLE
    553669028U,	// BRXLG
    67133802U,	// BSM
    553671280U,	// BXH
    553668883U,	// BXHG
    553667544U,	// BXLE
    553668828U,	// BXLEG
    117458119U,	// C
    117457196U,	// CDB
    67134526U,	// CDBR
    67134751U,	// CDFBR
    738213978U,	// CDFBRA
    67134796U,	// CDGBR
    738214002U,	// CDGBRA
    738223405U,	// CDLFBR
    738223450U,	// CDLGBR
    553674904U,	// CDS
    553669139U,	// CDSG
    553675638U,	// CDSY
    117457514U,	// CEB
    67134645U,	// CEBR
    67134758U,	// CEFBR
    738213986U,	// CEFBRA
    67134803U,	// CEGBR
    738214010U,	// CEGBRA
    738223413U,	// CELFBR
    738223458U,	// CELGBR
    201352273U,	// CFDBR
    738213930U,	// CFDBRA
    201352400U,	// CFEBR
    738213954U,	// CFEBRA
    218127078U,	// CFI
    0U,	// CFIMux
    201352602U,	// CFXBR
    738214042U,	// CFXBRA
    117461146U,	// CG
    201352288U,	// CGDBR
    738213938U,	// CGDBRA
    201352415U,	// CGEBR
    738213962U,	// CGEBRA
    117460508U,	// CGF
    218127089U,	// CGFI
    67135076U,	// CGFR
    234905417U,	// CGFRL
    117461928U,	// CGH
    251681604U,	// CGHI
    234905477U,	// CGHRL
    50371497U,	// CGHSI
    272215604U,	// CGIB
    2432713547U,	// CGIBAsm
    2969585052U,	// CGIBAsmE
    2969588439U,	// CGIBAsmH
    2969585160U,	// CGIBAsmHE
    2969590964U,	// CGIBAsmL
    2969585961U,	// CGIBAsmLE
    2969588958U,	// CGIBAsmLH
    2969586673U,	// CGIBAsmNE
    2969589807U,	// CGIBAsmNH
    2969585399U,	// CGIBAsmNHE
    2969591279U,	// CGIBAsmNL
    2969586189U,	// CGIBAsmNLE
    2969589248U,	// CGIBAsmNLH
    0U,	// CGIBCall
    0U,	// CGIBReturn
    305770137U,	// CGIJ
    2432719829U,	// CGIJAsm
    1895844066U,	// CGIJAsmE
    1895847064U,	// CGIJAsmH
    1895843510U,	// CGIJAsmHE
    1895849338U,	// CGIJAsmL
    1895844294U,	// CGIJAsmLE
    1895847331U,	// CGIJAsmLH
    1895845006U,	// CGIJAsmNE
    1895848133U,	// CGIJAsmNH
    1895843743U,	// CGIJAsmNHE
    1895849605U,	// CGIJAsmNL
    1895844533U,	// CGIJAsmNLE
    1895847592U,	// CGIJAsmNLH
    4304627U,	// CGIT
    788556324U,	// CGITAsm
    251678053U,	// CGITAsmE
    251681283U,	// CGITAsmH
    251676810U,	// CGITAsmHE
    251682813U,	// CGITAsmL
    251677600U,	// CGITAsmLE
    251680695U,	// CGITAsmLH
    251677952U,	// CGITAsmNE
    251681079U,	// CGITAsmNH
    251676696U,	// CGITAsmNHE
    251682551U,	// CGITAsmNL
    251677486U,	// CGITAsmNLE
    251680552U,	// CGITAsmNLH
    67135159U,	// CGR
    3374427720U,	// CGRB
    603997239U,	// CGRBAsm
    603997624U,	// CGRBAsmE
    604001016U,	// CGRBAsmH
    603997736U,	// CGRBAsmHE
    604003536U,	// CGRBAsmL
    603998537U,	// CGRBAsmLE
    604001534U,	// CGRBAsmLH
    603999249U,	// CGRBAsmNE
    604002383U,	// CGRBAsmNH
    603997979U,	// CGRBAsmNHE
    604003855U,	// CGRBAsmNL
    603998769U,	// CGRBAsmNLE
    604001828U,	// CGRBAsmNLH
    0U,	// CGRBCall
    0U,	// CGRBReturn
    3911298733U,	// CGRJ
    604003309U,	// CGRJAsm
    603998462U,	// CGRJAsmE
    604001460U,	// CGRJAsmH
    603997910U,	// CGRJAsmHE
    604003734U,	// CGRJAsmL
    603998694U,	// CGRJAsmLE
    604001731U,	// CGRJAsmLH
    603999406U,	// CGRJAsmNE
    604002533U,	// CGRJAsmNH
    603998147U,	// CGRJAsmNHE
    604004005U,	// CGRJAsmNL
    603998937U,	// CGRJAsmNLE
    604001996U,	// CGRJAsmNLH
    234905442U,	// CGRL
    136425222U,	// CGRT
    604006986U,	// CGRTAsm
    67128704U,	// CGRTAsmE
    67131934U,	// CGRTAsmH
    67127465U,	// CGRTAsmHE
    67133464U,	// CGRTAsmL
    67128255U,	// CGRTAsmLE
    67131350U,	// CGRTAsmLH
    67128607U,	// CGRTAsmNE
    67131734U,	// CGRTAsmNH
    67127355U,	// CGRTAsmNHE
    67133206U,	// CGRTAsmNL
    67128145U,	// CGRTAsmNLE
    67131211U,	// CGRTAsmNLH
    201352617U,	// CGXBR
    738214050U,	// CGXBRA
    117461777U,	// CH
    117460600U,	// CHF
    50371512U,	// CHHSI
    251681591U,	// CHI
    0U,	// CHIMux
    234905462U,	// CHRL
    50371483U,	// CHSI
    117467911U,	// CHY
    272215600U,	// CIB
    2432713535U,	// CIBAsm
    2969585046U,	// CIBAsmE
    2969588433U,	// CIBAsmH
    2969585153U,	// CIBAsmHE
    2969590958U,	// CIBAsmL
    2969585954U,	// CIBAsmLE
    2969588951U,	// CIBAsmLH
    2969586666U,	// CIBAsmNE
    2969589800U,	// CIBAsmNH
    2969585391U,	// CIBAsmNHE
    2969591272U,	// CIBAsmNL
    2969586181U,	// CIBAsmNLE
    2969589240U,	// CIBAsmNLH
    0U,	// CIBCall
    0U,	// CIBReturn
    218125406U,	// CIH
    305770133U,	// CIJ
    2432719824U,	// CIJAsm
    1895844060U,	// CIJAsmE
    1895847058U,	// CIJAsmH
    1895843503U,	// CIJAsmHE
    1895849332U,	// CIJAsmL
    1895844287U,	// CIJAsmLE
    1895847324U,	// CIJAsmLH
    1895844999U,	// CIJAsmNE
    1895848126U,	// CIJAsmNH
    1895843735U,	// CIJAsmNHE
    1895849598U,	// CIJAsmNL
    1895844525U,	// CIJAsmNLE
    1895847584U,	// CIJAsmNLH
    4304617U,	// CIT
    788556312U,	// CITAsm
    251678039U,	// CITAsmE
    251681269U,	// CITAsmH
    251676794U,	// CITAsmHE
    251682799U,	// CITAsmL
    251677584U,	// CITAsmLE
    251680679U,	// CITAsmLH
    251677936U,	// CITAsmNE
    251681063U,	// CITAsmNH
    251676678U,	// CITAsmNHE
    251682535U,	// CITAsmNL
    251677468U,	// CITAsmNLE
    251680534U,	// CITAsmNLH
    117464296U,	// CL
    115956U,	// CLC
    0U,	// CLCLoop
    0U,	// CLCSequence
    738223192U,	// CLFDBR
    738223319U,	// CLFEBR
    318806945U,	// CLFHSI
    335567641U,	// CLFI
    0U,	// CLFIMux
    4828909U,	// CLFIT
    889219613U,	// CLFITAsm
    352341341U,	// CLFITAsmE
    352344571U,	// CLFITAsmH
    352340097U,	// CLFITAsmHE
    352346101U,	// CLFITAsmL
    352340887U,	// CLFITAsmLE
    352343982U,	// CLFITAsmLH
    352341239U,	// CLFITAsmNE
    352344366U,	// CLFITAsmNH
    352339982U,	// CLFITAsmNHE
    352345838U,	// CLFITAsmNL
    352340772U,	// CLFITAsmNLE
    352343838U,	// CLFITAsmNLH
    738223521U,	// CLFXBR
    117461330U,	// CLG
    738223207U,	// CLGDBR
    738223334U,	// CLGEBR
    117460526U,	// CLGF
    335567614U,	// CLGFI
    67135089U,	// CLGFR
    234905424U,	// CLGFRL
    234905484U,	// CLGHRL
    318806960U,	// CLGHSI
    273788473U,	// CLGIB
    2516599633U,	// CLGIBAsm
    3053471139U,	// CLGIBAsmE
    3053474526U,	// CLGIBAsmH
    3053471248U,	// CLGIBAsmHE
    3053477051U,	// CLGIBAsmL
    3053472049U,	// CLGIBAsmLE
    3053475046U,	// CLGIBAsmLH
    3053472761U,	// CLGIBAsmNE
    3053475895U,	// CLGIBAsmNH
    3053471488U,	// CLGIBAsmNHE
    3053477367U,	// CLGIBAsmNL
    3053472278U,	// CLGIBAsmNLE
    3053475337U,	// CLGIBAsmNLH
    0U,	// CLGIBCall
    0U,	// CLGIBReturn
    307343006U,	// CLGIJ
    2516605915U,	// CLGIJAsm
    1979730153U,	// CLGIJAsmE
    1979733151U,	// CLGIJAsmH
    1979729598U,	// CLGIJAsmHE
    1979735425U,	// CLGIJAsmL
    1979730382U,	// CLGIJAsmLE
    1979733419U,	// CLGIJAsmLH
    1979731094U,	// CLGIJAsmNE
    1979734221U,	// CLGIJAsmNH
    1979729832U,	// CLGIJAsmNHE
    1979735693U,	// CLGIJAsmNL
    1979730622U,	// CLGIJAsmNLE
    1979733681U,	// CLGIJAsmNLH
    4828920U,	// CLGIT
    889219626U,	// CLGITAsm
    352341356U,	// CLGITAsmE
    352344586U,	// CLGITAsmH
    352340114U,	// CLGITAsmHE
    352346116U,	// CLGITAsmL
    352340904U,	// CLGITAsmLE
    352343999U,	// CLGITAsmLH
    352341256U,	// CLGITAsmNE
    352344383U,	// CLGITAsmNH
    352340001U,	// CLGITAsmNHE
    352345855U,	// CLGITAsmNL
    352340791U,	// CLGITAsmNLE
    352343857U,	// CLGITAsmNLH
    67135183U,	// CLGR
    3374427725U,	// CLGRB
    603997245U,	// CLGRBAsm
    603997631U,	// CLGRBAsmE
    604001023U,	// CLGRBAsmH
    603997744U,	// CLGRBAsmHE
    604003543U,	// CLGRBAsmL
    603998545U,	// CLGRBAsmLE
    604001542U,	// CLGRBAsmLH
    603999257U,	// CLGRBAsmNE
    604002391U,	// CLGRBAsmNH
    603997988U,	// CLGRBAsmNHE
    604003863U,	// CLGRBAsmNL
    603998778U,	// CLGRBAsmNLE
    604001837U,	// CLGRBAsmNLH
    0U,	// CLGRBCall
    0U,	// CLGRBReturn
    3911298738U,	// CLGRJ
    604003315U,	// CLGRJAsm
    603998469U,	// CLGRJAsmE
    604001467U,	// CLGRJAsmH
    603997918U,	// CLGRJAsmHE
    604003741U,	// CLGRJAsmL
    603998702U,	// CLGRJAsmLE
    604001739U,	// CLGRJAsmLH
    603999414U,	// CLGRJAsmNE
    604002541U,	// CLGRJAsmNH
    603998156U,	// CLGRJAsmNHE
    604004013U,	// CLGRJAsmNL
    603998946U,	// CLGRJAsmNLE
    604002005U,	// CLGRJAsmNLH
    234905448U,	// CLGRL
    136425227U,	// CLGRT
    604006992U,	// CLGRTAsm
    67128711U,	// CLGRTAsmE
    67131941U,	// CLGRTAsmH
    67127473U,	// CLGRTAsmHE
    67133471U,	// CLGRTAsmL
    67128263U,	// CLGRTAsmLE
    67131358U,	// CLGRTAsmLH
    67128615U,	// CLGRTAsmNE
    67131742U,	// CLGRTAsmNH
    67127364U,	// CLGRTAsmNHE
    67133214U,	// CLGRTAsmNL
    67128154U,	// CLGRTAsmNLE
    67131220U,	// CLGRTAsmNLH
    143076U,	// CLGT
    385903116U,	// CLGTAsm
    402672976U,	// CLGTAsmE
    402676206U,	// CLGTAsmH
    402671730U,	// CLGTAsmHE
    402677736U,	// CLGTAsmL
    402672520U,	// CLGTAsmLE
    402675615U,	// CLGTAsmLH
    402672872U,	// CLGTAsmNE
    402675999U,	// CLGTAsmNH
    402671613U,	// CLGTAsmNHE
    402677471U,	// CLGTAsmNL
    402672403U,	// CLGTAsmNLE
    402675469U,	// CLGTAsmNLH
    738223536U,	// CLGXBR
    117460644U,	// CLHF
    318806975U,	// CLHHSI
    234905500U,	// CLHRL
    419470204U,	// CLI
    273788479U,	// CLIB
    2516599640U,	// CLIBAsm
    3053471147U,	// CLIBAsmE
    3053474534U,	// CLIBAsmH
    3053471257U,	// CLIBAsmHE
    3053477059U,	// CLIBAsmL
    3053472058U,	// CLIBAsmLE
    3053475055U,	// CLIBAsmLH
    3053472770U,	// CLIBAsmNE
    3053475904U,	// CLIBAsmNH
    3053471498U,	// CLIBAsmNHE
    3053477376U,	// CLIBAsmNL
    3053472288U,	// CLIBAsmNLE
    3053475347U,	// CLIBAsmNLH
    0U,	// CLIBCall
    0U,	// CLIBReturn
    335565956U,	// CLIH
    307343012U,	// CLIJ
    2516605922U,	// CLIJAsm
    1979730161U,	// CLIJAsmE
    1979733159U,	// CLIJAsmH
    1979729607U,	// CLIJAsmHE
    1979735433U,	// CLIJAsmL
    1979730391U,	// CLIJAsmLE
    1979733428U,	// CLIJAsmLH
    1979731103U,	// CLIJAsmNE
    1979734230U,	// CLIJAsmNH
    1979729842U,	// CLIJAsmNHE
    1979735702U,	// CLIJAsmNL
    1979730632U,	// CLIJAsmNLE
    1979733691U,	// CLIJAsmNLH
    419474209U,	// CLIY
    0U,	// CLMux
    67135319U,	// CLR
    3374427731U,	// CLRB
    603997252U,	// CLRBAsm
    603997639U,	// CLRBAsmE
    604001031U,	// CLRBAsmH
    603997753U,	// CLRBAsmHE
    604003551U,	// CLRBAsmL
    603998554U,	// CLRBAsmLE
    604001551U,	// CLRBAsmLH
    603999266U,	// CLRBAsmNE
    604002400U,	// CLRBAsmNH
    603997998U,	// CLRBAsmNHE
    604003872U,	// CLRBAsmNL
    603998788U,	// CLRBAsmNLE
    604001847U,	// CLRBAsmNLH
    0U,	// CLRBCall
    0U,	// CLRBReturn
    3911298744U,	// CLRJ
    604003322U,	// CLRJAsm
    603998477U,	// CLRJAsmE
    604001475U,	// CLRJAsmH
    603997927U,	// CLRJAsmHE
    604003749U,	// CLRJAsmL
    603998711U,	// CLRJAsmLE
    604001748U,	// CLRJAsmLH
    603999423U,	// CLRJAsmNE
    604002550U,	// CLRJAsmNH
    603998166U,	// CLRJAsmNHE
    604004022U,	// CLRJAsmNL
    603998956U,	// CLRJAsmNLE
    604002015U,	// CLRJAsmNLH
    234905521U,	// CLRL
    136425233U,	// CLRT
    604006999U,	// CLRTAsm
    67128719U,	// CLRTAsmE
    67131949U,	// CLRTAsmH
    67127482U,	// CLRTAsmHE
    67133479U,	// CLRTAsmL
    67128272U,	// CLRTAsmLE
    67131367U,	// CLRTAsmLH
    67128624U,	// CLRTAsmNE
    67131751U,	// CLRTAsmNH
    67127374U,	// CLRTAsmNHE
    67133223U,	// CLRTAsmNL
    67128164U,	// CLRTAsmNLE
    67131230U,	// CLRTAsmNLH
    67136101U,	// CLST
    0U,	// CLSTLoop
    143102U,	// CLT
    385903153U,	// CLTAsm
    402673012U,	// CLTAsmE
    402676242U,	// CLTAsmH
    402671771U,	// CLTAsmHE
    402677772U,	// CLTAsmL
    402672561U,	// CLTAsmLE
    402675656U,	// CLTAsmLH
    402672913U,	// CLTAsmNE
    402676040U,	// CLTAsmNH
    402671659U,	// CLTAsmNHE
    402677512U,	// CLTAsmNL
    402672449U,	// CLTAsmNLE
    402675515U,	// CLTAsmNLH
    117467969U,	// CLY
    0U,	// CMux
    553674256U,	// CPSDRdd
    553674256U,	// CPSDRds
    553674256U,	// CPSDRsd
    553674256U,	// CPSDRss
    67125443U,	// CPYA
    67134952U,	// CR
    3374427716U,	// CRB
    603997234U,	// CRBAsm
    603997618U,	// CRBAsmE
    604001010U,	// CRBAsmH
    603997729U,	// CRBAsmHE
    604003530U,	// CRBAsmL
    603998530U,	// CRBAsmLE
    604001527U,	// CRBAsmLH
    603999242U,	// CRBAsmNE
    604002376U,	// CRBAsmNH
    603997971U,	// CRBAsmNHE
    604003848U,	// CRBAsmNL
    603998761U,	// CRBAsmNLE
    604001820U,	// CRBAsmNLH
    0U,	// CRBCall
    0U,	// CRBReturn
    3911298729U,	// CRJ
    604003304U,	// CRJAsm
    603998456U,	// CRJAsmE
    604001454U,	// CRJAsmH
    603997903U,	// CRJAsmHE
    604003728U,	// CRJAsmL
    603998687U,	// CRJAsmLE
    604001724U,	// CRJAsmLH
    603999399U,	// CRJAsmNE
    604002526U,	// CRJAsmNH
    603998139U,	// CRJAsmNHE
    604003998U,	// CRJAsmNL
    603998929U,	// CRJAsmNLE
    604001988U,	// CRJAsmNLH
    234905405U,	// CRL
    136425218U,	// CRT
    604006981U,	// CRTAsm
    67128698U,	// CRTAsmE
    67131928U,	// CRTAsmH
    67127458U,	// CRTAsmHE
    67133458U,	// CRTAsmL
    67128248U,	// CRTAsmLE
    67131343U,	// CRTAsmLH
    67128600U,	// CRTAsmNE
    67131727U,	// CRTAsmNH
    67127347U,	// CRTAsmNHE
    67133199U,	// CRTAsmNL
    67128137U,	// CRTAsmNLE
    67131203U,	// CRTAsmNLH
    553674900U,	// CS
    553669134U,	// CSG
    973122161U,	// CSST
    553675633U,	// CSY
    67134854U,	// CXBR
    67134789U,	// CXFBR
    738213994U,	// CXFBRA
    67134834U,	// CXGBR
    738214018U,	// CXGBRA
    738223421U,	// CXLFBR
    738223466U,	// CXLGBR
    117467868U,	// CY
    0U,	// CallBASR
    0U,	// CallBCR
    0U,	// CallBR
    0U,	// CallBRASL
    0U,	// CallBRCL
    0U,	// CallJG
    0U,	// CondReturn
    0U,	// CondStore16
    0U,	// CondStore16Inv
    0U,	// CondStore16Mux
    0U,	// CondStore16MuxInv
    0U,	// CondStore32
    0U,	// CondStore32Inv
    0U,	// CondStore32Mux
    0U,	// CondStore32MuxInv
    0U,	// CondStore64
    0U,	// CondStore64Inv
    0U,	// CondStore8
    0U,	// CondStore8Inv
    0U,	// CondStore8Mux
    0U,	// CondStore8MuxInv
    0U,	// CondStoreF32
    0U,	// CondStoreF32Inv
    0U,	// CondStoreF64
    0U,	// CondStoreF64Inv
    0U,	// CondTrap
    16713U,	// DDB
    16802884U,	// DDBR
    17009U,	// DEB
    16803004U,	// DEBR
    23807U,	// DL
    20825U,	// DLG
    16803541U,	// DLGR
    16803676U,	// DLR
    21012U,	// DSG
    20048U,	// DSGF
    16803476U,	// DSGFR
    16803578U,	// DSGR
    16803213U,	// DXBR
    67134508U,	// EAR
    973115960U,	// ECTG
    3163420U,	// EFPC
    3163509U,	// ETND
    117467849U,	// EX
    234905552U,	// EXRL
    201352303U,	// FIDBR
    738213946U,	// FIDBRA
    201352430U,	// FIEBR
    738213970U,	// FIEBRA
    201352632U,	// FIXBR
    738214058U,	// FIXBRA
    67135213U,	// FLOGR
    0U,	// GOT
    17643U,	// IC
    17643U,	// IC32
    27355U,	// IC32Y
    453009487U,	// ICM
    453007350U,	// ICMH
    453012312U,	// ICMY
    27355U,	// ICY
    0U,	// IIFMux
    335564413U,	// IIHF
    0U,	// IIHF64
    318788603U,	// IIHH
    0U,	// IIHH64
    318790971U,	// IIHL
    0U,	// IIHL64
    0U,	// IIHMux
    335564558U,	// IILF
    0U,	// IILF64
    318788995U,	// IILH
    0U,	// IILH64
    318791084U,	// IILL
    0U,	// IILL64
    0U,	// IILMux
    3170625U,	// IPM
    3304580U,	// InsnE
    472034533U,	// InsnRI
    1008921741U,	// InsnRIE
    2082663684U,	// InsnRIL
    1545792855U,	// InsnRILU
    2082663725U,	// InsnRIS
    5926170U,	// InsnRR
    1008905368U,	// InsnRRE
    1008905412U,	// InsnRRF
    1008921922U,	// InsnRRS
    1008905528U,	// InsnRS
    1008921763U,	// InsnRSE
    1008921849U,	// InsnRSI
    1008921976U,	// InsnRSY
    1545776483U,	// InsnRX
    1545792697U,	// InsnRXE
    1008921818U,	// InsnRXF
    1545792899U,	// InsnRXY
    140684580U,	// InsnS
    2623712495U,	// InsnSI
    3160599823U,	// InsnSIL
    3697470829U,	// InsnSIY
    7007565U,	// InsnSS
    3697470638U,	// InsnSSE
    3697470671U,	// InsnSSF
    203730U,	// J
    198878U,	// JAsmE
    201876U,	// JAsmH
    198321U,	// JAsmHE
    204150U,	// JAsmL
    199105U,	// JAsmLE
    202142U,	// JAsmLH
    204983U,	// JAsmM
    199817U,	// JAsmNE
    202944U,	// JAsmNH
    198553U,	// JAsmNHE
    204416U,	// JAsmNL
    199343U,	// JAsmNLE
    202402U,	// JAsmNLH
    205083U,	// JAsmNM
    205437U,	// JAsmNO
    205716U,	// JAsmNP
    207942U,	// JAsmNZ
    205319U,	// JAsmO
    205616U,	// JAsmP
    207841U,	// JAsmZ
    201015U,	// JG
    198140U,	// JGAsmE
    201660U,	// JGAsmH
    198265U,	// JGAsmHE
    204056U,	// JGAsmL
    199049U,	// JGAsmLE
    202046U,	// JGAsmLH
    204923U,	// JGAsmM
    199761U,	// JGAsmNE
    202888U,	// JGAsmNH
    198491U,	// JGAsmNHE
    204360U,	// JGAsmNL
    199281U,	// JGAsmNLE
    202340U,	// JGAsmNLH
    205029U,	// JGAsmNM
    205383U,	// JGAsmNO
    205662U,	// JGAsmNP
    207888U,	// JGAsmNZ
    205271U,	// JGAsmO
    205561U,	// JGAsmP
    207793U,	// JGAsmZ
    117464224U,	// L
    0U,	// L128
    117456908U,	// LA
    603996161U,	// LAA
    604000339U,	// LAAG
    604003485U,	// LAAL
    604000577U,	// LAALG
    117458315U,	// LAE
    117467889U,	// LAEY
    604004414U,	// LAM
    604007243U,	// LAMY
    604004750U,	// LAN
    604000722U,	// LANG
    604004780U,	// LAO
    604000734U,	// LAOG
    234905397U,	// LARL
    117467628U,	// LAT
    604007108U,	// LAX
    604000916U,	// LAXG
    117467862U,	// LAY
    117457769U,	// LB
    117461741U,	// LBH
    0U,	// LBMux
    67134842U,	// LBR
    654328037U,	// LCBB
    67134525U,	// LCDBR
    67135048U,	// LCDFR
    67135048U,	// LCDFR_32
    67134644U,	// LCEBR
    67135075U,	// LCGFR
    67135158U,	// LCGR
    67134964U,	// LCR
    67134853U,	// LCXBR
    117458289U,	// LD
    117458402U,	// LDE32
    117457520U,	// LDEB
    67134651U,	// LDEBR
    67135171U,	// LDGR
    67134987U,	// LDR
    67134987U,	// LDR32
    67134860U,	// LDXBR
    738214026U,	// LDXBRA
    117467878U,	// LDY
    117459230U,	// LE
    67134538U,	// LEDBR
    738213922U,	// LEDBRA
    0U,	// LEFR
    67135024U,	// LER
    67134867U,	// LEXBR
    738214034U,	// LEXBRA
    117467895U,	// LEY
    3188712U,	// LFAS
    0U,	// LFER
    117461915U,	// LFH
    117467621U,	// LFHAT
    3179810U,	// LFPC
    117461316U,	// LG
    117467615U,	// LGAT
    117457636U,	// LGB
    67134812U,	// LGBR
    67134981U,	// LGDR
    117460521U,	// LGF
    218127096U,	// LGFI
    67135083U,	// LGFR
    234905425U,	// LGFRL
    117461954U,	// LGH
    251681610U,	// LGHI
    67135277U,	// LGHR
    234905485U,	// LGHRL
    67135178U,	// LGR
    234905449U,	// LGRL
    117462227U,	// LH
    117462039U,	// LHH
    251681644U,	// LHI
    0U,	// LHIMux
    0U,	// LHMux
    67135284U,	// LHR
    234905501U,	// LHRL
    117467916U,	// LHY
    117458169U,	// LLC
    117461793U,	// LLCH
    0U,	// LLCMux
    67134969U,	// LLCR
    0U,	// LLCRMux
    117458149U,	// LLGC
    67134956U,	// LLGCR
    117460532U,	// LLGF
    117467607U,	// LLGFAT
    67135096U,	// LLGFR
    234905432U,	// LLGFRL
    117461953U,	// LLGH
    67135276U,	// LLGHR
    234905492U,	// LLGHRL
    117467666U,	// LLGT
    117467633U,	// LLGTAT
    67135412U,	// LLGTR
    117462495U,	// LLH
    117462044U,	// LLHH
    0U,	// LLHMux
    67135289U,	// LLHR
    234905507U,	// LLHRL
    0U,	// LLHRMux
    335564419U,	// LLIHF
    352343041U,	// LLIHH
    352345409U,	// LLIHL
    335564564U,	// LLILF
    352343433U,	// LLILH
    352345522U,	// LLILL
    117460552U,	// LLZRGF
    604004540U,	// LM
    604000704U,	// LMG
    604002321U,	// LMH
    604007262U,	// LMY
    0U,	// LMux
    67134588U,	// LNDBR
    67135055U,	// LNDFR
    67135055U,	// LNDFR_32
    67134709U,	// LNEBR
    67135110U,	// LNGFR
    67135207U,	// LNGR
    67135356U,	// LNR
    67134917U,	// LNXBR
    224856U,	// LOC
    973096209U,	// LOCAsm
    436225492U,	// LOCAsmE
    436228909U,	// LOCAsmH
    436225608U,	// LOCAsmHE
    436231404U,	// LOCAsmL
    436226402U,	// LOCAsmLE
    436229406U,	// LOCAsmLH
    436232276U,	// LOCAsmM
    436227114U,	// LOCAsmNE
    436230248U,	// LOCAsmNH
    436225847U,	// LOCAsmNHE
    436231720U,	// LOCAsmNL
    436226637U,	// LOCAsmNLE
    436229696U,	// LOCAsmNLH
    436232389U,	// LOCAsmNM
    436232743U,	// LOCAsmNO
    436233022U,	// LOCAsmNP
    436235248U,	// LOCAsmNZ
    436232635U,	// LOCAsmO
    436232912U,	// LOCAsmP
    436235150U,	// LOCAsmZ
    224884U,	// LOCFH
    973099916U,	// LOCFHAsm
    436225623U,	// LOCFHAsmE
    436229098U,	// LOCFHAsmH
    436225663U,	// LOCFHAsmHE
    436231466U,	// LOCFHAsmL
    436226447U,	// LOCFHAsmLE
    436229459U,	// LOCFHAsmLH
    436232325U,	// LOCFHAsmM
    436227159U,	// LOCFHAsmNE
    436230286U,	// LOCFHAsmNH
    436225890U,	// LOCFHAsmNHE
    436231758U,	// LOCFHAsmNL
    436226680U,	// LOCFHAsmNLE
    436229739U,	// LOCFHAsmNLH
    436232427U,	// LOCFHAsmNM
    436232781U,	// LOCFHAsmNO
    436233060U,	// LOCFHAsmNP
    436235286U,	// LOCFHAsmNZ
    436232668U,	// LOCFHAsmO
    436232965U,	// LOCFHAsmP
    436235190U,	// LOCFHAsmZ
    7581402U,	// LOCFHR
    553674532U,	// LOCFHRAsm
    16796999U,	// LOCFHRAsmE
    16800188U,	// LOCFHRAsmH
    16795752U,	// LOCFHRAsmHE
    16801660U,	// LOCFHRAsmL
    16796542U,	// LOCFHRAsmLE
    16799615U,	// LOCFHRAsmLH
    16802145U,	// LOCFHRAsmM
    16796894U,	// LOCFHRAsmNE
    16800021U,	// LOCFHRAsmNH
    16795634U,	// LOCFHRAsmNHE
    16801493U,	// LOCFHRAsmNL
    16796424U,	// LOCFHRAsmNLE
    16799490U,	// LOCFHRAsmNLH
    16802097U,	// LOCFHRAsmNM
    16802451U,	// LOCFHRAsmNO
    16802730U,	// LOCFHRAsmNP
    16804956U,	// LOCFHRAsmNZ
    16802488U,	// LOCFHRAsmO
    16802760U,	// LOCFHRAsmP
    16804981U,	// LOCFHRAsmZ
    224870U,	// LOCG
    973099184U,	// LOCGAsm
    436225517U,	// LOCGAsmE
    436229030U,	// LOCGAsmH
    436225640U,	// LOCGAsmHE
    436231433U,	// LOCGAsmL
    436226424U,	// LOCGAsmLE
    436229421U,	// LOCGAsmLH
    436232300U,	// LOCGAsmM
    436227136U,	// LOCGAsmNE
    436230263U,	// LOCGAsmNH
    436225864U,	// LOCGAsmNHE
    436231735U,	// LOCGAsmNL
    436226654U,	// LOCGAsmNLE
    436229713U,	// LOCGAsmNLH
    436232404U,	// LOCGAsmNM
    436232758U,	// LOCGAsmNO
    436233037U,	// LOCGAsmNP
    436235263U,	// LOCGAsmNZ
    436232648U,	// LOCGAsmO
    436232938U,	// LOCGAsmP
    436235170U,	// LOCGAsmZ
    8105607U,	// LOCGHI
    587225922U,	// LOCGHIAsm
    50350282U,	// LOCGHIAsmE
    50353266U,	// LOCGHIAsmH
    50349723U,	// LOCGHIAsmHE
    50355554U,	// LOCGHIAsmL
    50350507U,	// LOCGHIAsmLE
    50353519U,	// LOCGHIAsmLH
    50356382U,	// LOCGHIAsmM
    50351219U,	// LOCGHIAsmNE
    50354346U,	// LOCGHIAsmNH
    50349953U,	// LOCGHIAsmNHE
    50355818U,	// LOCGHIAsmNL
    50350743U,	// LOCGHIAsmNLE
    50353802U,	// LOCGHIAsmNLH
    50356487U,	// LOCGHIAsmNM
    50356841U,	// LOCGHIAsmNO
    50357120U,	// LOCGHIAsmNP
    50359346U,	// LOCGHIAsmNZ
    50356725U,	// LOCGHIAsmO
    50357022U,	// LOCGHIAsmP
    50359247U,	// LOCGHIAsmZ
    7581396U,	// LOCGR
    553674428U,	// LOCGRAsm
    16796991U,	// LOCGRAsmE
    16800180U,	// LOCGRAsmH
    16795743U,	// LOCGRAsmHE
    16801632U,	// LOCGRAsmL
    16796533U,	// LOCGRAsmLE
    16799606U,	// LOCGRAsmLH
    16802137U,	// LOCGRAsmM
    16796885U,	// LOCGRAsmNE
    16800012U,	// LOCGRAsmNH
    16795624U,	// LOCGRAsmNHE
    16801484U,	// LOCGRAsmNL
    16796414U,	// LOCGRAsmNLE
    16799480U,	// LOCGRAsmNLH
    16802088U,	// LOCGRAsmNM
    16802442U,	// LOCGRAsmNO
    16802721U,	// LOCGRAsmNP
    16804947U,	// LOCGRAsmNZ
    16802480U,	// LOCGRAsmO
    16802752U,	// LOCGRAsmP
    16804973U,	// LOCGRAsmZ
    8105614U,	// LOCHHI
    587225949U,	// LOCHHIAsm
    50350291U,	// LOCHHIAsmE
    50353275U,	// LOCHHIAsmH
    50349733U,	// LOCHHIAsmHE
    50355563U,	// LOCHHIAsmL
    50350517U,	// LOCHHIAsmLE
    50353529U,	// LOCHHIAsmLH
    50356391U,	// LOCHHIAsmM
    50351229U,	// LOCHHIAsmNE
    50354356U,	// LOCHHIAsmNH
    50349964U,	// LOCHHIAsmNHE
    50355828U,	// LOCHHIAsmNL
    50350754U,	// LOCHHIAsmNLE
    50353813U,	// LOCHHIAsmNLH
    50356497U,	// LOCHHIAsmNM
    50356851U,	// LOCHHIAsmNO
    50357130U,	// LOCHHIAsmNP
    50359356U,	// LOCHHIAsmNZ
    50356734U,	// LOCHHIAsmO
    50357031U,	// LOCHHIAsmP
    50359256U,	// LOCHHIAsmZ
    8105601U,	// LOCHI
    587225909U,	// LOCHIAsm
    50350274U,	// LOCHIAsmE
    50353258U,	// LOCHIAsmH
    50349714U,	// LOCHIAsmHE
    50355546U,	// LOCHIAsmL
    50350498U,	// LOCHIAsmLE
    50353510U,	// LOCHIAsmLH
    50356374U,	// LOCHIAsmM
    50351210U,	// LOCHIAsmNE
    50354337U,	// LOCHIAsmNH
    50349943U,	// LOCHIAsmNHE
    50355809U,	// LOCHIAsmNL
    50350733U,	// LOCHIAsmNLE
    50353792U,	// LOCHIAsmNLH
    50356478U,	// LOCHIAsmNM
    50356832U,	// LOCHIAsmNO
    50357111U,	// LOCHIAsmNP
    50359337U,	// LOCHIAsmNZ
    50356717U,	// LOCHIAsmO
    50357014U,	// LOCHIAsmP
    50359239U,	// LOCHIAsmZ
    0U,	// LOCHIMux
    0U,	// LOCMux
    7581391U,	// LOCR
    553674239U,	// LOCRAsm
    16796984U,	// LOCRAsmE
    16800173U,	// LOCRAsmH
    16795735U,	// LOCRAsmHE
    16801595U,	// LOCRAsmL
    16796525U,	// LOCRAsmLE
    16799598U,	// LOCRAsmLH
    16802123U,	// LOCRAsmM
    16796877U,	// LOCRAsmNE
    16800004U,	// LOCRAsmNH
    16795615U,	// LOCRAsmNHE
    16801476U,	// LOCRAsmNL
    16796405U,	// LOCRAsmNLE
    16799471U,	// LOCRAsmNLH
    16802080U,	// LOCRAsmNM
    16802434U,	// LOCRAsmNO
    16802713U,	// LOCRAsmNP
    16804939U,	// LOCRAsmNZ
    16802466U,	// LOCRAsmO
    16802745U,	// LOCRAsmP
    16804966U,	// LOCRAsmZ
    0U,	// LOCRMux
    939541883U,	// LPD
    67134595U,	// LPDBR
    67135062U,	// LPDFR
    67135062U,	// LPDFR_32
    939544771U,	// LPDG
    67134716U,	// LPEBR
    67135117U,	// LPGFR
    67135220U,	// LPGR
    117466134U,	// LPQ
    67135377U,	// LPR
    67134924U,	// LPXBR
    67135310U,	// LR
    234905522U,	// LRL
    0U,	// LRMux
    117467810U,	// LRV
    117461639U,	// LRVG
    67135251U,	// LRVGR
    117463651U,	// LRVH
    67135431U,	// LRVR
    117467698U,	// LT
    67134616U,	// LTDBR
    67134616U,	// LTDBRCompare
    0U,	// LTDBRCompare_VecPseudo
    67134737U,	// LTEBR
    67134737U,	// LTEBRCompare
    0U,	// LTEBRCompare_VecPseudo
    117461573U,	// LTG
    117460572U,	// LTGF
    67135138U,	// LTGFR
    67135245U,	// LTGR
    67135419U,	// LTR
    67134944U,	// LTXBR
    67134944U,	// LTXBRCompare
    0U,	// LTXBRCompare_VecPseudo
    0U,	// LX
    117457487U,	// LXDB
    67134623U,	// LXDBR
    117457606U,	// LXEB
    67134744U,	// LXEBR
    67135437U,	// LXR
    117467965U,	// LY
    3171863U,	// LZDR
    3171906U,	// LZER
    117460945U,	// LZRF
    117461512U,	// LZRG
    3172306U,	// LZXR
    553664796U,	// MADB
    553673782U,	// MADBR
    553665123U,	// MAEB
    553673901U,	// MAEBR
    16867U,	// MDB
    16802934U,	// MDBR
    17021U,	// MDEB
    16803010U,	// MDEBR
    17034U,	// MEEB
    16803017U,	// MEEBR
    50355024U,	// MGHI
    22520U,	// MH
    50355057U,	// MHI
    27409U,	// MHY
    20859U,	// MLG
    16803547U,	// MLGR
    27083U,	// MS
    553665089U,	// MSDB
    553673873U,	// MSDBR
    553665209U,	// MSEB
    553673994U,	// MSEBR
    33577765U,	// MSFI
    21032U,	// MSG
    20054U,	// MSGF
    33577740U,	// MSGFI
    16803483U,	// MSGFR
    16803584U,	// MSGR
    16803753U,	// MSR
    27516U,	// MSY
    116038U,	// MVC
    252946U,	// MVCK
    0U,	// MVCLoop
    0U,	// MVCSequence
    50371414U,	// MVGHI
    50371429U,	// MVHHI
    50371446U,	// MVHI
    419470279U,	// MVI
    419474225U,	// MVIY
    67136119U,	// MVST
    0U,	// MVSTLoop
    16803263U,	// MXBR
    16981U,	// MXDB
    16802982U,	// MXDBR
    0U,	// MemBarrier
    24976U,	// N
    115976U,	// NC
    0U,	// NCLoop
    0U,	// NCSequence
    20948U,	// NG
    16803560U,	// NGR
    604003429U,	// NGRK
    419470209U,	// NI
    8477369U,	// NIAI
    0U,	// NIFMux
    100683402U,	// NIHF
    0U,	// NIHF64
    318788616U,	// NIHH
    0U,	// NIHH64
    318790984U,	// NIHL
    0U,	// NIHL64
    0U,	// NIHMux
    100683547U,	// NILF
    0U,	// NILF64
    318789008U,	// NILH
    0U,	// NILH64
    318791097U,	// NILL
    0U,	// NILL64
    0U,	// NILMux
    419474215U,	// NIY
    16803709U,	// NR
    604003465U,	// NRK
    117461578U,	// NTSTG
    27497U,	// NY
    25006U,	// O
    115986U,	// OC
    0U,	// OCLoop
    0U,	// OCSequence
    20960U,	// OG
    16803567U,	// OGR
    604003435U,	// OGRK
    419470213U,	// OI
    0U,	// OIFMux
    100683408U,	// OIHF
    0U,	// OIHF64
    318788622U,	// OIHH
    0U,	// OIHH64
    318790990U,	// OIHL
    0U,	// OIHL64
    0U,	// OIHMux
    100683553U,	// OILF
    0U,	// OILF64
    318789014U,	// OILH
    0U,	// OILH64
    318791103U,	// OILL
    0U,	// OILL64
    0U,	// OILMux
    419474220U,	// OIY
    16803714U,	// OR
    604003470U,	// ORK
    27501U,	// OY
    1131866U,	// PFD
    136929090U,	// PFDRL
    939549208U,	// PLO
    67136061U,	// POPCNT
    603996189U,	// PPA
    12001U,	// PR
    553668731U,	// RISBG
    553668731U,	// RISBG32
    553673107U,	// RISBGN
    553668862U,	// RISBHG
    0U,	// RISBHH
    0U,	// RISBHL
    553668936U,	// RISBLG
    0U,	// RISBLH
    0U,	// RISBLL
    0U,	// RISBMux
    604003796U,	// RLL
    604000623U,	// RLLG
    553668738U,	// RNSBG
    553668745U,	// ROSBG
    553668752U,	// RXSBG
    0U,	// Return
    26597U,	// S
    11767U,	// SAM24
    11761U,	// SAM31
    11773U,	// SAM64
    67134513U,	// SAR
    16947U,	// SDB
    16802962U,	// SDBR
    17082U,	// SEB
    16803083U,	// SEBR
    3172258U,	// SFASR
    3163432U,	// SFPC
    21007U,	// SG
    20049U,	// SGF
    16803477U,	// SGFR
    16803579U,	// SGR
    604003441U,	// SGRK
    22998U,	// SH
    27414U,	// SHY
    24537U,	// SL
    436224011U,	// SLA
    604003328U,	// SLAK
    17343U,	// SLB
    20597U,	// SLBG
    16803502U,	// SLBGR
    16803193U,	// SLBR
    100686623U,	// SLFI
    20888U,	// SLG
    20026U,	// SLGF
    100686597U,	// SLGFI
    16803455U,	// SLGFR
    16803553U,	// SLGR
    604003422U,	// SLGRK
    436231641U,	// SLL
    604000629U,	// SLLG
    604003387U,	// SLLK
    16803687U,	// SLR
    604003459U,	// SLRK
    27462U,	// SLY
    3170630U,	// SPM
    117457443U,	// SQDB
    67134602U,	// SQDBR
    117457587U,	// SQEB
    67134723U,	// SQEBR
    67134931U,	// SQXBR
    16803742U,	// SR
    436224180U,	// SRA
    604000355U,	// SRAG
    604003334U,	// SRAK
    604003475U,	// SRK
    436232127U,	// SRL
    604000656U,	// SRLG
    604003393U,	// SRLK
    3187003U,	// SRNM
    3179494U,	// SRNMB
    3189302U,	// SRNMT
    67136107U,	// SRST
    0U,	// SRSTLoop
    117467751U,	// ST
    0U,	// ST128
    604004419U,	// STAM
    604007249U,	// STAMY
    117458241U,	// STC
    117461826U,	// STCH
    3185676U,	// STCK
    3180820U,	// STCKE
    3182308U,	// STCKF
    0U,	// STCMux
    117467872U,	// STCY
    117458304U,	// STD
    117467883U,	// STDY
    117460374U,	// STE
    117467900U,	// STEY
    117461920U,	// STFH
    3180913U,	// STFLE
    3179822U,	// STFPC
    117461580U,	// STG
    234905455U,	// STGRL
    117463604U,	// STH
    117462091U,	// STHH
    0U,	// STHMux
    234905514U,	// STHRL
    117467931U,	// STHY
    604004734U,	// STM
    604000709U,	// STMG
    604002326U,	// STMH
    604007267U,	// STMY
    0U,	// STMux
    140750428U,	// STOC
    939541782U,	// STOCAsm
    402671066U,	// STOCAsmE
    402674483U,	// STOCAsmH
    402671183U,	// STOCAsmHE
    402676978U,	// STOCAsmL
    402671977U,	// STOCAsmLE
    402674981U,	// STOCAsmLH
    402677850U,	// STOCAsmM
    402672689U,	// STOCAsmNE
    402675823U,	// STOCAsmNH
    402671423U,	// STOCAsmNHE
    402677295U,	// STOCAsmNL
    402672213U,	// STOCAsmNLE
    402675272U,	// STOCAsmNLH
    402677964U,	// STOCAsmNM
    402678318U,	// STOCAsmNO
    402678597U,	// STOCAsmNP
    402680823U,	// STOCAsmNZ
    402678209U,	// STOCAsmO
    402678486U,	// STOCAsmP
    402680724U,	// STOCAsmZ
    140750458U,	// STOCFH
    939545491U,	// STOCFHAsm
    402671199U,	// STOCFHAsmE
    402674674U,	// STOCFHAsmH
    402671240U,	// STOCFHAsmHE
    402677042U,	// STOCFHAsmL
    402672024U,	// STOCFHAsmLE
    402675036U,	// STOCFHAsmLH
    402677901U,	// STOCFHAsmM
    402672736U,	// STOCFHAsmNE
    402675863U,	// STOCFHAsmNH
    402671468U,	// STOCFHAsmNHE
    402677335U,	// STOCFHAsmNL
    402672258U,	// STOCFHAsmNLE
    402675317U,	// STOCFHAsmNLH
    402678004U,	// STOCFHAsmNM
    402678358U,	// STOCFHAsmNO
    402678637U,	// STOCFHAsmNP
    402680863U,	// STOCFHAsmNZ
    402678244U,	// STOCFHAsmO
    402678541U,	// STOCFHAsmP
    402680766U,	// STOCFHAsmZ
    140750443U,	// STOCG
    939544758U,	// STOCGAsm
    402671092U,	// STOCGAsmE
    402674605U,	// STOCGAsmH
    402671216U,	// STOCGAsmHE
    402677008U,	// STOCGAsmL
    402672000U,	// STOCGAsmLE
    402674997U,	// STOCGAsmLH
    402677875U,	// STOCGAsmM
    402672712U,	// STOCGAsmNE
    402675839U,	// STOCGAsmNH
    402671441U,	// STOCGAsmNHE
    402677311U,	// STOCGAsmNL
    402672231U,	// STOCGAsmNLE
    402675290U,	// STOCGAsmNLH
    402677980U,	// STOCGAsmNM
    402678334U,	// STOCGAsmNO
    402678613U,	// STOCGAsmNP
    402680839U,	// STOCGAsmNZ
    402678223U,	// STOCGAsmO
    402678513U,	// STOCGAsmP
    402680745U,	// STOCGAsmZ
    0U,	// STOCMux
    117466139U,	// STPQ
    436244585U,	// STRAG
    234905546U,	// STRL
    117467815U,	// STRV
    117461645U,	// STRVG
    117463657U,	// STRVH
    0U,	// STX
    117468033U,	// STY
    263499U,	// SVC
    16803290U,	// SXBR
    27506U,	// SY
    0U,	// Select32
    0U,	// Select32Mux
    0U,	// Select64
    0U,	// SelectF128
    0U,	// SelectF32
    0U,	// SelectF64
    0U,	// Serialize
    3189341U,	// TABORT
    11979U,	// TAM
    318808475U,	// TBEGIN
    318801155U,	// TBEGINC
    0U,	// TBEGIN_nofloat
    117457217U,	// TCDB
    117457513U,	// TCEB
    117458049U,	// TCXB
    11873U,	// TEND
    0U,	// TLS_GDCALL
    0U,	// TLS_LDCALL
    419471743U,	// TM
    352343089U,	// TMHH
    0U,	// TMHH64
    352345428U,	// TMHL
    0U,	// TMHL64
    0U,	// TMHMux
    352343532U,	// TMLH
    0U,	// TMLH64
    352345541U,	// TMLL
    0U,	// TMLL64
    0U,	// TMLMux
    419474276U,	// TMY
    3189199U,	// TS
    0U,	// Trap
    603996351U,	// VA
    603996384U,	// VAB
    603997381U,	// VAC
    603997390U,	// VACC
    603996401U,	// VACCB
    603997396U,	// VACCC
    604005353U,	// VACCCQ
    603999664U,	// VACCF
    604000407U,	// VACCG
    604001038U,	// VACCH
    604005346U,	// VACCQ
    604005340U,	// VACQ
    603999659U,	// VAF
    604000368U,	// VAG
    604000972U,	// VAH
    604005335U,	// VAQ
    604000858U,	// VAVG
    603996913U,	// VAVGB
    603999842U,	// VAVGF
    604000496U,	// VAVGG
    604001231U,	// VAVGH
    604003613U,	// VAVGL
    603997044U,	// VAVGLB
    603999999U,	// VAVGLF
    604000606U,	// VAVGLG
    604001604U,	// VAVGLH
    604000445U,	// VCDG
    603996876U,	// VCDGB
    604000599U,	// VCDLG
    603996897U,	// VCDLGB
    604005361U,	// VCEQ
    603997227U,	// VCEQB
    604006493U,	// VCEQBS
    604000186U,	// VCEQF
    604006606U,	// VCEQFS
    604000761U,	// VCEQG
    604006698U,	// VCEQGS
    604002726U,	// VCEQH
    604006772U,	// VCEQHS
    603997540U,	// VCGD
    603996549U,	// VCGDB
    604001096U,	// VCH
    603996934U,	// VCHB
    604006478U,	// VCHBS
    603999863U,	// VCHF
    604006591U,	// VCHFS
    604000518U,	// VCHG
    604006683U,	// VCHGS
    604001252U,	// VCHH
    604006757U,	// VCHHS
    604003620U,	// VCHL
    603997052U,	// VCHLB
    604006485U,	// VCHLBS
    604000007U,	// VCHLF
    604006598U,	// VCHLFS
    604000614U,	// VCHLG
    604006690U,	// VCHLGS
    604001612U,	// VCHLH
    604006764U,	// VCHLHS
    604004719U,	// VCKSM
    603997546U,	// VCLGD
    603996563U,	// VCLGDB
    604007397U,	// VCLZ
    67126455U,	// VCLZB
    67129413U,	// VCLZF
    67130024U,	// VCLZG
    67132075U,	// VCLZH
    604007550U,	// VCTZ
    67126462U,	// VCTZB
    67129420U,	// VCTZF
    67130031U,	// VCTZG
    67132082U,	// VCTZH
    603997403U,	// VEC
    67125496U,	// VECB
    67128759U,	// VECF
    67129502U,	// VECG
    67130133U,	// VECH
    604003558U,	// VECL
    67126125U,	// VECLB
    67129080U,	// VECLF
    67129680U,	// VECLG
    67130647U,	// VECLH
    553672880U,	// VERIM
    553665502U,	// VERIMB
    553668475U,	// VERIMF
    553669048U,	// VERIMG
    553670665U,	// VERIMH
    604003794U,	// VERLL
    603997067U,	// VERLLB
    604000053U,	// VERLLF
    604000621U,	// VERLLG
    604001764U,	// VERLLH
    604007051U,	// VERLLV
    603997287U,	// VERLLVB
    604000251U,	// VERLLVF
    604000871U,	// VERLLVG
    604002889U,	// VERLLVH
    604004317U,	// VESL
    603997117U,	// VESLB
    604000096U,	// VESLF
    604000662U,	// VESLG
    604002200U,	// VESLH
    604007067U,	// VESLV
    603997305U,	// VESLVB
    604000269U,	// VESLVF
    604000889U,	// VESLVG
    604002907U,	// VESLVH
    603996338U,	// VESRA
    603996369U,	// VESRAB
    603999651U,	// VESRAF
    604000353U,	// VESRAG
    604000964U,	// VESRAH
    604007037U,	// VESRAV
    603997271U,	// VESRAVB
    604000235U,	// VESRAVF
    604000849U,	// VESRAVG
    604002873U,	// VESRAVH
    604004285U,	// VESRL
    603997102U,	// VESRLB
    604000088U,	// VESRLF
    604000654U,	// VESRLG
    604002192U,	// VESRLH
    604007059U,	// VESRLV
    603997296U,	// VESRLVB
    604000260U,	// VESRLVF
    604000880U,	// VESRLVG
    604002898U,	// VESRLVH
    603996166U,	// VFA
    603996428U,	// VFADB
    603997573U,	// VFAE
    603996763U,	// VFAEB
    604006453U,	// VFAEBS
    603999691U,	// VFAEF
    604006566U,	// VFAEFS
    604001101U,	// VFAEH
    604006732U,	// VFAEHS
    603997334U,	// VFAEZB
    604006520U,	// VFAEZBS
    604000292U,	// VFAEZF
    604006655U,	// VFAEZFS
    604002954U,	// VFAEZH
    604006816U,	// VFAEZHS
    603997646U,	// VFCE
    603996501U,	// VFCEDB
    604006397U,	// VFCEDBS
    604001051U,	// VFCH
    603996579U,	// VFCHDB
    604006435U,	// VFCHDBS
    603997761U,	// VFCHE
    603996517U,	// VFCHEDB
    604006415U,	// VFCHEDBS
    603997535U,	// VFD
    603996487U,	// VFDDB
    603997671U,	// VFEE
    603996803U,	// VFEEB
    604006461U,	// VFEEBS
    603999712U,	// VFEEF
    604006574U,	// VFEEFS
    604001115U,	// VFEEH
    604006740U,	// VFEEHS
    603997342U,	// VFEEZB
    604006529U,	// VFEEZBS
    604000300U,	// VFEEZF
    604006664U,	// VFEEZFS
    604002962U,	// VFEEZH
    604006825U,	// VFEEZHS
    603999289U,	// VFENE
    603996843U,	// VFENEB
    604006469U,	// VFENEBS
    603999752U,	// VFENEF
    604006582U,	// VFENEFS
    604001149U,	// VFENEH
    604006748U,	// VFENEHS
    603997358U,	// VFENEZB
    604006538U,	// VFENEZBS
    604000316U,	// VFENEZF
    604006673U,	// VFENEZFS
    604002978U,	// VFENEZH
    604006834U,	// VFENEZHS
    604003115U,	// VFI
    603996613U,	// VFIDB
    67125553U,	// VFLCDB
    67125743U,	// VFLNDB
    67125777U,	// VFLPDB
    604004455U,	// VFM
    603996183U,	// VFMA
    603996442U,	// VFMADB
    603996641U,	// VFMDB
    604006857U,	// VFMS
    603996735U,	// VFMSDB
    604005057U,	// VFPSO
    603996671U,	// VFPSODB
    604006640U,	// VFS
    603996721U,	// VFSDB
    604005409U,	// VFSQ
    67125793U,	// VFSQDB
    604003028U,	// VFTCI
    603996595U,	// VFTCIDB
    352346185U,	// VGBM
    4244655591U,	// VGEF
    486559952U,	// VGEG
    604004449U,	// VGFM
    603996176U,	// VGFMA
    603996361U,	// VGFMAB
    603999643U,	// VGFMAF
    604000345U,	// VGFMAG
    604000950U,	// VGFMAH
    603997137U,	// VGFMB
    604000110U,	// VGFMF
    604000683U,	// VGFMG
    604002300U,	// VGFMH
    905994368U,	// VGM
    905987032U,	// VGMB
    905990005U,	// VGMF
    905990578U,	// VGMG
    905992195U,	// VGMH
    604006336U,	// VISTR
    603997258U,	// VISTRB
    67135589U,	// VISTRBS
    604000201U,	// VISTRF
    67135702U,	// VISTRFS
    604002763U,	// VISTRH
    67135868U,	// VISTRHS
    117465140U,	// VL
    0U,	// VL32
    0U,	// VL64
    654328043U,	// VLBB
    603997438U,	// VLC
    67125502U,	// VLCB
    67128765U,	// VLCF
    67129514U,	// VLCG
    67130151U,	// VLCH
    603997665U,	// VLDE
    67125871U,	// VLDEB
    536887967U,	// VLEB
    603997524U,	// VLED
    603996535U,	// VLEDB
    536890876U,	// VLEF
    536891606U,	// VLEG
    536892273U,	// VLEH
    587219780U,	// VLEIB
    587222741U,	// VLEIF
    587223336U,	// VLEIG
    587224163U,	// VLEIH
    604007045U,	// VLGV
    603997280U,	// VLGVB
    604000244U,	// VLGVF
    604000864U,	// VLGVG
    604002882U,	// VLGVH
    604003806U,	// VLL
    654338971U,	// VLLEZ
    117458086U,	// VLLEZB
    117461044U,	// VLLEZF
    117461664U,	// VLLEZG
    117463706U,	// VLLEZH
    604004539U,	// VLM
    604005172U,	// VLP
    67126309U,	// VLPB
    67129268U,	// VLPF
    67129843U,	// VLPG
    67131802U,	// VLPH
    67135340U,	// VLR
    0U,	// VLR32
    0U,	// VLR64
    654336733U,	// VLREP
    117457942U,	// VLREPB
    117460901U,	// VLREPF
    117461476U,	// VLREPG
    117463435U,	// VLREPH
    553669249U,	// VLVG
    553665272U,	// VLVGB
    553668201U,	// VLVGF
    553668855U,	// VLVGG
    553669590U,	// VLVGH
    604005118U,	// VLVGP
    0U,	// VLVGP32
    603997584U,	// VMAE
    603996770U,	// VMAEB
    603999698U,	// VMAEF
    604001108U,	// VMAEH
    604000958U,	// VMAH
    603996927U,	// VMAHB
    603999856U,	// VMAHF
    604001245U,	// VMAHH
    604003496U,	// VMAL
    603997030U,	// VMALB
    603998491U,	// VMALE
    603996816U,	// VMALEB
    603999725U,	// VMALEF
    604001122U,	// VMALEH
    603999985U,	// VMALF
    604001488U,	// VMALH
    603996940U,	// VMALHB
    603999900U,	// VMALHF
    604001300U,	// VMALHH
    604007085U,	// VMALHW
    604004875U,	// VMALO
    603997185U,	// VMALOB
    604000144U,	// VMALOF
    604002678U,	// VMALOH
    604004785U,	// VMAO
    603997178U,	// VMAOB
    604000137U,	// VMAOF
    604002671U,	// VMAOH
    603999205U,	// VME
    603996837U,	// VMEB
    603999746U,	// VMEF
    604001143U,	// VMEH
    604002339U,	// VMH
    603996963U,	// VMHB
    603999929U,	// VMHF
    604001335U,	// VMHH
    604003811U,	// VML
    603997075U,	// VMLB
    603998719U,	// VMLE
    603996824U,	// VMLEB
    603999733U,	// VMLEF
    604001130U,	// VMLEH
    604000061U,	// VMLF
    604001778U,	// VMLH
    603996948U,	// VMLHB
    603999914U,	// VMLHF
    604001314U,	// VMLHH
    604007093U,	// VMLHW
    604004882U,	// VMLO
    603997193U,	// VMLOB
    604000152U,	// VMLOF
    604002686U,	// VMLOH
    604004771U,	// VMN
    603997172U,	// VMNB
    604000131U,	// VMNF
    604000728U,	// VMNG
    604002558U,	// VMNH
    604004030U,	// VMNL
    603997081U,	// VMNLB
    604000067U,	// VMNLF
    604000640U,	// VMNLG
    604002024U,	// VMNLH
    604004893U,	// VMO
    603997200U,	// VMOB
    604000159U,	// VMOF
    604002693U,	// VMOH
    604002757U,	// VMRH
    603996976U,	// VMRHB
    603999942U,	// VMRHF
    604000524U,	// VMRHG
    604001348U,	// VMRHH
    604004279U,	// VMRL
    603997095U,	// VMRLB
    604000081U,	// VMRLF
    604000647U,	// VMRLG
    604002185U,	// VMRLH
    604007117U,	// VMX
    603997319U,	// VMXB
    604000277U,	// VMXF
    604000922U,	// VMXG
    604002933U,	// VMXH
    604004408U,	// VMXL
    603997130U,	// VMXLB
    604000103U,	// VMXLF
    604000669U,	// VMXLG
    604002287U,	// VMXLH
    604004776U,	// VN
    603997452U,	// VNC
    604005021U,	// VNO
    604005064U,	// VO
    3165383U,	// VONE
    604003035U,	// VPDI
    604004690U,	// VPERM
    604003399U,	// VPK
    603999979U,	// VPKF
    604000571U,	// VPKG
    604001482U,	// VPKH
    604006850U,	// VPKLS
    604000222U,	// VPKLSF
    604006631U,	// VPKLSFS
    604000800U,	// VPKLSG
    604006714U,	// VPKLSGS
    604002778U,	// VPKLSH
    604006797U,	// VPKLSHS
    604006844U,	// VPKS
    604000215U,	// VPKSF
    604006623U,	// VPKSFS
    604000793U,	// VPKSG
    604006706U,	// VPKSGS
    604002771U,	// VPKSH
    604006789U,	// VPKSHS
    604006910U,	// VPOPCT
    604005092U,	// VREP
    603997214U,	// VREPB
    604000173U,	// VREPF
    604000748U,	// VREPG
    604002707U,	// VREPH
    788552585U,	// VREPI
    251675486U,	// VREPIB
    251678428U,	// VREPIF
    251679023U,	// VREPIG
    251679882U,	// VREPIH
    604006867U,	// VS
    603997266U,	// VSB
    604003007U,	// VSBCBI
    604005367U,	// VSBCBIQ
    604003022U,	// VSBI
    604005384U,	// VSBIQ
    604003015U,	// VSCBI
    603996983U,	// VSCBIB
    603999949U,	// VSCBIF
    604000544U,	// VSCBIG
    604001366U,	// VSCBIH
    604005376U,	// VSCBIQ
    1577078233U,	// VSCEF
    2113949897U,	// VSCEG
    604000483U,	// VSEG
    67125978U,	// VSEGB
    67128865U,	// VSEGF
    67130293U,	// VSEGH
    604003587U,	// VSEL
    604000230U,	// VSF
    604000813U,	// VSG
    604002786U,	// VSH
    604004323U,	// VSL
    603997124U,	// VSLB
    603996634U,	// VSLDB
    604005415U,	// VSQ
    603996345U,	// VSRA
    603996377U,	// VSRAB
    604004292U,	// VSRL
    603997110U,	// VSRLB
    117467768U,	// VST
    0U,	// VST32
    0U,	// VST64
    654328511U,	// VSTEB
    654331408U,	// VSTEF
    654332137U,	// VSTEG
    654332805U,	// VSTEH
    604004398U,	// VSTL
    604004733U,	// VSTM
    603997498U,	// VSTRC
    603996420U,	// VSTRCB
    604006388U,	// VSTRCBS
    603999683U,	// VSTRCF
    604006557U,	// VSTRCFS
    604001082U,	// VSTRCH
    604006723U,	// VSTRCHS
    603997325U,	// VSTRCZB
    604006510U,	// VSTRCZBS
    604000283U,	// VSTRCZF
    604006645U,	// VSTRCZFS
    604002945U,	// VSTRCZH
    604006806U,	// VSTRCZHS
    604004744U,	// VSUM
    603997165U,	// VSUMB
    604000715U,	// VSUMG
    603999808U,	// VSUMGF
    604001223U,	// VSUMGH
    604002332U,	// VSUMH
    604005391U,	// VSUMQ
    604000193U,	// VSUMQF
    604000768U,	// VSUMQG
    67133827U,	// VTM
    604002720U,	// VUPH
    67126057U,	// VUPHB
    67129023U,	// VUPHF
    67130429U,	// VUPHH
    604004143U,	// VUPL
    67126176U,	// VUPLB
    67129162U,	// VUPLF
    604002151U,	// VUPLH
    67126043U,	// VUPLHB
    67129009U,	// VUPLHF
    67130409U,	// VUPLHH
    67136188U,	// VUPLHW
    604003787U,	// VUPLL
    67126147U,	// VUPLLB
    67129133U,	// VUPLLF
    67130844U,	// VUPLLH
    604007122U,	// VX
    3170985U,	// VZERO
    603996883U,	// WCDGB
    603996905U,	// WCDLGB
    603996556U,	// WCGDB
    603996571U,	// WCLGDB
    603996435U,	// WFADB
    603997408U,	// WFC
    67125546U,	// WFCDB
    603996509U,	// WFCEDB
    604006406U,	// WFCEDBS
    603996587U,	// WFCHDB
    604006444U,	// WFCHDBS
    603996526U,	// WFCHEDB
    604006425U,	// WFCHEDBS
    603996494U,	// WFDDB
    603996620U,	// WFIDB
    604003352U,	// WFK
    67125715U,	// WFKDB
    67125561U,	// WFLCDB
    67125751U,	// WFLNDB
    67125785U,	// WFLPDB
    603996450U,	// WFMADB
    603996648U,	// WFMDB
    603996743U,	// WFMSDB
    603996680U,	// WFPSODB
    603996728U,	// WFSDB
    67125801U,	// WFSQDB
    603996604U,	// WFTCIDB
    67125878U,	// WLDEB
    603996542U,	// WLEDB
    27334U,	// X
    116048U,	// XC
    0U,	// XCLoop
    0U,	// XCSequence
    21142U,	// XG
    16803610U,	// XGR
    604003447U,	// XGRK
    419470284U,	// XI
    0U,	// XIFMux
    100683414U,	// XIHF
    0U,	// XIHF64
    100683559U,	// XILF
    0U,	// XILF64
    419474231U,	// XIY
    16803790U,	// XR
    604003480U,	// XRK
    27526U,	// XY
    0U,	// ZEXT128_32
    0U,	// ZEXT128_64
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_SEQUENCE
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// A
    0U,	// ADB
    0U,	// ADBR
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ADJDYNALLOC
    0U,	// AEB
    0U,	// AEBR
    0U,	// AEXT128_64
    0U,	// AFI
    0U,	// AFIMux
    0U,	// AG
    0U,	// AGF
    0U,	// AGFI
    0U,	// AGFR
    0U,	// AGHI
    0U,	// AGHIK
    0U,	// AGR
    4U,	// AGRK
    0U,	// AGSI
    0U,	// AH
    0U,	// AHI
    0U,	// AHIK
    0U,	// AHIMux
    0U,	// AHIMuxK
    0U,	// AHY
    0U,	// AIH
    0U,	// AL
    0U,	// ALC
    0U,	// ALCG
    0U,	// ALCGR
    0U,	// ALCR
    0U,	// ALFI
    0U,	// ALG
    0U,	// ALGF
    0U,	// ALGFI
    0U,	// ALGFR
    0U,	// ALGHSIK
    0U,	// ALGR
    4U,	// ALGRK
    0U,	// ALHSIK
    0U,	// ALR
    4U,	// ALRK
    0U,	// ALY
    0U,	// AR
    4U,	// ARK
    0U,	// ASI
    0U,	// ATOMIC_CMP_SWAPW
    0U,	// ATOMIC_LOADW_AFI
    0U,	// ATOMIC_LOADW_AR
    0U,	// ATOMIC_LOADW_MAX
    0U,	// ATOMIC_LOADW_MIN
    0U,	// ATOMIC_LOADW_NILH
    0U,	// ATOMIC_LOADW_NILHi
    0U,	// ATOMIC_LOADW_NR
    0U,	// ATOMIC_LOADW_NRi
    0U,	// ATOMIC_LOADW_OILH
    0U,	// ATOMIC_LOADW_OR
    0U,	// ATOMIC_LOADW_SR
    0U,	// ATOMIC_LOADW_UMAX
    0U,	// ATOMIC_LOADW_UMIN
    0U,	// ATOMIC_LOADW_XILF
    0U,	// ATOMIC_LOADW_XR
    0U,	// ATOMIC_LOAD_AFI
    0U,	// ATOMIC_LOAD_AGFI
    0U,	// ATOMIC_LOAD_AGHI
    0U,	// ATOMIC_LOAD_AGR
    0U,	// ATOMIC_LOAD_AHI
    0U,	// ATOMIC_LOAD_AR
    0U,	// ATOMIC_LOAD_MAX_32
    0U,	// ATOMIC_LOAD_MAX_64
    0U,	// ATOMIC_LOAD_MIN_32
    0U,	// ATOMIC_LOAD_MIN_64
    0U,	// ATOMIC_LOAD_NGR
    0U,	// ATOMIC_LOAD_NGRi
    0U,	// ATOMIC_LOAD_NIHF64
    0U,	// ATOMIC_LOAD_NIHF64i
    0U,	// ATOMIC_LOAD_NIHH64
    0U,	// ATOMIC_LOAD_NIHH64i
    0U,	// ATOMIC_LOAD_NIHL64
    0U,	// ATOMIC_LOAD_NIHL64i
    0U,	// ATOMIC_LOAD_NILF
    0U,	// ATOMIC_LOAD_NILF64
    0U,	// ATOMIC_LOAD_NILF64i
    0U,	// ATOMIC_LOAD_NILFi
    0U,	// ATOMIC_LOAD_NILH
    0U,	// ATOMIC_LOAD_NILH64
    0U,	// ATOMIC_LOAD_NILH64i
    0U,	// ATOMIC_LOAD_NILHi
    0U,	// ATOMIC_LOAD_NILL
    0U,	// ATOMIC_LOAD_NILL64
    0U,	// ATOMIC_LOAD_NILL64i
    0U,	// ATOMIC_LOAD_NILLi
    0U,	// ATOMIC_LOAD_NR
    0U,	// ATOMIC_LOAD_NRi
    0U,	// ATOMIC_LOAD_OGR
    0U,	// ATOMIC_LOAD_OIHF64
    0U,	// ATOMIC_LOAD_OIHH64
    0U,	// ATOMIC_LOAD_OIHL64
    0U,	// ATOMIC_LOAD_OILF
    0U,	// ATOMIC_LOAD_OILF64
    0U,	// ATOMIC_LOAD_OILH
    0U,	// ATOMIC_LOAD_OILH64
    0U,	// ATOMIC_LOAD_OILL
    0U,	// ATOMIC_LOAD_OILL64
    0U,	// ATOMIC_LOAD_OR
    0U,	// ATOMIC_LOAD_SGR
    0U,	// ATOMIC_LOAD_SR
    0U,	// ATOMIC_LOAD_UMAX_32
    0U,	// ATOMIC_LOAD_UMAX_64
    0U,	// ATOMIC_LOAD_UMIN_32
    0U,	// ATOMIC_LOAD_UMIN_64
    0U,	// ATOMIC_LOAD_XGR
    0U,	// ATOMIC_LOAD_XIHF64
    0U,	// ATOMIC_LOAD_XILF
    0U,	// ATOMIC_LOAD_XILF64
    0U,	// ATOMIC_LOAD_XR
    0U,	// ATOMIC_SWAPW
    0U,	// ATOMIC_SWAP_32
    0U,	// ATOMIC_SWAP_64
    0U,	// AXBR
    0U,	// AY
    0U,	// B
    0U,	// BAL
    0U,	// BALR
    0U,	// BAS
    0U,	// BASR
    0U,	// BASSM
    0U,	// BAsmE
    0U,	// BAsmH
    0U,	// BAsmHE
    0U,	// BAsmL
    0U,	// BAsmLE
    0U,	// BAsmLH
    0U,	// BAsmM
    0U,	// BAsmNE
    0U,	// BAsmNH
    0U,	// BAsmNHE
    0U,	// BAsmNL
    0U,	// BAsmNLE
    0U,	// BAsmNLH
    0U,	// BAsmNM
    0U,	// BAsmNO
    0U,	// BAsmNP
    0U,	// BAsmNZ
    0U,	// BAsmO
    0U,	// BAsmP
    0U,	// BAsmZ
    0U,	// BC
    0U,	// BCAsm
    0U,	// BCR
    0U,	// BCRAsm
    0U,	// BCT
    0U,	// BCTG
    0U,	// BCTGR
    0U,	// BCTR
    0U,	// BPP
    0U,	// BPRP
    0U,	// BR
    0U,	// BRAS
    0U,	// BRASL
    0U,	// BRAsmE
    0U,	// BRAsmH
    0U,	// BRAsmHE
    0U,	// BRAsmL
    0U,	// BRAsmLE
    0U,	// BRAsmLH
    0U,	// BRAsmM
    0U,	// BRAsmNE
    0U,	// BRAsmNH
    0U,	// BRAsmNHE
    0U,	// BRAsmNL
    0U,	// BRAsmNLE
    0U,	// BRAsmNLH
    0U,	// BRAsmNM
    0U,	// BRAsmNO
    0U,	// BRAsmNP
    0U,	// BRAsmNZ
    0U,	// BRAsmO
    0U,	// BRAsmP
    0U,	// BRAsmZ
    0U,	// BRC
    0U,	// BRCAsm
    0U,	// BRCL
    0U,	// BRCLAsm
    0U,	// BRCT
    0U,	// BRCTG
    0U,	// BRCTH
    8U,	// BRXH
    8U,	// BRXHG
    8U,	// BRXLE
    8U,	// BRXLG
    0U,	// BSM
    12U,	// BXH
    12U,	// BXHG
    12U,	// BXLE
    12U,	// BXLEG
    0U,	// C
    0U,	// CDB
    0U,	// CDBR
    0U,	// CDFBR
    16U,	// CDFBRA
    0U,	// CDGBR
    16U,	// CDGBRA
    16U,	// CDLFBR
    16U,	// CDLGBR
    12U,	// CDS
    12U,	// CDSG
    12U,	// CDSY
    0U,	// CEB
    0U,	// CEBR
    0U,	// CEFBR
    16U,	// CEFBRA
    0U,	// CEGBR
    16U,	// CEGBRA
    16U,	// CELFBR
    16U,	// CELGBR
    0U,	// CFDBR
    16U,	// CFDBRA
    0U,	// CFEBR
    16U,	// CFEBRA
    0U,	// CFI
    0U,	// CFIMux
    0U,	// CFXBR
    16U,	// CFXBRA
    0U,	// CG
    0U,	// CGDBR
    16U,	// CGDBRA
    0U,	// CGEBR
    16U,	// CGEBRA
    0U,	// CGF
    0U,	// CGFI
    0U,	// CGFR
    0U,	// CGFRL
    0U,	// CGH
    0U,	// CGHI
    0U,	// CGHRL
    0U,	// CGHSI
    0U,	// CGIB
    12U,	// CGIBAsm
    0U,	// CGIBAsmE
    0U,	// CGIBAsmH
    0U,	// CGIBAsmHE
    0U,	// CGIBAsmL
    0U,	// CGIBAsmLE
    0U,	// CGIBAsmLH
    0U,	// CGIBAsmNE
    0U,	// CGIBAsmNH
    0U,	// CGIBAsmNHE
    0U,	// CGIBAsmNL
    0U,	// CGIBAsmNLE
    0U,	// CGIBAsmNLH
    0U,	// CGIBCall
    0U,	// CGIBReturn
    0U,	// CGIJ
    8U,	// CGIJAsm
    0U,	// CGIJAsmE
    0U,	// CGIJAsmH
    0U,	// CGIJAsmHE
    0U,	// CGIJAsmL
    0U,	// CGIJAsmLE
    0U,	// CGIJAsmLH
    0U,	// CGIJAsmNE
    0U,	// CGIJAsmNH
    0U,	// CGIJAsmNHE
    0U,	// CGIJAsmNL
    0U,	// CGIJAsmNLE
    0U,	// CGIJAsmNLH
    0U,	// CGIT
    20U,	// CGITAsm
    0U,	// CGITAsmE
    0U,	// CGITAsmH
    0U,	// CGITAsmHE
    0U,	// CGITAsmL
    0U,	// CGITAsmLE
    0U,	// CGITAsmLH
    0U,	// CGITAsmNE
    0U,	// CGITAsmNH
    0U,	// CGITAsmNHE
    0U,	// CGITAsmNL
    0U,	// CGITAsmNLE
    0U,	// CGITAsmNLH
    0U,	// CGR
    24U,	// CGRB
    148U,	// CGRBAsm
    28U,	// CGRBAsmE
    28U,	// CGRBAsmH
    28U,	// CGRBAsmHE
    28U,	// CGRBAsmL
    28U,	// CGRBAsmLE
    28U,	// CGRBAsmLH
    28U,	// CGRBAsmNE
    28U,	// CGRBAsmNH
    28U,	// CGRBAsmNHE
    28U,	// CGRBAsmNL
    28U,	// CGRBAsmNLE
    28U,	// CGRBAsmNLH
    0U,	// CGRBCall
    0U,	// CGRBReturn
    0U,	// CGRJ
    1172U,	// CGRJAsm
    32U,	// CGRJAsmE
    32U,	// CGRJAsmH
    32U,	// CGRJAsmHE
    32U,	// CGRJAsmL
    32U,	// CGRJAsmLE
    32U,	// CGRJAsmLH
    32U,	// CGRJAsmNE
    32U,	// CGRJAsmNH
    32U,	// CGRJAsmNHE
    32U,	// CGRJAsmNL
    32U,	// CGRJAsmNLE
    32U,	// CGRJAsmNLH
    0U,	// CGRL
    0U,	// CGRT
    20U,	// CGRTAsm
    0U,	// CGRTAsmE
    0U,	// CGRTAsmH
    0U,	// CGRTAsmHE
    0U,	// CGRTAsmL
    0U,	// CGRTAsmLE
    0U,	// CGRTAsmLH
    0U,	// CGRTAsmNE
    0U,	// CGRTAsmNH
    0U,	// CGRTAsmNHE
    0U,	// CGRTAsmNL
    0U,	// CGRTAsmNLE
    0U,	// CGRTAsmNLH
    0U,	// CGXBR
    16U,	// CGXBRA
    0U,	// CH
    0U,	// CHF
    0U,	// CHHSI
    0U,	// CHI
    0U,	// CHIMux
    0U,	// CHRL
    0U,	// CHSI
    0U,	// CHY
    0U,	// CIB
    12U,	// CIBAsm
    0U,	// CIBAsmE
    0U,	// CIBAsmH
    0U,	// CIBAsmHE
    0U,	// CIBAsmL
    0U,	// CIBAsmLE
    0U,	// CIBAsmLH
    0U,	// CIBAsmNE
    0U,	// CIBAsmNH
    0U,	// CIBAsmNHE
    0U,	// CIBAsmNL
    0U,	// CIBAsmNLE
    0U,	// CIBAsmNLH
    0U,	// CIBCall
    0U,	// CIBReturn
    0U,	// CIH
    0U,	// CIJ
    8U,	// CIJAsm
    0U,	// CIJAsmE
    0U,	// CIJAsmH
    0U,	// CIJAsmHE
    0U,	// CIJAsmL
    0U,	// CIJAsmLE
    0U,	// CIJAsmLH
    0U,	// CIJAsmNE
    0U,	// CIJAsmNH
    0U,	// CIJAsmNHE
    0U,	// CIJAsmNL
    0U,	// CIJAsmNLE
    0U,	// CIJAsmNLH
    0U,	// CIT
    20U,	// CITAsm
    0U,	// CITAsmE
    0U,	// CITAsmH
    0U,	// CITAsmHE
    0U,	// CITAsmL
    0U,	// CITAsmLE
    0U,	// CITAsmLH
    0U,	// CITAsmNE
    0U,	// CITAsmNH
    0U,	// CITAsmNHE
    0U,	// CITAsmNL
    0U,	// CITAsmNLE
    0U,	// CITAsmNLH
    0U,	// CL
    0U,	// CLC
    0U,	// CLCLoop
    0U,	// CLCSequence
    16U,	// CLFDBR
    16U,	// CLFEBR
    0U,	// CLFHSI
    0U,	// CLFI
    0U,	// CLFIMux
    0U,	// CLFIT
    20U,	// CLFITAsm
    0U,	// CLFITAsmE
    0U,	// CLFITAsmH
    0U,	// CLFITAsmHE
    0U,	// CLFITAsmL
    0U,	// CLFITAsmLE
    0U,	// CLFITAsmLH
    0U,	// CLFITAsmNE
    0U,	// CLFITAsmNH
    0U,	// CLFITAsmNHE
    0U,	// CLFITAsmNL
    0U,	// CLFITAsmNLE
    0U,	// CLFITAsmNLH
    16U,	// CLFXBR
    0U,	// CLG
    16U,	// CLGDBR
    16U,	// CLGEBR
    0U,	// CLGF
    0U,	// CLGFI
    0U,	// CLGFR
    0U,	// CLGFRL
    0U,	// CLGHRL
    0U,	// CLGHSI
    0U,	// CLGIB
    12U,	// CLGIBAsm
    0U,	// CLGIBAsmE
    0U,	// CLGIBAsmH
    0U,	// CLGIBAsmHE
    0U,	// CLGIBAsmL
    0U,	// CLGIBAsmLE
    0U,	// CLGIBAsmLH
    0U,	// CLGIBAsmNE
    0U,	// CLGIBAsmNH
    0U,	// CLGIBAsmNHE
    0U,	// CLGIBAsmNL
    0U,	// CLGIBAsmNLE
    0U,	// CLGIBAsmNLH
    0U,	// CLGIBCall
    0U,	// CLGIBReturn
    0U,	// CLGIJ
    8U,	// CLGIJAsm
    0U,	// CLGIJAsmE
    0U,	// CLGIJAsmH
    0U,	// CLGIJAsmHE
    0U,	// CLGIJAsmL
    0U,	// CLGIJAsmLE
    0U,	// CLGIJAsmLH
    0U,	// CLGIJAsmNE
    0U,	// CLGIJAsmNH
    0U,	// CLGIJAsmNHE
    0U,	// CLGIJAsmNL
    0U,	// CLGIJAsmNLE
    0U,	// CLGIJAsmNLH
    0U,	// CLGIT
    20U,	// CLGITAsm
    0U,	// CLGITAsmE
    0U,	// CLGITAsmH
    0U,	// CLGITAsmHE
    0U,	// CLGITAsmL
    0U,	// CLGITAsmLE
    0U,	// CLGITAsmLH
    0U,	// CLGITAsmNE
    0U,	// CLGITAsmNH
    0U,	// CLGITAsmNHE
    0U,	// CLGITAsmNL
    0U,	// CLGITAsmNLE
    0U,	// CLGITAsmNLH
    0U,	// CLGR
    24U,	// CLGRB
    148U,	// CLGRBAsm
    28U,	// CLGRBAsmE
    28U,	// CLGRBAsmH
    28U,	// CLGRBAsmHE
    28U,	// CLGRBAsmL
    28U,	// CLGRBAsmLE
    28U,	// CLGRBAsmLH
    28U,	// CLGRBAsmNE
    28U,	// CLGRBAsmNH
    28U,	// CLGRBAsmNHE
    28U,	// CLGRBAsmNL
    28U,	// CLGRBAsmNLE
    28U,	// CLGRBAsmNLH
    0U,	// CLGRBCall
    0U,	// CLGRBReturn
    0U,	// CLGRJ
    1172U,	// CLGRJAsm
    32U,	// CLGRJAsmE
    32U,	// CLGRJAsmH
    32U,	// CLGRJAsmHE
    32U,	// CLGRJAsmL
    32U,	// CLGRJAsmLE
    32U,	// CLGRJAsmLH
    32U,	// CLGRJAsmNE
    32U,	// CLGRJAsmNH
    32U,	// CLGRJAsmNHE
    32U,	// CLGRJAsmNL
    32U,	// CLGRJAsmNLE
    32U,	// CLGRJAsmNLH
    0U,	// CLGRL
    0U,	// CLGRT
    20U,	// CLGRTAsm
    0U,	// CLGRTAsmE
    0U,	// CLGRTAsmH
    0U,	// CLGRTAsmHE
    0U,	// CLGRTAsmL
    0U,	// CLGRTAsmLE
    0U,	// CLGRTAsmLH
    0U,	// CLGRTAsmNE
    0U,	// CLGRTAsmNH
    0U,	// CLGRTAsmNHE
    0U,	// CLGRTAsmNL
    0U,	// CLGRTAsmNLE
    0U,	// CLGRTAsmNLH
    0U,	// CLGT
    0U,	// CLGTAsm
    0U,	// CLGTAsmE
    0U,	// CLGTAsmH
    0U,	// CLGTAsmHE
    0U,	// CLGTAsmL
    0U,	// CLGTAsmLE
    0U,	// CLGTAsmLH
    0U,	// CLGTAsmNE
    0U,	// CLGTAsmNH
    0U,	// CLGTAsmNHE
    0U,	// CLGTAsmNL
    0U,	// CLGTAsmNLE
    0U,	// CLGTAsmNLH
    16U,	// CLGXBR
    0U,	// CLHF
    0U,	// CLHHSI
    0U,	// CLHRL
    0U,	// CLI
    0U,	// CLIB
    12U,	// CLIBAsm
    0U,	// CLIBAsmE
    0U,	// CLIBAsmH
    0U,	// CLIBAsmHE
    0U,	// CLIBAsmL
    0U,	// CLIBAsmLE
    0U,	// CLIBAsmLH
    0U,	// CLIBAsmNE
    0U,	// CLIBAsmNH
    0U,	// CLIBAsmNHE
    0U,	// CLIBAsmNL
    0U,	// CLIBAsmNLE
    0U,	// CLIBAsmNLH
    0U,	// CLIBCall
    0U,	// CLIBReturn
    0U,	// CLIH
    0U,	// CLIJ
    8U,	// CLIJAsm
    0U,	// CLIJAsmE
    0U,	// CLIJAsmH
    0U,	// CLIJAsmHE
    0U,	// CLIJAsmL
    0U,	// CLIJAsmLE
    0U,	// CLIJAsmLH
    0U,	// CLIJAsmNE
    0U,	// CLIJAsmNH
    0U,	// CLIJAsmNHE
    0U,	// CLIJAsmNL
    0U,	// CLIJAsmNLE
    0U,	// CLIJAsmNLH
    0U,	// CLIY
    0U,	// CLMux
    0U,	// CLR
    24U,	// CLRB
    148U,	// CLRBAsm
    28U,	// CLRBAsmE
    28U,	// CLRBAsmH
    28U,	// CLRBAsmHE
    28U,	// CLRBAsmL
    28U,	// CLRBAsmLE
    28U,	// CLRBAsmLH
    28U,	// CLRBAsmNE
    28U,	// CLRBAsmNH
    28U,	// CLRBAsmNHE
    28U,	// CLRBAsmNL
    28U,	// CLRBAsmNLE
    28U,	// CLRBAsmNLH
    0U,	// CLRBCall
    0U,	// CLRBReturn
    0U,	// CLRJ
    1172U,	// CLRJAsm
    32U,	// CLRJAsmE
    32U,	// CLRJAsmH
    32U,	// CLRJAsmHE
    32U,	// CLRJAsmL
    32U,	// CLRJAsmLE
    32U,	// CLRJAsmLH
    32U,	// CLRJAsmNE
    32U,	// CLRJAsmNH
    32U,	// CLRJAsmNHE
    32U,	// CLRJAsmNL
    32U,	// CLRJAsmNLE
    32U,	// CLRJAsmNLH
    0U,	// CLRL
    0U,	// CLRT
    20U,	// CLRTAsm
    0U,	// CLRTAsmE
    0U,	// CLRTAsmH
    0U,	// CLRTAsmHE
    0U,	// CLRTAsmL
    0U,	// CLRTAsmLE
    0U,	// CLRTAsmLH
    0U,	// CLRTAsmNE
    0U,	// CLRTAsmNH
    0U,	// CLRTAsmNHE
    0U,	// CLRTAsmNL
    0U,	// CLRTAsmNLE
    0U,	// CLRTAsmNLH
    0U,	// CLST
    0U,	// CLSTLoop
    0U,	// CLT
    0U,	// CLTAsm
    0U,	// CLTAsmE
    0U,	// CLTAsmH
    0U,	// CLTAsmHE
    0U,	// CLTAsmL
    0U,	// CLTAsmLE
    0U,	// CLTAsmLH
    0U,	// CLTAsmNE
    0U,	// CLTAsmNH
    0U,	// CLTAsmNHE
    0U,	// CLTAsmNL
    0U,	// CLTAsmNLE
    0U,	// CLTAsmNLH
    0U,	// CLY
    0U,	// CMux
    36U,	// CPSDRdd
    36U,	// CPSDRds
    36U,	// CPSDRsd
    36U,	// CPSDRss
    0U,	// CPYA
    0U,	// CR
    24U,	// CRB
    148U,	// CRBAsm
    28U,	// CRBAsmE
    28U,	// CRBAsmH
    28U,	// CRBAsmHE
    28U,	// CRBAsmL
    28U,	// CRBAsmLE
    28U,	// CRBAsmLH
    28U,	// CRBAsmNE
    28U,	// CRBAsmNH
    28U,	// CRBAsmNHE
    28U,	// CRBAsmNL
    28U,	// CRBAsmNLE
    28U,	// CRBAsmNLH
    0U,	// CRBCall
    0U,	// CRBReturn
    0U,	// CRJ
    1172U,	// CRJAsm
    32U,	// CRJAsmE
    32U,	// CRJAsmH
    32U,	// CRJAsmHE
    32U,	// CRJAsmL
    32U,	// CRJAsmLE
    32U,	// CRJAsmLH
    32U,	// CRJAsmNE
    32U,	// CRJAsmNH
    32U,	// CRJAsmNHE
    32U,	// CRJAsmNL
    32U,	// CRJAsmNLE
    32U,	// CRJAsmNLH
    0U,	// CRL
    0U,	// CRT
    20U,	// CRTAsm
    0U,	// CRTAsmE
    0U,	// CRTAsmH
    0U,	// CRTAsmHE
    0U,	// CRTAsmL
    0U,	// CRTAsmLE
    0U,	// CRTAsmLH
    0U,	// CRTAsmNE
    0U,	// CRTAsmNH
    0U,	// CRTAsmNHE
    0U,	// CRTAsmNL
    0U,	// CRTAsmNLE
    0U,	// CRTAsmNLH
    12U,	// CS
    12U,	// CSG
    40U,	// CSST
    12U,	// CSY
    0U,	// CXBR
    0U,	// CXFBR
    16U,	// CXFBRA
    0U,	// CXGBR
    16U,	// CXGBRA
    16U,	// CXLFBR
    16U,	// CXLGBR
    0U,	// CY
    0U,	// CallBASR
    0U,	// CallBCR
    0U,	// CallBR
    0U,	// CallBRASL
    0U,	// CallBRCL
    0U,	// CallJG
    0U,	// CondReturn
    0U,	// CondStore16
    0U,	// CondStore16Inv
    0U,	// CondStore16Mux
    0U,	// CondStore16MuxInv
    0U,	// CondStore32
    0U,	// CondStore32Inv
    0U,	// CondStore32Mux
    0U,	// CondStore32MuxInv
    0U,	// CondStore64
    0U,	// CondStore64Inv
    0U,	// CondStore8
    0U,	// CondStore8Inv
    0U,	// CondStore8Mux
    0U,	// CondStore8MuxInv
    0U,	// CondStoreF32
    0U,	// CondStoreF32Inv
    0U,	// CondStoreF64
    0U,	// CondStoreF64Inv
    0U,	// CondTrap
    0U,	// DDB
    0U,	// DDBR
    0U,	// DEB
    0U,	// DEBR
    0U,	// DL
    0U,	// DLG
    0U,	// DLGR
    0U,	// DLR
    0U,	// DSG
    0U,	// DSGF
    0U,	// DSGFR
    0U,	// DSGR
    0U,	// DXBR
    0U,	// EAR
    40U,	// ECTG
    0U,	// EFPC
    0U,	// ETND
    0U,	// EX
    0U,	// EXRL
    0U,	// FIDBR
    16U,	// FIDBRA
    0U,	// FIEBR
    16U,	// FIEBRA
    0U,	// FIXBR
    16U,	// FIXBRA
    0U,	// FLOGR
    0U,	// GOT
    0U,	// IC
    0U,	// IC32
    0U,	// IC32Y
    0U,	// ICM
    0U,	// ICMH
    0U,	// ICMY
    0U,	// ICY
    0U,	// IIFMux
    0U,	// IIHF
    0U,	// IIHF64
    0U,	// IIHH
    0U,	// IIHH64
    0U,	// IIHL
    0U,	// IIHL64
    0U,	// IIHMux
    0U,	// IILF
    0U,	// IILF64
    0U,	// IILH
    0U,	// IILH64
    0U,	// IILL
    0U,	// IILL64
    0U,	// IILMux
    0U,	// IPM
    0U,	// InsnE
    1U,	// InsnRI
    301U,	// InsnRIE
    0U,	// InsnRIL
    1U,	// InsnRILU
    1U,	// InsnRIS
    0U,	// InsnRR
    25U,	// InsnRRE
    429U,	// InsnRRF
    557U,	// InsnRRS
    685U,	// InsnRS
    685U,	// InsnRSE
    301U,	// InsnRSI
    685U,	// InsnRSY
    0U,	// InsnRX
    0U,	// InsnRXE
    813U,	// InsnRXF
    0U,	// InsnRXY
    0U,	// InsnS
    1U,	// InsnSI
    1U,	// InsnSIL
    1U,	// InsnSIY
    0U,	// InsnSS
    24U,	// InsnSSE
    940U,	// InsnSSF
    0U,	// J
    0U,	// JAsmE
    0U,	// JAsmH
    0U,	// JAsmHE
    0U,	// JAsmL
    0U,	// JAsmLE
    0U,	// JAsmLH
    0U,	// JAsmM
    0U,	// JAsmNE
    0U,	// JAsmNH
    0U,	// JAsmNHE
    0U,	// JAsmNL
    0U,	// JAsmNLE
    0U,	// JAsmNLH
    0U,	// JAsmNM
    0U,	// JAsmNO
    0U,	// JAsmNP
    0U,	// JAsmNZ
    0U,	// JAsmO
    0U,	// JAsmP
    0U,	// JAsmZ
    0U,	// JG
    0U,	// JGAsmE
    0U,	// JGAsmH
    0U,	// JGAsmHE
    0U,	// JGAsmL
    0U,	// JGAsmLE
    0U,	// JGAsmLH
    0U,	// JGAsmM
    0U,	// JGAsmNE
    0U,	// JGAsmNH
    0U,	// JGAsmNHE
    0U,	// JGAsmNL
    0U,	// JGAsmNLE
    0U,	// JGAsmNLH
    0U,	// JGAsmNM
    0U,	// JGAsmNO
    0U,	// JGAsmNP
    0U,	// JGAsmNZ
    0U,	// JGAsmO
    0U,	// JGAsmP
    0U,	// JGAsmZ
    0U,	// L
    0U,	// L128
    0U,	// LA
    28U,	// LAA
    28U,	// LAAG
    28U,	// LAAL
    28U,	// LAALG
    0U,	// LAE
    0U,	// LAEY
    28U,	// LAM
    28U,	// LAMY
    28U,	// LAN
    28U,	// LANG
    28U,	// LAO
    28U,	// LAOG
    0U,	// LARL
    0U,	// LAT
    28U,	// LAX
    28U,	// LAXG
    0U,	// LAY
    0U,	// LB
    0U,	// LBH
    0U,	// LBMux
    0U,	// LBR
    48U,	// LCBB
    0U,	// LCDBR
    0U,	// LCDFR
    0U,	// LCDFR_32
    0U,	// LCEBR
    0U,	// LCGFR
    0U,	// LCGR
    0U,	// LCR
    0U,	// LCXBR
    0U,	// LD
    0U,	// LDE32
    0U,	// LDEB
    0U,	// LDEBR
    0U,	// LDGR
    0U,	// LDR
    0U,	// LDR32
    0U,	// LDXBR
    16U,	// LDXBRA
    0U,	// LDY
    0U,	// LE
    0U,	// LEDBR
    16U,	// LEDBRA
    0U,	// LEFR
    0U,	// LER
    0U,	// LEXBR
    16U,	// LEXBRA
    0U,	// LEY
    0U,	// LFAS
    0U,	// LFER
    0U,	// LFH
    0U,	// LFHAT
    0U,	// LFPC
    0U,	// LG
    0U,	// LGAT
    0U,	// LGB
    0U,	// LGBR
    0U,	// LGDR
    0U,	// LGF
    0U,	// LGFI
    0U,	// LGFR
    0U,	// LGFRL
    0U,	// LGH
    0U,	// LGHI
    0U,	// LGHR
    0U,	// LGHRL
    0U,	// LGR
    0U,	// LGRL
    0U,	// LH
    0U,	// LHH
    0U,	// LHI
    0U,	// LHIMux
    0U,	// LHMux
    0U,	// LHR
    0U,	// LHRL
    0U,	// LHY
    0U,	// LLC
    0U,	// LLCH
    0U,	// LLCMux
    0U,	// LLCR
    0U,	// LLCRMux
    0U,	// LLGC
    0U,	// LLGCR
    0U,	// LLGF
    0U,	// LLGFAT
    0U,	// LLGFR
    0U,	// LLGFRL
    0U,	// LLGH
    0U,	// LLGHR
    0U,	// LLGHRL
    0U,	// LLGT
    0U,	// LLGTAT
    0U,	// LLGTR
    0U,	// LLH
    0U,	// LLHH
    0U,	// LLHMux
    0U,	// LLHR
    0U,	// LLHRL
    0U,	// LLHRMux
    0U,	// LLIHF
    0U,	// LLIHH
    0U,	// LLIHL
    0U,	// LLILF
    0U,	// LLILH
    0U,	// LLILL
    0U,	// LLZRGF
    28U,	// LM
    28U,	// LMG
    28U,	// LMH
    28U,	// LMY
    0U,	// LMux
    0U,	// LNDBR
    0U,	// LNDFR
    0U,	// LNDFR_32
    0U,	// LNEBR
    0U,	// LNGFR
    0U,	// LNGR
    0U,	// LNR
    0U,	// LNXBR
    0U,	// LOC
    48U,	// LOCAsm
    0U,	// LOCAsmE
    0U,	// LOCAsmH
    0U,	// LOCAsmHE
    0U,	// LOCAsmL
    0U,	// LOCAsmLE
    0U,	// LOCAsmLH
    0U,	// LOCAsmM
    0U,	// LOCAsmNE
    0U,	// LOCAsmNH
    0U,	// LOCAsmNHE
    0U,	// LOCAsmNL
    0U,	// LOCAsmNLE
    0U,	// LOCAsmNLH
    0U,	// LOCAsmNM
    0U,	// LOCAsmNO
    0U,	// LOCAsmNP
    0U,	// LOCAsmNZ
    0U,	// LOCAsmO
    0U,	// LOCAsmP
    0U,	// LOCAsmZ
    0U,	// LOCFH
    48U,	// LOCFHAsm
    0U,	// LOCFHAsmE
    0U,	// LOCFHAsmH
    0U,	// LOCFHAsmHE
    0U,	// LOCFHAsmL
    0U,	// LOCFHAsmLE
    0U,	// LOCFHAsmLH
    0U,	// LOCFHAsmM
    0U,	// LOCFHAsmNE
    0U,	// LOCFHAsmNH
    0U,	// LOCFHAsmNHE
    0U,	// LOCFHAsmNL
    0U,	// LOCFHAsmNLE
    0U,	// LOCFHAsmNLH
    0U,	// LOCFHAsmNM
    0U,	// LOCFHAsmNO
    0U,	// LOCFHAsmNP
    0U,	// LOCFHAsmNZ
    0U,	// LOCFHAsmO
    0U,	// LOCFHAsmP
    0U,	// LOCFHAsmZ
    0U,	// LOCFHR
    16U,	// LOCFHRAsm
    0U,	// LOCFHRAsmE
    0U,	// LOCFHRAsmH
    0U,	// LOCFHRAsmHE
    0U,	// LOCFHRAsmL
    0U,	// LOCFHRAsmLE
    0U,	// LOCFHRAsmLH
    0U,	// LOCFHRAsmM
    0U,	// LOCFHRAsmNE
    0U,	// LOCFHRAsmNH
    0U,	// LOCFHRAsmNHE
    0U,	// LOCFHRAsmNL
    0U,	// LOCFHRAsmNLE
    0U,	// LOCFHRAsmNLH
    0U,	// LOCFHRAsmNM
    0U,	// LOCFHRAsmNO
    0U,	// LOCFHRAsmNP
    0U,	// LOCFHRAsmNZ
    0U,	// LOCFHRAsmO
    0U,	// LOCFHRAsmP
    0U,	// LOCFHRAsmZ
    0U,	// LOCG
    48U,	// LOCGAsm
    0U,	// LOCGAsmE
    0U,	// LOCGAsmH
    0U,	// LOCGAsmHE
    0U,	// LOCGAsmL
    0U,	// LOCGAsmLE
    0U,	// LOCGAsmLH
    0U,	// LOCGAsmM
    0U,	// LOCGAsmNE
    0U,	// LOCGAsmNH
    0U,	// LOCGAsmNHE
    0U,	// LOCGAsmNL
    0U,	// LOCGAsmNLE
    0U,	// LOCGAsmNLH
    0U,	// LOCGAsmNM
    0U,	// LOCGAsmNO
    0U,	// LOCGAsmNP
    0U,	// LOCGAsmNZ
    0U,	// LOCGAsmO
    0U,	// LOCGAsmP
    0U,	// LOCGAsmZ
    0U,	// LOCGHI
    16U,	// LOCGHIAsm
    0U,	// LOCGHIAsmE
    0U,	// LOCGHIAsmH
    0U,	// LOCGHIAsmHE
    0U,	// LOCGHIAsmL
    0U,	// LOCGHIAsmLE
    0U,	// LOCGHIAsmLH
    0U,	// LOCGHIAsmM
    0U,	// LOCGHIAsmNE
    0U,	// LOCGHIAsmNH
    0U,	// LOCGHIAsmNHE
    0U,	// LOCGHIAsmNL
    0U,	// LOCGHIAsmNLE
    0U,	// LOCGHIAsmNLH
    0U,	// LOCGHIAsmNM
    0U,	// LOCGHIAsmNO
    0U,	// LOCGHIAsmNP
    0U,	// LOCGHIAsmNZ
    0U,	// LOCGHIAsmO
    0U,	// LOCGHIAsmP
    0U,	// LOCGHIAsmZ
    0U,	// LOCGR
    16U,	// LOCGRAsm
    0U,	// LOCGRAsmE
    0U,	// LOCGRAsmH
    0U,	// LOCGRAsmHE
    0U,	// LOCGRAsmL
    0U,	// LOCGRAsmLE
    0U,	// LOCGRAsmLH
    0U,	// LOCGRAsmM
    0U,	// LOCGRAsmNE
    0U,	// LOCGRAsmNH
    0U,	// LOCGRAsmNHE
    0U,	// LOCGRAsmNL
    0U,	// LOCGRAsmNLE
    0U,	// LOCGRAsmNLH
    0U,	// LOCGRAsmNM
    0U,	// LOCGRAsmNO
    0U,	// LOCGRAsmNP
    0U,	// LOCGRAsmNZ
    0U,	// LOCGRAsmO
    0U,	// LOCGRAsmP
    0U,	// LOCGRAsmZ
    0U,	// LOCHHI
    16U,	// LOCHHIAsm
    0U,	// LOCHHIAsmE
    0U,	// LOCHHIAsmH
    0U,	// LOCHHIAsmHE
    0U,	// LOCHHIAsmL
    0U,	// LOCHHIAsmLE
    0U,	// LOCHHIAsmLH
    0U,	// LOCHHIAsmM
    0U,	// LOCHHIAsmNE
    0U,	// LOCHHIAsmNH
    0U,	// LOCHHIAsmNHE
    0U,	// LOCHHIAsmNL
    0U,	// LOCHHIAsmNLE
    0U,	// LOCHHIAsmNLH
    0U,	// LOCHHIAsmNM
    0U,	// LOCHHIAsmNO
    0U,	// LOCHHIAsmNP
    0U,	// LOCHHIAsmNZ
    0U,	// LOCHHIAsmO
    0U,	// LOCHHIAsmP
    0U,	// LOCHHIAsmZ
    0U,	// LOCHI
    16U,	// LOCHIAsm
    0U,	// LOCHIAsmE
    0U,	// LOCHIAsmH
    0U,	// LOCHIAsmHE
    0U,	// LOCHIAsmL
    0U,	// LOCHIAsmLE
    0U,	// LOCHIAsmLH
    0U,	// LOCHIAsmM
    0U,	// LOCHIAsmNE
    0U,	// LOCHIAsmNH
    0U,	// LOCHIAsmNHE
    0U,	// LOCHIAsmNL
    0U,	// LOCHIAsmNLE
    0U,	// LOCHIAsmNLH
    0U,	// LOCHIAsmNM
    0U,	// LOCHIAsmNO
    0U,	// LOCHIAsmNP
    0U,	// LOCHIAsmNZ
    0U,	// LOCHIAsmO
    0U,	// LOCHIAsmP
    0U,	// LOCHIAsmZ
    0U,	// LOCHIMux
    0U,	// LOCMux
    0U,	// LOCR
    16U,	// LOCRAsm
    0U,	// LOCRAsmE
    0U,	// LOCRAsmH
    0U,	// LOCRAsmHE
    0U,	// LOCRAsmL
    0U,	// LOCRAsmLE
    0U,	// LOCRAsmLH
    0U,	// LOCRAsmM
    0U,	// LOCRAsmNE
    0U,	// LOCRAsmNH
    0U,	// LOCRAsmNHE
    0U,	// LOCRAsmNL
    0U,	// LOCRAsmNLE
    0U,	// LOCRAsmNLH
    0U,	// LOCRAsmNM
    0U,	// LOCRAsmNO
    0U,	// LOCRAsmNP
    0U,	// LOCRAsmNZ
    0U,	// LOCRAsmO
    0U,	// LOCRAsmP
    0U,	// LOCRAsmZ
    0U,	// LOCRMux
    12U,	// LPD
    0U,	// LPDBR
    0U,	// LPDFR
    0U,	// LPDFR_32
    12U,	// LPDG
    0U,	// LPEBR
    0U,	// LPGFR
    0U,	// LPGR
    0U,	// LPQ
    0U,	// LPR
    0U,	// LPXBR
    0U,	// LR
    0U,	// LRL
    0U,	// LRMux
    0U,	// LRV
    0U,	// LRVG
    0U,	// LRVGR
    0U,	// LRVH
    0U,	// LRVR
    0U,	// LT
    0U,	// LTDBR
    0U,	// LTDBRCompare
    0U,	// LTDBRCompare_VecPseudo
    0U,	// LTEBR
    0U,	// LTEBRCompare
    0U,	// LTEBRCompare_VecPseudo
    0U,	// LTG
    0U,	// LTGF
    0U,	// LTGFR
    0U,	// LTGR
    0U,	// LTR
    0U,	// LTXBR
    0U,	// LTXBRCompare
    0U,	// LTXBRCompare_VecPseudo
    0U,	// LX
    0U,	// LXDB
    0U,	// LXDBR
    0U,	// LXEB
    0U,	// LXEBR
    0U,	// LXR
    0U,	// LY
    0U,	// LZDR
    0U,	// LZER
    0U,	// LZRF
    0U,	// LZRG
    0U,	// LZXR
    52U,	// MADB
    56U,	// MADBR
    52U,	// MAEB
    56U,	// MAEBR
    0U,	// MDB
    0U,	// MDBR
    0U,	// MDEB
    0U,	// MDEBR
    0U,	// MEEB
    0U,	// MEEBR
    0U,	// MGHI
    0U,	// MH
    0U,	// MHI
    0U,	// MHY
    0U,	// MLG
    0U,	// MLGR
    0U,	// MS
    52U,	// MSDB
    56U,	// MSDBR
    52U,	// MSEB
    56U,	// MSEBR
    0U,	// MSFI
    0U,	// MSG
    0U,	// MSGF
    0U,	// MSGFI
    0U,	// MSGFR
    0U,	// MSGR
    0U,	// MSR
    0U,	// MSY
    0U,	// MVC
    0U,	// MVCK
    0U,	// MVCLoop
    0U,	// MVCSequence
    0U,	// MVGHI
    0U,	// MVHHI
    0U,	// MVHI
    0U,	// MVI
    0U,	// MVIY
    0U,	// MVST
    0U,	// MVSTLoop
    0U,	// MXBR
    0U,	// MXDB
    0U,	// MXDBR
    0U,	// MemBarrier
    0U,	// N
    0U,	// NC
    0U,	// NCLoop
    0U,	// NCSequence
    0U,	// NG
    0U,	// NGR
    4U,	// NGRK
    0U,	// NI
    0U,	// NIAI
    0U,	// NIFMux
    0U,	// NIHF
    0U,	// NIHF64
    0U,	// NIHH
    0U,	// NIHH64
    0U,	// NIHL
    0U,	// NIHL64
    0U,	// NIHMux
    0U,	// NILF
    0U,	// NILF64
    0U,	// NILH
    0U,	// NILH64
    0U,	// NILL
    0U,	// NILL64
    0U,	// NILMux
    0U,	// NIY
    0U,	// NR
    4U,	// NRK
    0U,	// NTSTG
    0U,	// NY
    0U,	// O
    0U,	// OC
    0U,	// OCLoop
    0U,	// OCSequence
    0U,	// OG
    0U,	// OGR
    4U,	// OGRK
    0U,	// OI
    0U,	// OIFMux
    0U,	// OIHF
    0U,	// OIHF64
    0U,	// OIHH
    0U,	// OIHH64
    0U,	// OIHL
    0U,	// OIHL64
    0U,	// OIHMux
    0U,	// OILF
    0U,	// OILF64
    0U,	// OILH
    0U,	// OILH64
    0U,	// OILL
    0U,	// OILL64
    0U,	// OILMux
    0U,	// OIY
    0U,	// OR
    4U,	// ORK
    0U,	// OY
    0U,	// PFD
    0U,	// PFDRL
    2232U,	// PLO
    0U,	// POPCNT
    20U,	// PPA
    0U,	// PR
    60U,	// RISBG
    60U,	// RISBG32
    60U,	// RISBGN
    60U,	// RISBHG
    0U,	// RISBHH
    0U,	// RISBHL
    60U,	// RISBLG
    0U,	// RISBLH
    0U,	// RISBLL
    0U,	// RISBMux
    28U,	// RLL
    28U,	// RLLG
    60U,	// RNSBG
    60U,	// ROSBG
    60U,	// RXSBG
    0U,	// Return
    0U,	// S
    0U,	// SAM24
    0U,	// SAM31
    0U,	// SAM64
    0U,	// SAR
    0U,	// SDB
    0U,	// SDBR
    0U,	// SEB
    0U,	// SEBR
    0U,	// SFASR
    0U,	// SFPC
    0U,	// SG
    0U,	// SGF
    0U,	// SGFR
    0U,	// SGR
    4U,	// SGRK
    0U,	// SH
    0U,	// SHY
    0U,	// SL
    0U,	// SLA
    28U,	// SLAK
    0U,	// SLB
    0U,	// SLBG
    0U,	// SLBGR
    0U,	// SLBR
    0U,	// SLFI
    0U,	// SLG
    0U,	// SLGF
    0U,	// SLGFI
    0U,	// SLGFR
    0U,	// SLGR
    4U,	// SLGRK
    0U,	// SLL
    28U,	// SLLG
    28U,	// SLLK
    0U,	// SLR
    4U,	// SLRK
    0U,	// SLY
    0U,	// SPM
    0U,	// SQDB
    0U,	// SQDBR
    0U,	// SQEB
    0U,	// SQEBR
    0U,	// SQXBR
    0U,	// SR
    0U,	// SRA
    28U,	// SRAG
    28U,	// SRAK
    4U,	// SRK
    0U,	// SRL
    28U,	// SRLG
    28U,	// SRLK
    0U,	// SRNM
    0U,	// SRNMB
    0U,	// SRNMT
    0U,	// SRST
    0U,	// SRSTLoop
    0U,	// ST
    0U,	// ST128
    28U,	// STAM
    28U,	// STAMY
    0U,	// STC
    0U,	// STCH
    0U,	// STCK
    0U,	// STCKE
    0U,	// STCKF
    0U,	// STCMux
    0U,	// STCY
    0U,	// STD
    0U,	// STDY
    0U,	// STE
    0U,	// STEY
    0U,	// STFH
    0U,	// STFLE
    0U,	// STFPC
    0U,	// STG
    0U,	// STGRL
    0U,	// STH
    0U,	// STHH
    0U,	// STHMux
    0U,	// STHRL
    0U,	// STHY
    28U,	// STM
    28U,	// STMG
    28U,	// STMH
    28U,	// STMY
    0U,	// STMux
    0U,	// STOC
    16U,	// STOCAsm
    0U,	// STOCAsmE
    0U,	// STOCAsmH
    0U,	// STOCAsmHE
    0U,	// STOCAsmL
    0U,	// STOCAsmLE
    0U,	// STOCAsmLH
    0U,	// STOCAsmM
    0U,	// STOCAsmNE
    0U,	// STOCAsmNH
    0U,	// STOCAsmNHE
    0U,	// STOCAsmNL
    0U,	// STOCAsmNLE
    0U,	// STOCAsmNLH
    0U,	// STOCAsmNM
    0U,	// STOCAsmNO
    0U,	// STOCAsmNP
    0U,	// STOCAsmNZ
    0U,	// STOCAsmO
    0U,	// STOCAsmP
    0U,	// STOCAsmZ
    0U,	// STOCFH
    16U,	// STOCFHAsm
    0U,	// STOCFHAsmE
    0U,	// STOCFHAsmH
    0U,	// STOCFHAsmHE
    0U,	// STOCFHAsmL
    0U,	// STOCFHAsmLE
    0U,	// STOCFHAsmLH
    0U,	// STOCFHAsmM
    0U,	// STOCFHAsmNE
    0U,	// STOCFHAsmNH
    0U,	// STOCFHAsmNHE
    0U,	// STOCFHAsmNL
    0U,	// STOCFHAsmNLE
    0U,	// STOCFHAsmNLH
    0U,	// STOCFHAsmNM
    0U,	// STOCFHAsmNO
    0U,	// STOCFHAsmNP
    0U,	// STOCFHAsmNZ
    0U,	// STOCFHAsmO
    0U,	// STOCFHAsmP
    0U,	// STOCFHAsmZ
    0U,	// STOCG
    16U,	// STOCGAsm
    0U,	// STOCGAsmE
    0U,	// STOCGAsmH
    0U,	// STOCGAsmHE
    0U,	// STOCGAsmL
    0U,	// STOCGAsmLE
    0U,	// STOCGAsmLH
    0U,	// STOCGAsmM
    0U,	// STOCGAsmNE
    0U,	// STOCGAsmNH
    0U,	// STOCGAsmNHE
    0U,	// STOCGAsmNL
    0U,	// STOCGAsmNLE
    0U,	// STOCGAsmNLH
    0U,	// STOCGAsmNM
    0U,	// STOCGAsmNO
    0U,	// STOCGAsmNP
    0U,	// STOCGAsmNZ
    0U,	// STOCGAsmO
    0U,	// STOCGAsmP
    0U,	// STOCGAsmZ
    0U,	// STOCMux
    0U,	// STPQ
    0U,	// STRAG
    0U,	// STRL
    0U,	// STRV
    0U,	// STRVG
    0U,	// STRVH
    0U,	// STX
    0U,	// STY
    0U,	// SVC
    0U,	// SXBR
    0U,	// SY
    0U,	// Select32
    0U,	// Select32Mux
    0U,	// Select64
    0U,	// SelectF128
    0U,	// SelectF32
    0U,	// SelectF64
    0U,	// Serialize
    0U,	// TABORT
    0U,	// TAM
    0U,	// TBEGIN
    0U,	// TBEGINC
    0U,	// TBEGIN_nofloat
    0U,	// TCDB
    0U,	// TCEB
    0U,	// TCXB
    0U,	// TEND
    0U,	// TLS_GDCALL
    0U,	// TLS_LDCALL
    0U,	// TM
    0U,	// TMHH
    0U,	// TMHH64
    0U,	// TMHL
    0U,	// TMHL64
    0U,	// TMHMux
    0U,	// TMLH
    0U,	// TMLH64
    0U,	// TMLL
    0U,	// TMLL64
    0U,	// TMLMux
    0U,	// TMY
    0U,	// TS
    0U,	// Trap
    3204U,	// VA
    4U,	// VAB
    20612U,	// VAC
    3204U,	// VACC
    4U,	// VACCB
    20612U,	// VACCC
    4228U,	// VACCCQ
    4U,	// VACCF
    4U,	// VACCG
    4U,	// VACCH
    4U,	// VACCQ
    4228U,	// VACQ
    4U,	// VAF
    4U,	// VAG
    4U,	// VAH
    4U,	// VAQ
    3204U,	// VAVG
    4U,	// VAVGB
    4U,	// VAVGF
    4U,	// VAVGG
    4U,	// VAVGH
    3204U,	// VAVGL
    4U,	// VAVGLB
    4U,	// VAVGLF
    4U,	// VAVGLG
    4U,	// VAVGLH
    19604U,	// VCDG
    3220U,	// VCDGB
    19604U,	// VCDLG
    3220U,	// VCDLGB
    19588U,	// VCEQ
    4U,	// VCEQB
    4U,	// VCEQBS
    4U,	// VCEQF
    4U,	// VCEQFS
    4U,	// VCEQG
    4U,	// VCEQGS
    4U,	// VCEQH
    4U,	// VCEQHS
    19604U,	// VCGD
    3220U,	// VCGDB
    19588U,	// VCH
    4U,	// VCHB
    4U,	// VCHBS
    4U,	// VCHF
    4U,	// VCHFS
    4U,	// VCHG
    4U,	// VCHGS
    4U,	// VCHH
    4U,	// VCHHS
    19588U,	// VCHL
    4U,	// VCHLB
    4U,	// VCHLBS
    4U,	// VCHLF
    4U,	// VCHLFS
    4U,	// VCHLG
    4U,	// VCHLGS
    4U,	// VCHLH
    4U,	// VCHLHS
    4U,	// VCKSM
    19604U,	// VCLGD
    3220U,	// VCLGDB
    20U,	// VCLZ
    0U,	// VCLZB
    0U,	// VCLZF
    0U,	// VCLZG
    0U,	// VCLZH
    20U,	// VCTZ
    0U,	// VCTZB
    0U,	// VCTZF
    0U,	// VCTZG
    0U,	// VCTZH
    20U,	// VEC
    0U,	// VECB
    0U,	// VECF
    0U,	// VECG
    0U,	// VECH
    20U,	// VECL
    0U,	// VECLB
    0U,	// VECLF
    0U,	// VECLG
    0U,	// VECLH
    54456U,	// VERIM
    5304U,	// VERIMB
    5304U,	// VERIMF
    5304U,	// VERIMG
    5304U,	// VERIMH
    6300U,	// VERLL
    28U,	// VERLLB
    28U,	// VERLLF
    28U,	// VERLLG
    28U,	// VERLLH
    3204U,	// VERLLV
    4U,	// VERLLVB
    4U,	// VERLLVF
    4U,	// VERLLVG
    4U,	// VERLLVH
    6300U,	// VESL
    28U,	// VESLB
    28U,	// VESLF
    28U,	// VESLG
    28U,	// VESLH
    3204U,	// VESLV
    4U,	// VESLVB
    4U,	// VESLVF
    4U,	// VESLVG
    4U,	// VESLVH
    6300U,	// VESRA
    28U,	// VESRAB
    28U,	// VESRAF
    28U,	// VESRAG
    28U,	// VESRAH
    3204U,	// VESRAV
    4U,	// VESRAVB
    4U,	// VESRAVF
    4U,	// VESRAVG
    4U,	// VESRAVH
    6300U,	// VESRL
    28U,	// VESRLB
    28U,	// VESRLF
    28U,	// VESRLG
    28U,	// VESRLH
    3204U,	// VESRLV
    4U,	// VESRLVB
    4U,	// VESRLVF
    4U,	// VESRLVG
    4U,	// VESRLVH
    19588U,	// VFA
    4U,	// VFADB
    19588U,	// VFAE
    3204U,	// VFAEB
    3204U,	// VFAEBS
    3204U,	// VFAEF
    3204U,	// VFAEFS
    3204U,	// VFAEH
    3204U,	// VFAEHS
    3204U,	// VFAEZB
    3204U,	// VFAEZBS
    3204U,	// VFAEZF
    3204U,	// VFAEZFS
    3204U,	// VFAEZH
    3204U,	// VFAEZHS
    19588U,	// VFCE
    4U,	// VFCEDB
    4U,	// VFCEDBS
    19588U,	// VFCH
    4U,	// VFCHDB
    4U,	// VFCHDBS
    19588U,	// VFCHE
    4U,	// VFCHEDB
    4U,	// VFCHEDBS
    19588U,	// VFD
    4U,	// VFDDB
    19588U,	// VFEE
    3204U,	// VFEEB
    4U,	// VFEEBS
    3204U,	// VFEEF
    4U,	// VFEEFS
    3204U,	// VFEEH
    4U,	// VFEEHS
    4U,	// VFEEZB
    4U,	// VFEEZBS
    4U,	// VFEEZF
    4U,	// VFEEZFS
    4U,	// VFEEZH
    4U,	// VFEEZHS
    19588U,	// VFENE
    3204U,	// VFENEB
    4U,	// VFENEBS
    3204U,	// VFENEF
    4U,	// VFENEFS
    3204U,	// VFENEH
    4U,	// VFENEHS
    4U,	// VFENEZB
    4U,	// VFENEZBS
    4U,	// VFENEZF
    4U,	// VFENEZFS
    4U,	// VFENEZH
    4U,	// VFENEZHS
    19604U,	// VFI
    3220U,	// VFIDB
    0U,	// VFLCDB
    0U,	// VFLNDB
    0U,	// VFLPDB
    19588U,	// VFM
    20612U,	// VFMA
    4228U,	// VFMADB
    4U,	// VFMDB
    20612U,	// VFMS
    4228U,	// VFMSDB
    19604U,	// VFPSO
    20U,	// VFPSODB
    19588U,	// VFS
    4U,	// VFSDB
    3220U,	// VFSQ
    0U,	// VFSQDB
    19648U,	// VFTCI
    64U,	// VFTCIDB
    0U,	// VGBM
    1U,	// VGEF
    2U,	// VGEG
    3204U,	// VGFM
    20612U,	// VGFMA
    4228U,	// VGFMAB
    4228U,	// VGFMAF
    4228U,	// VGFMAG
    4228U,	// VGFMAH
    4U,	// VGFMB
    4U,	// VGFMF
    4U,	// VGFMG
    4U,	// VGFMH
    70U,	// VGM
    26U,	// VGMB
    26U,	// VGMF
    26U,	// VGMG
    26U,	// VGMH
    3220U,	// VISTR
    20U,	// VISTRB
    0U,	// VISTRBS
    20U,	// VISTRF
    0U,	// VISTRFS
    20U,	// VISTRH
    0U,	// VISTRHS
    0U,	// VL
    0U,	// VL32
    0U,	// VL64
    48U,	// VLBB
    20U,	// VLC
    0U,	// VLCB
    0U,	// VLCF
    0U,	// VLCG
    0U,	// VLCH
    3220U,	// VLDE
    0U,	// VLDEB
    72U,	// VLEB
    19604U,	// VLED
    3220U,	// VLEDB
    76U,	// VLEF
    80U,	// VLEG
    84U,	// VLEH
    16U,	// VLEIB
    88U,	// VLEIF
    92U,	// VLEIG
    96U,	// VLEIH
    6300U,	// VLGV
    28U,	// VLGVB
    28U,	// VLGVF
    28U,	// VLGVG
    28U,	// VLGVH
    28U,	// VLL
    48U,	// VLLEZ
    0U,	// VLLEZB
    0U,	// VLLEZF
    0U,	// VLLEZG
    0U,	// VLLEZH
    28U,	// VLM
    20U,	// VLP
    0U,	// VLPB
    0U,	// VLPF
    0U,	// VLPG
    0U,	// VLPH
    0U,	// VLR
    0U,	// VLR32
    0U,	// VLR64
    48U,	// VLREP
    0U,	// VLREPB
    0U,	// VLREPF
    0U,	// VLREPG
    0U,	// VLREPH
    7308U,	// VLVG
    12U,	// VLVGB
    12U,	// VLVGF
    12U,	// VLVGG
    12U,	// VLVGH
    4U,	// VLVGP
    0U,	// VLVGP32
    20612U,	// VMAE
    4228U,	// VMAEB
    4228U,	// VMAEF
    4228U,	// VMAEH
    20612U,	// VMAH
    4228U,	// VMAHB
    4228U,	// VMAHF
    4228U,	// VMAHH
    20612U,	// VMAL
    4228U,	// VMALB
    20612U,	// VMALE
    4228U,	// VMALEB
    4228U,	// VMALEF
    4228U,	// VMALEH
    4228U,	// VMALF
    20612U,	// VMALH
    4228U,	// VMALHB
    4228U,	// VMALHF
    4228U,	// VMALHH
    4228U,	// VMALHW
    20612U,	// VMALO
    4228U,	// VMALOB
    4228U,	// VMALOF
    4228U,	// VMALOH
    20612U,	// VMAO
    4228U,	// VMAOB
    4228U,	// VMAOF
    4228U,	// VMAOH
    3204U,	// VME
    4U,	// VMEB
    4U,	// VMEF
    4U,	// VMEH
    3204U,	// VMH
    4U,	// VMHB
    4U,	// VMHF
    4U,	// VMHH
    3204U,	// VML
    4U,	// VMLB
    3204U,	// VMLE
    4U,	// VMLEB
    4U,	// VMLEF
    4U,	// VMLEH
    4U,	// VMLF
    3204U,	// VMLH
    4U,	// VMLHB
    4U,	// VMLHF
    4U,	// VMLHH
    4U,	// VMLHW
    3204U,	// VMLO
    4U,	// VMLOB
    4U,	// VMLOF
    4U,	// VMLOH
    3204U,	// VMN
    4U,	// VMNB
    4U,	// VMNF
    4U,	// VMNG
    4U,	// VMNH
    3204U,	// VMNL
    4U,	// VMNLB
    4U,	// VMNLF
    4U,	// VMNLG
    4U,	// VMNLH
    3204U,	// VMO
    4U,	// VMOB
    4U,	// VMOF
    4U,	// VMOH
    3204U,	// VMRH
    4U,	// VMRHB
    4U,	// VMRHF
    4U,	// VMRHG
    4U,	// VMRHH
    3204U,	// VMRL
    4U,	// VMRLB
    4U,	// VMRLF
    4U,	// VMRLG
    4U,	// VMRLH
    3204U,	// VMX
    4U,	// VMXB
    4U,	// VMXF
    4U,	// VMXG
    4U,	// VMXH
    3204U,	// VMXL
    4U,	// VMXLB
    4U,	// VMXLF
    4U,	// VMXLG
    4U,	// VMXLH
    4U,	// VN
    4U,	// VNC
    4U,	// VNO
    4U,	// VO
    0U,	// VONE
    3204U,	// VPDI
    4228U,	// VPERM
    3204U,	// VPK
    4U,	// VPKF
    4U,	// VPKG
    4U,	// VPKH
    19588U,	// VPKLS
    4U,	// VPKLSF
    4U,	// VPKLSFS
    4U,	// VPKLSG
    4U,	// VPKLSGS
    4U,	// VPKLSH
    4U,	// VPKLSHS
    19588U,	// VPKS
    4U,	// VPKSF
    4U,	// VPKSFS
    4U,	// VPKSG
    4U,	// VPKSGS
    4U,	// VPKSH
    4U,	// VPKSHS
    20U,	// VPOPCT
    3300U,	// VREP
    100U,	// VREPB
    100U,	// VREPF
    100U,	// VREPG
    100U,	// VREPH
    20U,	// VREPI
    0U,	// VREPIB
    0U,	// VREPIF
    0U,	// VREPIG
    0U,	// VREPIH
    3204U,	// VS
    4U,	// VSB
    20612U,	// VSBCBI
    4228U,	// VSBCBIQ
    20612U,	// VSBI
    4228U,	// VSBIQ
    3204U,	// VSCBI
    4U,	// VSCBIB
    4U,	// VSCBIF
    4U,	// VSCBIG
    4U,	// VSCBIH
    4U,	// VSCBIQ
    2U,	// VSCEF
    2U,	// VSCEG
    20U,	// VSEG
    0U,	// VSEGB
    0U,	// VSEGF
    0U,	// VSEGH
    4228U,	// VSEL
    4U,	// VSF
    4U,	// VSG
    4U,	// VSH
    4U,	// VSL
    4U,	// VSLB
    8324U,	// VSLDB
    4U,	// VSQ
    4U,	// VSRA
    4U,	// VSRAB
    4U,	// VSRL
    4U,	// VSRLB
    0U,	// VST
    0U,	// VST32
    0U,	// VST64
    48U,	// VSTEB
    104U,	// VSTEF
    108U,	// VSTEG
    112U,	// VSTEH
    28U,	// VSTL
    28U,	// VSTM
    20612U,	// VSTRC
    20612U,	// VSTRCB
    20612U,	// VSTRCBS
    20612U,	// VSTRCF
    20612U,	// VSTRCFS
    20612U,	// VSTRCH
    20612U,	// VSTRCHS
    20612U,	// VSTRCZB
    20612U,	// VSTRCZBS
    20612U,	// VSTRCZF
    20612U,	// VSTRCZFS
    20612U,	// VSTRCZH
    20612U,	// VSTRCZHS
    3204U,	// VSUM
    4U,	// VSUMB
    3204U,	// VSUMG
    4U,	// VSUMGF
    4U,	// VSUMGH
    4U,	// VSUMH
    3204U,	// VSUMQ
    4U,	// VSUMQF
    4U,	// VSUMQG
    0U,	// VTM
    20U,	// VUPH
    0U,	// VUPHB
    0U,	// VUPHF
    0U,	// VUPHH
    20U,	// VUPL
    0U,	// VUPLB
    0U,	// VUPLF
    20U,	// VUPLH
    0U,	// VUPLHB
    0U,	// VUPLHF
    0U,	// VUPLHH
    0U,	// VUPLHW
    20U,	// VUPLL
    0U,	// VUPLLB
    0U,	// VUPLLF
    0U,	// VUPLLH
    4U,	// VX
    0U,	// VZERO
    3220U,	// WCDGB
    3220U,	// WCDLGB
    3220U,	// WCGDB
    3220U,	// WCLGDB
    4U,	// WFADB
    3220U,	// WFC
    0U,	// WFCDB
    4U,	// WFCEDB
    4U,	// WFCEDBS
    4U,	// WFCHDB
    4U,	// WFCHDBS
    4U,	// WFCHEDB
    4U,	// WFCHEDBS
    4U,	// WFDDB
    3220U,	// WFIDB
    3220U,	// WFK
    0U,	// WFKDB
    0U,	// WFLCDB
    0U,	// WFLNDB
    0U,	// WFLPDB
    4228U,	// WFMADB
    4U,	// WFMDB
    4228U,	// WFMSDB
    20U,	// WFPSODB
    4U,	// WFSDB
    0U,	// WFSQDB
    64U,	// WFTCIDB
    0U,	// WLDEB
    3220U,	// WLEDB
    0U,	// X
    0U,	// XC
    0U,	// XCLoop
    0U,	// XCSequence
    0U,	// XG
    0U,	// XGR
    4U,	// XGRK
    0U,	// XI
    0U,	// XIFMux
    0U,	// XIHF
    0U,	// XIHF64
    0U,	// XILF
    0U,	// XILF64
    0U,	// XIY
    0U,	// XR
    4U,	// XRK
    0U,	// XY
    0U,	// ZEXT128_32
    0U,	// ZEXT128_64
  };

  static const uint8_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_SEQUENCE
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// A
    0U,	// ADB
    0U,	// ADBR
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ADJDYNALLOC
    0U,	// AEB
    0U,	// AEBR
    0U,	// AEXT128_64
    0U,	// AFI
    0U,	// AFIMux
    0U,	// AG
    0U,	// AGF
    0U,	// AGFI
    0U,	// AGFR
    0U,	// AGHI
    0U,	// AGHIK
    0U,	// AGR
    0U,	// AGRK
    0U,	// AGSI
    0U,	// AH
    0U,	// AHI
    0U,	// AHIK
    0U,	// AHIMux
    0U,	// AHIMuxK
    0U,	// AHY
    0U,	// AIH
    0U,	// AL
    0U,	// ALC
    0U,	// ALCG
    0U,	// ALCGR
    0U,	// ALCR
    0U,	// ALFI
    0U,	// ALG
    0U,	// ALGF
    0U,	// ALGFI
    0U,	// ALGFR
    0U,	// ALGHSIK
    0U,	// ALGR
    0U,	// ALGRK
    0U,	// ALHSIK
    0U,	// ALR
    0U,	// ALRK
    0U,	// ALY
    0U,	// AR
    0U,	// ARK
    0U,	// ASI
    0U,	// ATOMIC_CMP_SWAPW
    0U,	// ATOMIC_LOADW_AFI
    0U,	// ATOMIC_LOADW_AR
    0U,	// ATOMIC_LOADW_MAX
    0U,	// ATOMIC_LOADW_MIN
    0U,	// ATOMIC_LOADW_NILH
    0U,	// ATOMIC_LOADW_NILHi
    0U,	// ATOMIC_LOADW_NR
    0U,	// ATOMIC_LOADW_NRi
    0U,	// ATOMIC_LOADW_OILH
    0U,	// ATOMIC_LOADW_OR
    0U,	// ATOMIC_LOADW_SR
    0U,	// ATOMIC_LOADW_UMAX
    0U,	// ATOMIC_LOADW_UMIN
    0U,	// ATOMIC_LOADW_XILF
    0U,	// ATOMIC_LOADW_XR
    0U,	// ATOMIC_LOAD_AFI
    0U,	// ATOMIC_LOAD_AGFI
    0U,	// ATOMIC_LOAD_AGHI
    0U,	// ATOMIC_LOAD_AGR
    0U,	// ATOMIC_LOAD_AHI
    0U,	// ATOMIC_LOAD_AR
    0U,	// ATOMIC_LOAD_MAX_32
    0U,	// ATOMIC_LOAD_MAX_64
    0U,	// ATOMIC_LOAD_MIN_32
    0U,	// ATOMIC_LOAD_MIN_64
    0U,	// ATOMIC_LOAD_NGR
    0U,	// ATOMIC_LOAD_NGRi
    0U,	// ATOMIC_LOAD_NIHF64
    0U,	// ATOMIC_LOAD_NIHF64i
    0U,	// ATOMIC_LOAD_NIHH64
    0U,	// ATOMIC_LOAD_NIHH64i
    0U,	// ATOMIC_LOAD_NIHL64
    0U,	// ATOMIC_LOAD_NIHL64i
    0U,	// ATOMIC_LOAD_NILF
    0U,	// ATOMIC_LOAD_NILF64
    0U,	// ATOMIC_LOAD_NILF64i
    0U,	// ATOMIC_LOAD_NILFi
    0U,	// ATOMIC_LOAD_NILH
    0U,	// ATOMIC_LOAD_NILH64
    0U,	// ATOMIC_LOAD_NILH64i
    0U,	// ATOMIC_LOAD_NILHi
    0U,	// ATOMIC_LOAD_NILL
    0U,	// ATOMIC_LOAD_NILL64
    0U,	// ATOMIC_LOAD_NILL64i
    0U,	// ATOMIC_LOAD_NILLi
    0U,	// ATOMIC_LOAD_NR
    0U,	// ATOMIC_LOAD_NRi
    0U,	// ATOMIC_LOAD_OGR
    0U,	// ATOMIC_LOAD_OIHF64
    0U,	// ATOMIC_LOAD_OIHH64
    0U,	// ATOMIC_LOAD_OIHL64
    0U,	// ATOMIC_LOAD_OILF
    0U,	// ATOMIC_LOAD_OILF64
    0U,	// ATOMIC_LOAD_OILH
    0U,	// ATOMIC_LOAD_OILH64
    0U,	// ATOMIC_LOAD_OILL
    0U,	// ATOMIC_LOAD_OILL64
    0U,	// ATOMIC_LOAD_OR
    0U,	// ATOMIC_LOAD_SGR
    0U,	// ATOMIC_LOAD_SR
    0U,	// ATOMIC_LOAD_UMAX_32
    0U,	// ATOMIC_LOAD_UMAX_64
    0U,	// ATOMIC_LOAD_UMIN_32
    0U,	// ATOMIC_LOAD_UMIN_64
    0U,	// ATOMIC_LOAD_XGR
    0U,	// ATOMIC_LOAD_XIHF64
    0U,	// ATOMIC_LOAD_XILF
    0U,	// ATOMIC_LOAD_XILF64
    0U,	// ATOMIC_LOAD_XR
    0U,	// ATOMIC_SWAPW
    0U,	// ATOMIC_SWAP_32
    0U,	// ATOMIC_SWAP_64
    0U,	// AXBR
    0U,	// AY
    0U,	// B
    0U,	// BAL
    0U,	// BALR
    0U,	// BAS
    0U,	// BASR
    0U,	// BASSM
    0U,	// BAsmE
    0U,	// BAsmH
    0U,	// BAsmHE
    0U,	// BAsmL
    0U,	// BAsmLE
    0U,	// BAsmLH
    0U,	// BAsmM
    0U,	// BAsmNE
    0U,	// BAsmNH
    0U,	// BAsmNHE
    0U,	// BAsmNL
    0U,	// BAsmNLE
    0U,	// BAsmNLH
    0U,	// BAsmNM
    0U,	// BAsmNO
    0U,	// BAsmNP
    0U,	// BAsmNZ
    0U,	// BAsmO
    0U,	// BAsmP
    0U,	// BAsmZ
    0U,	// BC
    0U,	// BCAsm
    0U,	// BCR
    0U,	// BCRAsm
    0U,	// BCT
    0U,	// BCTG
    0U,	// BCTGR
    0U,	// BCTR
    0U,	// BPP
    0U,	// BPRP
    0U,	// BR
    0U,	// BRAS
    0U,	// BRASL
    0U,	// BRAsmE
    0U,	// BRAsmH
    0U,	// BRAsmHE
    0U,	// BRAsmL
    0U,	// BRAsmLE
    0U,	// BRAsmLH
    0U,	// BRAsmM
    0U,	// BRAsmNE
    0U,	// BRAsmNH
    0U,	// BRAsmNHE
    0U,	// BRAsmNL
    0U,	// BRAsmNLE
    0U,	// BRAsmNLH
    0U,	// BRAsmNM
    0U,	// BRAsmNO
    0U,	// BRAsmNP
    0U,	// BRAsmNZ
    0U,	// BRAsmO
    0U,	// BRAsmP
    0U,	// BRAsmZ
    0U,	// BRC
    0U,	// BRCAsm
    0U,	// BRCL
    0U,	// BRCLAsm
    0U,	// BRCT
    0U,	// BRCTG
    0U,	// BRCTH
    0U,	// BRXH
    0U,	// BRXHG
    0U,	// BRXLE
    0U,	// BRXLG
    0U,	// BSM
    0U,	// BXH
    0U,	// BXHG
    0U,	// BXLE
    0U,	// BXLEG
    0U,	// C
    0U,	// CDB
    0U,	// CDBR
    0U,	// CDFBR
    0U,	// CDFBRA
    0U,	// CDGBR
    0U,	// CDGBRA
    0U,	// CDLFBR
    0U,	// CDLGBR
    0U,	// CDS
    0U,	// CDSG
    0U,	// CDSY
    0U,	// CEB
    0U,	// CEBR
    0U,	// CEFBR
    0U,	// CEFBRA
    0U,	// CEGBR
    0U,	// CEGBRA
    0U,	// CELFBR
    0U,	// CELGBR
    0U,	// CFDBR
    0U,	// CFDBRA
    0U,	// CFEBR
    0U,	// CFEBRA
    0U,	// CFI
    0U,	// CFIMux
    0U,	// CFXBR
    0U,	// CFXBRA
    0U,	// CG
    0U,	// CGDBR
    0U,	// CGDBRA
    0U,	// CGEBR
    0U,	// CGEBRA
    0U,	// CGF
    0U,	// CGFI
    0U,	// CGFR
    0U,	// CGFRL
    0U,	// CGH
    0U,	// CGHI
    0U,	// CGHRL
    0U,	// CGHSI
    0U,	// CGIB
    0U,	// CGIBAsm
    0U,	// CGIBAsmE
    0U,	// CGIBAsmH
    0U,	// CGIBAsmHE
    0U,	// CGIBAsmL
    0U,	// CGIBAsmLE
    0U,	// CGIBAsmLH
    0U,	// CGIBAsmNE
    0U,	// CGIBAsmNH
    0U,	// CGIBAsmNHE
    0U,	// CGIBAsmNL
    0U,	// CGIBAsmNLE
    0U,	// CGIBAsmNLH
    0U,	// CGIBCall
    0U,	// CGIBReturn
    0U,	// CGIJ
    0U,	// CGIJAsm
    0U,	// CGIJAsmE
    0U,	// CGIJAsmH
    0U,	// CGIJAsmHE
    0U,	// CGIJAsmL
    0U,	// CGIJAsmLE
    0U,	// CGIJAsmLH
    0U,	// CGIJAsmNE
    0U,	// CGIJAsmNH
    0U,	// CGIJAsmNHE
    0U,	// CGIJAsmNL
    0U,	// CGIJAsmNLE
    0U,	// CGIJAsmNLH
    0U,	// CGIT
    0U,	// CGITAsm
    0U,	// CGITAsmE
    0U,	// CGITAsmH
    0U,	// CGITAsmHE
    0U,	// CGITAsmL
    0U,	// CGITAsmLE
    0U,	// CGITAsmLH
    0U,	// CGITAsmNE
    0U,	// CGITAsmNH
    0U,	// CGITAsmNHE
    0U,	// CGITAsmNL
    0U,	// CGITAsmNLE
    0U,	// CGITAsmNLH
    0U,	// CGR
    0U,	// CGRB
    0U,	// CGRBAsm
    0U,	// CGRBAsmE
    0U,	// CGRBAsmH
    0U,	// CGRBAsmHE
    0U,	// CGRBAsmL
    0U,	// CGRBAsmLE
    0U,	// CGRBAsmLH
    0U,	// CGRBAsmNE
    0U,	// CGRBAsmNH
    0U,	// CGRBAsmNHE
    0U,	// CGRBAsmNL
    0U,	// CGRBAsmNLE
    0U,	// CGRBAsmNLH
    0U,	// CGRBCall
    0U,	// CGRBReturn
    0U,	// CGRJ
    0U,	// CGRJAsm
    0U,	// CGRJAsmE
    0U,	// CGRJAsmH
    0U,	// CGRJAsmHE
    0U,	// CGRJAsmL
    0U,	// CGRJAsmLE
    0U,	// CGRJAsmLH
    0U,	// CGRJAsmNE
    0U,	// CGRJAsmNH
    0U,	// CGRJAsmNHE
    0U,	// CGRJAsmNL
    0U,	// CGRJAsmNLE
    0U,	// CGRJAsmNLH
    0U,	// CGRL
    0U,	// CGRT
    0U,	// CGRTAsm
    0U,	// CGRTAsmE
    0U,	// CGRTAsmH
    0U,	// CGRTAsmHE
    0U,	// CGRTAsmL
    0U,	// CGRTAsmLE
    0U,	// CGRTAsmLH
    0U,	// CGRTAsmNE
    0U,	// CGRTAsmNH
    0U,	// CGRTAsmNHE
    0U,	// CGRTAsmNL
    0U,	// CGRTAsmNLE
    0U,	// CGRTAsmNLH
    0U,	// CGXBR
    0U,	// CGXBRA
    0U,	// CH
    0U,	// CHF
    0U,	// CHHSI
    0U,	// CHI
    0U,	// CHIMux
    0U,	// CHRL
    0U,	// CHSI
    0U,	// CHY
    0U,	// CIB
    0U,	// CIBAsm
    0U,	// CIBAsmE
    0U,	// CIBAsmH
    0U,	// CIBAsmHE
    0U,	// CIBAsmL
    0U,	// CIBAsmLE
    0U,	// CIBAsmLH
    0U,	// CIBAsmNE
    0U,	// CIBAsmNH
    0U,	// CIBAsmNHE
    0U,	// CIBAsmNL
    0U,	// CIBAsmNLE
    0U,	// CIBAsmNLH
    0U,	// CIBCall
    0U,	// CIBReturn
    0U,	// CIH
    0U,	// CIJ
    0U,	// CIJAsm
    0U,	// CIJAsmE
    0U,	// CIJAsmH
    0U,	// CIJAsmHE
    0U,	// CIJAsmL
    0U,	// CIJAsmLE
    0U,	// CIJAsmLH
    0U,	// CIJAsmNE
    0U,	// CIJAsmNH
    0U,	// CIJAsmNHE
    0U,	// CIJAsmNL
    0U,	// CIJAsmNLE
    0U,	// CIJAsmNLH
    0U,	// CIT
    0U,	// CITAsm
    0U,	// CITAsmE
    0U,	// CITAsmH
    0U,	// CITAsmHE
    0U,	// CITAsmL
    0U,	// CITAsmLE
    0U,	// CITAsmLH
    0U,	// CITAsmNE
    0U,	// CITAsmNH
    0U,	// CITAsmNHE
    0U,	// CITAsmNL
    0U,	// CITAsmNLE
    0U,	// CITAsmNLH
    0U,	// CL
    0U,	// CLC
    0U,	// CLCLoop
    0U,	// CLCSequence
    0U,	// CLFDBR
    0U,	// CLFEBR
    0U,	// CLFHSI
    0U,	// CLFI
    0U,	// CLFIMux
    0U,	// CLFIT
    0U,	// CLFITAsm
    0U,	// CLFITAsmE
    0U,	// CLFITAsmH
    0U,	// CLFITAsmHE
    0U,	// CLFITAsmL
    0U,	// CLFITAsmLE
    0U,	// CLFITAsmLH
    0U,	// CLFITAsmNE
    0U,	// CLFITAsmNH
    0U,	// CLFITAsmNHE
    0U,	// CLFITAsmNL
    0U,	// CLFITAsmNLE
    0U,	// CLFITAsmNLH
    0U,	// CLFXBR
    0U,	// CLG
    0U,	// CLGDBR
    0U,	// CLGEBR
    0U,	// CLGF
    0U,	// CLGFI
    0U,	// CLGFR
    0U,	// CLGFRL
    0U,	// CLGHRL
    0U,	// CLGHSI
    0U,	// CLGIB
    0U,	// CLGIBAsm
    0U,	// CLGIBAsmE
    0U,	// CLGIBAsmH
    0U,	// CLGIBAsmHE
    0U,	// CLGIBAsmL
    0U,	// CLGIBAsmLE
    0U,	// CLGIBAsmLH
    0U,	// CLGIBAsmNE
    0U,	// CLGIBAsmNH
    0U,	// CLGIBAsmNHE
    0U,	// CLGIBAsmNL
    0U,	// CLGIBAsmNLE
    0U,	// CLGIBAsmNLH
    0U,	// CLGIBCall
    0U,	// CLGIBReturn
    0U,	// CLGIJ
    0U,	// CLGIJAsm
    0U,	// CLGIJAsmE
    0U,	// CLGIJAsmH
    0U,	// CLGIJAsmHE
    0U,	// CLGIJAsmL
    0U,	// CLGIJAsmLE
    0U,	// CLGIJAsmLH
    0U,	// CLGIJAsmNE
    0U,	// CLGIJAsmNH
    0U,	// CLGIJAsmNHE
    0U,	// CLGIJAsmNL
    0U,	// CLGIJAsmNLE
    0U,	// CLGIJAsmNLH
    0U,	// CLGIT
    0U,	// CLGITAsm
    0U,	// CLGITAsmE
    0U,	// CLGITAsmH
    0U,	// CLGITAsmHE
    0U,	// CLGITAsmL
    0U,	// CLGITAsmLE
    0U,	// CLGITAsmLH
    0U,	// CLGITAsmNE
    0U,	// CLGITAsmNH
    0U,	// CLGITAsmNHE
    0U,	// CLGITAsmNL
    0U,	// CLGITAsmNLE
    0U,	// CLGITAsmNLH
    0U,	// CLGR
    0U,	// CLGRB
    0U,	// CLGRBAsm
    0U,	// CLGRBAsmE
    0U,	// CLGRBAsmH
    0U,	// CLGRBAsmHE
    0U,	// CLGRBAsmL
    0U,	// CLGRBAsmLE
    0U,	// CLGRBAsmLH
    0U,	// CLGRBAsmNE
    0U,	// CLGRBAsmNH
    0U,	// CLGRBAsmNHE
    0U,	// CLGRBAsmNL
    0U,	// CLGRBAsmNLE
    0U,	// CLGRBAsmNLH
    0U,	// CLGRBCall
    0U,	// CLGRBReturn
    0U,	// CLGRJ
    0U,	// CLGRJAsm
    0U,	// CLGRJAsmE
    0U,	// CLGRJAsmH
    0U,	// CLGRJAsmHE
    0U,	// CLGRJAsmL
    0U,	// CLGRJAsmLE
    0U,	// CLGRJAsmLH
    0U,	// CLGRJAsmNE
    0U,	// CLGRJAsmNH
    0U,	// CLGRJAsmNHE
    0U,	// CLGRJAsmNL
    0U,	// CLGRJAsmNLE
    0U,	// CLGRJAsmNLH
    0U,	// CLGRL
    0U,	// CLGRT
    0U,	// CLGRTAsm
    0U,	// CLGRTAsmE
    0U,	// CLGRTAsmH
    0U,	// CLGRTAsmHE
    0U,	// CLGRTAsmL
    0U,	// CLGRTAsmLE
    0U,	// CLGRTAsmLH
    0U,	// CLGRTAsmNE
    0U,	// CLGRTAsmNH
    0U,	// CLGRTAsmNHE
    0U,	// CLGRTAsmNL
    0U,	// CLGRTAsmNLE
    0U,	// CLGRTAsmNLH
    0U,	// CLGT
    0U,	// CLGTAsm
    0U,	// CLGTAsmE
    0U,	// CLGTAsmH
    0U,	// CLGTAsmHE
    0U,	// CLGTAsmL
    0U,	// CLGTAsmLE
    0U,	// CLGTAsmLH
    0U,	// CLGTAsmNE
    0U,	// CLGTAsmNH
    0U,	// CLGTAsmNHE
    0U,	// CLGTAsmNL
    0U,	// CLGTAsmNLE
    0U,	// CLGTAsmNLH
    0U,	// CLGXBR
    0U,	// CLHF
    0U,	// CLHHSI
    0U,	// CLHRL
    0U,	// CLI
    0U,	// CLIB
    0U,	// CLIBAsm
    0U,	// CLIBAsmE
    0U,	// CLIBAsmH
    0U,	// CLIBAsmHE
    0U,	// CLIBAsmL
    0U,	// CLIBAsmLE
    0U,	// CLIBAsmLH
    0U,	// CLIBAsmNE
    0U,	// CLIBAsmNH
    0U,	// CLIBAsmNHE
    0U,	// CLIBAsmNL
    0U,	// CLIBAsmNLE
    0U,	// CLIBAsmNLH
    0U,	// CLIBCall
    0U,	// CLIBReturn
    0U,	// CLIH
    0U,	// CLIJ
    0U,	// CLIJAsm
    0U,	// CLIJAsmE
    0U,	// CLIJAsmH
    0U,	// CLIJAsmHE
    0U,	// CLIJAsmL
    0U,	// CLIJAsmLE
    0U,	// CLIJAsmLH
    0U,	// CLIJAsmNE
    0U,	// CLIJAsmNH
    0U,	// CLIJAsmNHE
    0U,	// CLIJAsmNL
    0U,	// CLIJAsmNLE
    0U,	// CLIJAsmNLH
    0U,	// CLIY
    0U,	// CLMux
    0U,	// CLR
    0U,	// CLRB
    0U,	// CLRBAsm
    0U,	// CLRBAsmE
    0U,	// CLRBAsmH
    0U,	// CLRBAsmHE
    0U,	// CLRBAsmL
    0U,	// CLRBAsmLE
    0U,	// CLRBAsmLH
    0U,	// CLRBAsmNE
    0U,	// CLRBAsmNH
    0U,	// CLRBAsmNHE
    0U,	// CLRBAsmNL
    0U,	// CLRBAsmNLE
    0U,	// CLRBAsmNLH
    0U,	// CLRBCall
    0U,	// CLRBReturn
    0U,	// CLRJ
    0U,	// CLRJAsm
    0U,	// CLRJAsmE
    0U,	// CLRJAsmH
    0U,	// CLRJAsmHE
    0U,	// CLRJAsmL
    0U,	// CLRJAsmLE
    0U,	// CLRJAsmLH
    0U,	// CLRJAsmNE
    0U,	// CLRJAsmNH
    0U,	// CLRJAsmNHE
    0U,	// CLRJAsmNL
    0U,	// CLRJAsmNLE
    0U,	// CLRJAsmNLH
    0U,	// CLRL
    0U,	// CLRT
    0U,	// CLRTAsm
    0U,	// CLRTAsmE
    0U,	// CLRTAsmH
    0U,	// CLRTAsmHE
    0U,	// CLRTAsmL
    0U,	// CLRTAsmLE
    0U,	// CLRTAsmLH
    0U,	// CLRTAsmNE
    0U,	// CLRTAsmNH
    0U,	// CLRTAsmNHE
    0U,	// CLRTAsmNL
    0U,	// CLRTAsmNLE
    0U,	// CLRTAsmNLH
    0U,	// CLST
    0U,	// CLSTLoop
    0U,	// CLT
    0U,	// CLTAsm
    0U,	// CLTAsmE
    0U,	// CLTAsmH
    0U,	// CLTAsmHE
    0U,	// CLTAsmL
    0U,	// CLTAsmLE
    0U,	// CLTAsmLH
    0U,	// CLTAsmNE
    0U,	// CLTAsmNH
    0U,	// CLTAsmNHE
    0U,	// CLTAsmNL
    0U,	// CLTAsmNLE
    0U,	// CLTAsmNLH
    0U,	// CLY
    0U,	// CMux
    0U,	// CPSDRdd
    0U,	// CPSDRds
    0U,	// CPSDRsd
    0U,	// CPSDRss
    0U,	// CPYA
    0U,	// CR
    0U,	// CRB
    0U,	// CRBAsm
    0U,	// CRBAsmE
    0U,	// CRBAsmH
    0U,	// CRBAsmHE
    0U,	// CRBAsmL
    0U,	// CRBAsmLE
    0U,	// CRBAsmLH
    0U,	// CRBAsmNE
    0U,	// CRBAsmNH
    0U,	// CRBAsmNHE
    0U,	// CRBAsmNL
    0U,	// CRBAsmNLE
    0U,	// CRBAsmNLH
    0U,	// CRBCall
    0U,	// CRBReturn
    0U,	// CRJ
    0U,	// CRJAsm
    0U,	// CRJAsmE
    0U,	// CRJAsmH
    0U,	// CRJAsmHE
    0U,	// CRJAsmL
    0U,	// CRJAsmLE
    0U,	// CRJAsmLH
    0U,	// CRJAsmNE
    0U,	// CRJAsmNH
    0U,	// CRJAsmNHE
    0U,	// CRJAsmNL
    0U,	// CRJAsmNLE
    0U,	// CRJAsmNLH
    0U,	// CRL
    0U,	// CRT
    0U,	// CRTAsm
    0U,	// CRTAsmE
    0U,	// CRTAsmH
    0U,	// CRTAsmHE
    0U,	// CRTAsmL
    0U,	// CRTAsmLE
    0U,	// CRTAsmLH
    0U,	// CRTAsmNE
    0U,	// CRTAsmNH
    0U,	// CRTAsmNHE
    0U,	// CRTAsmNL
    0U,	// CRTAsmNLE
    0U,	// CRTAsmNLH
    0U,	// CS
    0U,	// CSG
    0U,	// CSST
    0U,	// CSY
    0U,	// CXBR
    0U,	// CXFBR
    0U,	// CXFBRA
    0U,	// CXGBR
    0U,	// CXGBRA
    0U,	// CXLFBR
    0U,	// CXLGBR
    0U,	// CY
    0U,	// CallBASR
    0U,	// CallBCR
    0U,	// CallBR
    0U,	// CallBRASL
    0U,	// CallBRCL
    0U,	// CallJG
    0U,	// CondReturn
    0U,	// CondStore16
    0U,	// CondStore16Inv
    0U,	// CondStore16Mux
    0U,	// CondStore16MuxInv
    0U,	// CondStore32
    0U,	// CondStore32Inv
    0U,	// CondStore32Mux
    0U,	// CondStore32MuxInv
    0U,	// CondStore64
    0U,	// CondStore64Inv
    0U,	// CondStore8
    0U,	// CondStore8Inv
    0U,	// CondStore8Mux
    0U,	// CondStore8MuxInv
    0U,	// CondStoreF32
    0U,	// CondStoreF32Inv
    0U,	// CondStoreF64
    0U,	// CondStoreF64Inv
    0U,	// CondTrap
    0U,	// DDB
    0U,	// DDBR
    0U,	// DEB
    0U,	// DEBR
    0U,	// DL
    0U,	// DLG
    0U,	// DLGR
    0U,	// DLR
    0U,	// DSG
    0U,	// DSGF
    0U,	// DSGFR
    0U,	// DSGR
    0U,	// DXBR
    0U,	// EAR
    0U,	// ECTG
    0U,	// EFPC
    0U,	// ETND
    0U,	// EX
    0U,	// EXRL
    0U,	// FIDBR
    0U,	// FIDBRA
    0U,	// FIEBR
    0U,	// FIEBRA
    0U,	// FIXBR
    0U,	// FIXBRA
    0U,	// FLOGR
    0U,	// GOT
    0U,	// IC
    0U,	// IC32
    0U,	// IC32Y
    0U,	// ICM
    0U,	// ICMH
    0U,	// ICMY
    0U,	// ICY
    0U,	// IIFMux
    0U,	// IIHF
    0U,	// IIHF64
    0U,	// IIHH
    0U,	// IIHH64
    0U,	// IIHL
    0U,	// IIHL64
    0U,	// IIHMux
    0U,	// IILF
    0U,	// IILF64
    0U,	// IILH
    0U,	// IILH64
    0U,	// IILL
    0U,	// IILL64
    0U,	// IILMux
    0U,	// IPM
    0U,	// InsnE
    0U,	// InsnRI
    0U,	// InsnRIE
    0U,	// InsnRIL
    0U,	// InsnRILU
    0U,	// InsnRIS
    0U,	// InsnRR
    0U,	// InsnRRE
    0U,	// InsnRRF
    0U,	// InsnRRS
    0U,	// InsnRS
    0U,	// InsnRSE
    0U,	// InsnRSI
    0U,	// InsnRSY
    0U,	// InsnRX
    0U,	// InsnRXE
    0U,	// InsnRXF
    0U,	// InsnRXY
    0U,	// InsnS
    0U,	// InsnSI
    0U,	// InsnSIL
    0U,	// InsnSIY
    0U,	// InsnSS
    0U,	// InsnSSE
    0U,	// InsnSSF
    0U,	// J
    0U,	// JAsmE
    0U,	// JAsmH
    0U,	// JAsmHE
    0U,	// JAsmL
    0U,	// JAsmLE
    0U,	// JAsmLH
    0U,	// JAsmM
    0U,	// JAsmNE
    0U,	// JAsmNH
    0U,	// JAsmNHE
    0U,	// JAsmNL
    0U,	// JAsmNLE
    0U,	// JAsmNLH
    0U,	// JAsmNM
    0U,	// JAsmNO
    0U,	// JAsmNP
    0U,	// JAsmNZ
    0U,	// JAsmO
    0U,	// JAsmP
    0U,	// JAsmZ
    0U,	// JG
    0U,	// JGAsmE
    0U,	// JGAsmH
    0U,	// JGAsmHE
    0U,	// JGAsmL
    0U,	// JGAsmLE
    0U,	// JGAsmLH
    0U,	// JGAsmM
    0U,	// JGAsmNE
    0U,	// JGAsmNH
    0U,	// JGAsmNHE
    0U,	// JGAsmNL
    0U,	// JGAsmNLE
    0U,	// JGAsmNLH
    0U,	// JGAsmNM
    0U,	// JGAsmNO
    0U,	// JGAsmNP
    0U,	// JGAsmNZ
    0U,	// JGAsmO
    0U,	// JGAsmP
    0U,	// JGAsmZ
    0U,	// L
    0U,	// L128
    0U,	// LA
    0U,	// LAA
    0U,	// LAAG
    0U,	// LAAL
    0U,	// LAALG
    0U,	// LAE
    0U,	// LAEY
    0U,	// LAM
    0U,	// LAMY
    0U,	// LAN
    0U,	// LANG
    0U,	// LAO
    0U,	// LAOG
    0U,	// LARL
    0U,	// LAT
    0U,	// LAX
    0U,	// LAXG
    0U,	// LAY
    0U,	// LB
    0U,	// LBH
    0U,	// LBMux
    0U,	// LBR
    0U,	// LCBB
    0U,	// LCDBR
    0U,	// LCDFR
    0U,	// LCDFR_32
    0U,	// LCEBR
    0U,	// LCGFR
    0U,	// LCGR
    0U,	// LCR
    0U,	// LCXBR
    0U,	// LD
    0U,	// LDE32
    0U,	// LDEB
    0U,	// LDEBR
    0U,	// LDGR
    0U,	// LDR
    0U,	// LDR32
    0U,	// LDXBR
    0U,	// LDXBRA
    0U,	// LDY
    0U,	// LE
    0U,	// LEDBR
    0U,	// LEDBRA
    0U,	// LEFR
    0U,	// LER
    0U,	// LEXBR
    0U,	// LEXBRA
    0U,	// LEY
    0U,	// LFAS
    0U,	// LFER
    0U,	// LFH
    0U,	// LFHAT
    0U,	// LFPC
    0U,	// LG
    0U,	// LGAT
    0U,	// LGB
    0U,	// LGBR
    0U,	// LGDR
    0U,	// LGF
    0U,	// LGFI
    0U,	// LGFR
    0U,	// LGFRL
    0U,	// LGH
    0U,	// LGHI
    0U,	// LGHR
    0U,	// LGHRL
    0U,	// LGR
    0U,	// LGRL
    0U,	// LH
    0U,	// LHH
    0U,	// LHI
    0U,	// LHIMux
    0U,	// LHMux
    0U,	// LHR
    0U,	// LHRL
    0U,	// LHY
    0U,	// LLC
    0U,	// LLCH
    0U,	// LLCMux
    0U,	// LLCR
    0U,	// LLCRMux
    0U,	// LLGC
    0U,	// LLGCR
    0U,	// LLGF
    0U,	// LLGFAT
    0U,	// LLGFR
    0U,	// LLGFRL
    0U,	// LLGH
    0U,	// LLGHR
    0U,	// LLGHRL
    0U,	// LLGT
    0U,	// LLGTAT
    0U,	// LLGTR
    0U,	// LLH
    0U,	// LLHH
    0U,	// LLHMux
    0U,	// LLHR
    0U,	// LLHRL
    0U,	// LLHRMux
    0U,	// LLIHF
    0U,	// LLIHH
    0U,	// LLIHL
    0U,	// LLILF
    0U,	// LLILH
    0U,	// LLILL
    0U,	// LLZRGF
    0U,	// LM
    0U,	// LMG
    0U,	// LMH
    0U,	// LMY
    0U,	// LMux
    0U,	// LNDBR
    0U,	// LNDFR
    0U,	// LNDFR_32
    0U,	// LNEBR
    0U,	// LNGFR
    0U,	// LNGR
    0U,	// LNR
    0U,	// LNXBR
    0U,	// LOC
    0U,	// LOCAsm
    0U,	// LOCAsmE
    0U,	// LOCAsmH
    0U,	// LOCAsmHE
    0U,	// LOCAsmL
    0U,	// LOCAsmLE
    0U,	// LOCAsmLH
    0U,	// LOCAsmM
    0U,	// LOCAsmNE
    0U,	// LOCAsmNH
    0U,	// LOCAsmNHE
    0U,	// LOCAsmNL
    0U,	// LOCAsmNLE
    0U,	// LOCAsmNLH
    0U,	// LOCAsmNM
    0U,	// LOCAsmNO
    0U,	// LOCAsmNP
    0U,	// LOCAsmNZ
    0U,	// LOCAsmO
    0U,	// LOCAsmP
    0U,	// LOCAsmZ
    0U,	// LOCFH
    0U,	// LOCFHAsm
    0U,	// LOCFHAsmE
    0U,	// LOCFHAsmH
    0U,	// LOCFHAsmHE
    0U,	// LOCFHAsmL
    0U,	// LOCFHAsmLE
    0U,	// LOCFHAsmLH
    0U,	// LOCFHAsmM
    0U,	// LOCFHAsmNE
    0U,	// LOCFHAsmNH
    0U,	// LOCFHAsmNHE
    0U,	// LOCFHAsmNL
    0U,	// LOCFHAsmNLE
    0U,	// LOCFHAsmNLH
    0U,	// LOCFHAsmNM
    0U,	// LOCFHAsmNO
    0U,	// LOCFHAsmNP
    0U,	// LOCFHAsmNZ
    0U,	// LOCFHAsmO
    0U,	// LOCFHAsmP
    0U,	// LOCFHAsmZ
    0U,	// LOCFHR
    0U,	// LOCFHRAsm
    0U,	// LOCFHRAsmE
    0U,	// LOCFHRAsmH
    0U,	// LOCFHRAsmHE
    0U,	// LOCFHRAsmL
    0U,	// LOCFHRAsmLE
    0U,	// LOCFHRAsmLH
    0U,	// LOCFHRAsmM
    0U,	// LOCFHRAsmNE
    0U,	// LOCFHRAsmNH
    0U,	// LOCFHRAsmNHE
    0U,	// LOCFHRAsmNL
    0U,	// LOCFHRAsmNLE
    0U,	// LOCFHRAsmNLH
    0U,	// LOCFHRAsmNM
    0U,	// LOCFHRAsmNO
    0U,	// LOCFHRAsmNP
    0U,	// LOCFHRAsmNZ
    0U,	// LOCFHRAsmO
    0U,	// LOCFHRAsmP
    0U,	// LOCFHRAsmZ
    0U,	// LOCG
    0U,	// LOCGAsm
    0U,	// LOCGAsmE
    0U,	// LOCGAsmH
    0U,	// LOCGAsmHE
    0U,	// LOCGAsmL
    0U,	// LOCGAsmLE
    0U,	// LOCGAsmLH
    0U,	// LOCGAsmM
    0U,	// LOCGAsmNE
    0U,	// LOCGAsmNH
    0U,	// LOCGAsmNHE
    0U,	// LOCGAsmNL
    0U,	// LOCGAsmNLE
    0U,	// LOCGAsmNLH
    0U,	// LOCGAsmNM
    0U,	// LOCGAsmNO
    0U,	// LOCGAsmNP
    0U,	// LOCGAsmNZ
    0U,	// LOCGAsmO
    0U,	// LOCGAsmP
    0U,	// LOCGAsmZ
    0U,	// LOCGHI
    0U,	// LOCGHIAsm
    0U,	// LOCGHIAsmE
    0U,	// LOCGHIAsmH
    0U,	// LOCGHIAsmHE
    0U,	// LOCGHIAsmL
    0U,	// LOCGHIAsmLE
    0U,	// LOCGHIAsmLH
    0U,	// LOCGHIAsmM
    0U,	// LOCGHIAsmNE
    0U,	// LOCGHIAsmNH
    0U,	// LOCGHIAsmNHE
    0U,	// LOCGHIAsmNL
    0U,	// LOCGHIAsmNLE
    0U,	// LOCGHIAsmNLH
    0U,	// LOCGHIAsmNM
    0U,	// LOCGHIAsmNO
    0U,	// LOCGHIAsmNP
    0U,	// LOCGHIAsmNZ
    0U,	// LOCGHIAsmO
    0U,	// LOCGHIAsmP
    0U,	// LOCGHIAsmZ
    0U,	// LOCGR
    0U,	// LOCGRAsm
    0U,	// LOCGRAsmE
    0U,	// LOCGRAsmH
    0U,	// LOCGRAsmHE
    0U,	// LOCGRAsmL
    0U,	// LOCGRAsmLE
    0U,	// LOCGRAsmLH
    0U,	// LOCGRAsmM
    0U,	// LOCGRAsmNE
    0U,	// LOCGRAsmNH
    0U,	// LOCGRAsmNHE
    0U,	// LOCGRAsmNL
    0U,	// LOCGRAsmNLE
    0U,	// LOCGRAsmNLH
    0U,	// LOCGRAsmNM
    0U,	// LOCGRAsmNO
    0U,	// LOCGRAsmNP
    0U,	// LOCGRAsmNZ
    0U,	// LOCGRAsmO
    0U,	// LOCGRAsmP
    0U,	// LOCGRAsmZ
    0U,	// LOCHHI
    0U,	// LOCHHIAsm
    0U,	// LOCHHIAsmE
    0U,	// LOCHHIAsmH
    0U,	// LOCHHIAsmHE
    0U,	// LOCHHIAsmL
    0U,	// LOCHHIAsmLE
    0U,	// LOCHHIAsmLH
    0U,	// LOCHHIAsmM
    0U,	// LOCHHIAsmNE
    0U,	// LOCHHIAsmNH
    0U,	// LOCHHIAsmNHE
    0U,	// LOCHHIAsmNL
    0U,	// LOCHHIAsmNLE
    0U,	// LOCHHIAsmNLH
    0U,	// LOCHHIAsmNM
    0U,	// LOCHHIAsmNO
    0U,	// LOCHHIAsmNP
    0U,	// LOCHHIAsmNZ
    0U,	// LOCHHIAsmO
    0U,	// LOCHHIAsmP
    0U,	// LOCHHIAsmZ
    0U,	// LOCHI
    0U,	// LOCHIAsm
    0U,	// LOCHIAsmE
    0U,	// LOCHIAsmH
    0U,	// LOCHIAsmHE
    0U,	// LOCHIAsmL
    0U,	// LOCHIAsmLE
    0U,	// LOCHIAsmLH
    0U,	// LOCHIAsmM
    0U,	// LOCHIAsmNE
    0U,	// LOCHIAsmNH
    0U,	// LOCHIAsmNHE
    0U,	// LOCHIAsmNL
    0U,	// LOCHIAsmNLE
    0U,	// LOCHIAsmNLH
    0U,	// LOCHIAsmNM
    0U,	// LOCHIAsmNO
    0U,	// LOCHIAsmNP
    0U,	// LOCHIAsmNZ
    0U,	// LOCHIAsmO
    0U,	// LOCHIAsmP
    0U,	// LOCHIAsmZ
    0U,	// LOCHIMux
    0U,	// LOCMux
    0U,	// LOCR
    0U,	// LOCRAsm
    0U,	// LOCRAsmE
    0U,	// LOCRAsmH
    0U,	// LOCRAsmHE
    0U,	// LOCRAsmL
    0U,	// LOCRAsmLE
    0U,	// LOCRAsmLH
    0U,	// LOCRAsmM
    0U,	// LOCRAsmNE
    0U,	// LOCRAsmNH
    0U,	// LOCRAsmNHE
    0U,	// LOCRAsmNL
    0U,	// LOCRAsmNLE
    0U,	// LOCRAsmNLH
    0U,	// LOCRAsmNM
    0U,	// LOCRAsmNO
    0U,	// LOCRAsmNP
    0U,	// LOCRAsmNZ
    0U,	// LOCRAsmO
    0U,	// LOCRAsmP
    0U,	// LOCRAsmZ
    0U,	// LOCRMux
    0U,	// LPD
    0U,	// LPDBR
    0U,	// LPDFR
    0U,	// LPDFR_32
    0U,	// LPDG
    0U,	// LPEBR
    0U,	// LPGFR
    0U,	// LPGR
    0U,	// LPQ
    0U,	// LPR
    0U,	// LPXBR
    0U,	// LR
    0U,	// LRL
    0U,	// LRMux
    0U,	// LRV
    0U,	// LRVG
    0U,	// LRVGR
    0U,	// LRVH
    0U,	// LRVR
    0U,	// LT
    0U,	// LTDBR
    0U,	// LTDBRCompare
    0U,	// LTDBRCompare_VecPseudo
    0U,	// LTEBR
    0U,	// LTEBRCompare
    0U,	// LTEBRCompare_VecPseudo
    0U,	// LTG
    0U,	// LTGF
    0U,	// LTGFR
    0U,	// LTGR
    0U,	// LTR
    0U,	// LTXBR
    0U,	// LTXBRCompare
    0U,	// LTXBRCompare_VecPseudo
    0U,	// LX
    0U,	// LXDB
    0U,	// LXDBR
    0U,	// LXEB
    0U,	// LXEBR
    0U,	// LXR
    0U,	// LY
    0U,	// LZDR
    0U,	// LZER
    0U,	// LZRF
    0U,	// LZRG
    0U,	// LZXR
    0U,	// MADB
    0U,	// MADBR
    0U,	// MAEB
    0U,	// MAEBR
    0U,	// MDB
    0U,	// MDBR
    0U,	// MDEB
    0U,	// MDEBR
    0U,	// MEEB
    0U,	// MEEBR
    0U,	// MGHI
    0U,	// MH
    0U,	// MHI
    0U,	// MHY
    0U,	// MLG
    0U,	// MLGR
    0U,	// MS
    0U,	// MSDB
    0U,	// MSDBR
    0U,	// MSEB
    0U,	// MSEBR
    0U,	// MSFI
    0U,	// MSG
    0U,	// MSGF
    0U,	// MSGFI
    0U,	// MSGFR
    0U,	// MSGR
    0U,	// MSR
    0U,	// MSY
    0U,	// MVC
    0U,	// MVCK
    0U,	// MVCLoop
    0U,	// MVCSequence
    0U,	// MVGHI
    0U,	// MVHHI
    0U,	// MVHI
    0U,	// MVI
    0U,	// MVIY
    0U,	// MVST
    0U,	// MVSTLoop
    0U,	// MXBR
    0U,	// MXDB
    0U,	// MXDBR
    0U,	// MemBarrier
    0U,	// N
    0U,	// NC
    0U,	// NCLoop
    0U,	// NCSequence
    0U,	// NG
    0U,	// NGR
    0U,	// NGRK
    0U,	// NI
    0U,	// NIAI
    0U,	// NIFMux
    0U,	// NIHF
    0U,	// NIHF64
    0U,	// NIHH
    0U,	// NIHH64
    0U,	// NIHL
    0U,	// NIHL64
    0U,	// NIHMux
    0U,	// NILF
    0U,	// NILF64
    0U,	// NILH
    0U,	// NILH64
    0U,	// NILL
    0U,	// NILL64
    0U,	// NILMux
    0U,	// NIY
    0U,	// NR
    0U,	// NRK
    0U,	// NTSTG
    0U,	// NY
    0U,	// O
    0U,	// OC
    0U,	// OCLoop
    0U,	// OCSequence
    0U,	// OG
    0U,	// OGR
    0U,	// OGRK
    0U,	// OI
    0U,	// OIFMux
    0U,	// OIHF
    0U,	// OIHF64
    0U,	// OIHH
    0U,	// OIHH64
    0U,	// OIHL
    0U,	// OIHL64
    0U,	// OIHMux
    0U,	// OILF
    0U,	// OILF64
    0U,	// OILH
    0U,	// OILH64
    0U,	// OILL
    0U,	// OILL64
    0U,	// OILMux
    0U,	// OIY
    0U,	// OR
    0U,	// ORK
    0U,	// OY
    0U,	// PFD
    0U,	// PFDRL
    0U,	// PLO
    0U,	// POPCNT
    0U,	// PPA
    0U,	// PR
    0U,	// RISBG
    0U,	// RISBG32
    0U,	// RISBGN
    0U,	// RISBHG
    0U,	// RISBHH
    0U,	// RISBHL
    0U,	// RISBLG
    0U,	// RISBLH
    0U,	// RISBLL
    0U,	// RISBMux
    0U,	// RLL
    0U,	// RLLG
    0U,	// RNSBG
    0U,	// ROSBG
    0U,	// RXSBG
    0U,	// Return
    0U,	// S
    0U,	// SAM24
    0U,	// SAM31
    0U,	// SAM64
    0U,	// SAR
    0U,	// SDB
    0U,	// SDBR
    0U,	// SEB
    0U,	// SEBR
    0U,	// SFASR
    0U,	// SFPC
    0U,	// SG
    0U,	// SGF
    0U,	// SGFR
    0U,	// SGR
    0U,	// SGRK
    0U,	// SH
    0U,	// SHY
    0U,	// SL
    0U,	// SLA
    0U,	// SLAK
    0U,	// SLB
    0U,	// SLBG
    0U,	// SLBGR
    0U,	// SLBR
    0U,	// SLFI
    0U,	// SLG
    0U,	// SLGF
    0U,	// SLGFI
    0U,	// SLGFR
    0U,	// SLGR
    0U,	// SLGRK
    0U,	// SLL
    0U,	// SLLG
    0U,	// SLLK
    0U,	// SLR
    0U,	// SLRK
    0U,	// SLY
    0U,	// SPM
    0U,	// SQDB
    0U,	// SQDBR
    0U,	// SQEB
    0U,	// SQEBR
    0U,	// SQXBR
    0U,	// SR
    0U,	// SRA
    0U,	// SRAG
    0U,	// SRAK
    0U,	// SRK
    0U,	// SRL
    0U,	// SRLG
    0U,	// SRLK
    0U,	// SRNM
    0U,	// SRNMB
    0U,	// SRNMT
    0U,	// SRST
    0U,	// SRSTLoop
    0U,	// ST
    0U,	// ST128
    0U,	// STAM
    0U,	// STAMY
    0U,	// STC
    0U,	// STCH
    0U,	// STCK
    0U,	// STCKE
    0U,	// STCKF
    0U,	// STCMux
    0U,	// STCY
    0U,	// STD
    0U,	// STDY
    0U,	// STE
    0U,	// STEY
    0U,	// STFH
    0U,	// STFLE
    0U,	// STFPC
    0U,	// STG
    0U,	// STGRL
    0U,	// STH
    0U,	// STHH
    0U,	// STHMux
    0U,	// STHRL
    0U,	// STHY
    0U,	// STM
    0U,	// STMG
    0U,	// STMH
    0U,	// STMY
    0U,	// STMux
    0U,	// STOC
    0U,	// STOCAsm
    0U,	// STOCAsmE
    0U,	// STOCAsmH
    0U,	// STOCAsmHE
    0U,	// STOCAsmL
    0U,	// STOCAsmLE
    0U,	// STOCAsmLH
    0U,	// STOCAsmM
    0U,	// STOCAsmNE
    0U,	// STOCAsmNH
    0U,	// STOCAsmNHE
    0U,	// STOCAsmNL
    0U,	// STOCAsmNLE
    0U,	// STOCAsmNLH
    0U,	// STOCAsmNM
    0U,	// STOCAsmNO
    0U,	// STOCAsmNP
    0U,	// STOCAsmNZ
    0U,	// STOCAsmO
    0U,	// STOCAsmP
    0U,	// STOCAsmZ
    0U,	// STOCFH
    0U,	// STOCFHAsm
    0U,	// STOCFHAsmE
    0U,	// STOCFHAsmH
    0U,	// STOCFHAsmHE
    0U,	// STOCFHAsmL
    0U,	// STOCFHAsmLE
    0U,	// STOCFHAsmLH
    0U,	// STOCFHAsmM
    0U,	// STOCFHAsmNE
    0U,	// STOCFHAsmNH
    0U,	// STOCFHAsmNHE
    0U,	// STOCFHAsmNL
    0U,	// STOCFHAsmNLE
    0U,	// STOCFHAsmNLH
    0U,	// STOCFHAsmNM
    0U,	// STOCFHAsmNO
    0U,	// STOCFHAsmNP
    0U,	// STOCFHAsmNZ
    0U,	// STOCFHAsmO
    0U,	// STOCFHAsmP
    0U,	// STOCFHAsmZ
    0U,	// STOCG
    0U,	// STOCGAsm
    0U,	// STOCGAsmE
    0U,	// STOCGAsmH
    0U,	// STOCGAsmHE
    0U,	// STOCGAsmL
    0U,	// STOCGAsmLE
    0U,	// STOCGAsmLH
    0U,	// STOCGAsmM
    0U,	// STOCGAsmNE
    0U,	// STOCGAsmNH
    0U,	// STOCGAsmNHE
    0U,	// STOCGAsmNL
    0U,	// STOCGAsmNLE
    0U,	// STOCGAsmNLH
    0U,	// STOCGAsmNM
    0U,	// STOCGAsmNO
    0U,	// STOCGAsmNP
    0U,	// STOCGAsmNZ
    0U,	// STOCGAsmO
    0U,	// STOCGAsmP
    0U,	// STOCGAsmZ
    0U,	// STOCMux
    0U,	// STPQ
    0U,	// STRAG
    0U,	// STRL
    0U,	// STRV
    0U,	// STRVG
    0U,	// STRVH
    0U,	// STX
    0U,	// STY
    0U,	// SVC
    0U,	// SXBR
    0U,	// SY
    0U,	// Select32
    0U,	// Select32Mux
    0U,	// Select64
    0U,	// SelectF128
    0U,	// SelectF32
    0U,	// SelectF64
    0U,	// Serialize
    0U,	// TABORT
    0U,	// TAM
    0U,	// TBEGIN
    0U,	// TBEGINC
    0U,	// TBEGIN_nofloat
    0U,	// TCDB
    0U,	// TCEB
    0U,	// TCXB
    0U,	// TEND
    0U,	// TLS_GDCALL
    0U,	// TLS_LDCALL
    0U,	// TM
    0U,	// TMHH
    0U,	// TMHH64
    0U,	// TMHL
    0U,	// TMHL64
    0U,	// TMHMux
    0U,	// TMLH
    0U,	// TMLH64
    0U,	// TMLL
    0U,	// TMLL64
    0U,	// TMLMux
    0U,	// TMY
    0U,	// TS
    0U,	// Trap
    0U,	// VA
    0U,	// VAB
    0U,	// VAC
    0U,	// VACC
    0U,	// VACCB
    0U,	// VACCC
    0U,	// VACCCQ
    0U,	// VACCF
    0U,	// VACCG
    0U,	// VACCH
    0U,	// VACCQ
    0U,	// VACQ
    0U,	// VAF
    0U,	// VAG
    0U,	// VAH
    0U,	// VAQ
    0U,	// VAVG
    0U,	// VAVGB
    0U,	// VAVGF
    0U,	// VAVGG
    0U,	// VAVGH
    0U,	// VAVGL
    0U,	// VAVGLB
    0U,	// VAVGLF
    0U,	// VAVGLG
    0U,	// VAVGLH
    0U,	// VCDG
    0U,	// VCDGB
    0U,	// VCDLG
    0U,	// VCDLGB
    0U,	// VCEQ
    0U,	// VCEQB
    0U,	// VCEQBS
    0U,	// VCEQF
    0U,	// VCEQFS
    0U,	// VCEQG
    0U,	// VCEQGS
    0U,	// VCEQH
    0U,	// VCEQHS
    0U,	// VCGD
    0U,	// VCGDB
    0U,	// VCH
    0U,	// VCHB
    0U,	// VCHBS
    0U,	// VCHF
    0U,	// VCHFS
    0U,	// VCHG
    0U,	// VCHGS
    0U,	// VCHH
    0U,	// VCHHS
    0U,	// VCHL
    0U,	// VCHLB
    0U,	// VCHLBS
    0U,	// VCHLF
    0U,	// VCHLFS
    0U,	// VCHLG
    0U,	// VCHLGS
    0U,	// VCHLH
    0U,	// VCHLHS
    0U,	// VCKSM
    0U,	// VCLGD
    0U,	// VCLGDB
    0U,	// VCLZ
    0U,	// VCLZB
    0U,	// VCLZF
    0U,	// VCLZG
    0U,	// VCLZH
    0U,	// VCTZ
    0U,	// VCTZB
    0U,	// VCTZF
    0U,	// VCTZG
    0U,	// VCTZH
    0U,	// VEC
    0U,	// VECB
    0U,	// VECF
    0U,	// VECG
    0U,	// VECH
    0U,	// VECL
    0U,	// VECLB
    0U,	// VECLF
    0U,	// VECLG
    0U,	// VECLH
    0U,	// VERIM
    0U,	// VERIMB
    0U,	// VERIMF
    0U,	// VERIMG
    0U,	// VERIMH
    0U,	// VERLL
    0U,	// VERLLB
    0U,	// VERLLF
    0U,	// VERLLG
    0U,	// VERLLH
    0U,	// VERLLV
    0U,	// VERLLVB
    0U,	// VERLLVF
    0U,	// VERLLVG
    0U,	// VERLLVH
    0U,	// VESL
    0U,	// VESLB
    0U,	// VESLF
    0U,	// VESLG
    0U,	// VESLH
    0U,	// VESLV
    0U,	// VESLVB
    0U,	// VESLVF
    0U,	// VESLVG
    0U,	// VESLVH
    0U,	// VESRA
    0U,	// VESRAB
    0U,	// VESRAF
    0U,	// VESRAG
    0U,	// VESRAH
    0U,	// VESRAV
    0U,	// VESRAVB
    0U,	// VESRAVF
    0U,	// VESRAVG
    0U,	// VESRAVH
    0U,	// VESRL
    0U,	// VESRLB
    0U,	// VESRLF
    0U,	// VESRLG
    0U,	// VESRLH
    0U,	// VESRLV
    0U,	// VESRLVB
    0U,	// VESRLVF
    0U,	// VESRLVG
    0U,	// VESRLVH
    0U,	// VFA
    0U,	// VFADB
    0U,	// VFAE
    0U,	// VFAEB
    0U,	// VFAEBS
    0U,	// VFAEF
    0U,	// VFAEFS
    0U,	// VFAEH
    0U,	// VFAEHS
    0U,	// VFAEZB
    0U,	// VFAEZBS
    0U,	// VFAEZF
    0U,	// VFAEZFS
    0U,	// VFAEZH
    0U,	// VFAEZHS
    1U,	// VFCE
    0U,	// VFCEDB
    0U,	// VFCEDBS
    1U,	// VFCH
    0U,	// VFCHDB
    0U,	// VFCHDBS
    1U,	// VFCHE
    0U,	// VFCHEDB
    0U,	// VFCHEDBS
    0U,	// VFD
    0U,	// VFDDB
    0U,	// VFEE
    0U,	// VFEEB
    0U,	// VFEEBS
    0U,	// VFEEF
    0U,	// VFEEFS
    0U,	// VFEEH
    0U,	// VFEEHS
    0U,	// VFEEZB
    0U,	// VFEEZBS
    0U,	// VFEEZF
    0U,	// VFEEZFS
    0U,	// VFEEZH
    0U,	// VFEEZHS
    0U,	// VFENE
    0U,	// VFENEB
    0U,	// VFENEBS
    0U,	// VFENEF
    0U,	// VFENEFS
    0U,	// VFENEH
    0U,	// VFENEHS
    0U,	// VFENEZB
    0U,	// VFENEZBS
    0U,	// VFENEZF
    0U,	// VFENEZFS
    0U,	// VFENEZH
    0U,	// VFENEZHS
    0U,	// VFI
    0U,	// VFIDB
    0U,	// VFLCDB
    0U,	// VFLNDB
    0U,	// VFLPDB
    0U,	// VFM
    1U,	// VFMA
    0U,	// VFMADB
    0U,	// VFMDB
    1U,	// VFMS
    0U,	// VFMSDB
    0U,	// VFPSO
    0U,	// VFPSODB
    0U,	// VFS
    0U,	// VFSDB
    0U,	// VFSQ
    0U,	// VFSQDB
    0U,	// VFTCI
    0U,	// VFTCIDB
    0U,	// VGBM
    0U,	// VGEF
    0U,	// VGEG
    0U,	// VGFM
    0U,	// VGFMA
    0U,	// VGFMAB
    0U,	// VGFMAF
    0U,	// VGFMAG
    0U,	// VGFMAH
    0U,	// VGFMB
    0U,	// VGFMF
    0U,	// VGFMG
    0U,	// VGFMH
    0U,	// VGM
    0U,	// VGMB
    0U,	// VGMF
    0U,	// VGMG
    0U,	// VGMH
    0U,	// VISTR
    0U,	// VISTRB
    0U,	// VISTRBS
    0U,	// VISTRF
    0U,	// VISTRFS
    0U,	// VISTRH
    0U,	// VISTRHS
    0U,	// VL
    0U,	// VL32
    0U,	// VL64
    0U,	// VLBB
    0U,	// VLC
    0U,	// VLCB
    0U,	// VLCF
    0U,	// VLCG
    0U,	// VLCH
    0U,	// VLDE
    0U,	// VLDEB
    0U,	// VLEB
    0U,	// VLED
    0U,	// VLEDB
    0U,	// VLEF
    0U,	// VLEG
    0U,	// VLEH
    0U,	// VLEIB
    0U,	// VLEIF
    0U,	// VLEIG
    0U,	// VLEIH
    0U,	// VLGV
    0U,	// VLGVB
    0U,	// VLGVF
    0U,	// VLGVG
    0U,	// VLGVH
    0U,	// VLL
    0U,	// VLLEZ
    0U,	// VLLEZB
    0U,	// VLLEZF
    0U,	// VLLEZG
    0U,	// VLLEZH
    0U,	// VLM
    0U,	// VLP
    0U,	// VLPB
    0U,	// VLPF
    0U,	// VLPG
    0U,	// VLPH
    0U,	// VLR
    0U,	// VLR32
    0U,	// VLR64
    0U,	// VLREP
    0U,	// VLREPB
    0U,	// VLREPF
    0U,	// VLREPG
    0U,	// VLREPH
    0U,	// VLVG
    0U,	// VLVGB
    0U,	// VLVGF
    0U,	// VLVGG
    0U,	// VLVGH
    0U,	// VLVGP
    0U,	// VLVGP32
    0U,	// VMAE
    0U,	// VMAEB
    0U,	// VMAEF
    0U,	// VMAEH
    0U,	// VMAH
    0U,	// VMAHB
    0U,	// VMAHF
    0U,	// VMAHH
    0U,	// VMAL
    0U,	// VMALB
    0U,	// VMALE
    0U,	// VMALEB
    0U,	// VMALEF
    0U,	// VMALEH
    0U,	// VMALF
    0U,	// VMALH
    0U,	// VMALHB
    0U,	// VMALHF
    0U,	// VMALHH
    0U,	// VMALHW
    0U,	// VMALO
    0U,	// VMALOB
    0U,	// VMALOF
    0U,	// VMALOH
    0U,	// VMAO
    0U,	// VMAOB
    0U,	// VMAOF
    0U,	// VMAOH
    0U,	// VME
    0U,	// VMEB
    0U,	// VMEF
    0U,	// VMEH
    0U,	// VMH
    0U,	// VMHB
    0U,	// VMHF
    0U,	// VMHH
    0U,	// VML
    0U,	// VMLB
    0U,	// VMLE
    0U,	// VMLEB
    0U,	// VMLEF
    0U,	// VMLEH
    0U,	// VMLF
    0U,	// VMLH
    0U,	// VMLHB
    0U,	// VMLHF
    0U,	// VMLHH
    0U,	// VMLHW
    0U,	// VMLO
    0U,	// VMLOB
    0U,	// VMLOF
    0U,	// VMLOH
    0U,	// VMN
    0U,	// VMNB
    0U,	// VMNF
    0U,	// VMNG
    0U,	// VMNH
    0U,	// VMNL
    0U,	// VMNLB
    0U,	// VMNLF
    0U,	// VMNLG
    0U,	// VMNLH
    0U,	// VMO
    0U,	// VMOB
    0U,	// VMOF
    0U,	// VMOH
    0U,	// VMRH
    0U,	// VMRHB
    0U,	// VMRHF
    0U,	// VMRHG
    0U,	// VMRHH
    0U,	// VMRL
    0U,	// VMRLB
    0U,	// VMRLF
    0U,	// VMRLG
    0U,	// VMRLH
    0U,	// VMX
    0U,	// VMXB
    0U,	// VMXF
    0U,	// VMXG
    0U,	// VMXH
    0U,	// VMXL
    0U,	// VMXLB
    0U,	// VMXLF
    0U,	// VMXLG
    0U,	// VMXLH
    0U,	// VN
    0U,	// VNC
    0U,	// VNO
    0U,	// VO
    0U,	// VONE
    0U,	// VPDI
    0U,	// VPERM
    0U,	// VPK
    0U,	// VPKF
    0U,	// VPKG
    0U,	// VPKH
    0U,	// VPKLS
    0U,	// VPKLSF
    0U,	// VPKLSFS
    0U,	// VPKLSG
    0U,	// VPKLSGS
    0U,	// VPKLSH
    0U,	// VPKLSHS
    0U,	// VPKS
    0U,	// VPKSF
    0U,	// VPKSFS
    0U,	// VPKSG
    0U,	// VPKSGS
    0U,	// VPKSH
    0U,	// VPKSHS
    0U,	// VPOPCT
    0U,	// VREP
    0U,	// VREPB
    0U,	// VREPF
    0U,	// VREPG
    0U,	// VREPH
    0U,	// VREPI
    0U,	// VREPIB
    0U,	// VREPIF
    0U,	// VREPIG
    0U,	// VREPIH
    0U,	// VS
    0U,	// VSB
    0U,	// VSBCBI
    0U,	// VSBCBIQ
    0U,	// VSBI
    0U,	// VSBIQ
    0U,	// VSCBI
    0U,	// VSCBIB
    0U,	// VSCBIF
    0U,	// VSCBIG
    0U,	// VSCBIH
    0U,	// VSCBIQ
    0U,	// VSCEF
    0U,	// VSCEG
    0U,	// VSEG
    0U,	// VSEGB
    0U,	// VSEGF
    0U,	// VSEGH
    0U,	// VSEL
    0U,	// VSF
    0U,	// VSG
    0U,	// VSH
    0U,	// VSL
    0U,	// VSLB
    0U,	// VSLDB
    0U,	// VSQ
    0U,	// VSRA
    0U,	// VSRAB
    0U,	// VSRL
    0U,	// VSRLB
    0U,	// VST
    0U,	// VST32
    0U,	// VST64
    0U,	// VSTEB
    0U,	// VSTEF
    0U,	// VSTEG
    0U,	// VSTEH
    0U,	// VSTL
    0U,	// VSTM
    1U,	// VSTRC
    0U,	// VSTRCB
    0U,	// VSTRCBS
    0U,	// VSTRCF
    0U,	// VSTRCFS
    0U,	// VSTRCH
    0U,	// VSTRCHS
    0U,	// VSTRCZB
    0U,	// VSTRCZBS
    0U,	// VSTRCZF
    0U,	// VSTRCZFS
    0U,	// VSTRCZH
    0U,	// VSTRCZHS
    0U,	// VSUM
    0U,	// VSUMB
    0U,	// VSUMG
    0U,	// VSUMGF
    0U,	// VSUMGH
    0U,	// VSUMH
    0U,	// VSUMQ
    0U,	// VSUMQF
    0U,	// VSUMQG
    0U,	// VTM
    0U,	// VUPH
    0U,	// VUPHB
    0U,	// VUPHF
    0U,	// VUPHH
    0U,	// VUPL
    0U,	// VUPLB
    0U,	// VUPLF
    0U,	// VUPLH
    0U,	// VUPLHB
    0U,	// VUPLHF
    0U,	// VUPLHH
    0U,	// VUPLHW
    0U,	// VUPLL
    0U,	// VUPLLB
    0U,	// VUPLLF
    0U,	// VUPLLH
    0U,	// VX
    0U,	// VZERO
    0U,	// WCDGB
    0U,	// WCDLGB
    0U,	// WCGDB
    0U,	// WCLGDB
    0U,	// WFADB
    0U,	// WFC
    0U,	// WFCDB
    0U,	// WFCEDB
    0U,	// WFCEDBS
    0U,	// WFCHDB
    0U,	// WFCHDBS
    0U,	// WFCHEDB
    0U,	// WFCHEDBS
    0U,	// WFDDB
    0U,	// WFIDB
    0U,	// WFK
    0U,	// WFKDB
    0U,	// WFLCDB
    0U,	// WFLNDB
    0U,	// WFLPDB
    0U,	// WFMADB
    0U,	// WFMDB
    0U,	// WFMSDB
    0U,	// WFPSODB
    0U,	// WFSDB
    0U,	// WFSQDB
    0U,	// WFTCIDB
    0U,	// WLDEB
    0U,	// WLEDB
    0U,	// X
    0U,	// XC
    0U,	// XCLoop
    0U,	// XCSequence
    0U,	// XG
    0U,	// XGR
    0U,	// XGRK
    0U,	// XI
    0U,	// XIFMux
    0U,	// XIHF
    0U,	// XIHF64
    0U,	// XILF
    0U,	// XILF64
    0U,	// XIY
    0U,	// XR
    0U,	// XRK
    0U,	// XY
    0U,	// ZEXT128_32
    0U,	// ZEXT128_64
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MI->getOpcode()] << 0;
  Bits |= (uint64_t)OpInfo1[MI->getOpcode()] << 32;
  Bits |= (uint64_t)OpInfo2[MI->getOpcode()] << 48;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 5 bits for 17 unique commands.
  switch ((Bits >> 14) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, FENTRY_CALL, PATCHABL...
    return;
    break;
  case 1:
    // A, ADB, ADBR, AEB, AEBR, AFI, AG, AGF, AGFI, AGFR, AGHI, AGHIK, AGR, A...
    printOperand(MI, 0, O);
    break;
  case 2:
    // AGSI, ASI, CGHSI, CHHSI, CHSI, CLFHSI, CLGHSI, CLHHSI, CLI, CLIY, CSST...
    printBDAddrOperand(MI, 0, O);
    break;
  case 3:
    // B, BAsmE, BAsmH, BAsmHE, BAsmL, BAsmLE, BAsmLH, BAsmM, BAsmNE, BAsmNH,...
    printBDXAddrOperand(MI, 0, O);
    return;
    break;
  case 4:
    // BC, BCR, BRC, BRCL
    printCond4Operand(MI, 1, O);
    break;
  case 5:
    // BCAsm, BCRAsm, BPP, BPRP, BRCAsm, BRCLAsm, NIAI, PFD, PFDRL
    printU4ImmOperand(MI, 0, O);
    O << ", ";
    break;
  case 6:
    // CGIB, CGIJ, CGIT, CGRB, CGRJ, CGRT, CIB, CIJ, CIT, CLFIT, CLGIB, CLGIJ...
    printCond4Operand(MI, 2, O);
    O << "\t";
    printOperand(MI, 0, O);
    O << ", ";
    break;
  case 7:
    // CLC, MVC, NC, OC, XC
    printBDLAddrOperand(MI, 0, O);
    O << ", ";
    printBDAddrOperand(MI, 3, O);
    return;
    break;
  case 8:
    // CLGT, CLT
    printCond4Operand(MI, 3, O);
    O << "\t";
    printOperand(MI, 0, O);
    O << ", ";
    printBDAddrOperand(MI, 1, O);
    return;
    break;
  case 9:
    // InsnE, InsnRR
    printU16ImmOperand(MI, 0, O);
    break;
  case 10:
    // InsnRI, InsnRRE, InsnRRF, InsnRS, InsnRX, InsnS, InsnSI
    printU32ImmOperand(MI, 0, O);
    O << ',';
    break;
  case 11:
    // InsnRIE, InsnRIL, InsnRILU, InsnRIS, InsnRRS, InsnRSE, InsnRSI, InsnRS...
    printU48ImmOperand(MI, 0, O);
    O << ',';
    break;
  case 12:
    // J, JAsmE, JAsmH, JAsmHE, JAsmL, JAsmLE, JAsmLH, JAsmM, JAsmNE, JAsmNH,...
    printPCRelOperand(MI, 0, O);
    return;
    break;
  case 13:
    // LOC, LOCFH, LOCG
    printCond4Operand(MI, 5, O);
    O << "\t";
    printOperand(MI, 0, O);
    O << ", ";
    printBDAddrOperand(MI, 2, O);
    return;
    break;
  case 14:
    // LOCFHR, LOCGHI, LOCGR, LOCHHI, LOCHI, LOCR, STOC, STOCFH, STOCG
    printCond4Operand(MI, 4, O);
    O << "\t";
    printOperand(MI, 0, O);
    O << ", ";
    break;
  case 15:
    // MVCK
    printBDRAddrOperand(MI, 0, O);
    O << ", ";
    printBDAddrOperand(MI, 3, O);
    O << ", ";
    printOperand(MI, 5, O);
    return;
    break;
  case 16:
    // SVC
    printU8ImmOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 1 encoded into 5 bits for 17 unique commands.
  switch ((Bits >> 19) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A, ADB, ADBR, AEB, AEBR, AFI, AG, AGF, AGFI, AGFR, AGHI, AGHIK, AGR, A...
    O << ", ";
    break;
  case 1:
    // BC, BRC, BRCL
    O << "\t";
    break;
  case 2:
    // BCAsm, PFD
    printBDXAddrOperand(MI, 1, O);
    return;
    break;
  case 3:
    // BCR
    O << "r\t";
    printOperand(MI, 2, O);
    return;
    break;
  case 4:
    // BCRAsm, CGRB, CGRJ, CGRT, CLGRB, CLGRJ, CLGRT, CLRB, CLRJ, CLRT, CRB, ...
    printOperand(MI, 1, O);
    break;
  case 5:
    // BPP, BPRP, BRCAsm, BRCLAsm, PFDRL
    printPCRelOperand(MI, 1, O);
    break;
  case 6:
    // BR, BRAsmE, BRAsmH, BRAsmHE, BRAsmL, BRAsmLE, BRAsmLH, BRAsmM, BRAsmNE...
    return;
    break;
  case 7:
    // CGIB, CGIJ, CIB, CIJ
    printS8ImmOperand(MI, 1, O);
    O << ", ";
    break;
  case 8:
    // CGIT, CIT
    printS16ImmOperand(MI, 1, O);
    return;
    break;
  case 9:
    // CLFIT, CLGIT
    printU16ImmOperand(MI, 1, O);
    return;
    break;
  case 10:
    // CLGIB, CLGIJ, CLIB, CLIJ
    printU8ImmOperand(MI, 1, O);
    O << ", ";
    break;
  case 11:
    // InsnRR
    O << ',';
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    return;
    break;
  case 12:
    // InsnS, InsnSI, InsnSIL, InsnSIY, InsnSSE, InsnSSF, STOC, STOCFH, STOCG
    printBDAddrOperand(MI, 1, O);
    break;
  case 13:
    // InsnSS
    printBDRAddrOperand(MI, 1, O);
    O << ',';
    printBDAddrOperand(MI, 4, O);
    O << ',';
    printOperand(MI, 6, O);
    return;
    break;
  case 14:
    // LOCFHR, LOCGR, LOCR
    printOperand(MI, 2, O);
    return;
    break;
  case 15:
    // LOCGHI, LOCHHI, LOCHI
    printS16ImmOperand(MI, 2, O);
    return;
    break;
  case 16:
    // NIAI
    printU4ImmOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 31 unique commands.
  switch ((Bits >> 24) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A, ADB, AEB, AG, AGF, AH, AHY, AL, ALC, ALCG, ALG, ALGF, ALY, AY, BC, ...
    printBDXAddrOperand(MI, 2, O);
    break;
  case 1:
    // ADBR, AEBR, AGFR, AGR, ALCGR, ALCR, ALGFR, ALGR, ALR, AR, AXBR, BCTGR,...
    printOperand(MI, 2, O);
    break;
  case 2:
    // AFI, AGFI, AIH, MSFI, MSGFI
    printS32ImmOperand(MI, 2, O);
    return;
    break;
  case 3:
    // AGHI, AHI, CGHSI, CHHSI, CHSI, LOCGHIAsm, LOCGHIAsmE, LOCGHIAsmH, LOCG...
    printS16ImmOperand(MI, 2, O);
    break;
  case 4:
    // AGHIK, AGRK, AHIK, ALGHSIK, ALGRK, ALHSIK, ALRK, ARK, BALR, BASR, BASS...
    printOperand(MI, 1, O);
    break;
  case 5:
    // AGSI, ASI
    printS8ImmOperand(MI, 2, O);
    return;
    break;
  case 6:
    // ALFI, ALGFI, NIHF, NILF, OIHF, OILF, SLFI, SLGFI, XIHF, XILF
    printU32ImmOperand(MI, 2, O);
    return;
    break;
  case 7:
    // BAL, BAS, C, CDB, CEB, CG, CGF, CGH, CH, CHF, CHY, CL, CLG, CLGF, CLHF...
    printBDXAddrOperand(MI, 1, O);
    break;
  case 8:
    // BCRAsm, BRCAsm, BRCLAsm, CGRT, CLGRT, CLRT, CRT, InsnS, PFDRL, STOC, S...
    return;
    break;
  case 9:
    // BPP, BPRP, CGRB, CGRJ, CLGRB, CLGRJ, CLRB, CLRJ, CRB, CRJ
    O << ", ";
    break;
  case 10:
    // BRAS, BRASL
    printPCRelTLSOperand(MI, 1, O);
    return;
    break;
  case 11:
    // BRC, BRCL, BRCT, BRCTG, BRCTH
    printPCRelOperand(MI, 2, O);
    return;
    break;
  case 12:
    // CDFBRA, CDGBRA, CDLFBR, CDLGBR, CEFBRA, CEGBRA, CELFBR, CELGBR, CFDBR,...
    printU4ImmOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 13:
    // CFI, CGFI, CIH, LGFI
    printS32ImmOperand(MI, 1, O);
    return;
    break;
  case 14:
    // CGFRL, CGHRL, CGRL, CHRL, CLGFRL, CLGHRL, CLGRL, CLHRL, CLRL, CRL, EXR...
    printPCRelOperand(MI, 1, O);
    return;
    break;
  case 15:
    // CGHI, CGITAsm, CGITAsmE, CGITAsmH, CGITAsmHE, CGITAsmL, CGITAsmLE, CGI...
    printS16ImmOperand(MI, 1, O);
    break;
  case 16:
    // CGIB, CIB, CLGIB, CLIB
    printBDAddrOperand(MI, 3, O);
    return;
    break;
  case 17:
    // CGIBAsm, CGIBAsmE, CGIBAsmH, CGIBAsmHE, CGIBAsmL, CGIBAsmLE, CGIBAsmLH...
    printS8ImmOperand(MI, 1, O);
    O << ", ";
    break;
  case 18:
    // CGIJ, CIJ, CLGIJ, CLIJ
    printPCRelOperand(MI, 3, O);
    return;
    break;
  case 19:
    // CLFHSI, CLGHSI, CLHHSI, IIHH, IIHL, IILH, IILL, NIHH, NIHL, NILH, NILL...
    printU16ImmOperand(MI, 2, O);
    return;
    break;
  case 20:
    // CLFI, CLGFI, CLIH, IIHF, IILF, LLIHF, LLILF
    printU32ImmOperand(MI, 1, O);
    return;
    break;
  case 21:
    // CLFITAsm, CLFITAsmE, CLFITAsmH, CLFITAsmHE, CLFITAsmL, CLFITAsmLE, CLF...
    printU16ImmOperand(MI, 1, O);
    break;
  case 22:
    // CLGIBAsm, CLGIBAsmE, CLGIBAsmH, CLGIBAsmHE, CLGIBAsmL, CLGIBAsmLE, CLG...
    printU8ImmOperand(MI, 1, O);
    O << ", ";
    break;
  case 23:
    // CLGTAsm, CLTAsm
    printU4ImmOperand(MI, 3, O);
    O << ", ";
    printBDAddrOperand(MI, 1, O);
    return;
    break;
  case 24:
    // CLGTAsmE, CLGTAsmH, CLGTAsmHE, CLGTAsmL, CLGTAsmLE, CLGTAsmLH, CLGTAsm...
    printBDAddrOperand(MI, 1, O);
    break;
  case 25:
    // CLI, CLIY, MVI, MVIY, NI, NIY, OI, OIY, TM, TMY, XI, XIY
    printU8ImmOperand(MI, 2, O);
    return;
    break;
  case 26:
    // CSST, ECTG, LOCAsm, LOCAsmE, LOCAsmH, LOCAsmHE, LOCAsmL, LOCAsmLE, LOC...
    printBDAddrOperand(MI, 2, O);
    break;
  case 27:
    // ICM, ICMH, ICMY
    printU4ImmOperand(MI, 2, O);
    O << ", ";
    printBDAddrOperand(MI, 3, O);
    return;
    break;
  case 28:
    // InsnRI, InsnRIE, InsnRIL, InsnRILU, InsnRIS, InsnRRE, InsnRRF, InsnRRS...
    O << ',';
    break;
  case 29:
    // VGEF, VGEG
    printBDVAddrOperand(MI, 2, O);
    O << ", ";
    break;
  case 30:
    // VSCEF, VSCEG
    printBDVAddrOperand(MI, 1, O);
    O << ", ";
    break;
  }


  // Fragment 3 encoded into 5 bits for 20 unique commands.
  switch ((Bits >> 29) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A, ADB, ADBR, AEB, AEBR, AG, AGF, AGFR, AGHI, AGR, AH, AHI, AHY, AL, A...
    return;
    break;
  case 1:
    // AGHIK, AGRK, AHIK, ALGHSIK, ALGRK, ALHSIK, ALRK, ARK, BRXH, BRXHG, BRX...
    O << ", ";
    break;
  case 2:
    // BPP, InsnRX, InsnRXE, InsnRXY
    printBDXAddrOperand(MI, 2, O);
    return;
    break;
  case 3:
    // BPRP, CGIJAsmE, CGIJAsmH, CGIJAsmHE, CGIJAsmL, CGIJAsmLE, CGIJAsmLH, C...
    printPCRelOperand(MI, 2, O);
    return;
    break;
  case 4:
    // CGIBAsm, CGIJAsm, CIBAsm, CIJAsm, CLGIBAsm, CLGIJAsm, CLIBAsm, CLIJAsm
    printU4ImmOperand(MI, 2, O);
    O << ", ";
    break;
  case 5:
    // CGIBAsmE, CGIBAsmH, CGIBAsmHE, CGIBAsmL, CGIBAsmLE, CGIBAsmLH, CGIBAsm...
    printBDAddrOperand(MI, 2, O);
    return;
    break;
  case 6:
    // CGRB, CLGRB, CLRB, CRB, InsnSSE, InsnSSF
    printBDAddrOperand(MI, 3, O);
    break;
  case 7:
    // CGRJ, CLGRJ, CLRJ, CRJ
    printPCRelOperand(MI, 3, O);
    return;
    break;
  case 8:
    // InsnRI
    printS16ImmOperand(MI, 2, O);
    return;
    break;
  case 9:
    // InsnRIE, InsnRRE, InsnRRF, InsnRRS, InsnRS, InsnRSE, InsnRSI, InsnRSY,...
    printOperand(MI, 2, O);
    break;
  case 10:
    // InsnRILU
    printU32ImmOperand(MI, 2, O);
    return;
    break;
  case 11:
    // InsnRIS
    printS8ImmOperand(MI, 2, O);
    O << ',';
    printU4ImmOperand(MI, 3, O);
    O << ',';
    printBDAddrOperand(MI, 4, O);
    return;
    break;
  case 12:
    // InsnSI
    printS8ImmOperand(MI, 3, O);
    return;
    break;
  case 13:
    // InsnSIL
    printU16ImmOperand(MI, 3, O);
    return;
    break;
  case 14:
    // InsnSIY
    printU8ImmOperand(MI, 3, O);
    return;
    break;
  case 15:
    // VGEF
    printU2ImmOperand(MI, 5, O);
    return;
    break;
  case 16:
    // VGEG
    printU1ImmOperand(MI, 5, O);
    return;
    break;
  case 17:
    // VGM, VGMB, VGMF, VGMG, VGMH
    printU8ImmOperand(MI, 2, O);
    break;
  case 18:
    // VSCEF
    printU2ImmOperand(MI, 4, O);
    return;
    break;
  case 19:
    // VSCEG
    printU1ImmOperand(MI, 4, O);
    return;
    break;
  }


  // Fragment 4 encoded into 5 bits for 29 unique commands.
  switch ((Bits >> 34) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // AGHIK, AHIK, ALGHSIK, ALHSIK
    printS16ImmOperand(MI, 2, O);
    return;
    break;
  case 1:
    // AGRK, ALGRK, ALRK, ARK, NGRK, NRK, OGRK, ORK, SGRK, SLGRK, SLRK, SRK, ...
    printOperand(MI, 2, O);
    break;
  case 2:
    // BRXH, BRXHG, BRXLE, BRXLG, CGIJAsm, CIJAsm, CLGIJAsm, CLIJAsm
    printPCRelOperand(MI, 3, O);
    return;
    break;
  case 3:
    // BXH, BXHG, BXLE, BXLEG, CDS, CDSG, CDSY, CGIBAsm, CIBAsm, CLGIBAsm, CL...
    printBDAddrOperand(MI, 3, O);
    break;
  case 4:
    // CDFBRA, CDGBRA, CDLFBR, CDLGBR, CEFBRA, CEGBRA, CELFBR, CELGBR, CFDBRA...
    printU4ImmOperand(MI, 3, O);
    return;
    break;
  case 5:
    // CGITAsm, CGRBAsm, CGRJAsm, CGRTAsm, CITAsm, CLFITAsm, CLGITAsm, CLGRBA...
    printU4ImmOperand(MI, 2, O);
    break;
  case 6:
    // CGRB, CLGRB, CLRB, CRB, InsnRRE, InsnSSE, VGMB, VGMF, VGMG, VGMH
    return;
    break;
  case 7:
    // CGRBAsmE, CGRBAsmH, CGRBAsmHE, CGRBAsmL, CGRBAsmLE, CGRBAsmLH, CGRBAsm...
    printBDAddrOperand(MI, 2, O);
    break;
  case 8:
    // CGRJAsmE, CGRJAsmH, CGRJAsmHE, CGRJAsmL, CGRJAsmLE, CGRJAsmLH, CGRJAsm...
    printPCRelOperand(MI, 2, O);
    return;
    break;
  case 9:
    // CPSDRdd, CPSDRds, CPSDRsd, CPSDRss
    printOperand(MI, 1, O);
    return;
    break;
  case 10:
    // CSST, ECTG
    printOperand(MI, 4, O);
    return;
    break;
  case 11:
    // InsnRIE, InsnRRF, InsnRRS, InsnRS, InsnRSE, InsnRSI, InsnRSY, InsnRXF,...
    O << ',';
    break;
  case 12:
    // LCBB, LOCAsm, LOCFHAsm, LOCGAsm, VLBB, VLLEZ, VLREP, VSTEB
    printU4ImmOperand(MI, 4, O);
    return;
    break;
  case 13:
    // MADB, MAEB, MSDB, MSEB
    printBDXAddrOperand(MI, 3, O);
    return;
    break;
  case 14:
    // MADBR, MAEBR, MSDBR, MSEBR, PLO, VERIM, VERIMB, VERIMF, VERIMG, VERIMH
    printOperand(MI, 3, O);
    break;
  case 15:
    // RISBG, RISBG32, RISBGN, RISBHG, RISBLG, RNSBG, ROSBG, RXSBG
    printU8ImmOperand(MI, 3, O);
    O << ", ";
    printU8ImmOperand(MI, 4, O);
    O << ", ";
    printU6ImmOperand(MI, 5, O);
    return;
    break;
  case 16:
    // VFTCI, VFTCIDB, WFTCIDB
    printU12ImmOperand(MI, 2, O);
    break;
  case 17:
    // VGM
    O << ", ";
    printU4ImmOperand(MI, 3, O);
    return;
    break;
  case 18:
    // VLEB
    printU4ImmOperand(MI, 5, O);
    return;
    break;
  case 19:
    // VLEF
    printU2ImmOperand(MI, 5, O);
    return;
    break;
  case 20:
    // VLEG
    printU1ImmOperand(MI, 5, O);
    return;
    break;
  case 21:
    // VLEH
    printU3ImmOperand(MI, 5, O);
    return;
    break;
  case 22:
    // VLEIF
    printU2ImmOperand(MI, 3, O);
    return;
    break;
  case 23:
    // VLEIG
    printU1ImmOperand(MI, 3, O);
    return;
    break;
  case 24:
    // VLEIH
    printU3ImmOperand(MI, 3, O);
    return;
    break;
  case 25:
    // VREP, VREPB, VREPF, VREPG, VREPH
    printU16ImmOperand(MI, 2, O);
    break;
  case 26:
    // VSTEF
    printU2ImmOperand(MI, 4, O);
    return;
    break;
  case 27:
    // VSTEG
    printU1ImmOperand(MI, 4, O);
    return;
    break;
  case 28:
    // VSTEH
    printU3ImmOperand(MI, 4, O);
    return;
    break;
  }


  // Fragment 5 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 39) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // AGRK, ALGRK, ALRK, ARK, BXH, BXHG, BXLE, BXLEG, CDS, CDSG, CDSY, CGIBA...
    return;
    break;
  case 1:
    // CGRBAsm, CGRJAsm, CLGRBAsm, CLGRJAsm, CLRBAsm, CLRJAsm, CRBAsm, CRJAsm...
    O << ", ";
    break;
  case 2:
    // InsnRIE, InsnRSI
    printPCRelOperand(MI, 3, O);
    return;
    break;
  case 3:
    // InsnRRF
    printOperand(MI, 3, O);
    O << ',';
    printU4ImmOperand(MI, 4, O);
    return;
    break;
  case 4:
    // InsnRRS
    printU4ImmOperand(MI, 3, O);
    O << ',';
    printBDAddrOperand(MI, 4, O);
    return;
    break;
  case 5:
    // InsnRS, InsnRSE, InsnRSY
    printBDAddrOperand(MI, 3, O);
    return;
    break;
  case 6:
    // InsnRXF
    printBDXAddrOperand(MI, 3, O);
    return;
    break;
  case 7:
    // InsnSSF
    printOperand(MI, 5, O);
    return;
    break;
  }


  // Fragment 6 encoded into 4 bits for 9 unique commands.
  switch ((Bits >> 42) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // CGRBAsm, CLGRBAsm, CLRBAsm, CRBAsm
    printBDAddrOperand(MI, 3, O);
    return;
    break;
  case 1:
    // CGRJAsm, CLGRJAsm, CLRJAsm, CRJAsm
    printPCRelOperand(MI, 3, O);
    return;
    break;
  case 2:
    // PLO
    printBDAddrOperand(MI, 4, O);
    return;
    break;
  case 3:
    // VA, VACC, VAVG, VAVGL, VCDG, VCDGB, VCDLG, VCDLGB, VCEQ, VCGD, VCGDB, ...
    printU4ImmOperand(MI, 3, O);
    break;
  case 4:
    // VAC, VACCC, VACCCQ, VACQ, VFMA, VFMADB, VFMS, VFMSDB, VGFMA, VGFMAB, V...
    printOperand(MI, 3, O);
    break;
  case 5:
    // VERIM, VERIMB, VERIMF, VERIMG, VERIMH
    printU8ImmOperand(MI, 4, O);
    break;
  case 6:
    // VERLL, VESL, VESRA, VESRL, VLGV
    printU4ImmOperand(MI, 4, O);
    return;
    break;
  case 7:
    // VLVG
    printU4ImmOperand(MI, 5, O);
    return;
    break;
  case 8:
    // VSLDB
    printU8ImmOperand(MI, 3, O);
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 46) & 1) {
    // VAC, VACCC, VCDG, VCDLG, VCEQ, VCGD, VCH, VCHL, VCLGD, VERIM, VFA, VFA...
    O << ", ";
  } else {
    // VA, VACC, VACCCQ, VACQ, VAVG, VAVGL, VCDGB, VCDLGB, VCGDB, VCLGDB, VER...
    return;
  }


  // Fragment 8 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 47) & 1) {
    // VERIM
    printU4ImmOperand(MI, 5, O);
    return;
  } else {
    // VAC, VACCC, VCDG, VCDLG, VCEQ, VCGD, VCH, VCHL, VCLGD, VFA, VFAE, VFCE...
    printU4ImmOperand(MI, 4, O);
  }


  // Fragment 9 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 48) & 1) {
    // VFCE, VFCH, VFCHE, VFMA, VFMS, VSTRC
    O << ", ";
    printU4ImmOperand(MI, 5, O);
    return;
  } else {
    // VAC, VACCC, VCDG, VCDLG, VCEQ, VCGD, VCH, VCHL, VCLGD, VFA, VFAE, VFD,...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *SystemZInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 178 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'a', '1', '0', 0,
  /* 4 */ 'f', '1', '0', 0,
  /* 8 */ 'r', '1', '0', 0,
  /* 12 */ 'v', '1', '0', 0,
  /* 16 */ 'v', '2', '0', 0,
  /* 20 */ 'v', '3', '0', 0,
  /* 24 */ 'a', '0', 0,
  /* 27 */ 'f', '0', 0,
  /* 30 */ 'r', '0', 0,
  /* 33 */ 'v', '0', 0,
  /* 36 */ 'a', '1', '1', 0,
  /* 40 */ 'f', '1', '1', 0,
  /* 44 */ 'r', '1', '1', 0,
  /* 48 */ 'v', '1', '1', 0,
  /* 52 */ 'v', '2', '1', 0,
  /* 56 */ 'v', '3', '1', 0,
  /* 60 */ 'a', '1', 0,
  /* 63 */ 'f', '1', 0,
  /* 66 */ 'r', '1', 0,
  /* 69 */ 'v', '1', 0,
  /* 72 */ 'a', '1', '2', 0,
  /* 76 */ 'f', '1', '2', 0,
  /* 80 */ 'r', '1', '2', 0,
  /* 84 */ 'v', '1', '2', 0,
  /* 88 */ 'v', '2', '2', 0,
  /* 92 */ 'a', '2', 0,
  /* 95 */ 'f', '2', 0,
  /* 98 */ 'r', '2', 0,
  /* 101 */ 'v', '2', 0,
  /* 104 */ 'a', '1', '3', 0,
  /* 108 */ 'f', '1', '3', 0,
  /* 112 */ 'r', '1', '3', 0,
  /* 116 */ 'v', '1', '3', 0,
  /* 120 */ 'v', '2', '3', 0,
  /* 124 */ 'a', '3', 0,
  /* 127 */ 'f', '3', 0,
  /* 130 */ 'r', '3', 0,
  /* 133 */ 'v', '3', 0,
  /* 136 */ 'a', '1', '4', 0,
  /* 140 */ 'f', '1', '4', 0,
  /* 144 */ 'r', '1', '4', 0,
  /* 148 */ 'v', '1', '4', 0,
  /* 152 */ 'v', '2', '4', 0,
  /* 156 */ 'a', '4', 0,
  /* 159 */ 'f', '4', 0,
  /* 162 */ 'r', '4', 0,
  /* 165 */ 'v', '4', 0,
  /* 168 */ 'a', '1', '5', 0,
  /* 172 */ 'f', '1', '5', 0,
  /* 176 */ 'r', '1', '5', 0,
  /* 180 */ 'v', '1', '5', 0,
  /* 184 */ 'v', '2', '5', 0,
  /* 188 */ 'a', '5', 0,
  /* 191 */ 'f', '5', 0,
  /* 194 */ 'r', '5', 0,
  /* 197 */ 'v', '5', 0,
  /* 200 */ 'v', '1', '6', 0,
  /* 204 */ 'v', '2', '6', 0,
  /* 208 */ 'a', '6', 0,
  /* 211 */ 'f', '6', 0,
  /* 214 */ 'r', '6', 0,
  /* 217 */ 'v', '6', 0,
  /* 220 */ 'v', '1', '7', 0,
  /* 224 */ 'v', '2', '7', 0,
  /* 228 */ 'a', '7', 0,
  /* 231 */ 'f', '7', 0,
  /* 234 */ 'r', '7', 0,
  /* 237 */ 'v', '7', 0,
  /* 240 */ 'v', '1', '8', 0,
  /* 244 */ 'v', '2', '8', 0,
  /* 248 */ 'a', '8', 0,
  /* 251 */ 'f', '8', 0,
  /* 254 */ 'r', '8', 0,
  /* 257 */ 'v', '8', 0,
  /* 260 */ 'v', '1', '9', 0,
  /* 264 */ 'v', '2', '9', 0,
  /* 268 */ 'a', '9', 0,
  /* 271 */ 'f', '9', 0,
  /* 274 */ 'r', '9', 0,
  /* 277 */ 'v', '9', 0,
  /* 280 */ 'c', 'c', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    280, 24, 60, 92, 124, 156, 188, 208, 228, 248, 268, 0, 36, 72, 
    104, 136, 168, 33, 69, 101, 133, 165, 197, 217, 237, 257, 277, 12, 
    48, 84, 116, 148, 180, 200, 220, 240, 260, 16, 52, 88, 120, 152, 
    184, 204, 224, 244, 264, 20, 56, 27, 63, 95, 127, 159, 191, 211, 
    231, 251, 271, 4, 40, 76, 108, 140, 172, 200, 220, 240, 260, 16, 
    52, 88, 120, 152, 184, 204, 224, 244, 264, 20, 56, 27, 63, 159, 
    191, 251, 271, 76, 108, 27, 63, 95, 127, 159, 191, 211, 231, 251, 
    271, 4, 40, 76, 108, 140, 172, 200, 220, 240, 260, 16, 52, 88, 
    120, 152, 184, 204, 224, 244, 264, 20, 56, 30, 66, 98, 130, 162, 
    194, 214, 234, 254, 274, 8, 44, 80, 112, 144, 176, 30, 66, 98, 
    130, 162, 194, 214, 234, 254, 274, 8, 44, 80, 112, 144, 176, 30, 
    66, 98, 130, 162, 194, 214, 234, 254, 274, 8, 44, 80, 112, 144, 
    176, 30, 98, 162, 214, 254, 8, 80, 144, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool SystemZInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case SystemZ::VFAE:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (VFAE VR128:$V1, VR128:$V2, VR128:$V3, imm32zx4:$M4, 0)
      AsmString = "vfae	$\x01, $\x02, $\x03, $\xFF\x04\x01";
      break;
    }
    return false;
  case SystemZ::VFAEB:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (VFAEB VR128:$V1, VR128:$V2, VR128:$V3, 0)
      AsmString = "vfaeb	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case SystemZ::VFAEBS:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (VFAEBS VR128:$V1, VR128:$V2, VR128:$V3, 0)
      AsmString = "vfaebs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case SystemZ::VFAEF:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (VFAEF VR128:$V1, VR128:$V2, VR128:$V3, 0)
      AsmString = "vfaef	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case SystemZ::VFAEFS:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (VFAEFS VR128:$V1, VR128:$V2, VR128:$V3, 0)
      AsmString = "vfaefs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case SystemZ::VFAEH:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (VFAEH VR128:$V1, VR128:$V2, VR128:$V3, 0)
      AsmString = "vfaeh	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case SystemZ::VFAEHS:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (VFAEHS VR128:$V1, VR128:$V2, VR128:$V3, 0)
      AsmString = "vfaehs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case SystemZ::VFAEZB:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (VFAEZB VR128:$V1, VR128:$V2, VR128:$V3, 0)
      AsmString = "vfaezb	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case SystemZ::VFAEZBS:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (VFAEZBS VR128:$V1, VR128:$V2, VR128:$V3, 0)
      AsmString = "vfaezbs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case SystemZ::VFAEZF:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (VFAEZF VR128:$V1, VR128:$V2, VR128:$V3, 0)
      AsmString = "vfaezf	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case SystemZ::VFAEZFS:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (VFAEZFS VR128:$V1, VR128:$V2, VR128:$V3, 0)
      AsmString = "vfaezfs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case SystemZ::VFAEZH:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (VFAEZH VR128:$V1, VR128:$V2, VR128:$V3, 0)
      AsmString = "vfaezh	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case SystemZ::VFAEZHS:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (VFAEZHS VR128:$V1, VR128:$V2, VR128:$V3, 0)
      AsmString = "vfaezhs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case SystemZ::VFEE:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (VFEE VR128:$V1, VR128:$V2, VR128:$V3, imm32zx4:$M4, 0)
      AsmString = "vfee	$\x01, $\x02, $\x03, $\xFF\x04\x01";
      break;
    }
    return false;
  case SystemZ::VFEEB:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (VFEEB VR128:$V1, VR128:$V2, VR128:$V3, 0)
      AsmString = "vfeeb	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case SystemZ::VFEEF:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (VFEEF VR128:$V1, VR128:$V2, VR128:$V3, 0)
      AsmString = "vfeef	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case SystemZ::VFEEH:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (VFEEH VR128:$V1, VR128:$V2, VR128:$V3, 0)
      AsmString = "vfeeh	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case SystemZ::VFENE:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (VFENE VR128:$V1, VR128:$V2, VR128:$V3, imm32zx4:$M4, 0)
      AsmString = "vfene	$\x01, $\x02, $\x03, $\xFF\x04\x01";
      break;
    }
    return false;
  case SystemZ::VFENEB:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (VFENEB VR128:$V1, VR128:$V2, VR128:$V3, 0)
      AsmString = "vfeneb	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case SystemZ::VFENEF:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (VFENEF VR128:$V1, VR128:$V2, VR128:$V3, 0)
      AsmString = "vfenef	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case SystemZ::VFENEH:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (VFENEH VR128:$V1, VR128:$V2, VR128:$V3, 0)
      AsmString = "vfeneh	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case SystemZ::VISTR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (VISTR VR128:$V1, VR128:$V2, imm32zx4:$M3, 0)
      AsmString = "vistr	$\x01, $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case SystemZ::VISTRB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (VISTRB VR128:$V1, VR128:$V2, 0)
      AsmString = "vistrb	$\x01, $\x02";
      break;
    }
    return false;
  case SystemZ::VISTRF:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (VISTRF VR128:$V1, VR128:$V2, 0)
      AsmString = "vistrf	$\x01, $\x02";
      break;
    }
    return false;
  case SystemZ::VISTRH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (VISTRH VR128:$V1, VR128:$V2, 0)
      AsmString = "vistrh	$\x01, $\x02";
      break;
    }
    return false;
  case SystemZ::VSTRC:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(3).getReg()) &&
        MI->getOperand(5).isImm() &&
        MI->getOperand(5).getImm() == 0) {
      // (VSTRC VR128:$V1, VR128:$V2, VR128:$V3, VR128:$V4, imm32zx4:$M5, 0)
      AsmString = "vstrc	$\x01, $\x02, $\x03, $\x04, $\xFF\x05\x01";
      break;
    }
    return false;
  case SystemZ::VSTRCB:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(3).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (VSTRCB VR128:$V1, VR128:$V2, VR128:$V3, VR128:$V4, 0)
      AsmString = "vstrcb	$\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  case SystemZ::VSTRCBS:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(3).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (VSTRCBS VR128:$V1, VR128:$V2, VR128:$V3, VR128:$V4, 0)
      AsmString = "vstrcbs	$\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  case SystemZ::VSTRCF:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(3).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (VSTRCF VR128:$V1, VR128:$V2, VR128:$V3, VR128:$V4, 0)
      AsmString = "vstrcf	$\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  case SystemZ::VSTRCFS:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(3).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (VSTRCFS VR128:$V1, VR128:$V2, VR128:$V3, VR128:$V4, 0)
      AsmString = "vstrcfs	$\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  case SystemZ::VSTRCH:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(3).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (VSTRCH VR128:$V1, VR128:$V2, VR128:$V3, VR128:$V4, 0)
      AsmString = "vstrch	$\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  case SystemZ::VSTRCHS:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(3).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (VSTRCHS VR128:$V1, VR128:$V2, VR128:$V3, VR128:$V4, 0)
      AsmString = "vstrchs	$\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  case SystemZ::VSTRCZB:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(3).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (VSTRCZB VR128:$V1, VR128:$V2, VR128:$V3, VR128:$V4, 0)
      AsmString = "vstrczb	$\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  case SystemZ::VSTRCZBS:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(3).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (VSTRCZBS VR128:$V1, VR128:$V2, VR128:$V3, VR128:$V4, 0)
      AsmString = "vstrczbs	$\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  case SystemZ::VSTRCZF:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(3).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (VSTRCZF VR128:$V1, VR128:$V2, VR128:$V3, VR128:$V4, 0)
      AsmString = "vstrczf	$\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  case SystemZ::VSTRCZFS:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(3).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (VSTRCZFS VR128:$V1, VR128:$V2, VR128:$V3, VR128:$V4, 0)
      AsmString = "vstrczfs	$\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  case SystemZ::VSTRCZH:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(3).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (VSTRCZH VR128:$V1, VR128:$V2, VR128:$V3, VR128:$V4, 0)
      AsmString = "vstrczh	$\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  case SystemZ::VSTRCZHS:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(SystemZ::VR128BitRegClassID).contains(MI->getOperand(3).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (VSTRCZHS VR128:$V1, VR128:$V2, VR128:$V3, VR128:$V4, 0)
      AsmString = "vstrczhs	$\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t')      OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void SystemZInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printU4ImmOperand(MI, OpIdx, OS);
    break;
  }
}

#endif // PRINT_ALIAS_INSTR
