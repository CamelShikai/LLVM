/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Target Register Enum Values                                                *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM

namespace llvm {

class MCRegisterClass;
extern const MCRegisterClass RISCVMCRegisterClasses[];

namespace RISCV {
enum {
  NoRegister,
  X0_32 = 1,
  X0_64 = 2,
  X1_32 = 3,
  X1_64 = 4,
  X2_32 = 5,
  X2_64 = 6,
  X3_32 = 7,
  X3_64 = 8,
  X4_32 = 9,
  X4_64 = 10,
  X5_32 = 11,
  X5_64 = 12,
  X6_32 = 13,
  X6_64 = 14,
  X7_32 = 15,
  X7_64 = 16,
  X8_32 = 17,
  X8_64 = 18,
  X9_32 = 19,
  X9_64 = 20,
  X10_32 = 21,
  X10_64 = 22,
  X11_32 = 23,
  X11_64 = 24,
  X12_32 = 25,
  X12_64 = 26,
  X13_32 = 27,
  X13_64 = 28,
  X14_32 = 29,
  X14_64 = 30,
  X15_32 = 31,
  X15_64 = 32,
  X16_32 = 33,
  X16_64 = 34,
  X17_32 = 35,
  X17_64 = 36,
  X18_32 = 37,
  X18_64 = 38,
  X19_32 = 39,
  X19_64 = 40,
  X20_32 = 41,
  X20_64 = 42,
  X21_32 = 43,
  X21_64 = 44,
  X22_32 = 45,
  X22_64 = 46,
  X23_32 = 47,
  X23_64 = 48,
  X24_32 = 49,
  X24_64 = 50,
  X25_32 = 51,
  X25_64 = 52,
  X26_32 = 53,
  X26_64 = 54,
  X27_32 = 55,
  X27_64 = 56,
  X28_32 = 57,
  X28_64 = 58,
  X29_32 = 59,
  X29_64 = 60,
  X30_32 = 61,
  X30_64 = 62,
  X31_32 = 63,
  X31_64 = 64,
  NUM_TARGET_REGS 	// 65
};
} // end namespace RISCV

// Register classes

namespace RISCV {
enum {
  GPRRegClassID = 0,
  GPR64RegClassID = 1,

  };
} // end namespace RISCV


// Register alternate name indices

namespace RISCV {
enum {
  ABIRegAltName,	// 0
  NoRegAltName,	// 1
  NUM_TARGET_REG_ALT_NAMES = 2
};
} // end namespace RISCV


// Subregister indices

namespace RISCV {
enum {
  NoSubRegister,
  sub_32,	// 1
  NUM_TARGET_SUBREGS
};
} // end namespace RISCV

} // end namespace llvm

#endif // GET_REGINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* MC Register Information                                                    *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC

namespace llvm {

extern const MCPhysReg RISCVRegDiffLists[] = {
  /* 0 */ 0, 0,
  /* 2 */ 1, 0,
  /* 4 */ 2, 0,
  /* 6 */ 3, 0,
  /* 8 */ 4, 0,
  /* 10 */ 5, 0,
  /* 12 */ 6, 0,
  /* 14 */ 7, 0,
  /* 16 */ 8, 0,
  /* 18 */ 9, 0,
  /* 20 */ 10, 0,
  /* 22 */ 11, 0,
  /* 24 */ 12, 0,
  /* 26 */ 13, 0,
  /* 28 */ 14, 0,
  /* 30 */ 15, 0,
  /* 32 */ 16, 0,
  /* 34 */ 17, 0,
  /* 36 */ 18, 0,
  /* 38 */ 19, 0,
  /* 40 */ 20, 0,
  /* 42 */ 21, 0,
  /* 44 */ 22, 0,
  /* 46 */ 23, 0,
  /* 48 */ 24, 0,
  /* 50 */ 25, 0,
  /* 52 */ 26, 0,
  /* 54 */ 27, 0,
  /* 56 */ 28, 0,
  /* 58 */ 29, 0,
  /* 60 */ 30, 0,
  /* 62 */ 31, 0,
  /* 64 */ 65535, 0,
};

extern const LaneBitmask RISCVLaneMaskLists[] = {
  /* 0 */ LaneBitmask(0x00000000), LaneBitmask::getAll(),
  /* 2 */ LaneBitmask(0x00000001), LaneBitmask::getAll(),
};

extern const uint16_t RISCVSubRegIdxLists[] = {
  /* 0 */ 1, 0,
};

extern const MCRegisterInfo::SubRegCoveredBits RISCVSubRegIdxRanges[] = {
  { 65535, 65535 },
  { 0, 32 },	// sub_32
};

extern const char RISCVRegStrings[] = {
  /* 0 */ 'X', '1', '0', '_', '3', '2', 0,
  /* 7 */ 'X', '2', '0', '_', '3', '2', 0,
  /* 14 */ 'X', '3', '0', '_', '3', '2', 0,
  /* 21 */ 'X', '0', '_', '3', '2', 0,
  /* 27 */ 'X', '1', '1', '_', '3', '2', 0,
  /* 34 */ 'X', '2', '1', '_', '3', '2', 0,
  /* 41 */ 'X', '3', '1', '_', '3', '2', 0,
  /* 48 */ 'X', '1', '_', '3', '2', 0,
  /* 54 */ 'X', '1', '2', '_', '3', '2', 0,
  /* 61 */ 'X', '2', '2', '_', '3', '2', 0,
  /* 68 */ 'X', '2', '_', '3', '2', 0,
  /* 74 */ 'X', '1', '3', '_', '3', '2', 0,
  /* 81 */ 'X', '2', '3', '_', '3', '2', 0,
  /* 88 */ 'X', '3', '_', '3', '2', 0,
  /* 94 */ 'X', '1', '4', '_', '3', '2', 0,
  /* 101 */ 'X', '2', '4', '_', '3', '2', 0,
  /* 108 */ 'X', '4', '_', '3', '2', 0,
  /* 114 */ 'X', '1', '5', '_', '3', '2', 0,
  /* 121 */ 'X', '2', '5', '_', '3', '2', 0,
  /* 128 */ 'X', '5', '_', '3', '2', 0,
  /* 134 */ 'X', '1', '6', '_', '3', '2', 0,
  /* 141 */ 'X', '2', '6', '_', '3', '2', 0,
  /* 148 */ 'X', '6', '_', '3', '2', 0,
  /* 154 */ 'X', '1', '7', '_', '3', '2', 0,
  /* 161 */ 'X', '2', '7', '_', '3', '2', 0,
  /* 168 */ 'X', '7', '_', '3', '2', 0,
  /* 174 */ 'X', '1', '8', '_', '3', '2', 0,
  /* 181 */ 'X', '2', '8', '_', '3', '2', 0,
  /* 188 */ 'X', '8', '_', '3', '2', 0,
  /* 194 */ 'X', '1', '9', '_', '3', '2', 0,
  /* 201 */ 'X', '2', '9', '_', '3', '2', 0,
  /* 208 */ 'X', '9', '_', '3', '2', 0,
  /* 214 */ 'X', '1', '0', '_', '6', '4', 0,
  /* 221 */ 'X', '2', '0', '_', '6', '4', 0,
  /* 228 */ 'X', '3', '0', '_', '6', '4', 0,
  /* 235 */ 'X', '0', '_', '6', '4', 0,
  /* 241 */ 'X', '1', '1', '_', '6', '4', 0,
  /* 248 */ 'X', '2', '1', '_', '6', '4', 0,
  /* 255 */ 'X', '3', '1', '_', '6', '4', 0,
  /* 262 */ 'X', '1', '_', '6', '4', 0,
  /* 268 */ 'X', '1', '2', '_', '6', '4', 0,
  /* 275 */ 'X', '2', '2', '_', '6', '4', 0,
  /* 282 */ 'X', '2', '_', '6', '4', 0,
  /* 288 */ 'X', '1', '3', '_', '6', '4', 0,
  /* 295 */ 'X', '2', '3', '_', '6', '4', 0,
  /* 302 */ 'X', '3', '_', '6', '4', 0,
  /* 308 */ 'X', '1', '4', '_', '6', '4', 0,
  /* 315 */ 'X', '2', '4', '_', '6', '4', 0,
  /* 322 */ 'X', '4', '_', '6', '4', 0,
  /* 328 */ 'X', '1', '5', '_', '6', '4', 0,
  /* 335 */ 'X', '2', '5', '_', '6', '4', 0,
  /* 342 */ 'X', '5', '_', '6', '4', 0,
  /* 348 */ 'X', '1', '6', '_', '6', '4', 0,
  /* 355 */ 'X', '2', '6', '_', '6', '4', 0,
  /* 362 */ 'X', '6', '_', '6', '4', 0,
  /* 368 */ 'X', '1', '7', '_', '6', '4', 0,
  /* 375 */ 'X', '2', '7', '_', '6', '4', 0,
  /* 382 */ 'X', '7', '_', '6', '4', 0,
  /* 388 */ 'X', '1', '8', '_', '6', '4', 0,
  /* 395 */ 'X', '2', '8', '_', '6', '4', 0,
  /* 402 */ 'X', '8', '_', '6', '4', 0,
  /* 408 */ 'X', '1', '9', '_', '6', '4', 0,
  /* 415 */ 'X', '2', '9', '_', '6', '4', 0,
  /* 422 */ 'X', '9', '_', '6', '4', 0,
};

extern const MCRegisterDesc RISCVRegDesc[] = { // Descriptors
  { 6, 0, 0, 0, 0, 0 },
  { 21, 1, 2, 1, 0, 0 },
  { 235, 64, 1, 0, 0, 2 },
  { 48, 1, 2, 1, 32, 0 },
  { 262, 64, 1, 0, 32, 2 },
  { 68, 1, 2, 1, 64, 0 },
  { 282, 64, 1, 0, 64, 2 },
  { 88, 1, 2, 1, 96, 0 },
  { 302, 64, 1, 0, 96, 2 },
  { 108, 1, 2, 1, 128, 0 },
  { 322, 64, 1, 0, 128, 2 },
  { 128, 1, 2, 1, 160, 0 },
  { 342, 64, 1, 0, 160, 2 },
  { 148, 1, 2, 1, 192, 0 },
  { 362, 64, 1, 0, 192, 2 },
  { 168, 1, 2, 1, 224, 0 },
  { 382, 64, 1, 0, 224, 2 },
  { 188, 1, 2, 1, 256, 0 },
  { 402, 64, 1, 0, 256, 2 },
  { 208, 1, 2, 1, 288, 0 },
  { 422, 64, 1, 0, 288, 2 },
  { 0, 1, 2, 1, 320, 0 },
  { 214, 64, 1, 0, 320, 2 },
  { 27, 1, 2, 1, 352, 0 },
  { 241, 64, 1, 0, 352, 2 },
  { 54, 1, 2, 1, 384, 0 },
  { 268, 64, 1, 0, 384, 2 },
  { 74, 1, 2, 1, 416, 0 },
  { 288, 64, 1, 0, 416, 2 },
  { 94, 1, 2, 1, 448, 0 },
  { 308, 64, 1, 0, 448, 2 },
  { 114, 1, 2, 1, 480, 0 },
  { 328, 64, 1, 0, 480, 2 },
  { 134, 1, 2, 1, 512, 0 },
  { 348, 64, 1, 0, 512, 2 },
  { 154, 1, 2, 1, 544, 0 },
  { 368, 64, 1, 0, 544, 2 },
  { 174, 1, 2, 1, 576, 0 },
  { 388, 64, 1, 0, 576, 2 },
  { 194, 1, 2, 1, 608, 0 },
  { 408, 64, 1, 0, 608, 2 },
  { 7, 1, 2, 1, 640, 0 },
  { 221, 64, 1, 0, 640, 2 },
  { 34, 1, 2, 1, 672, 0 },
  { 248, 64, 1, 0, 672, 2 },
  { 61, 1, 2, 1, 704, 0 },
  { 275, 64, 1, 0, 704, 2 },
  { 81, 1, 2, 1, 736, 0 },
  { 295, 64, 1, 0, 736, 2 },
  { 101, 1, 2, 1, 768, 0 },
  { 315, 64, 1, 0, 768, 2 },
  { 121, 1, 2, 1, 800, 0 },
  { 335, 64, 1, 0, 800, 2 },
  { 141, 1, 2, 1, 832, 0 },
  { 355, 64, 1, 0, 832, 2 },
  { 161, 1, 2, 1, 864, 0 },
  { 375, 64, 1, 0, 864, 2 },
  { 181, 1, 2, 1, 896, 0 },
  { 395, 64, 1, 0, 896, 2 },
  { 201, 1, 2, 1, 928, 0 },
  { 415, 64, 1, 0, 928, 2 },
  { 14, 1, 2, 1, 960, 0 },
  { 228, 64, 1, 0, 960, 2 },
  { 41, 1, 2, 1, 992, 0 },
  { 255, 64, 1, 0, 992, 2 },
};

extern const MCPhysReg RISCVRegUnitRoots[][2] = {
  { RISCV::X0_32 },
  { RISCV::X1_32 },
  { RISCV::X2_32 },
  { RISCV::X3_32 },
  { RISCV::X4_32 },
  { RISCV::X5_32 },
  { RISCV::X6_32 },
  { RISCV::X7_32 },
  { RISCV::X8_32 },
  { RISCV::X9_32 },
  { RISCV::X10_32 },
  { RISCV::X11_32 },
  { RISCV::X12_32 },
  { RISCV::X13_32 },
  { RISCV::X14_32 },
  { RISCV::X15_32 },
  { RISCV::X16_32 },
  { RISCV::X17_32 },
  { RISCV::X18_32 },
  { RISCV::X19_32 },
  { RISCV::X20_32 },
  { RISCV::X21_32 },
  { RISCV::X22_32 },
  { RISCV::X23_32 },
  { RISCV::X24_32 },
  { RISCV::X25_32 },
  { RISCV::X26_32 },
  { RISCV::X27_32 },
  { RISCV::X28_32 },
  { RISCV::X29_32 },
  { RISCV::X30_32 },
  { RISCV::X31_32 },
};

namespace {     // Register classes...
  // GPR Register Class...
  const MCPhysReg GPR[] = {
    RISCV::X0_32, RISCV::X1_32, RISCV::X2_32, RISCV::X3_32, RISCV::X4_32, RISCV::X5_32, RISCV::X6_32, RISCV::X7_32, RISCV::X8_32, RISCV::X9_32, RISCV::X10_32, RISCV::X11_32, RISCV::X12_32, RISCV::X13_32, RISCV::X14_32, RISCV::X15_32, RISCV::X16_32, RISCV::X17_32, RISCV::X18_32, RISCV::X19_32, RISCV::X20_32, RISCV::X21_32, RISCV::X22_32, RISCV::X23_32, RISCV::X24_32, RISCV::X25_32, RISCV::X26_32, RISCV::X27_32, RISCV::X28_32, RISCV::X29_32, RISCV::X30_32, RISCV::X31_32, 
  };

  // GPR Bit set.
  const uint8_t GPRBits[] = {
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  };

  // GPR64 Register Class...
  const MCPhysReg GPR64[] = {
    RISCV::X0_64, RISCV::X1_64, RISCV::X2_64, RISCV::X3_64, RISCV::X4_64, RISCV::X5_64, RISCV::X6_64, RISCV::X7_64, RISCV::X8_64, RISCV::X9_64, RISCV::X10_64, RISCV::X11_64, RISCV::X12_64, RISCV::X13_64, RISCV::X14_64, RISCV::X15_64, RISCV::X16_64, RISCV::X17_64, RISCV::X18_64, RISCV::X19_64, RISCV::X20_64, RISCV::X21_64, RISCV::X22_64, RISCV::X23_64, RISCV::X24_64, RISCV::X25_64, RISCV::X26_64, RISCV::X27_64, RISCV::X28_64, RISCV::X29_64, RISCV::X30_64, RISCV::X31_64, 
  };

  // GPR64 Bit set.
  const uint8_t GPR64Bits[] = {
    0x54, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x01, 
  };

} // end anonymous namespace

extern const char RISCVRegClassStrings[] = {
  /* 0 */ 'G', 'P', 'R', '6', '4', 0,
  /* 6 */ 'G', 'P', 'R', 0,
};

extern const MCRegisterClass RISCVMCRegisterClasses[] = {
  { GPR, GPRBits, 6, 32, sizeof(GPRBits), RISCV::GPRRegClassID, 4, 4, 1, true },
  { GPR64, GPR64Bits, 0, 32, sizeof(GPR64Bits), RISCV::GPR64RegClassID, 8, 8, 1, true },
};

// RISCV Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair RISCVDwarfFlavour0Dwarf2L[] = {
  { 0U, RISCV::X0_64 },
  { 1U, RISCV::X1_64 },
  { 2U, RISCV::X2_64 },
  { 3U, RISCV::X3_64 },
  { 4U, RISCV::X4_64 },
  { 5U, RISCV::X5_64 },
  { 6U, RISCV::X6_64 },
  { 7U, RISCV::X7_64 },
  { 8U, RISCV::X8_64 },
  { 9U, RISCV::X9_64 },
  { 10U, RISCV::X10_64 },
  { 11U, RISCV::X11_64 },
  { 12U, RISCV::X12_64 },
  { 13U, RISCV::X13_64 },
  { 14U, RISCV::X14_64 },
  { 15U, RISCV::X15_64 },
  { 16U, RISCV::X16_64 },
  { 17U, RISCV::X17_64 },
  { 18U, RISCV::X18_64 },
  { 19U, RISCV::X19_64 },
  { 20U, RISCV::X20_64 },
  { 21U, RISCV::X21_64 },
  { 22U, RISCV::X22_64 },
  { 23U, RISCV::X23_64 },
  { 24U, RISCV::X24_64 },
  { 25U, RISCV::X25_64 },
  { 26U, RISCV::X26_64 },
  { 27U, RISCV::X27_64 },
  { 28U, RISCV::X28_64 },
  { 29U, RISCV::X29_64 },
  { 30U, RISCV::X30_64 },
  { 31U, RISCV::X31_64 },
};
extern const unsigned RISCVDwarfFlavour0Dwarf2LSize = array_lengthof(RISCVDwarfFlavour0Dwarf2L);

extern const MCRegisterInfo::DwarfLLVMRegPair RISCVEHFlavour0Dwarf2L[] = {
  { 0U, RISCV::X0_64 },
  { 1U, RISCV::X1_64 },
  { 2U, RISCV::X2_64 },
  { 3U, RISCV::X3_64 },
  { 4U, RISCV::X4_64 },
  { 5U, RISCV::X5_64 },
  { 6U, RISCV::X6_64 },
  { 7U, RISCV::X7_64 },
  { 8U, RISCV::X8_64 },
  { 9U, RISCV::X9_64 },
  { 10U, RISCV::X10_64 },
  { 11U, RISCV::X11_64 },
  { 12U, RISCV::X12_64 },
  { 13U, RISCV::X13_64 },
  { 14U, RISCV::X14_64 },
  { 15U, RISCV::X15_64 },
  { 16U, RISCV::X16_64 },
  { 17U, RISCV::X17_64 },
  { 18U, RISCV::X18_64 },
  { 19U, RISCV::X19_64 },
  { 20U, RISCV::X20_64 },
  { 21U, RISCV::X21_64 },
  { 22U, RISCV::X22_64 },
  { 23U, RISCV::X23_64 },
  { 24U, RISCV::X24_64 },
  { 25U, RISCV::X25_64 },
  { 26U, RISCV::X26_64 },
  { 27U, RISCV::X27_64 },
  { 28U, RISCV::X28_64 },
  { 29U, RISCV::X29_64 },
  { 30U, RISCV::X30_64 },
  { 31U, RISCV::X31_64 },
};
extern const unsigned RISCVEHFlavour0Dwarf2LSize = array_lengthof(RISCVEHFlavour0Dwarf2L);

extern const MCRegisterInfo::DwarfLLVMRegPair RISCVDwarfFlavour0L2Dwarf[] = {
  { RISCV::X0_32, 0U },
  { RISCV::X0_64, 0U },
  { RISCV::X1_32, 1U },
  { RISCV::X1_64, 1U },
  { RISCV::X2_32, 2U },
  { RISCV::X2_64, 2U },
  { RISCV::X3_32, 3U },
  { RISCV::X3_64, 3U },
  { RISCV::X4_32, 4U },
  { RISCV::X4_64, 4U },
  { RISCV::X5_32, 5U },
  { RISCV::X5_64, 5U },
  { RISCV::X6_32, 6U },
  { RISCV::X6_64, 6U },
  { RISCV::X7_32, 7U },
  { RISCV::X7_64, 7U },
  { RISCV::X8_32, 8U },
  { RISCV::X8_64, 8U },
  { RISCV::X9_32, 9U },
  { RISCV::X9_64, 9U },
  { RISCV::X10_32, 10U },
  { RISCV::X10_64, 10U },
  { RISCV::X11_32, 11U },
  { RISCV::X11_64, 11U },
  { RISCV::X12_32, 12U },
  { RISCV::X12_64, 12U },
  { RISCV::X13_32, 13U },
  { RISCV::X13_64, 13U },
  { RISCV::X14_32, 14U },
  { RISCV::X14_64, 14U },
  { RISCV::X15_32, 15U },
  { RISCV::X15_64, 15U },
  { RISCV::X16_32, 16U },
  { RISCV::X16_64, 16U },
  { RISCV::X17_32, 17U },
  { RISCV::X17_64, 17U },
  { RISCV::X18_32, 18U },
  { RISCV::X18_64, 18U },
  { RISCV::X19_32, 19U },
  { RISCV::X19_64, 19U },
  { RISCV::X20_32, 20U },
  { RISCV::X20_64, 20U },
  { RISCV::X21_32, 21U },
  { RISCV::X21_64, 21U },
  { RISCV::X22_32, 22U },
  { RISCV::X22_64, 22U },
  { RISCV::X23_32, 23U },
  { RISCV::X23_64, 23U },
  { RISCV::X24_32, 24U },
  { RISCV::X24_64, 24U },
  { RISCV::X25_32, 25U },
  { RISCV::X25_64, 25U },
  { RISCV::X26_32, 26U },
  { RISCV::X26_64, 26U },
  { RISCV::X27_32, 27U },
  { RISCV::X27_64, 27U },
  { RISCV::X28_32, 28U },
  { RISCV::X28_64, 28U },
  { RISCV::X29_32, 29U },
  { RISCV::X29_64, 29U },
  { RISCV::X30_32, 30U },
  { RISCV::X30_64, 30U },
  { RISCV::X31_32, 31U },
  { RISCV::X31_64, 31U },
};
extern const unsigned RISCVDwarfFlavour0L2DwarfSize = array_lengthof(RISCVDwarfFlavour0L2Dwarf);

extern const MCRegisterInfo::DwarfLLVMRegPair RISCVEHFlavour0L2Dwarf[] = {
  { RISCV::X0_32, 0U },
  { RISCV::X0_64, 0U },
  { RISCV::X1_32, 1U },
  { RISCV::X1_64, 1U },
  { RISCV::X2_32, 2U },
  { RISCV::X2_64, 2U },
  { RISCV::X3_32, 3U },
  { RISCV::X3_64, 3U },
  { RISCV::X4_32, 4U },
  { RISCV::X4_64, 4U },
  { RISCV::X5_32, 5U },
  { RISCV::X5_64, 5U },
  { RISCV::X6_32, 6U },
  { RISCV::X6_64, 6U },
  { RISCV::X7_32, 7U },
  { RISCV::X7_64, 7U },
  { RISCV::X8_32, 8U },
  { RISCV::X8_64, 8U },
  { RISCV::X9_32, 9U },
  { RISCV::X9_64, 9U },
  { RISCV::X10_32, 10U },
  { RISCV::X10_64, 10U },
  { RISCV::X11_32, 11U },
  { RISCV::X11_64, 11U },
  { RISCV::X12_32, 12U },
  { RISCV::X12_64, 12U },
  { RISCV::X13_32, 13U },
  { RISCV::X13_64, 13U },
  { RISCV::X14_32, 14U },
  { RISCV::X14_64, 14U },
  { RISCV::X15_32, 15U },
  { RISCV::X15_64, 15U },
  { RISCV::X16_32, 16U },
  { RISCV::X16_64, 16U },
  { RISCV::X17_32, 17U },
  { RISCV::X17_64, 17U },
  { RISCV::X18_32, 18U },
  { RISCV::X18_64, 18U },
  { RISCV::X19_32, 19U },
  { RISCV::X19_64, 19U },
  { RISCV::X20_32, 20U },
  { RISCV::X20_64, 20U },
  { RISCV::X21_32, 21U },
  { RISCV::X21_64, 21U },
  { RISCV::X22_32, 22U },
  { RISCV::X22_64, 22U },
  { RISCV::X23_32, 23U },
  { RISCV::X23_64, 23U },
  { RISCV::X24_32, 24U },
  { RISCV::X24_64, 24U },
  { RISCV::X25_32, 25U },
  { RISCV::X25_64, 25U },
  { RISCV::X26_32, 26U },
  { RISCV::X26_64, 26U },
  { RISCV::X27_32, 27U },
  { RISCV::X27_64, 27U },
  { RISCV::X28_32, 28U },
  { RISCV::X28_64, 28U },
  { RISCV::X29_32, 29U },
  { RISCV::X29_64, 29U },
  { RISCV::X30_32, 30U },
  { RISCV::X30_64, 30U },
  { RISCV::X31_32, 31U },
  { RISCV::X31_64, 31U },
};
extern const unsigned RISCVEHFlavour0L2DwarfSize = array_lengthof(RISCVEHFlavour0L2Dwarf);

extern const uint16_t RISCVRegEncodingTable[] = {
  0,
  0,
  0,
  1,
  1,
  2,
  2,
  3,
  3,
  4,
  4,
  5,
  5,
  6,
  6,
  7,
  7,
  8,
  8,
  9,
  9,
  10,
  10,
  11,
  11,
  12,
  12,
  13,
  13,
  14,
  14,
  15,
  15,
  16,
  16,
  17,
  17,
  18,
  18,
  19,
  19,
  20,
  20,
  21,
  21,
  22,
  22,
  23,
  23,
  24,
  24,
  25,
  25,
  26,
  26,
  27,
  27,
  28,
  28,
  29,
  29,
  30,
  30,
  31,
  31,
};
static inline void InitRISCVMCRegisterInfo(MCRegisterInfo *RI, unsigned RA, unsigned DwarfFlavour = 0, unsigned EHFlavour = 0, unsigned PC = 0) {
  RI->InitMCRegisterInfo(RISCVRegDesc, 65, RA, PC, RISCVMCRegisterClasses, 2, RISCVRegUnitRoots, 32, RISCVRegDiffLists, RISCVLaneMaskLists, RISCVRegStrings, RISCVRegClassStrings, RISCVSubRegIdxLists, 2,
RISCVSubRegIdxRanges, RISCVRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(RISCVDwarfFlavour0Dwarf2L, RISCVDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(RISCVEHFlavour0Dwarf2L, RISCVEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(RISCVDwarfFlavour0L2Dwarf, RISCVDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(RISCVEHFlavour0L2Dwarf, RISCVEHFlavour0L2DwarfSize, true);
    break;
  }
}

} // end namespace llvm

#endif // GET_REGINFO_MC_DESC

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Register Information Header Fragment                                       *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_HEADER
#undef GET_REGINFO_HEADER

#include "llvm/Target/TargetRegisterInfo.h"

namespace llvm {

class RISCVFrameLowering;

struct RISCVGenRegisterInfo : public TargetRegisterInfo {
  explicit RISCVGenRegisterInfo(unsigned RA, unsigned D = 0, unsigned E = 0, unsigned PC = 0);
  unsigned composeSubRegIndicesImpl(unsigned, unsigned) const override;
  LaneBitmask composeSubRegIndexLaneMaskImpl(unsigned, LaneBitmask) const override;
  LaneBitmask reverseComposeSubRegIndexLaneMaskImpl(unsigned, LaneBitmask) const override;
  const TargetRegisterClass *getSubClassWithSubReg(const TargetRegisterClass*, unsigned) const override;
  const RegClassWeight &getRegClassWeight(const TargetRegisterClass *RC) const override;
  unsigned getRegUnitWeight(unsigned RegUnit) const override;
  unsigned getNumRegPressureSets() const override;
  const char *getRegPressureSetName(unsigned Idx) const override;
  unsigned getRegPressureSetLimit(const MachineFunction &MF, unsigned Idx) const override;
  const int *getRegClassPressureSets(const TargetRegisterClass *RC) const override;
  const int *getRegUnitPressureSets(unsigned RegUnit) const override;
  ArrayRef<const char *> getRegMaskNames() const override;
  ArrayRef<const uint32_t *> getRegMasks() const override;
  /// Devirtualized TargetFrameLowering.
  static const RISCVFrameLowering *getFrameLowering(
      const MachineFunction &MF);
};

namespace RISCV { // Register classes
  extern const TargetRegisterClass GPRRegClass;
  extern const TargetRegisterClass GPR64RegClass;
} // end namespace RISCV

} // end namespace llvm

#endif // GET_REGINFO_HEADER

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Target Register and Register Classes Information                           *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_TARGET_DESC
#undef GET_REGINFO_TARGET_DESC

namespace llvm {

extern const MCRegisterClass RISCVMCRegisterClasses[];

static const MVT::SimpleValueType VTLists[] = {
  /* 0 */ MVT::i32, MVT::Other,
  /* 2 */ MVT::i64, MVT::Other,
};

static const char *const SubRegIndexNameTable[] = { "sub_32", "" };


static const LaneBitmask SubRegIndexLaneMaskTable[] = {
  LaneBitmask::getAll(),
  LaneBitmask(0x00000001), // sub_32
 };



static const TargetRegisterClass *const NullRegClasses[] = { nullptr };

static const uint32_t GPRSubClassMask[] = {
  0x00000001, 
  0x00000002, // sub_32
};

static const uint32_t GPR64SubClassMask[] = {
  0x00000002, 
};

static const uint16_t SuperRegIdxSeqs[] = {
  /* 0 */ 1, 0,
};


namespace RISCV {   // Register class instances
  extern const TargetRegisterClass GPRRegClass = {
    &RISCVMCRegisterClasses[GPRRegClassID],
    VTLists + 0,
    GPRSubClassMask,
    SuperRegIdxSeqs + 0,
    LaneBitmask(0x00000001),
    0,
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass GPR64RegClass = {
    &RISCVMCRegisterClasses[GPR64RegClassID],
    VTLists + 2,
    GPR64SubClassMask,
    SuperRegIdxSeqs + 1,
    LaneBitmask(0x00000001),
    0,
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

} // end namespace RISCV

namespace {
  const TargetRegisterClass* const RegisterClasses[] = {
    &RISCV::GPRRegClass,
    &RISCV::GPR64RegClass,
  };
} // end anonymous namespace

static const TargetRegisterInfoDesc RISCVRegInfoDesc[] = { // Extra Descriptors
  { 0, false },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
  { 0, true },
};
unsigned RISCVGenRegisterInfo::composeSubRegIndicesImpl(unsigned IdxA, unsigned IdxB) const {
  static const uint8_t Rows[1][1] = {
    { 0, },
  };

  --IdxA; assert(IdxA < 1);
  --IdxB; assert(IdxB < 1);
  return Rows[0][IdxB];
}

  struct MaskRolOp {
    LaneBitmask Mask;
    uint8_t  RotateLeft;
  };
  static const MaskRolOp LaneMaskComposeSequences[] = {
    { LaneBitmask(0xFFFFFFFF),  0 }, { LaneBitmask::getNone(), 0 }  // Sequence 0
  };
  static const MaskRolOp *const CompositeSequences[] = {
    &LaneMaskComposeSequences[0] // to sub_32
  };

LaneBitmask RISCVGenRegisterInfo::composeSubRegIndexLaneMaskImpl(unsigned IdxA, LaneBitmask LaneMask) const {
  --IdxA; assert(IdxA < 1 && "Subregister index out of bounds");
  LaneBitmask Result;
  for (const MaskRolOp *Ops = CompositeSequences[IdxA]; Ops->Mask.any(); ++Ops) {
    LaneBitmask::Type M = LaneMask.getAsInteger() & Ops->Mask.getAsInteger();
    if (unsigned S = Ops->RotateLeft)
      Result |= LaneBitmask((M << S) | (M >> (LaneBitmask::BitWidth - S)));
    else
      Result |= LaneBitmask(M);
  }
  return Result;
}

LaneBitmask RISCVGenRegisterInfo::reverseComposeSubRegIndexLaneMaskImpl(unsigned IdxA,  LaneBitmask LaneMask) const {
  LaneMask &= getSubRegIndexLaneMask(IdxA);
  --IdxA; assert(IdxA < 1 && "Subregister index out of bounds");
  LaneBitmask Result;
  for (const MaskRolOp *Ops = CompositeSequences[IdxA]; Ops->Mask.any(); ++Ops) {
    LaneBitmask::Type M = LaneMask.getAsInteger();
    if (unsigned S = Ops->RotateLeft)
      Result |= LaneBitmask((M >> S) | (M << (LaneBitmask::BitWidth - S)));
    else
      Result |= LaneBitmask(M);
  }
  return Result;
}

const TargetRegisterClass *RISCVGenRegisterInfo::getSubClassWithSubReg(const TargetRegisterClass *RC, unsigned Idx) const {
  static const uint8_t Table[2][1] = {
    {	// GPR
      0,	// sub_32
    },
    {	// GPR64
      2,	// sub_32 -> GPR64
    },
  };
  assert(RC && "Missing regclass");
  if (!Idx) return RC;
  --Idx;
  assert(Idx < 1 && "Bad subreg");
  unsigned TV = Table[RC->getID()][Idx];
  return TV ? getRegClass(TV - 1) : nullptr;
}

/// Get the weight in units of pressure for this register class.
const RegClassWeight &RISCVGenRegisterInfo::
getRegClassWeight(const TargetRegisterClass *RC) const {
  static const RegClassWeight RCWeightTable[] = {
    {1, 32},  	// GPR
    {1, 32},  	// GPR64
  };
  return RCWeightTable[RC->getID()];
}

/// Get the weight in units of pressure for this register unit.
unsigned RISCVGenRegisterInfo::
getRegUnitWeight(unsigned RegUnit) const {
  assert(RegUnit < 32 && "invalid register unit");
  // All register units have unit weight.
  return 1;
}


// Get the number of dimensions of register pressure.
unsigned RISCVGenRegisterInfo::getNumRegPressureSets() const {
  return 1;
}

// Get the name of this register unit pressure set.
const char *RISCVGenRegisterInfo::
getRegPressureSetName(unsigned Idx) const {
  static const char *const PressureNameTable[] = {
    "GPR",
  };
  return PressureNameTable[Idx];
}

// Get the register unit pressure limit for this dimension.
// This limit must be adjusted dynamically for reserved registers.
unsigned RISCVGenRegisterInfo::
getRegPressureSetLimit(const MachineFunction &MF, unsigned Idx) const {
  static const uint8_t PressureLimitTable[] = {
    32,  	// 0: GPR
  };
  return PressureLimitTable[Idx];
}

/// Table of pressure sets per register class or unit.
static const int RCSetsTable[] = {
  /* 0 */ 0, -1,
};

/// Get the dimensions of register pressure impacted by this register class.
/// Returns a -1 terminated array of pressure set IDs
const int* RISCVGenRegisterInfo::
getRegClassPressureSets(const TargetRegisterClass *RC) const {
  static const uint8_t RCSetStartTable[] = {
    0,0,};
  return &RCSetsTable[RCSetStartTable[RC->getID()]];
}

/// Get the dimensions of register pressure impacted by this register unit.
/// Returns a -1 terminated array of pressure set IDs
const int* RISCVGenRegisterInfo::
getRegUnitPressureSets(unsigned RegUnit) const {
  assert(RegUnit < 32 && "invalid register unit");
  static const uint8_t RUSetStartTable[] = {
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
  return &RCSetsTable[RUSetStartTable[RegUnit]];
}

extern const MCRegisterDesc RISCVRegDesc[];
extern const MCPhysReg RISCVRegDiffLists[];
extern const LaneBitmask RISCVLaneMaskLists[];
extern const char RISCVRegStrings[];
extern const char RISCVRegClassStrings[];
extern const MCPhysReg RISCVRegUnitRoots[][2];
extern const uint16_t RISCVSubRegIdxLists[];
extern const MCRegisterInfo::SubRegCoveredBits RISCVSubRegIdxRanges[];
extern const uint16_t RISCVRegEncodingTable[];
// RISCV Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair RISCVDwarfFlavour0Dwarf2L[];
extern const unsigned RISCVDwarfFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair RISCVEHFlavour0Dwarf2L[];
extern const unsigned RISCVEHFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair RISCVDwarfFlavour0L2Dwarf[];
extern const unsigned RISCVDwarfFlavour0L2DwarfSize;

extern const MCRegisterInfo::DwarfLLVMRegPair RISCVEHFlavour0L2Dwarf[];
extern const unsigned RISCVEHFlavour0L2DwarfSize;

RISCVGenRegisterInfo::
RISCVGenRegisterInfo(unsigned RA, unsigned DwarfFlavour, unsigned EHFlavour, unsigned PC)
  : TargetRegisterInfo(RISCVRegInfoDesc, RegisterClasses, RegisterClasses+2,
             SubRegIndexNameTable, SubRegIndexLaneMaskTable, LaneBitmask(0xFFFFFFFE)) {
  InitMCRegisterInfo(RISCVRegDesc, 65, RA, PC,
                     RISCVMCRegisterClasses, 2,
                     RISCVRegUnitRoots,
                     32,
                     RISCVRegDiffLists,
                     RISCVLaneMaskLists,
                     RISCVRegStrings,
                     RISCVRegClassStrings,
                     RISCVSubRegIdxLists,
                     2,
                     RISCVSubRegIdxRanges,
                     RISCVRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(RISCVDwarfFlavour0Dwarf2L, RISCVDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(RISCVEHFlavour0Dwarf2L, RISCVEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(RISCVDwarfFlavour0L2Dwarf, RISCVDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(RISCVEHFlavour0L2Dwarf, RISCVEHFlavour0L2DwarfSize, true);
    break;
  }
}



ArrayRef<const uint32_t *> RISCVGenRegisterInfo::getRegMasks() const {
  return None;
}

ArrayRef<const char *> RISCVGenRegisterInfo::getRegMaskNames() const {
  return None;
}

const RISCVFrameLowering *
RISCVGenRegisterInfo::getFrameLowering(const MachineFunction &MF) {
  return static_cast<const RISCVFrameLowering *>(
      MF.getSubtarget().getFrameLowering());
}

} // end namespace llvm

#endif // GET_REGINFO_TARGET_DESC

