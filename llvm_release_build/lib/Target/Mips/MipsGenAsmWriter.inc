/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void MipsInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ 'j', 'a', 'l', 'r', 'c', 32, 9, 0,
  /* 8 */ 'd', 'm', 'f', 'c', '0', 9, 0,
  /* 15 */ 'm', 'f', 'h', 'c', '0', 9, 0,
  /* 22 */ 'm', 't', 'h', 'c', '0', 9, 0,
  /* 29 */ 'd', 'm', 't', 'c', '0', 9, 0,
  /* 36 */ 'v', 'm', 'm', '0', 9, 0,
  /* 42 */ 'm', 't', 'm', '0', 9, 0,
  /* 48 */ 'm', 't', 'p', '0', 9, 0,
  /* 54 */ 'b', 'b', 'i', 't', '0', 9, 0,
  /* 61 */ 'l', 'd', 'c', '1', 9, 0,
  /* 67 */ 's', 'd', 'c', '1', 9, 0,
  /* 73 */ 'c', 'f', 'c', '1', 9, 0,
  /* 79 */ 'd', 'm', 'f', 'c', '1', 9, 0,
  /* 86 */ 'm', 'f', 'h', 'c', '1', 9, 0,
  /* 93 */ 'm', 't', 'h', 'c', '1', 9, 0,
  /* 100 */ 'c', 't', 'c', '1', 9, 0,
  /* 106 */ 'd', 'm', 't', 'c', '1', 9, 0,
  /* 113 */ 'l', 'w', 'c', '1', 9, 0,
  /* 119 */ 's', 'w', 'c', '1', 9, 0,
  /* 125 */ 'l', 'd', 'x', 'c', '1', 9, 0,
  /* 132 */ 's', 'd', 'x', 'c', '1', 9, 0,
  /* 139 */ 'l', 'u', 'x', 'c', '1', 9, 0,
  /* 146 */ 's', 'u', 'x', 'c', '1', 9, 0,
  /* 153 */ 'l', 'w', 'x', 'c', '1', 9, 0,
  /* 160 */ 's', 'w', 'x', 'c', '1', 9, 0,
  /* 167 */ 'm', 't', 'm', '1', 9, 0,
  /* 173 */ 'm', 't', 'p', '1', 9, 0,
  /* 179 */ 'b', 'b', 'i', 't', '1', 9, 0,
  /* 186 */ 'b', 'b', 'i', 't', '0', '3', '2', 9, 0,
  /* 195 */ 'b', 'b', 'i', 't', '1', '3', '2', 9, 0,
  /* 204 */ 'd', 's', 'r', 'a', '3', '2', 9, 0,
  /* 212 */ 'b', 'p', 'o', 's', 'g', 'e', '3', '2', 9, 0,
  /* 222 */ 'd', 's', 'l', 'l', '3', '2', 9, 0,
  /* 230 */ 'd', 's', 'r', 'l', '3', '2', 9, 0,
  /* 238 */ 'l', 'w', 'm', '3', '2', 9, 0,
  /* 245 */ 's', 'w', 'm', '3', '2', 9, 0,
  /* 252 */ 'd', 'r', 'o', 't', 'r', '3', '2', 9, 0,
  /* 261 */ 'c', 'i', 'n', 's', '3', '2', 9, 0,
  /* 269 */ 'e', 'x', 't', 's', '3', '2', 9, 0,
  /* 277 */ 'l', 'd', 'c', '2', 9, 0,
  /* 283 */ 's', 'd', 'c', '2', 9, 0,
  /* 289 */ 'c', 'f', 'c', '2', 9, 0,
  /* 295 */ 'd', 'm', 'f', 'c', '2', 9, 0,
  /* 302 */ 'm', 'f', 'h', 'c', '2', 9, 0,
  /* 309 */ 'm', 't', 'h', 'c', '2', 9, 0,
  /* 316 */ 'c', 't', 'c', '2', 9, 0,
  /* 322 */ 'd', 'm', 't', 'c', '2', 9, 0,
  /* 329 */ 'l', 'w', 'c', '2', 9, 0,
  /* 335 */ 's', 'w', 'c', '2', 9, 0,
  /* 341 */ 'm', 't', 'm', '2', 9, 0,
  /* 347 */ 'm', 't', 'p', '2', 9, 0,
  /* 353 */ 'a', 'd', 'd', 'i', 'u', 'r', '2', 9, 0,
  /* 362 */ 'l', 'd', 'c', '3', 9, 0,
  /* 368 */ 's', 'd', 'c', '3', 9, 0,
  /* 374 */ 'l', 'w', 'c', '3', 9, 0,
  /* 380 */ 's', 'w', 'c', '3', 9, 0,
  /* 386 */ 'a', 'd', 'd', 'i', 'u', 's', '5', 9, 0,
  /* 395 */ 's', 'b', '1', '6', 9, 0,
  /* 401 */ 'b', 'c', '1', '6', 9, 0,
  /* 407 */ 'j', 'r', 'c', '1', '6', 9, 0,
  /* 414 */ 'b', 'n', 'e', 'z', 'c', '1', '6', 9, 0,
  /* 423 */ 'b', 'e', 'q', 'z', 'c', '1', '6', 9, 0,
  /* 432 */ 'a', 'n', 'd', '1', '6', 9, 0,
  /* 439 */ 'm', 'o', 'v', 'e', '1', '6', 9, 0,
  /* 447 */ 's', 'h', '1', '6', 9, 0,
  /* 453 */ 'a', 'n', 'd', 'i', '1', '6', 9, 0,
  /* 461 */ 'l', 'i', '1', '6', 9, 0,
  /* 467 */ 'b', 'r', 'e', 'a', 'k', '1', '6', 9, 0,
  /* 476 */ 's', 'l', 'l', '1', '6', 9, 0,
  /* 483 */ 's', 'r', 'l', '1', '6', 9, 0,
  /* 490 */ 'l', 'w', 'm', '1', '6', 9, 0,
  /* 497 */ 's', 'w', 'm', '1', '6', 9, 0,
  /* 504 */ 's', 'd', 'b', 'b', 'p', '1', '6', 9, 0,
  /* 513 */ 'j', 'r', '1', '6', 9, 0,
  /* 519 */ 'x', 'o', 'r', '1', '6', 9, 0,
  /* 526 */ 'j', 'a', 'l', 'r', 's', '1', '6', 9, 0,
  /* 535 */ 'n', 'o', 't', '1', '6', 9, 0,
  /* 542 */ 'l', 'b', 'u', '1', '6', 9, 0,
  /* 549 */ 's', 'u', 'b', 'u', '1', '6', 9, 0,
  /* 557 */ 'a', 'd', 'd', 'u', '1', '6', 9, 0,
  /* 565 */ 'l', 'h', 'u', '1', '6', 9, 0,
  /* 572 */ 'l', 'w', '1', '6', 9, 0,
  /* 578 */ 's', 'w', '1', '6', 9, 0,
  /* 584 */ 'b', 'n', 'e', 'z', '1', '6', 9, 0,
  /* 592 */ 'b', 'e', 'q', 'z', '1', '6', 9, 0,
  /* 600 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 616 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 633 */ 'd', 'l', 'a', 9, 0,
  /* 638 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 654 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 671 */ 'd', 's', 'r', 'a', 9, 0,
  /* 677 */ 'd', 'l', 's', 'a', 9, 0,
  /* 683 */ 'c', 'f', 'c', 'm', 's', 'a', 9, 0,
  /* 691 */ 'c', 't', 'c', 'm', 's', 'a', 9, 0,
  /* 699 */ 'a', 'd', 'd', '_', 'a', '.', 'b', 9, 0,
  /* 708 */ 'm', 'i', 'n', '_', 'a', '.', 'b', 9, 0,
  /* 717 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'b', 9, 0,
  /* 727 */ 'm', 'a', 'x', '_', 'a', '.', 'b', 9, 0,
  /* 736 */ 's', 'r', 'a', '.', 'b', 9, 0,
  /* 743 */ 'n', 'l', 'o', 'c', '.', 'b', 9, 0,
  /* 751 */ 'n', 'l', 'z', 'c', '.', 'b', 9, 0,
  /* 759 */ 's', 'l', 'd', '.', 'b', 9, 0,
  /* 766 */ 'p', 'c', 'k', 'o', 'd', '.', 'b', 9, 0,
  /* 775 */ 'i', 'l', 'v', 'o', 'd', '.', 'b', 9, 0,
  /* 784 */ 'i', 'n', 's', 'v', 'e', '.', 'b', 9, 0,
  /* 793 */ 'v', 's', 'h', 'f', '.', 'b', 9, 0,
  /* 801 */ 'b', 'n', 'e', 'g', '.', 'b', 9, 0,
  /* 809 */ 's', 'r', 'a', 'i', '.', 'b', 9, 0,
  /* 817 */ 's', 'l', 'd', 'i', '.', 'b', 9, 0,
  /* 825 */ 'a', 'n', 'd', 'i', '.', 'b', 9, 0,
  /* 833 */ 'b', 'n', 'e', 'g', 'i', '.', 'b', 9, 0,
  /* 842 */ 'b', 's', 'e', 'l', 'i', '.', 'b', 9, 0,
  /* 851 */ 's', 'l', 'l', 'i', '.', 'b', 9, 0,
  /* 859 */ 's', 'r', 'l', 'i', '.', 'b', 9, 0,
  /* 867 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'b', 9, 0,
  /* 877 */ 'c', 'e', 'q', 'i', '.', 'b', 9, 0,
  /* 885 */ 's', 'r', 'a', 'r', 'i', '.', 'b', 9, 0,
  /* 894 */ 'b', 'c', 'l', 'r', 'i', '.', 'b', 9, 0,
  /* 903 */ 's', 'r', 'l', 'r', 'i', '.', 'b', 9, 0,
  /* 912 */ 'n', 'o', 'r', 'i', '.', 'b', 9, 0,
  /* 920 */ 'x', 'o', 'r', 'i', '.', 'b', 9, 0,
  /* 928 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'b', 9, 0,
  /* 938 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'b', 9, 0,
  /* 948 */ 'b', 's', 'e', 't', 'i', '.', 'b', 9, 0,
  /* 957 */ 's', 'u', 'b', 'v', 'i', '.', 'b', 9, 0,
  /* 966 */ 'a', 'd', 'd', 'v', 'i', '.', 'b', 9, 0,
  /* 975 */ 'b', 'm', 'z', 'i', '.', 'b', 9, 0,
  /* 983 */ 'b', 'm', 'n', 'z', 'i', '.', 'b', 9, 0,
  /* 992 */ 'f', 'i', 'l', 'l', '.', 'b', 9, 0,
  /* 1000 */ 's', 'l', 'l', '.', 'b', 9, 0,
  /* 1007 */ 's', 'r', 'l', '.', 'b', 9, 0,
  /* 1014 */ 'b', 'i', 'n', 's', 'l', '.', 'b', 9, 0,
  /* 1023 */ 'i', 'l', 'v', 'l', '.', 'b', 9, 0,
  /* 1031 */ 'c', 'e', 'q', '.', 'b', 9, 0,
  /* 1038 */ 's', 'r', 'a', 'r', '.', 'b', 9, 0,
  /* 1046 */ 'b', 'c', 'l', 'r', '.', 'b', 9, 0,
  /* 1054 */ 's', 'r', 'l', 'r', '.', 'b', 9, 0,
  /* 1062 */ 'b', 'i', 'n', 's', 'r', '.', 'b', 9, 0,
  /* 1071 */ 'i', 'l', 'v', 'r', '.', 'b', 9, 0,
  /* 1079 */ 'a', 's', 'u', 'b', '_', 's', '.', 'b', 9, 0,
  /* 1089 */ 'm', 'o', 'd', '_', 's', '.', 'b', 9, 0,
  /* 1098 */ 'c', 'l', 'e', '_', 's', '.', 'b', 9, 0,
  /* 1107 */ 'a', 'v', 'e', '_', 's', '.', 'b', 9, 0,
  /* 1116 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1126 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1136 */ 'c', 'l', 't', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1146 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1156 */ 'm', 'i', 'n', '_', 's', '.', 'b', 9, 0,
  /* 1165 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'b', 9, 0,
  /* 1175 */ 's', 'u', 'b', 's', '_', 's', '.', 'b', 9, 0,
  /* 1185 */ 'a', 'd', 'd', 's', '_', 's', '.', 'b', 9, 0,
  /* 1195 */ 's', 'a', 't', '_', 's', '.', 'b', 9, 0,
  /* 1204 */ 'c', 'l', 't', '_', 's', '.', 'b', 9, 0,
  /* 1213 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'b', 9, 0,
  /* 1225 */ 'd', 'i', 'v', '_', 's', '.', 'b', 9, 0,
  /* 1234 */ 'm', 'a', 'x', '_', 's', '.', 'b', 9, 0,
  /* 1243 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'b', 9, 0,
  /* 1253 */ 's', 'p', 'l', 'a', 't', '.', 'b', 9, 0,
  /* 1262 */ 'b', 's', 'e', 't', '.', 'b', 9, 0,
  /* 1270 */ 'p', 'c', 'n', 't', '.', 'b', 9, 0,
  /* 1278 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'b', 9, 0,
  /* 1288 */ 's', 't', '.', 'b', 9, 0,
  /* 1294 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'b', 9, 0,
  /* 1304 */ 'm', 'o', 'd', '_', 'u', '.', 'b', 9, 0,
  /* 1313 */ 'c', 'l', 'e', '_', 'u', '.', 'b', 9, 0,
  /* 1322 */ 'a', 'v', 'e', '_', 'u', '.', 'b', 9, 0,
  /* 1331 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1341 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1351 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1361 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1371 */ 'm', 'i', 'n', '_', 'u', '.', 'b', 9, 0,
  /* 1380 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'b', 9, 0,
  /* 1390 */ 's', 'u', 'b', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1400 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1410 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1422 */ 's', 'a', 't', '_', 'u', '.', 'b', 9, 0,
  /* 1431 */ 'c', 'l', 't', '_', 'u', '.', 'b', 9, 0,
  /* 1440 */ 'd', 'i', 'v', '_', 'u', '.', 'b', 9, 0,
  /* 1449 */ 'm', 'a', 'x', '_', 'u', '.', 'b', 9, 0,
  /* 1458 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'b', 9, 0,
  /* 1468 */ 'm', 's', 'u', 'b', 'v', '.', 'b', 9, 0,
  /* 1477 */ 'm', 'a', 'd', 'd', 'v', '.', 'b', 9, 0,
  /* 1486 */ 'p', 'c', 'k', 'e', 'v', '.', 'b', 9, 0,
  /* 1495 */ 'i', 'l', 'v', 'e', 'v', '.', 'b', 9, 0,
  /* 1504 */ 'm', 'u', 'l', 'v', '.', 'b', 9, 0,
  /* 1512 */ 'b', 'z', '.', 'b', 9, 0,
  /* 1518 */ 'b', 'n', 'z', '.', 'b', 9, 0,
  /* 1525 */ 's', 'e', 'b', 9, 0,
  /* 1530 */ 'j', 'a', 'l', 'r', 'c', '.', 'h', 'b', 9, 0,
  /* 1540 */ 'j', 'r', '.', 'h', 'b', 9, 0,
  /* 1547 */ 'j', 'a', 'l', 'r', '.', 'h', 'b', 9, 0,
  /* 1556 */ 'l', 'b', 9, 0,
  /* 1560 */ 's', 'h', 'r', 'a', '.', 'q', 'b', 9, 0,
  /* 1569 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1583 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1596 */ 'c', 'm', 'p', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1608 */ 's', 'u', 'b', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 1618 */ 'a', 'd', 'd', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 1628 */ 'p', 'i', 'c', 'k', '.', 'q', 'b', 9, 0,
  /* 1637 */ 's', 'h', 'l', 'l', '.', 'q', 'b', 9, 0,
  /* 1646 */ 'r', 'e', 'p', 'l', '.', 'q', 'b', 9, 0,
  /* 1655 */ 's', 'h', 'r', 'l', '.', 'q', 'b', 9, 0,
  /* 1664 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1678 */ 'c', 'm', 'p', 'g', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1691 */ 'c', 'm', 'p', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1703 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1714 */ 's', 'u', 'b', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1726 */ 'a', 'd', 'd', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1738 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1750 */ 'a', 'b', 's', 'q', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1761 */ 's', 'u', 'b', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1772 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1783 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1797 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1810 */ 'c', 'm', 'p', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1822 */ 's', 'u', 'b', 'u', '.', 'q', 'b', 9, 0,
  /* 1831 */ 'a', 'd', 'd', 'u', '.', 'q', 'b', 9, 0,
  /* 1840 */ 's', 'h', 'r', 'a', 'v', '.', 'q', 'b', 9, 0,
  /* 1850 */ 's', 'h', 'l', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1860 */ 'r', 'e', 'p', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1870 */ 's', 'h', 'r', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1880 */ 'r', 'a', 'd', 'd', 'u', '.', 'w', '.', 'q', 'b', 9, 0,
  /* 1892 */ 's', 'b', 9, 0,
  /* 1896 */ 'm', 'o', 'd', 's', 'u', 'b', 9, 0,
  /* 1904 */ 'm', 's', 'u', 'b', 9, 0,
  /* 1910 */ 'b', 'p', 'o', 's', 'g', 'e', '3', '2', 'c', 9, 0,
  /* 1921 */ 'b', 'c', 9, 0,
  /* 1925 */ 'b', 'g', 'e', 'c', 9, 0,
  /* 1931 */ 'b', 'n', 'e', 'c', 9, 0,
  /* 1937 */ 'j', 'i', 'c', 9, 0,
  /* 1942 */ 'b', 'a', 'l', 'c', 9, 0,
  /* 1948 */ 'j', 'i', 'a', 'l', 'c', 9, 0,
  /* 1955 */ 'b', 'g', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1964 */ 'b', 'l', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1973 */ 'b', 'n', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1982 */ 'b', 'e', 'q', 'z', 'a', 'l', 'c', 9, 0,
  /* 1991 */ 'b', 'g', 't', 'z', 'a', 'l', 'c', 9, 0,
  /* 2000 */ 'b', 'l', 't', 'z', 'a', 'l', 'c', 9, 0,
  /* 2009 */ 's', 'y', 'n', 'c', 9, 0,
  /* 2015 */ 'l', 'd', 'p', 'c', 9, 0,
  /* 2021 */ 'a', 'u', 'i', 'p', 'c', 9, 0,
  /* 2028 */ 'a', 'l', 'u', 'i', 'p', 'c', 9, 0,
  /* 2036 */ 'a', 'd', 'd', 'i', 'u', 'p', 'c', 9, 0,
  /* 2045 */ 'l', 'w', 'u', 'p', 'c', 9, 0,
  /* 2052 */ 'l', 'w', 'p', 'c', 9, 0,
  /* 2058 */ 'b', 'e', 'q', 'c', 9, 0,
  /* 2064 */ 'j', 'r', 'c', 9, 0,
  /* 2069 */ 'j', 'a', 'l', 'r', 'c', 9, 0,
  /* 2076 */ 'a', 'd', 'd', 's', 'c', 9, 0,
  /* 2083 */ 'b', 'l', 't', 'c', 9, 0,
  /* 2089 */ 'b', 'g', 'e', 'u', 'c', 9, 0,
  /* 2096 */ 'b', 'l', 't', 'u', 'c', 9, 0,
  /* 2103 */ 'b', 'n', 'v', 'c', 9, 0,
  /* 2109 */ 'b', 'o', 'v', 'c', 9, 0,
  /* 2115 */ 'a', 'd', 'd', 'w', 'c', 9, 0,
  /* 2122 */ 'b', 'g', 'e', 'z', 'c', 9, 0,
  /* 2129 */ 'b', 'l', 'e', 'z', 'c', 9, 0,
  /* 2136 */ 'b', 'c', '1', 'n', 'e', 'z', 'c', 9, 0,
  /* 2145 */ 'b', 'c', '2', 'n', 'e', 'z', 'c', 9, 0,
  /* 2154 */ 'b', 'n', 'e', 'z', 'c', 9, 0,
  /* 2161 */ 'b', 'c', '1', 'e', 'q', 'z', 'c', 9, 0,
  /* 2170 */ 'b', 'c', '2', 'e', 'q', 'z', 'c', 9, 0,
  /* 2179 */ 'b', 'e', 'q', 'z', 'c', 9, 0,
  /* 2186 */ 'b', 'g', 't', 'z', 'c', 9, 0,
  /* 2193 */ 'b', 'l', 't', 'z', 'c', 9, 0,
  /* 2200 */ 'f', 'l', 'o', 'g', '2', '.', 'd', 9, 0,
  /* 2209 */ 'f', 'e', 'x', 'p', '2', '.', 'd', 9, 0,
  /* 2218 */ 'a', 'd', 'd', '_', 'a', '.', 'd', 9, 0,
  /* 2227 */ 'f', 'm', 'i', 'n', '_', 'a', '.', 'd', 9, 0,
  /* 2237 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'd', 9, 0,
  /* 2247 */ 'f', 'm', 'a', 'x', '_', 'a', '.', 'd', 9, 0,
  /* 2257 */ 'm', 'i', 'n', 'a', '.', 'd', 9, 0,
  /* 2265 */ 's', 'r', 'a', '.', 'd', 9, 0,
  /* 2272 */ 'm', 'a', 'x', 'a', '.', 'd', 9, 0,
  /* 2280 */ 'f', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2288 */ 'f', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2297 */ 'n', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2306 */ 'n', 'l', 'o', 'c', '.', 'd', 9, 0,
  /* 2314 */ 'n', 'l', 'z', 'c', '.', 'd', 9, 0,
  /* 2322 */ 'f', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2330 */ 'f', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2339 */ 'n', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2348 */ 's', 'l', 'd', '.', 'd', 9, 0,
  /* 2355 */ 'p', 'c', 'k', 'o', 'd', '.', 'd', 9, 0,
  /* 2364 */ 'i', 'l', 'v', 'o', 'd', '.', 'd', 9, 0,
  /* 2373 */ 'c', '.', 'n', 'g', 'e', '.', 'd', 9, 0,
  /* 2382 */ 'c', '.', 'l', 'e', '.', 'd', 9, 0,
  /* 2390 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'd', 9, 0,
  /* 2400 */ 'f', 'c', 'l', 'e', '.', 'd', 9, 0,
  /* 2408 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 'd', 9, 0,
  /* 2418 */ 'c', '.', 'o', 'l', 'e', '.', 'd', 9, 0,
  /* 2427 */ 'c', 'm', 'p', '.', 's', 'l', 'e', '.', 'd', 9, 0,
  /* 2438 */ 'f', 's', 'l', 'e', '.', 'd', 9, 0,
  /* 2446 */ 'c', '.', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2455 */ 'c', 'm', 'p', '.', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2466 */ 'f', 'c', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2475 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2487 */ 'f', 's', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2496 */ 'f', 'c', 'n', 'e', '.', 'd', 9, 0,
  /* 2504 */ 'f', 's', 'n', 'e', '.', 'd', 9, 0,
  /* 2512 */ 'f', 'c', 'u', 'n', 'e', '.', 'd', 9, 0,
  /* 2521 */ 'f', 's', 'u', 'n', 'e', '.', 'd', 9, 0,
  /* 2530 */ 'i', 'n', 's', 'v', 'e', '.', 'd', 9, 0,
  /* 2539 */ 'c', '.', 'f', '.', 'd', 9, 0,
  /* 2546 */ 'c', 'm', 'p', '.', 'a', 'f', '.', 'd', 9, 0,
  /* 2556 */ 'f', 'c', 'a', 'f', '.', 'd', 9, 0,
  /* 2564 */ 'c', 'm', 'p', '.', 's', 'a', 'f', '.', 'd', 9, 0,
  /* 2575 */ 'f', 's', 'a', 'f', '.', 'd', 9, 0,
  /* 2583 */ 'm', 's', 'u', 'b', 'f', '.', 'd', 9, 0,
  /* 2592 */ 'm', 'a', 'd', 'd', 'f', '.', 'd', 9, 0,
  /* 2601 */ 'v', 's', 'h', 'f', '.', 'd', 9, 0,
  /* 2609 */ 'c', '.', 's', 'f', '.', 'd', 9, 0,
  /* 2617 */ 'm', 'o', 'v', 'f', '.', 'd', 9, 0,
  /* 2625 */ 'b', 'n', 'e', 'g', '.', 'd', 9, 0,
  /* 2633 */ 's', 'r', 'a', 'i', '.', 'd', 9, 0,
  /* 2641 */ 's', 'l', 'd', 'i', '.', 'd', 9, 0,
  /* 2649 */ 'b', 'n', 'e', 'g', 'i', '.', 'd', 9, 0,
  /* 2658 */ 's', 'l', 'l', 'i', '.', 'd', 9, 0,
  /* 2666 */ 's', 'r', 'l', 'i', '.', 'd', 9, 0,
  /* 2674 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'd', 9, 0,
  /* 2684 */ 'c', 'e', 'q', 'i', '.', 'd', 9, 0,
  /* 2692 */ 's', 'r', 'a', 'r', 'i', '.', 'd', 9, 0,
  /* 2701 */ 'b', 'c', 'l', 'r', 'i', '.', 'd', 9, 0,
  /* 2710 */ 's', 'r', 'l', 'r', 'i', '.', 'd', 9, 0,
  /* 2719 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'd', 9, 0,
  /* 2729 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'd', 9, 0,
  /* 2739 */ 'b', 's', 'e', 't', 'i', '.', 'd', 9, 0,
  /* 2748 */ 's', 'u', 'b', 'v', 'i', '.', 'd', 9, 0,
  /* 2757 */ 'a', 'd', 'd', 'v', 'i', '.', 'd', 9, 0,
  /* 2766 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 'd', 9, 0,
  /* 2777 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 'd', 9, 0,
  /* 2788 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 'd', 9, 0,
  /* 2798 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 'd', 9, 0,
  /* 2809 */ 'c', 'v', 't', '.', 'l', '.', 'd', 9, 0,
  /* 2818 */ 's', 'e', 'l', '.', 'd', 9, 0,
  /* 2825 */ 'c', '.', 'n', 'g', 'l', '.', 'd', 9, 0,
  /* 2834 */ 'f', 'i', 'l', 'l', '.', 'd', 9, 0,
  /* 2842 */ 's', 'l', 'l', '.', 'd', 9, 0,
  /* 2849 */ 'f', 'e', 'x', 'u', 'p', 'l', '.', 'd', 9, 0,
  /* 2859 */ 'f', 'f', 'q', 'l', '.', 'd', 9, 0,
  /* 2867 */ 's', 'r', 'l', '.', 'd', 9, 0,
  /* 2874 */ 'b', 'i', 'n', 's', 'l', '.', 'd', 9, 0,
  /* 2883 */ 'f', 'm', 'u', 'l', '.', 'd', 9, 0,
  /* 2891 */ 'i', 'l', 'v', 'l', '.', 'd', 9, 0,
  /* 2899 */ 'f', 'm', 'i', 'n', '.', 'd', 9, 0,
  /* 2907 */ 'c', '.', 'u', 'n', '.', 'd', 9, 0,
  /* 2915 */ 'c', 'm', 'p', '.', 'u', 'n', '.', 'd', 9, 0,
  /* 2925 */ 'f', 'c', 'u', 'n', '.', 'd', 9, 0,
  /* 2933 */ 'c', 'm', 'p', '.', 's', 'u', 'n', '.', 'd', 9, 0,
  /* 2944 */ 'f', 's', 'u', 'n', '.', 'd', 9, 0,
  /* 2952 */ 'm', 'o', 'v', 'n', '.', 'd', 9, 0,
  /* 2960 */ 'f', 'r', 'c', 'p', '.', 'd', 9, 0,
  /* 2968 */ 'r', 'e', 'c', 'i', 'p', '.', 'd', 9, 0,
  /* 2977 */ 'c', '.', 'e', 'q', '.', 'd', 9, 0,
  /* 2985 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'd', 9, 0,
  /* 2995 */ 'f', 'c', 'e', 'q', '.', 'd', 9, 0,
  /* 3003 */ 'c', '.', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 3012 */ 'c', 'm', 'p', '.', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 3023 */ 'f', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 3031 */ 'c', '.', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3040 */ 'c', 'm', 'p', '.', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3051 */ 'f', 'c', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3060 */ 'c', 'm', 'p', '.', 's', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3072 */ 'f', 's', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3081 */ 's', 'r', 'a', 'r', '.', 'd', 9, 0,
  /* 3089 */ 'b', 'c', 'l', 'r', '.', 'd', 9, 0,
  /* 3097 */ 's', 'r', 'l', 'r', '.', 'd', 9, 0,
  /* 3105 */ 'f', 'c', 'o', 'r', '.', 'd', 9, 0,
  /* 3113 */ 'f', 's', 'o', 'r', '.', 'd', 9, 0,
  /* 3121 */ 'f', 'e', 'x', 'u', 'p', 'r', '.', 'd', 9, 0,
  /* 3131 */ 'f', 'f', 'q', 'r', '.', 'd', 9, 0,
  /* 3139 */ 'b', 'i', 'n', 's', 'r', '.', 'd', 9, 0,
  /* 3148 */ 'i', 'l', 'v', 'r', '.', 'd', 9, 0,
  /* 3156 */ 'c', 'v', 't', '.', 's', '.', 'd', 9, 0,
  /* 3165 */ 'a', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 3175 */ 'h', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 3185 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 3196 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 's', '.', 'd', 9, 0,
  /* 3208 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3218 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3229 */ 'm', 'o', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3238 */ 'c', 'l', 'e', '_', 's', '.', 'd', 9, 0,
  /* 3247 */ 'a', 'v', 'e', '_', 's', '.', 'd', 9, 0,
  /* 3256 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3266 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3276 */ 'c', 'l', 't', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3286 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3296 */ 'm', 'i', 'n', '_', 's', '.', 'd', 9, 0,
  /* 3305 */ 'd', 'o', 't', 'p', '_', 's', '.', 'd', 9, 0,
  /* 3315 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'd', 9, 0,
  /* 3325 */ 's', 'u', 'b', 's', '_', 's', '.', 'd', 9, 0,
  /* 3335 */ 'a', 'd', 'd', 's', '_', 's', '.', 'd', 9, 0,
  /* 3345 */ 's', 'a', 't', '_', 's', '.', 'd', 9, 0,
  /* 3354 */ 'c', 'l', 't', '_', 's', '.', 'd', 9, 0,
  /* 3363 */ 'f', 'f', 'i', 'n', 't', '_', 's', '.', 'd', 9, 0,
  /* 3374 */ 'f', 't', 'i', 'n', 't', '_', 's', '.', 'd', 9, 0,
  /* 3385 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'd', 9, 0,
  /* 3397 */ 'd', 'i', 'v', '_', 's', '.', 'd', 9, 0,
  /* 3406 */ 'm', 'a', 'x', '_', 's', '.', 'd', 9, 0,
  /* 3415 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'd', 9, 0,
  /* 3425 */ 'a', 'b', 's', '.', 'd', 9, 0,
  /* 3432 */ 'f', 'c', 'l', 'a', 's', 's', '.', 'd', 9, 0,
  /* 3442 */ 's', 'p', 'l', 'a', 't', '.', 'd', 9, 0,
  /* 3451 */ 'b', 's', 'e', 't', '.', 'd', 9, 0,
  /* 3459 */ 'c', '.', 'n', 'g', 't', '.', 'd', 9, 0,
  /* 3468 */ 'c', '.', 'l', 't', '.', 'd', 9, 0,
  /* 3476 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'd', 9, 0,
  /* 3486 */ 'f', 'c', 'l', 't', '.', 'd', 9, 0,
  /* 3494 */ 'c', '.', 'o', 'l', 't', '.', 'd', 9, 0,
  /* 3503 */ 'c', 'm', 'p', '.', 's', 'l', 't', '.', 'd', 9, 0,
  /* 3514 */ 'f', 's', 'l', 't', '.', 'd', 9, 0,
  /* 3522 */ 'c', '.', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3531 */ 'c', 'm', 'p', '.', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3542 */ 'f', 'c', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3551 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3563 */ 'f', 's', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3572 */ 'p', 'c', 'n', 't', '.', 'd', 9, 0,
  /* 3580 */ 'f', 'r', 'i', 'n', 't', '.', 'd', 9, 0,
  /* 3589 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'd', 9, 0,
  /* 3599 */ 'f', 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 3608 */ 'f', 'r', 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 3618 */ 's', 't', '.', 'd', 9, 0,
  /* 3624 */ 'm', 'o', 'v', 't', '.', 'd', 9, 0,
  /* 3632 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3642 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3652 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3663 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 'u', '.', 'd', 9, 0,
  /* 3675 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3685 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3696 */ 'm', 'o', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3705 */ 'c', 'l', 'e', '_', 'u', '.', 'd', 9, 0,
  /* 3714 */ 'a', 'v', 'e', '_', 'u', '.', 'd', 9, 0,
  /* 3723 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3733 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3743 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3753 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3763 */ 'm', 'i', 'n', '_', 'u', '.', 'd', 9, 0,
  /* 3772 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'd', 9, 0,
  /* 3782 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'd', 9, 0,
  /* 3792 */ 's', 'u', 'b', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3802 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3812 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3824 */ 's', 'a', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3833 */ 'c', 'l', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3842 */ 'f', 'f', 'i', 'n', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3853 */ 'f', 't', 'i', 'n', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3864 */ 'd', 'i', 'v', '_', 'u', '.', 'd', 9, 0,
  /* 3873 */ 'm', 'a', 'x', '_', 'u', '.', 'd', 9, 0,
  /* 3882 */ 'm', 's', 'u', 'b', 'v', '.', 'd', 9, 0,
  /* 3891 */ 'm', 'a', 'd', 'd', 'v', '.', 'd', 9, 0,
  /* 3900 */ 'p', 'c', 'k', 'e', 'v', '.', 'd', 9, 0,
  /* 3909 */ 'i', 'l', 'v', 'e', 'v', '.', 'd', 9, 0,
  /* 3918 */ 'f', 'd', 'i', 'v', '.', 'd', 9, 0,
  /* 3926 */ 'm', 'u', 'l', 'v', '.', 'd', 9, 0,
  /* 3934 */ 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 3941 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 'd', 9, 0,
  /* 3952 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 'd', 9, 0,
  /* 3963 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 'd', 9, 0,
  /* 3973 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 'd', 9, 0,
  /* 3984 */ 'c', 'v', 't', '.', 'w', '.', 'd', 9, 0,
  /* 3993 */ 'f', 'm', 'a', 'x', '.', 'd', 9, 0,
  /* 4001 */ 'b', 'z', '.', 'd', 9, 0,
  /* 4007 */ 's', 'e', 'l', 'n', 'e', 'z', '.', 'd', 9, 0,
  /* 4017 */ 'b', 'n', 'z', '.', 'd', 9, 0,
  /* 4024 */ 's', 'e', 'l', 'e', 'q', 'z', '.', 'd', 9, 0,
  /* 4034 */ 'm', 'o', 'v', 'z', '.', 'd', 9, 0,
  /* 4042 */ 's', 'c', 'd', 9, 0,
  /* 4047 */ 'd', 'a', 'd', 'd', 9, 0,
  /* 4053 */ 'm', 'a', 'd', 'd', 9, 0,
  /* 4059 */ 'd', 's', 'h', 'd', 9, 0,
  /* 4065 */ 'l', 'l', 'd', 9, 0,
  /* 4070 */ 'a', 'n', 'd', 9, 0,
  /* 4075 */ 'p', 'r', 'e', 'p', 'e', 'n', 'd', 9, 0,
  /* 4084 */ 'a', 'p', 'p', 'e', 'n', 'd', 9, 0,
  /* 4092 */ 'd', 'm', 'o', 'd', 9, 0,
  /* 4098 */ 's', 'd', 9, 0,
  /* 4102 */ 'l', 'b', 'e', 9, 0,
  /* 4107 */ 's', 'b', 'e', 9, 0,
  /* 4112 */ 's', 'c', 'e', 9, 0,
  /* 4117 */ 'c', 'a', 'c', 'h', 'e', 'e', 9, 0,
  /* 4125 */ 'p', 'r', 'e', 'f', 'e', 9, 0,
  /* 4132 */ 'b', 'g', 'e', 9, 0,
  /* 4137 */ 't', 'g', 'e', 9, 0,
  /* 4142 */ 'c', 'a', 'c', 'h', 'e', 9, 0,
  /* 4149 */ 'l', 'h', 'e', 9, 0,
  /* 4154 */ 's', 'h', 'e', 9, 0,
  /* 4159 */ 'b', 'l', 'e', 9, 0,
  /* 4164 */ 'l', 'l', 'e', 9, 0,
  /* 4169 */ 'l', 'w', 'l', 'e', 9, 0,
  /* 4175 */ 's', 'w', 'l', 'e', 9, 0,
  /* 4181 */ 'b', 'n', 'e', 9, 0,
  /* 4186 */ 's', 'n', 'e', 9, 0,
  /* 4191 */ 't', 'n', 'e', 9, 0,
  /* 4196 */ 'l', 'w', 'r', 'e', 9, 0,
  /* 4202 */ 's', 'w', 'r', 'e', 9, 0,
  /* 4208 */ 'l', 'b', 'u', 'e', 9, 0,
  /* 4214 */ 'l', 'h', 'u', 'e', 9, 0,
  /* 4220 */ 'm', 'o', 'v', 'e', 9, 0,
  /* 4226 */ 'l', 'w', 'e', 9, 0,
  /* 4231 */ 's', 'w', 'e', 9, 0,
  /* 4236 */ 'b', 'c', '1', 'f', 9, 0,
  /* 4242 */ 'p', 'r', 'e', 'f', 9, 0,
  /* 4248 */ 'm', 'o', 'v', 'f', 9, 0,
  /* 4254 */ 'n', 'e', 'g', 9, 0,
  /* 4259 */ 'a', 'd', 'd', '_', 'a', '.', 'h', 9, 0,
  /* 4268 */ 'm', 'i', 'n', '_', 'a', '.', 'h', 9, 0,
  /* 4277 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'h', 9, 0,
  /* 4287 */ 'm', 'a', 'x', '_', 'a', '.', 'h', 9, 0,
  /* 4296 */ 's', 'r', 'a', '.', 'h', 9, 0,
  /* 4303 */ 'n', 'l', 'o', 'c', '.', 'h', 9, 0,
  /* 4311 */ 'n', 'l', 'z', 'c', '.', 'h', 9, 0,
  /* 4319 */ 's', 'l', 'd', '.', 'h', 9, 0,
  /* 4326 */ 'p', 'c', 'k', 'o', 'd', '.', 'h', 9, 0,
  /* 4335 */ 'i', 'l', 'v', 'o', 'd', '.', 'h', 9, 0,
  /* 4344 */ 'i', 'n', 's', 'v', 'e', '.', 'h', 9, 0,
  /* 4353 */ 'v', 's', 'h', 'f', '.', 'h', 9, 0,
  /* 4361 */ 'b', 'n', 'e', 'g', '.', 'h', 9, 0,
  /* 4369 */ 's', 'r', 'a', 'i', '.', 'h', 9, 0,
  /* 4377 */ 's', 'l', 'd', 'i', '.', 'h', 9, 0,
  /* 4385 */ 'b', 'n', 'e', 'g', 'i', '.', 'h', 9, 0,
  /* 4394 */ 's', 'l', 'l', 'i', '.', 'h', 9, 0,
  /* 4402 */ 's', 'r', 'l', 'i', '.', 'h', 9, 0,
  /* 4410 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'h', 9, 0,
  /* 4420 */ 'c', 'e', 'q', 'i', '.', 'h', 9, 0,
  /* 4428 */ 's', 'r', 'a', 'r', 'i', '.', 'h', 9, 0,
  /* 4437 */ 'b', 'c', 'l', 'r', 'i', '.', 'h', 9, 0,
  /* 4446 */ 's', 'r', 'l', 'r', 'i', '.', 'h', 9, 0,
  /* 4455 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'h', 9, 0,
  /* 4465 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'h', 9, 0,
  /* 4475 */ 'b', 's', 'e', 't', 'i', '.', 'h', 9, 0,
  /* 4484 */ 's', 'u', 'b', 'v', 'i', '.', 'h', 9, 0,
  /* 4493 */ 'a', 'd', 'd', 'v', 'i', '.', 'h', 9, 0,
  /* 4502 */ 'f', 'i', 'l', 'l', '.', 'h', 9, 0,
  /* 4510 */ 's', 'l', 'l', '.', 'h', 9, 0,
  /* 4517 */ 's', 'r', 'l', '.', 'h', 9, 0,
  /* 4524 */ 'b', 'i', 'n', 's', 'l', '.', 'h', 9, 0,
  /* 4533 */ 'i', 'l', 'v', 'l', '.', 'h', 9, 0,
  /* 4541 */ 'f', 'e', 'x', 'd', 'o', '.', 'h', 9, 0,
  /* 4550 */ 'm', 's', 'u', 'b', '_', 'q', '.', 'h', 9, 0,
  /* 4560 */ 'm', 'a', 'd', 'd', '_', 'q', '.', 'h', 9, 0,
  /* 4570 */ 'm', 'u', 'l', '_', 'q', '.', 'h', 9, 0,
  /* 4579 */ 'm', 's', 'u', 'b', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4590 */ 'm', 'a', 'd', 'd', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4601 */ 'm', 'u', 'l', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4611 */ 'c', 'e', 'q', '.', 'h', 9, 0,
  /* 4618 */ 'f', 't', 'q', '.', 'h', 9, 0,
  /* 4625 */ 's', 'r', 'a', 'r', '.', 'h', 9, 0,
  /* 4633 */ 'b', 'c', 'l', 'r', '.', 'h', 9, 0,
  /* 4641 */ 's', 'r', 'l', 'r', '.', 'h', 9, 0,
  /* 4649 */ 'b', 'i', 'n', 's', 'r', '.', 'h', 9, 0,
  /* 4658 */ 'i', 'l', 'v', 'r', '.', 'h', 9, 0,
  /* 4666 */ 'a', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4676 */ 'h', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4686 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4697 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4707 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4718 */ 'm', 'o', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4727 */ 'c', 'l', 'e', '_', 's', '.', 'h', 9, 0,
  /* 4736 */ 'a', 'v', 'e', '_', 's', '.', 'h', 9, 0,
  /* 4745 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4755 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4765 */ 'c', 'l', 't', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4775 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4785 */ 'm', 'i', 'n', '_', 's', '.', 'h', 9, 0,
  /* 4794 */ 'd', 'o', 't', 'p', '_', 's', '.', 'h', 9, 0,
  /* 4804 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'h', 9, 0,
  /* 4814 */ 'e', 'x', 't', 'r', '_', 's', '.', 'h', 9, 0,
  /* 4824 */ 's', 'u', 'b', 's', '_', 's', '.', 'h', 9, 0,
  /* 4834 */ 'a', 'd', 'd', 's', '_', 's', '.', 'h', 9, 0,
  /* 4844 */ 's', 'a', 't', '_', 's', '.', 'h', 9, 0,
  /* 4853 */ 'c', 'l', 't', '_', 's', '.', 'h', 9, 0,
  /* 4862 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'h', 9, 0,
  /* 4874 */ 'd', 'i', 'v', '_', 's', '.', 'h', 9, 0,
  /* 4883 */ 'e', 'x', 't', 'r', 'v', '_', 's', '.', 'h', 9, 0,
  /* 4894 */ 'm', 'a', 'x', '_', 's', '.', 'h', 9, 0,
  /* 4903 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'h', 9, 0,
  /* 4913 */ 's', 'p', 'l', 'a', 't', '.', 'h', 9, 0,
  /* 4922 */ 'b', 's', 'e', 't', '.', 'h', 9, 0,
  /* 4930 */ 'p', 'c', 'n', 't', '.', 'h', 9, 0,
  /* 4938 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'h', 9, 0,
  /* 4948 */ 's', 't', '.', 'h', 9, 0,
  /* 4954 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4964 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4974 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4985 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 4995 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 5006 */ 'm', 'o', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 5015 */ 'c', 'l', 'e', '_', 'u', '.', 'h', 9, 0,
  /* 5024 */ 'a', 'v', 'e', '_', 'u', '.', 'h', 9, 0,
  /* 5033 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 5043 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 5053 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 5063 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 5073 */ 'm', 'i', 'n', '_', 'u', '.', 'h', 9, 0,
  /* 5082 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'h', 9, 0,
  /* 5092 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'h', 9, 0,
  /* 5102 */ 's', 'u', 'b', 's', '_', 'u', '.', 'h', 9, 0,
  /* 5112 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'h', 9, 0,
  /* 5122 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'h', 9, 0,
  /* 5134 */ 's', 'a', 't', '_', 'u', '.', 'h', 9, 0,
  /* 5143 */ 'c', 'l', 't', '_', 'u', '.', 'h', 9, 0,
  /* 5152 */ 'd', 'i', 'v', '_', 'u', '.', 'h', 9, 0,
  /* 5161 */ 'm', 'a', 'x', '_', 'u', '.', 'h', 9, 0,
  /* 5170 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'h', 9, 0,
  /* 5180 */ 'm', 's', 'u', 'b', 'v', '.', 'h', 9, 0,
  /* 5189 */ 'm', 'a', 'd', 'd', 'v', '.', 'h', 9, 0,
  /* 5198 */ 'p', 'c', 'k', 'e', 'v', '.', 'h', 9, 0,
  /* 5207 */ 'i', 'l', 'v', 'e', 'v', '.', 'h', 9, 0,
  /* 5216 */ 'm', 'u', 'l', 'v', '.', 'h', 9, 0,
  /* 5224 */ 'b', 'z', '.', 'h', 9, 0,
  /* 5230 */ 'b', 'n', 'z', '.', 'h', 9, 0,
  /* 5237 */ 'd', 's', 'b', 'h', 9, 0,
  /* 5243 */ 'w', 's', 'b', 'h', 9, 0,
  /* 5249 */ 's', 'e', 'h', 9, 0,
  /* 5254 */ 'u', 'l', 'h', 9, 0,
  /* 5259 */ 's', 'h', 'r', 'a', '.', 'p', 'h', 9, 0,
  /* 5268 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5282 */ 'p', 'r', 'e', 'c', 'r', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5295 */ 'p', 'r', 'e', 'c', 'r', 'q', 'u', '_', 's', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5312 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'p', 'h', 9, 0,
  /* 5323 */ 's', 'u', 'b', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 5333 */ 'a', 'd', 'd', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 5343 */ 'p', 'i', 'c', 'k', '.', 'p', 'h', 9, 0,
  /* 5352 */ 's', 'h', 'l', 'l', '.', 'p', 'h', 9, 0,
  /* 5361 */ 'r', 'e', 'p', 'l', '.', 'p', 'h', 9, 0,
  /* 5370 */ 's', 'h', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 5379 */ 'p', 'a', 'c', 'k', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 5390 */ 'm', 'u', 'l', '.', 'p', 'h', 9, 0,
  /* 5398 */ 's', 'u', 'b', 'q', '.', 'p', 'h', 9, 0,
  /* 5407 */ 'a', 'd', 'd', 'q', '.', 'p', 'h', 9, 0,
  /* 5416 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'p', 'h', 9, 0,
  /* 5427 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5438 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5450 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5462 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5474 */ 's', 'h', 'l', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5485 */ 'm', 'u', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5495 */ 's', 'u', 'b', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5506 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5517 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5528 */ 'a', 'b', 's', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5539 */ 's', 'u', 'b', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5550 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5561 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5573 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'p', 'h', 9, 0,
  /* 5585 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'p', 'h', 9, 0,
  /* 5596 */ 's', 'u', 'b', 'u', '.', 'p', 'h', 9, 0,
  /* 5605 */ 'a', 'd', 'd', 'u', '.', 'p', 'h', 9, 0,
  /* 5614 */ 's', 'h', 'r', 'a', 'v', '.', 'p', 'h', 9, 0,
  /* 5624 */ 's', 'h', 'l', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5634 */ 'r', 'e', 'p', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5644 */ 's', 'h', 'r', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5654 */ 'd', 'p', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5664 */ 'd', 'p', 'a', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5679 */ 'd', 'p', 's', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5694 */ 'm', 'u', 'l', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5706 */ 'd', 'p', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5719 */ 'm', 'u', 'l', 's', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5734 */ 'd', 'p', 's', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5747 */ 'd', 'p', 'a', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5761 */ 'd', 'p', 's', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5775 */ 'd', 'p', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5785 */ 'd', 'p', 'a', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5796 */ 'd', 'p', 's', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5807 */ 'u', 's', 'h', 9, 0,
  /* 5812 */ 'd', 'm', 'u', 'h', 9, 0,
  /* 5818 */ 's', 'y', 'n', 'c', 'i', 9, 0,
  /* 5825 */ 'd', 'a', 'd', 'd', 'i', 9, 0,
  /* 5832 */ 'a', 'n', 'd', 'i', 9, 0,
  /* 5838 */ 't', 'g', 'e', 'i', 9, 0,
  /* 5844 */ 's', 'n', 'e', 'i', 9, 0,
  /* 5850 */ 't', 'n', 'e', 'i', 9, 0,
  /* 5856 */ 'd', 'a', 'h', 'i', 9, 0,
  /* 5862 */ 'm', 'f', 'h', 'i', 9, 0,
  /* 5868 */ 'm', 't', 'h', 'i', 9, 0,
  /* 5874 */ '.', 'a', 'l', 'i', 'g', 'n', 32, '2', 10, 9, 'l', 'i', 9, 0,
  /* 5888 */ 'd', 'l', 'i', 9, 0,
  /* 5893 */ 'c', 'm', 'p', 'i', 9, 0,
  /* 5899 */ 's', 'e', 'q', 'i', 9, 0,
  /* 5905 */ 't', 'e', 'q', 'i', 9, 0,
  /* 5911 */ 'x', 'o', 'r', 'i', 9, 0,
  /* 5917 */ 'd', 'a', 't', 'i', 9, 0,
  /* 5923 */ 's', 'l', 't', 'i', 9, 0,
  /* 5929 */ 't', 'l', 't', 'i', 9, 0,
  /* 5935 */ 'd', 'a', 'u', 'i', 9, 0,
  /* 5941 */ 'l', 'u', 'i', 9, 0,
  /* 5946 */ 'j', 9, 0,
  /* 5949 */ 'b', 'r', 'e', 'a', 'k', 9, 0,
  /* 5956 */ 'c', 'v', 't', '.', 'd', '.', 'l', 9, 0,
  /* 5965 */ 'c', 'v', 't', '.', 's', '.', 'l', 9, 0,
  /* 5974 */ 'b', 'a', 'l', 9, 0,
  /* 5979 */ 'j', 'a', 'l', 9, 0,
  /* 5984 */ 'b', 'g', 'e', 'z', 'a', 'l', 9, 0,
  /* 5992 */ 'b', 'l', 't', 'z', 'a', 'l', 9, 0,
  /* 6000 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 6012 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 6024 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 6040 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 6055 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 6071 */ 'l', 'd', 'l', 9, 0,
  /* 6076 */ 's', 'd', 'l', 9, 0,
  /* 6081 */ 'b', 'g', 'e', 'l', 9, 0,
  /* 6087 */ 'b', 'l', 'e', 'l', 9, 0,
  /* 6093 */ 'b', 'n', 'e', 'l', 9, 0,
  /* 6099 */ 'b', 'c', '1', 'f', 'l', 9, 0,
  /* 6106 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 6120 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 6134 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 6147 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 6162 */ 's', 'y', 's', 'c', 'a', 'l', 'l', 9, 0,
  /* 6171 */ 'b', 'g', 'e', 'z', 'a', 'l', 'l', 9, 0,
  /* 6180 */ 'b', 'l', 't', 'z', 'a', 'l', 'l', 9, 0,
  /* 6189 */ 'd', 's', 'l', 'l', 9, 0,
  /* 6195 */ 'd', 'r', 'o', 'l', 9, 0,
  /* 6201 */ 'b', 'e', 'q', 'l', 9, 0,
  /* 6207 */ 'd', 's', 'r', 'l', 9, 0,
  /* 6213 */ 'b', 'c', '1', 't', 'l', 9, 0,
  /* 6220 */ 'b', 'g', 't', 'l', 9, 0,
  /* 6226 */ 'b', 'l', 't', 'l', 9, 0,
  /* 6232 */ 'b', 'g', 'e', 'u', 'l', 9, 0,
  /* 6239 */ 'b', 'l', 'e', 'u', 'l', 9, 0,
  /* 6246 */ 'd', 'm', 'u', 'l', 9, 0,
  /* 6252 */ 'b', 'g', 't', 'u', 'l', 9, 0,
  /* 6259 */ 'b', 'l', 't', 'u', 'l', 9, 0,
  /* 6266 */ 'l', 'w', 'l', 9, 0,
  /* 6271 */ 's', 'w', 'l', 9, 0,
  /* 6276 */ 'b', 'g', 'e', 'z', 'l', 9, 0,
  /* 6283 */ 'b', 'l', 'e', 'z', 'l', 9, 0,
  /* 6290 */ 'b', 'g', 't', 'z', 'l', 9, 0,
  /* 6297 */ 'b', 'l', 't', 'z', 'l', 9, 0,
  /* 6304 */ 'd', 'e', 'x', 't', 'm', 9, 0,
  /* 6311 */ 'l', 'w', 'm', 9, 0,
  /* 6316 */ 's', 'w', 'm', 9, 0,
  /* 6321 */ 'b', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 6329 */ 'd', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 6337 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 6343 */ 'd', 'c', 'l', 'o', 9, 0,
  /* 6349 */ 'm', 'f', 'l', 'o', 9, 0,
  /* 6355 */ 's', 'h', 'i', 'l', 'o', 9, 0,
  /* 6362 */ 'm', 't', 'l', 'o', 9, 0,
  /* 6368 */ 'd', 'm', 'u', 'l', 'o', 9, 0,
  /* 6375 */ 'd', 'b', 'i', 't', 's', 'w', 'a', 'p', 9, 0,
  /* 6385 */ 's', 'd', 'b', 'b', 'p', 9, 0,
  /* 6392 */ 'e', 'x', 't', 'p', 'd', 'p', 9, 0,
  /* 6400 */ 'm', 'o', 'v', 'e', 'p', 9, 0,
  /* 6407 */ 'm', 't', 'h', 'l', 'i', 'p', 9, 0,
  /* 6415 */ 'c', 'm', 'p', 9, 0,
  /* 6420 */ 'd', 'p', 'o', 'p', 9, 0,
  /* 6426 */ 'a', 'd', 'd', 'i', 'u', 'r', '1', 's', 'p', 9, 0,
  /* 6437 */ 'l', 'o', 'a', 'd', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 6453 */ 's', 't', 'o', 'r', 'e', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 6470 */ 'r', 'd', 'd', 's', 'p', 9, 0,
  /* 6477 */ 'w', 'r', 'd', 's', 'p', 9, 0,
  /* 6484 */ 'j', 'r', 'c', 'a', 'd', 'd', 'i', 'u', 's', 'p', 9, 0,
  /* 6496 */ 'j', 'r', 'a', 'd', 'd', 'i', 'u', 's', 'p', 9, 0,
  /* 6507 */ 'e', 'x', 't', 'p', 9, 0,
  /* 6513 */ 'd', 'v', 'p', 9, 0,
  /* 6518 */ 'e', 'v', 'p', 9, 0,
  /* 6523 */ 'l', 'w', 'p', 9, 0,
  /* 6528 */ 's', 'w', 'p', 9, 0,
  /* 6533 */ 'b', 'e', 'q', 9, 0,
  /* 6538 */ 's', 'e', 'q', 9, 0,
  /* 6543 */ 't', 'e', 'q', 9, 0,
  /* 6548 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6560 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6572 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6588 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6603 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6619 */ 'l', 'd', 'r', 9, 0,
  /* 6624 */ 's', 'd', 'r', 9, 0,
  /* 6629 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6643 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6657 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6670 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6685 */ 'j', 'r', 9, 0,
  /* 6689 */ 'j', 'a', 'l', 'r', 9, 0,
  /* 6695 */ 'n', 'o', 'r', 9, 0,
  /* 6700 */ 'd', 'r', 'o', 'r', 9, 0,
  /* 6706 */ 'x', 'o', 'r', 9, 0,
  /* 6711 */ 'r', 'd', 'p', 'g', 'p', 'r', 9, 0,
  /* 6719 */ 'w', 'r', 'p', 'g', 'p', 'r', 9, 0,
  /* 6727 */ 'd', 'r', 'o', 't', 'r', 9, 0,
  /* 6734 */ 'r', 'd', 'h', 'w', 'r', 9, 0,
  /* 6741 */ 'l', 'w', 'r', 9, 0,
  /* 6746 */ 's', 'w', 'r', 9, 0,
  /* 6751 */ 'm', 'i', 'n', 'a', '.', 's', 9, 0,
  /* 6759 */ 'm', 'a', 'x', 'a', '.', 's', 9, 0,
  /* 6767 */ 'n', 'm', 's', 'u', 'b', '.', 's', 9, 0,
  /* 6776 */ 'c', 'v', 't', '.', 'd', '.', 's', 9, 0,
  /* 6785 */ 'n', 'm', 'a', 'd', 'd', '.', 's', 9, 0,
  /* 6794 */ 'c', '.', 'n', 'g', 'e', '.', 's', 9, 0,
  /* 6803 */ 'c', '.', 'l', 'e', '.', 's', 9, 0,
  /* 6811 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 's', 9, 0,
  /* 6821 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 's', 9, 0,
  /* 6831 */ 'c', '.', 'o', 'l', 'e', '.', 's', 9, 0,
  /* 6840 */ 'c', 'm', 'p', '.', 's', 'l', 'e', '.', 's', 9, 0,
  /* 6851 */ 'c', '.', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6860 */ 'c', 'm', 'p', '.', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6871 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6883 */ 'c', '.', 'f', '.', 's', 9, 0,
  /* 6890 */ 'c', 'm', 'p', '.', 'a', 'f', '.', 's', 9, 0,
  /* 6900 */ 'c', 'm', 'p', '.', 's', 'a', 'f', '.', 's', 9, 0,
  /* 6911 */ 'm', 's', 'u', 'b', 'f', '.', 's', 9, 0,
  /* 6920 */ 'm', 'a', 'd', 'd', 'f', '.', 's', 9, 0,
  /* 6929 */ 'c', '.', 's', 'f', '.', 's', 9, 0,
  /* 6937 */ 'm', 'o', 'v', 'f', '.', 's', 9, 0,
  /* 6945 */ 'n', 'e', 'g', '.', 's', 9, 0,
  /* 6952 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 's', 9, 0,
  /* 6963 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 's', 9, 0,
  /* 6974 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 's', 9, 0,
  /* 6984 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 's', 9, 0,
  /* 6995 */ 'c', 'v', 't', '.', 'l', '.', 's', 9, 0,
  /* 7004 */ 's', 'e', 'l', '.', 's', 9, 0,
  /* 7011 */ 'c', '.', 'n', 'g', 'l', '.', 's', 9, 0,
  /* 7020 */ 'm', 'u', 'l', '.', 's', 9, 0,
  /* 7027 */ 'm', 'i', 'n', '.', 's', 9, 0,
  /* 7034 */ 'c', '.', 'u', 'n', '.', 's', 9, 0,
  /* 7042 */ 'c', 'm', 'p', '.', 'u', 'n', '.', 's', 9, 0,
  /* 7052 */ 'c', 'm', 'p', '.', 's', 'u', 'n', '.', 's', 9, 0,
  /* 7063 */ 'm', 'o', 'v', 'n', '.', 's', 9, 0,
  /* 7071 */ 'r', 'e', 'c', 'i', 'p', '.', 's', 9, 0,
  /* 7080 */ 'c', '.', 'e', 'q', '.', 's', 9, 0,
  /* 7088 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 's', 9, 0,
  /* 7098 */ 'c', '.', 's', 'e', 'q', '.', 's', 9, 0,
  /* 7107 */ 'c', 'm', 'p', '.', 's', 'e', 'q', '.', 's', 9, 0,
  /* 7118 */ 'c', '.', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 7127 */ 'c', 'm', 'p', '.', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 7138 */ 'c', 'm', 'p', '.', 's', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 7150 */ 'a', 'b', 's', '.', 's', 9, 0,
  /* 7157 */ 'c', 'l', 'a', 's', 's', '.', 's', 9, 0,
  /* 7166 */ 'c', '.', 'n', 'g', 't', '.', 's', 9, 0,
  /* 7175 */ 'c', '.', 'l', 't', '.', 's', 9, 0,
  /* 7183 */ 'c', 'm', 'p', '.', 'l', 't', '.', 's', 9, 0,
  /* 7193 */ 'c', '.', 'o', 'l', 't', '.', 's', 9, 0,
  /* 7202 */ 'c', 'm', 'p', '.', 's', 'l', 't', '.', 's', 9, 0,
  /* 7213 */ 'c', '.', 'u', 'l', 't', '.', 's', 9, 0,
  /* 7222 */ 'c', 'm', 'p', '.', 'u', 'l', 't', '.', 's', 9, 0,
  /* 7233 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 't', '.', 's', 9, 0,
  /* 7245 */ 'r', 'i', 'n', 't', '.', 's', 9, 0,
  /* 7253 */ 'r', 's', 'q', 'r', 't', '.', 's', 9, 0,
  /* 7262 */ 'm', 'o', 'v', 't', '.', 's', 9, 0,
  /* 7270 */ 'd', 'i', 'v', '.', 's', 9, 0,
  /* 7277 */ 'm', 'o', 'v', '.', 's', 9, 0,
  /* 7284 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 's', 9, 0,
  /* 7295 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 's', 9, 0,
  /* 7306 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 's', 9, 0,
  /* 7316 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 's', 9, 0,
  /* 7327 */ 'c', 'v', 't', '.', 'w', '.', 's', 9, 0,
  /* 7336 */ 'm', 'a', 'x', '.', 's', 9, 0,
  /* 7343 */ 's', 'e', 'l', 'n', 'e', 'z', '.', 's', 9, 0,
  /* 7353 */ 's', 'e', 'l', 'e', 'q', 'z', '.', 's', 9, 0,
  /* 7363 */ 'm', 'o', 'v', 'z', '.', 's', 9, 0,
  /* 7371 */ 'a', 'b', 's', 9, 0,
  /* 7376 */ 'j', 'a', 'l', 's', 9, 0,
  /* 7382 */ 'b', 'g', 'e', 'z', 'a', 'l', 's', 9, 0,
  /* 7391 */ 'b', 'l', 't', 'z', 'a', 'l', 's', 9, 0,
  /* 7400 */ 'c', 'i', 'n', 's', 9, 0,
  /* 7406 */ 'j', 'a', 'l', 'r', 's', 9, 0,
  /* 7413 */ 'e', 'x', 't', 's', 9, 0,
  /* 7419 */ 'l', 'w', 'x', 's', 9, 0,
  /* 7425 */ 'b', 'c', '1', 't', 9, 0,
  /* 7431 */ 'b', 'g', 't', 9, 0,
  /* 7436 */ 'w', 'a', 'i', 't', 9, 0,
  /* 7442 */ 'b', 'l', 't', 9, 0,
  /* 7447 */ 's', 'l', 't', 9, 0,
  /* 7452 */ 't', 'l', 't', 9, 0,
  /* 7457 */ 'd', 'm', 'u', 'l', 't', 9, 0,
  /* 7464 */ 'n', 'o', 't', 9, 0,
  /* 7469 */ 'm', 'o', 'v', 't', 9, 0,
  /* 7475 */ 'd', 'e', 'x', 't', 9, 0,
  /* 7481 */ 'l', 'b', 'u', 9, 0,
  /* 7486 */ 'd', 's', 'u', 'b', 'u', 9, 0,
  /* 7493 */ 'm', 's', 'u', 'b', 'u', 9, 0,
  /* 7500 */ 'b', 'a', 'd', 'd', 'u', 9, 0,
  /* 7507 */ 'd', 'a', 'd', 'd', 'u', 9, 0,
  /* 7514 */ 'm', 'a', 'd', 'd', 'u', 9, 0,
  /* 7521 */ 'd', 'm', 'o', 'd', 'u', 9, 0,
  /* 7528 */ 'b', 'g', 'e', 'u', 9, 0,
  /* 7534 */ 't', 'g', 'e', 'u', 9, 0,
  /* 7540 */ 'b', 'l', 'e', 'u', 9, 0,
  /* 7546 */ 'u', 'l', 'h', 'u', 9, 0,
  /* 7552 */ 'd', 'm', 'u', 'h', 'u', 9, 0,
  /* 7559 */ 'd', 'a', 'd', 'd', 'i', 'u', 9, 0,
  /* 7567 */ 't', 'g', 'e', 'i', 'u', 9, 0,
  /* 7574 */ 's', 'l', 't', 'i', 'u', 9, 0,
  /* 7581 */ 't', 'l', 't', 'i', 'u', 9, 0,
  /* 7588 */ 'v', '3', 'm', 'u', 'l', 'u', 9, 0,
  /* 7596 */ 'd', 'm', 'u', 'l', 'u', 9, 0,
  /* 7603 */ 'v', 'm', 'u', 'l', 'u', 9, 0,
  /* 7610 */ 'd', 'm', 'u', 'l', 'o', 'u', 9, 0,
  /* 7618 */ 'b', 'g', 't', 'u', 9, 0,
  /* 7624 */ 'b', 'l', 't', 'u', 9, 0,
  /* 7630 */ 's', 'l', 't', 'u', 9, 0,
  /* 7636 */ 't', 'l', 't', 'u', 9, 0,
  /* 7642 */ 'd', 'm', 'u', 'l', 't', 'u', 9, 0,
  /* 7650 */ 'd', 'e', 'x', 't', 'u', 9, 0,
  /* 7657 */ 'd', 'd', 'i', 'v', 'u', 9, 0,
  /* 7664 */ 'l', 'w', 'u', 9, 0,
  /* 7669 */ 'a', 'n', 'd', '.', 'v', 9, 0,
  /* 7676 */ 'm', 'o', 'v', 'e', '.', 'v', 9, 0,
  /* 7684 */ 'b', 's', 'e', 'l', '.', 'v', 9, 0,
  /* 7692 */ 'n', 'o', 'r', '.', 'v', 9, 0,
  /* 7699 */ 'x', 'o', 'r', '.', 'v', 9, 0,
  /* 7706 */ 'b', 'z', '.', 'v', 9, 0,
  /* 7712 */ 'b', 'm', 'z', '.', 'v', 9, 0,
  /* 7719 */ 'b', 'n', 'z', '.', 'v', 9, 0,
  /* 7726 */ 'b', 'm', 'n', 'z', '.', 'v', 9, 0,
  /* 7734 */ 'd', 's', 'r', 'a', 'v', 9, 0,
  /* 7741 */ 'b', 'i', 't', 'r', 'e', 'v', 9, 0,
  /* 7749 */ 'd', 'd', 'i', 'v', 9, 0,
  /* 7755 */ 'd', 's', 'l', 'l', 'v', 9, 0,
  /* 7762 */ 'd', 's', 'r', 'l', 'v', 9, 0,
  /* 7769 */ 's', 'h', 'i', 'l', 'o', 'v', 9, 0,
  /* 7777 */ 'e', 'x', 't', 'p', 'd', 'p', 'v', 9, 0,
  /* 7786 */ 'e', 'x', 't', 'p', 'v', 9, 0,
  /* 7793 */ 'd', 'r', 'o', 't', 'r', 'v', 9, 0,
  /* 7801 */ 'i', 'n', 's', 'v', 9, 0,
  /* 7807 */ 'f', 'l', 'o', 'g', '2', '.', 'w', 9, 0,
  /* 7816 */ 'f', 'e', 'x', 'p', '2', '.', 'w', 9, 0,
  /* 7825 */ 'a', 'd', 'd', '_', 'a', '.', 'w', 9, 0,
  /* 7834 */ 'f', 'm', 'i', 'n', '_', 'a', '.', 'w', 9, 0,
  /* 7844 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'w', 9, 0,
  /* 7854 */ 'f', 'm', 'a', 'x', '_', 'a', '.', 'w', 9, 0,
  /* 7864 */ 's', 'r', 'a', '.', 'w', 9, 0,
  /* 7871 */ 'f', 's', 'u', 'b', '.', 'w', 9, 0,
  /* 7879 */ 'f', 'm', 's', 'u', 'b', '.', 'w', 9, 0,
  /* 7888 */ 'n', 'l', 'o', 'c', '.', 'w', 9, 0,
  /* 7896 */ 'n', 'l', 'z', 'c', '.', 'w', 9, 0,
  /* 7904 */ 'c', 'v', 't', '.', 'd', '.', 'w', 9, 0,
  /* 7913 */ 'f', 'a', 'd', 'd', '.', 'w', 9, 0,
  /* 7921 */ 'f', 'm', 'a', 'd', 'd', '.', 'w', 9, 0,
  /* 7930 */ 's', 'l', 'd', '.', 'w', 9, 0,
  /* 7937 */ 'p', 'c', 'k', 'o', 'd', '.', 'w', 9, 0,
  /* 7946 */ 'i', 'l', 'v', 'o', 'd', '.', 'w', 9, 0,
  /* 7955 */ 'f', 'c', 'l', 'e', '.', 'w', 9, 0,
  /* 7963 */ 'f', 's', 'l', 'e', '.', 'w', 9, 0,
  /* 7971 */ 'f', 'c', 'u', 'l', 'e', '.', 'w', 9, 0,
  /* 7980 */ 'f', 's', 'u', 'l', 'e', '.', 'w', 9, 0,
  /* 7989 */ 'f', 'c', 'n', 'e', '.', 'w', 9, 0,
  /* 7997 */ 'f', 's', 'n', 'e', '.', 'w', 9, 0,
  /* 8005 */ 'f', 'c', 'u', 'n', 'e', '.', 'w', 9, 0,
  /* 8014 */ 'f', 's', 'u', 'n', 'e', '.', 'w', 9, 0,
  /* 8023 */ 'i', 'n', 's', 'v', 'e', '.', 'w', 9, 0,
  /* 8032 */ 'f', 'c', 'a', 'f', '.', 'w', 9, 0,
  /* 8040 */ 'f', 's', 'a', 'f', '.', 'w', 9, 0,
  /* 8048 */ 'v', 's', 'h', 'f', '.', 'w', 9, 0,
  /* 8056 */ 'b', 'n', 'e', 'g', '.', 'w', 9, 0,
  /* 8064 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 8080 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 8093 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '_', 'r', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 8111 */ 'p', 'r', 'e', 'c', 'r', 'q', '_', 'r', 's', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 8127 */ 's', 'u', 'b', 'q', 'h', '.', 'w', 9, 0,
  /* 8136 */ 'a', 'd', 'd', 'q', 'h', '.', 'w', 9, 0,
  /* 8145 */ 's', 'r', 'a', 'i', '.', 'w', 9, 0,
  /* 8153 */ 's', 'l', 'd', 'i', '.', 'w', 9, 0,
  /* 8161 */ 'b', 'n', 'e', 'g', 'i', '.', 'w', 9, 0,
  /* 8170 */ 's', 'l', 'l', 'i', '.', 'w', 9, 0,
  /* 8178 */ 's', 'r', 'l', 'i', '.', 'w', 9, 0,
  /* 8186 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'w', 9, 0,
  /* 8196 */ 'c', 'e', 'q', 'i', '.', 'w', 9, 0,
  /* 8204 */ 's', 'r', 'a', 'r', 'i', '.', 'w', 9, 0,
  /* 8213 */ 'b', 'c', 'l', 'r', 'i', '.', 'w', 9, 0,
  /* 8222 */ 's', 'r', 'l', 'r', 'i', '.', 'w', 9, 0,
  /* 8231 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'w', 9, 0,
  /* 8241 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'w', 9, 0,
  /* 8251 */ 'b', 's', 'e', 't', 'i', '.', 'w', 9, 0,
  /* 8260 */ 's', 'u', 'b', 'v', 'i', '.', 'w', 9, 0,
  /* 8269 */ 'a', 'd', 'd', 'v', 'i', '.', 'w', 9, 0,
  /* 8278 */ 'd', 'p', 'a', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 8291 */ 'd', 'p', 's', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 8304 */ 'f', 'i', 'l', 'l', '.', 'w', 9, 0,
  /* 8312 */ 's', 'l', 'l', '.', 'w', 9, 0,
  /* 8319 */ 'f', 'e', 'x', 'u', 'p', 'l', '.', 'w', 9, 0,
  /* 8329 */ 'f', 'f', 'q', 'l', '.', 'w', 9, 0,
  /* 8337 */ 's', 'r', 'l', '.', 'w', 9, 0,
  /* 8344 */ 'b', 'i', 'n', 's', 'l', '.', 'w', 9, 0,
  /* 8353 */ 'f', 'm', 'u', 'l', '.', 'w', 9, 0,
  /* 8361 */ 'i', 'l', 'v', 'l', '.', 'w', 9, 0,
  /* 8369 */ 'f', 'm', 'i', 'n', '.', 'w', 9, 0,
  /* 8377 */ 'f', 'c', 'u', 'n', '.', 'w', 9, 0,
  /* 8385 */ 'f', 's', 'u', 'n', '.', 'w', 9, 0,
  /* 8393 */ 'f', 'e', 'x', 'd', 'o', '.', 'w', 9, 0,
  /* 8402 */ 'f', 'r', 'c', 'p', '.', 'w', 9, 0,
  /* 8410 */ 'm', 's', 'u', 'b', '_', 'q', '.', 'w', 9, 0,
  /* 8420 */ 'm', 'a', 'd', 'd', '_', 'q', '.', 'w', 9, 0,
  /* 8430 */ 'm', 'u', 'l', '_', 'q', '.', 'w', 9, 0,
  /* 8439 */ 'm', 's', 'u', 'b', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 8450 */ 'm', 'a', 'd', 'd', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 8461 */ 'm', 'u', 'l', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 8471 */ 'f', 'c', 'e', 'q', '.', 'w', 9, 0,
  /* 8479 */ 'f', 's', 'e', 'q', '.', 'w', 9, 0,
  /* 8487 */ 'f', 'c', 'u', 'e', 'q', '.', 'w', 9, 0,
  /* 8496 */ 'f', 's', 'u', 'e', 'q', '.', 'w', 9, 0,
  /* 8505 */ 'f', 't', 'q', '.', 'w', 9, 0,
  /* 8512 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'w', 9, 0,
  /* 8522 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 8533 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 8544 */ 'e', 'x', 't', 'r', '_', 'r', '.', 'w', 9, 0,
  /* 8554 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 8565 */ 'e', 'x', 't', 'r', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 8576 */ 's', 'r', 'a', 'r', '.', 'w', 9, 0,
  /* 8584 */ 'b', 'c', 'l', 'r', '.', 'w', 9, 0,
  /* 8592 */ 's', 'r', 'l', 'r', '.', 'w', 9, 0,
  /* 8600 */ 'f', 'c', 'o', 'r', '.', 'w', 9, 0,
  /* 8608 */ 'f', 's', 'o', 'r', '.', 'w', 9, 0,
  /* 8616 */ 'f', 'e', 'x', 'u', 'p', 'r', '.', 'w', 9, 0,
  /* 8626 */ 'f', 'f', 'q', 'r', '.', 'w', 9, 0,
  /* 8634 */ 'b', 'i', 'n', 's', 'r', '.', 'w', 9, 0,
  /* 8643 */ 'e', 'x', 't', 'r', '.', 'w', 9, 0,
  /* 8651 */ 'i', 'l', 'v', 'r', '.', 'w', 9, 0,
  /* 8659 */ 'c', 'v', 't', '.', 's', '.', 'w', 9, 0,
  /* 8668 */ 'a', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8678 */ 'h', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8688 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8699 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 's', '.', 'w', 9, 0,
  /* 8711 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8721 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8732 */ 'm', 'o', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8741 */ 'c', 'l', 'e', '_', 's', '.', 'w', 9, 0,
  /* 8750 */ 'a', 'v', 'e', '_', 's', '.', 'w', 9, 0,
  /* 8759 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8769 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8779 */ 'c', 'l', 't', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8789 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8799 */ 's', 'h', 'l', 'l', '_', 's', '.', 'w', 9, 0,
  /* 8809 */ 'm', 'i', 'n', '_', 's', '.', 'w', 9, 0,
  /* 8818 */ 'd', 'o', 't', 'p', '_', 's', '.', 'w', 9, 0,
  /* 8828 */ 's', 'u', 'b', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8838 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8848 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8858 */ 'a', 'b', 's', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8868 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'w', 9, 0,
  /* 8878 */ 's', 'u', 'b', 's', '_', 's', '.', 'w', 9, 0,
  /* 8888 */ 'a', 'd', 'd', 's', '_', 's', '.', 'w', 9, 0,
  /* 8898 */ 's', 'a', 't', '_', 's', '.', 'w', 9, 0,
  /* 8907 */ 'c', 'l', 't', '_', 's', '.', 'w', 9, 0,
  /* 8916 */ 'f', 'f', 'i', 'n', 't', '_', 's', '.', 'w', 9, 0,
  /* 8927 */ 'f', 't', 'i', 'n', 't', '_', 's', '.', 'w', 9, 0,
  /* 8938 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'w', 9, 0,
  /* 8950 */ 'd', 'i', 'v', '_', 's', '.', 'w', 9, 0,
  /* 8959 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'w', 9, 0,
  /* 8970 */ 'm', 'a', 'x', '_', 's', '.', 'w', 9, 0,
  /* 8979 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'w', 9, 0,
  /* 8989 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'w', 9, 0,
  /* 9000 */ 'e', 'x', 't', 'r', '_', 'r', 's', '.', 'w', 9, 0,
  /* 9011 */ 'e', 'x', 't', 'r', 'v', '_', 'r', 's', '.', 'w', 9, 0,
  /* 9023 */ 'f', 'c', 'l', 'a', 's', 's', '.', 'w', 9, 0,
  /* 9033 */ 's', 'p', 'l', 'a', 't', '.', 'w', 9, 0,
  /* 9042 */ 'b', 's', 'e', 't', '.', 'w', 9, 0,
  /* 9050 */ 'f', 'c', 'l', 't', '.', 'w', 9, 0,
  /* 9058 */ 'f', 's', 'l', 't', '.', 'w', 9, 0,
  /* 9066 */ 'f', 'c', 'u', 'l', 't', '.', 'w', 9, 0,
  /* 9075 */ 'f', 's', 'u', 'l', 't', '.', 'w', 9, 0,
  /* 9084 */ 'p', 'c', 'n', 't', '.', 'w', 9, 0,
  /* 9092 */ 'f', 'r', 'i', 'n', 't', '.', 'w', 9, 0,
  /* 9101 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'w', 9, 0,
  /* 9111 */ 'f', 's', 'q', 'r', 't', '.', 'w', 9, 0,
  /* 9120 */ 'f', 'r', 's', 'q', 'r', 't', '.', 'w', 9, 0,
  /* 9130 */ 's', 't', '.', 'w', 9, 0,
  /* 9136 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 9146 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 9156 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 9167 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 'u', '.', 'w', 9, 0,
  /* 9179 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 9189 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 9200 */ 'm', 'o', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 9209 */ 'c', 'l', 'e', '_', 'u', '.', 'w', 9, 0,
  /* 9218 */ 'a', 'v', 'e', '_', 'u', '.', 'w', 9, 0,
  /* 9227 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 9237 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 9247 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 9257 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 9267 */ 'm', 'i', 'n', '_', 'u', '.', 'w', 9, 0,
  /* 9276 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'w', 9, 0,
  /* 9286 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'w', 9, 0,
  /* 9296 */ 's', 'u', 'b', 's', '_', 'u', '.', 'w', 9, 0,
  /* 9306 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'w', 9, 0,
  /* 9316 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'w', 9, 0,
  /* 9328 */ 's', 'a', 't', '_', 'u', '.', 'w', 9, 0,
  /* 9337 */ 'c', 'l', 't', '_', 'u', '.', 'w', 9, 0,
  /* 9346 */ 'f', 'f', 'i', 'n', 't', '_', 'u', '.', 'w', 9, 0,
  /* 9357 */ 'f', 't', 'i', 'n', 't', '_', 'u', '.', 'w', 9, 0,
  /* 9368 */ 'd', 'i', 'v', '_', 'u', '.', 'w', 9, 0,
  /* 9377 */ 'm', 'a', 'x', '_', 'u', '.', 'w', 9, 0,
  /* 9386 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'w', 9, 0,
  /* 9396 */ 'm', 's', 'u', 'b', 'v', '.', 'w', 9, 0,
  /* 9405 */ 'm', 'a', 'd', 'd', 'v', '.', 'w', 9, 0,
  /* 9414 */ 'p', 'c', 'k', 'e', 'v', '.', 'w', 9, 0,
  /* 9423 */ 'i', 'l', 'v', 'e', 'v', '.', 'w', 9, 0,
  /* 9432 */ 'f', 'd', 'i', 'v', '.', 'w', 9, 0,
  /* 9440 */ 'm', 'u', 'l', 'v', '.', 'w', 9, 0,
  /* 9448 */ 'e', 'x', 't', 'r', 'v', '.', 'w', 9, 0,
  /* 9457 */ 'f', 'm', 'a', 'x', '.', 'w', 9, 0,
  /* 9465 */ 'b', 'z', '.', 'w', 9, 0,
  /* 9471 */ 'b', 'n', 'z', '.', 'w', 9, 0,
  /* 9478 */ 'u', 'l', 'w', 9, 0,
  /* 9483 */ 'u', 's', 'w', 9, 0,
  /* 9488 */ 'p', 'r', 'e', 'f', 'x', 9, 0,
  /* 9495 */ 'l', 'h', 'x', 9, 0,
  /* 9500 */ 'j', 'a', 'l', 'x', 9, 0,
  /* 9506 */ 'l', 'b', 'u', 'x', 9, 0,
  /* 9512 */ 'l', 'w', 'x', 9, 0,
  /* 9517 */ 'b', 'g', 'e', 'z', 9, 0,
  /* 9523 */ 'b', 'l', 'e', 'z', 9, 0,
  /* 9529 */ 'b', 'n', 'e', 'z', 9, 0,
  /* 9535 */ 's', 'e', 'l', 'n', 'e', 'z', 9, 0,
  /* 9543 */ 'b', 't', 'n', 'e', 'z', 9, 0,
  /* 9550 */ 'd', 'c', 'l', 'z', 9, 0,
  /* 9556 */ 'b', 'e', 'q', 'z', 9, 0,
  /* 9562 */ 's', 'e', 'l', 'e', 'q', 'z', 9, 0,
  /* 9570 */ 'b', 't', 'e', 'q', 'z', 9, 0,
  /* 9577 */ 'b', 'g', 't', 'z', 9, 0,
  /* 9583 */ 'b', 'l', 't', 'z', 9, 0,
  /* 9589 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 9595 */ 's', 'e', 'b', 9, 32, 0,
  /* 9601 */ 'j', 'r', 'c', 9, 32, 0,
  /* 9607 */ 's', 'e', 'h', 9, 32, 0,
  /* 9613 */ 'd', 'd', 'i', 'v', 'u', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 9627 */ 'd', 'd', 'i', 'v', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 9640 */ 'a', 'd', 'd', 'i', 'u', 9, '$', 's', 'p', ',', 32, 0,
  /* 9652 */ 's', 'y', 'n', 'c', 32, 0,
  /* 9658 */ 'l', 'd', 32, 0,
  /* 9662 */ 9, '.', 'w', 'o', 'r', 'd', 32, 0,
  /* 9670 */ 's', 'd', 32, 0,
  /* 9674 */ 'd', 'i', 'n', 's', 'm', 32, 0,
  /* 9681 */ 'd', 'e', 'x', 't', 'm', 32, 0,
  /* 9688 */ 's', 'e', 'q', 32, 0,
  /* 9693 */ 'd', 'i', 'n', 's', 32, 0,
  /* 9699 */ 'd', 'e', 'x', 't', 32, 0,
  /* 9705 */ 'd', 'i', 'n', 's', 'u', 32, 0,
  /* 9712 */ 'd', 'e', 'x', 't', 'u', 32, 0,
  /* 9719 */ 'b', 'c', '1', 'n', 'e', 'z', 32, 0,
  /* 9727 */ 'b', 'c', '2', 'n', 'e', 'z', 32, 0,
  /* 9735 */ 'b', 'c', '1', 'e', 'q', 'z', 32, 0,
  /* 9743 */ 'b', 'c', '2', 'e', 'q', 'z', 32, 0,
  /* 9751 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'P', 'a', 't', 'c', 'h', 'a', 'b', 'l', 'e', 32, 'R', 'E', 'T', '.', 0,
  /* 9782 */ 'c', '.', 0,
  /* 9785 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 9808 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'a', 'i', 'l', 32, 'C', 'a', 'l', 'l', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 9831 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 9853 */ 'b', 'r', 'e', 'a', 'k', 32, '0', 0,
  /* 9861 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 9874 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 9881 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 9891 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 9906 */ 'j', 'r', 'c', 9, 32, '$', 'r', 'a', 0,
  /* 9915 */ 'j', 'r', 9, 32, '$', 'r', 'a', 0,
  /* 9923 */ 'e', 'h', 'b', 0,
  /* 9927 */ 'e', 'r', 'e', 't', 'n', 'c', 0,
  /* 9934 */ 'p', 'a', 'u', 's', 'e', 0,
  /* 9940 */ 't', 'l', 'b', 'i', 'n', 'v', 'f', 0,
  /* 9948 */ 't', 'l', 'b', 'w', 'i', 0,
  /* 9954 */ '#', 32, 'F', 'E', 'n', 't', 'r', 'y', 32, 'c', 'a', 'l', 'l', 0,
  /* 9968 */ 'f', 'o', 'o', 0,
  /* 9972 */ 't', 'l', 'b', 'p', 0,
  /* 9977 */ 's', 's', 'n', 'o', 'p', 0,
  /* 9983 */ 't', 'l', 'b', 'r', 0,
  /* 9988 */ 't', 'l', 'b', 'w', 'r', 0,
  /* 9994 */ 'd', 'e', 'r', 'e', 't', 0,
  /* 10000 */ 'w', 'a', 'i', 't', 0,
  /* 10005 */ 't', 'l', 'b', 'i', 'n', 'v', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    9882U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    9875U,	// BUNDLE
    9892U,	// LIFETIME_START
    9862U,	// LIFETIME_END
    0U,	// STACKMAP
    9955U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    9786U,	// PATCHABLE_FUNCTION_ENTER
    9752U,	// PATCHABLE_RET
    9832U,	// PATCHABLE_FUNCTION_EXIT
    9809U,	// PATCHABLE_TAIL_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_SEQUENCE
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    23756U,	// ABSMacro
    21913U,	// ABSQ_S_PH
    21913U,	// ABSQ_S_PH_MM
    18135U,	// ABSQ_S_QB
    18135U,	// ABSQ_S_QB_MMR2
    25243U,	// ABSQ_S_W
    25243U,	// ABSQ_S_W_MM
    19810U,	// ABS_D_MMR6
    23535U,	// ABS_S_MMR6
    268455889U,	// ADD
    18421U,	// ADDIUPC
    18421U,	// ADDIUPC_MM
    18421U,	// ADDIUPC_MMR6
    22811U,	// ADDIUR1SP_MM
    268452194U,	// ADDIUR2_MM
    8683907U,	// ADDIUS5_MM
    547160U,	// ADDIUSP_MM
    268459401U,	// ADDIU_MMR6
    268457174U,	// ADDQH_PH
    268457174U,	// ADDQH_PH_MMR2
    268457291U,	// ADDQH_R_PH
    268457291U,	// ADDQH_R_PH_MMR2
    268460374U,	// ADDQH_R_W
    268460374U,	// ADDQH_R_W_MMR2
    268459977U,	// ADDQH_W
    268459977U,	// ADDQH_W_MMR2
    268457248U,	// ADDQ_PH
    268457248U,	// ADDQ_PH_MM
    268457347U,	// ADDQ_S_PH
    268457347U,	// ADDQ_S_PH_MM
    268460679U,	// ADDQ_S_W
    268460679U,	// ADDQ_S_W_MM
    268453917U,	// ADDSC
    268453917U,	// ADDSC_MM
    268452558U,	// ADDS_A_B
    268454078U,	// ADDS_A_D
    268456118U,	// ADDS_A_H
    268459685U,	// ADDS_A_W
    268453026U,	// ADDS_S_B
    268455176U,	// ADDS_S_D
    268456675U,	// ADDS_S_H
    268460729U,	// ADDS_S_W
    268453241U,	// ADDS_U_B
    268455643U,	// ADDS_U_D
    268456953U,	// ADDS_U_H
    268461147U,	// ADDS_U_W
    268452398U,	// ADDU16_MM
    268452398U,	// ADDU16_MMR6
    268453459U,	// ADDUH_QB
    268453459U,	// ADDUH_QB_MMR2
    268453567U,	// ADDUH_R_QB
    268453567U,	// ADDUH_R_QB_MMR2
    268459342U,	// ADDU_MMR6
    268457446U,	// ADDU_PH
    268457446U,	// ADDU_PH_MMR2
    268453672U,	// ADDU_QB
    268453672U,	// ADDU_QB_MM
    268457391U,	// ADDU_S_PH
    268457391U,	// ADDU_S_PH_MMR2
    268453613U,	// ADDU_S_QB
    268453613U,	// ADDU_S_QB_MM
    268452807U,	// ADDVI_B
    268454598U,	// ADDVI_D
    268456334U,	// ADDVI_H
    268460110U,	// ADDVI_W
    268453319U,	// ADDV_B
    268455733U,	// ADDV_D
    268457031U,	// ADDV_H
    268461247U,	// ADDV_W
    268453956U,	// ADDWC
    268453956U,	// ADDWC_MM
    268452540U,	// ADD_A_B
    268454059U,	// ADD_A_D
    268456100U,	// ADD_A_H
    268459666U,	// ADD_A_W
    268455889U,	// ADD_MM
    268455889U,	// ADD_MMR6
    268457667U,	// ADDi
    268457667U,	// ADDi_MM
    268459401U,	// ADDiu
    268459401U,	// ADDiu_MM
    268459342U,	// ADDu
    268459342U,	// ADDu_MM
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    268458163U,	// ALIGN
    268458163U,	// ALIGN_MMR6
    18413U,	// ALUIPC
    18413U,	// ALUIPC_MMR6
    268455911U,	// AND
    9224625U,	// AND16_MM
    9224625U,	// AND16_MMR6
    268455911U,	// AND64
    268452294U,	// ANDI16_MM
    268452294U,	// ANDI16_MMR6
    268452666U,	// ANDI_B
    268457673U,	// ANDI_MMR6
    268455911U,	// AND_MM
    268455911U,	// AND_MMR6
    268459510U,	// AND_V
    0U,	// AND_V_D_PSEUDO
    0U,	// AND_V_H_PSEUDO
    0U,	// AND_V_W_PSEUDO
    268457673U,	// ANDi
    268457673U,	// ANDi64
    268457673U,	// ANDi_MM
    268455925U,	// APPEND
    268455925U,	// APPEND_MMR2
    268452920U,	// ASUB_S_B
    268455006U,	// ASUB_S_D
    268456507U,	// ASUB_S_H
    268460509U,	// ASUB_S_W
    268453135U,	// ASUB_U_B
    268455473U,	// ASUB_U_D
    268456795U,	// ASUB_U_H
    268460977U,	// ASUB_U_W
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    268457777U,	// AUI
    18406U,	// AUIPC
    18406U,	// AUIPC_MMR6
    268457777U,	// AUI_MMR6
    268453006U,	// AVER_S_B
    268455156U,	// AVER_S_D
    268456645U,	// AVER_S_H
    268460709U,	// AVER_S_W
    268453221U,	// AVER_U_B
    268455623U,	// AVER_U_D
    268456933U,	// AVER_U_H
    268461127U,	// AVER_U_W
    268452948U,	// AVE_S_B
    268455088U,	// AVE_S_D
    268456577U,	// AVE_S_H
    268460591U,	// AVE_S_W
    268453163U,	// AVE_U_B
    268455555U,	// AVE_U_D
    268456865U,	// AVE_U_H
    268461059U,	// AVE_U_W
    23945U,	// AddiuRxImmX16
    1072521U,	// AddiuRxPcImmX16
    553672073U,	// AddiuRxRxImm16
    16801161U,	// AddiuRxRxImmX16
    25189769U,	// AddiuRxRyOffMemX16
    1336745U,	// AddiuSpImm16
    550313U,	// AddiuSpImmX16
    268459342U,	// AdduRxRyRz16
    16797671U,	// AndRxRxRy16
    0U,	// B
    541069U,	// B16_MM
    268459341U,	// BADDu
    546647U,	// BAL
    542615U,	// BALC
    542615U,	// BALC_MMR6
    268458162U,	// BALIGN
    268458162U,	// BALIGN_MMR2
    0U,	// BAL_BR
    33570871U,	// BBIT0
    33571003U,	// BBIT032
    33570996U,	// BBIT1
    33571012U,	// BBIT132
    542594U,	// BC
    541074U,	// BC16_MMR6
    26120U,	// BC1EQZ
    18546U,	// BC1EQZC_MMR6
    20621U,	// BC1F
    22484U,	// BC1FL
    20621U,	// BC1F_MM
    26104U,	// BC1NEZ
    18521U,	// BC1NEZC_MMR6
    23810U,	// BC1T
    22598U,	// BC1TL
    23810U,	// BC1T_MM
    26128U,	// BC2EQZ
    18555U,	// BC2EQZC_MMR6
    26112U,	// BC2NEZ
    18530U,	// BC2NEZC_MMR6
    268452735U,	// BCLRI_B
    268454542U,	// BCLRI_D
    268456278U,	// BCLRI_H
    268460054U,	// BCLRI_W
    268452887U,	// BCLR_B
    268454930U,	// BCLR_D
    268456474U,	// BCLR_H
    268460425U,	// BCLR_W
    542594U,	// BC_MMR6
    268458374U,	// BEQ
    268458374U,	// BEQ64
    268453899U,	// BEQC
    268453899U,	// BEQC64
    268453899U,	// BEQC_MMR6
    268458042U,	// BEQL
    268458042U,	// BEQLImmMacro
    16977U,	// BEQZ16_MM
    18367U,	// BEQZALC
    18367U,	// BEQZALC_MMR6
    18564U,	// BEQZC
    16808U,	// BEQZC16_MMR6
    18564U,	// BEQZC64
    18564U,	// BEQZC_MM
    18564U,	// BEQZC_MMR6
    268458374U,	// BEQ_MM
    268455973U,	// BGE
    268453766U,	// BGEC
    268453766U,	// BGEC64
    268453766U,	// BGEC_MMR6
    268455973U,	// BGEImmMacro
    268457922U,	// BGEL
    268457922U,	// BGELImmMacro
    268459369U,	// BGEU
    268453930U,	// BGEUC
    268453930U,	// BGEUC64
    268453930U,	// BGEUC_MMR6
    268459369U,	// BGEUImmMacro
    268458073U,	// BGEUL
    268458073U,	// BGEULImmMacro
    25902U,	// BGEZ
    25902U,	// BGEZ64
    22369U,	// BGEZAL
    18340U,	// BGEZALC
    18340U,	// BGEZALC_MMR6
    22556U,	// BGEZALL
    23767U,	// BGEZALS_MM
    22369U,	// BGEZAL_MM
    18507U,	// BGEZC
    18507U,	// BGEZC64
    18507U,	// BGEZC_MMR6
    22661U,	// BGEZL
    25902U,	// BGEZ_MM
    268459272U,	// BGT
    268459272U,	// BGTImmMacro
    268458061U,	// BGTL
    268458061U,	// BGTLImmMacro
    268459459U,	// BGTU
    268459459U,	// BGTUImmMacro
    268458093U,	// BGTUL
    268458093U,	// BGTULImmMacro
    25962U,	// BGTZ
    25962U,	// BGTZ64
    18376U,	// BGTZALC
    18376U,	// BGTZALC_MMR6
    18571U,	// BGTZC
    18571U,	// BGTZC64
    18571U,	// BGTZC_MMR6
    22675U,	// BGTZL
    25962U,	// BGTZ_MM
    285229924U,	// BINSLI_B
    285231731U,	// BINSLI_D
    285233467U,	// BINSLI_H
    285237243U,	// BINSLI_W
    285230071U,	// BINSL_B
    285231931U,	// BINSL_D
    285233581U,	// BINSL_H
    285237401U,	// BINSL_W
    285229985U,	// BINSRI_B
    285231776U,	// BINSRI_D
    285233512U,	// BINSRI_H
    285237288U,	// BINSRI_W
    285230119U,	// BINSR_B
    285232196U,	// BINSR_D
    285233706U,	// BINSR_H
    285237691U,	// BINSR_W
    24126U,	// BITREV
    24126U,	// BITREV_MM
    22761U,	// BITSWAP
    22761U,	// BITSWAP_MMR6
    268456000U,	// BLE
    268456000U,	// BLEImmMacro
    268457928U,	// BLEL
    268457928U,	// BLELImmMacro
    268459381U,	// BLEU
    268459381U,	// BLEUImmMacro
    268458080U,	// BLEUL
    268458080U,	// BLEULImmMacro
    25908U,	// BLEZ
    25908U,	// BLEZ64
    18349U,	// BLEZALC
    18349U,	// BLEZALC_MMR6
    18514U,	// BLEZC
    18514U,	// BLEZC64
    18514U,	// BLEZC_MMR6
    22668U,	// BLEZL
    25908U,	// BLEZ_MM
    268459283U,	// BLT
    268453924U,	// BLTC
    268453924U,	// BLTC64
    268453924U,	// BLTC_MMR6
    268459283U,	// BLTImmMacro
    268458067U,	// BLTL
    268458067U,	// BLTLImmMacro
    268459465U,	// BLTU
    268453937U,	// BLTUC
    268453937U,	// BLTUC64
    268453937U,	// BLTUC_MMR6
    268459465U,	// BLTUImmMacro
    268458100U,	// BLTUL
    268458100U,	// BLTULImmMacro
    25968U,	// BLTZ
    25968U,	// BLTZ64
    22377U,	// BLTZAL
    18385U,	// BLTZALC
    18385U,	// BLTZALC_MMR6
    22565U,	// BLTZALL
    23776U,	// BLTZALS_MM
    22377U,	// BLTZAL_MM
    18578U,	// BLTZC
    18578U,	// BLTZC64
    18578U,	// BLTZC_MMR6
    22682U,	// BLTZL
    25968U,	// BLTZ_MM
    285230040U,	// BMNZI_B
    285236783U,	// BMNZ_V
    285230032U,	// BMZI_B
    285236769U,	// BMZ_V
    268456022U,	// BNE
    268456022U,	// BNE64
    268453772U,	// BNEC
    268453772U,	// BNEC64
    268453772U,	// BNEC_MMR6
    268452674U,	// BNEGI_B
    268454490U,	// BNEGI_D
    268456226U,	// BNEGI_H
    268460002U,	// BNEGI_W
    268452642U,	// BNEG_B
    268454466U,	// BNEG_D
    268456202U,	// BNEG_H
    268459897U,	// BNEG_W
    268457934U,	// BNEL
    268457934U,	// BNELImmMacro
    16969U,	// BNEZ16_MM
    18358U,	// BNEZALC
    18358U,	// BNEZALC_MMR6
    18539U,	// BNEZC
    16799U,	// BNEZC16_MMR6
    18539U,	// BNEZC64
    18539U,	// BNEZC_MM
    18539U,	// BNEZC_MMR6
    268456022U,	// BNE_MM
    268453944U,	// BNVC
    268453944U,	// BNVC_MMR6
    17903U,	// BNZ_B
    20402U,	// BNZ_D
    21615U,	// BNZ_H
    24104U,	// BNZ_V
    25856U,	// BNZ_W
    268453950U,	// BOVC
    268453950U,	// BOVC_MMR6
    540885U,	// BPOSGE32
    542583U,	// BPOSGE32C_MMR3
    540885U,	// BPOSGE32_MM
    0U,	// BPOSGE32_PSEUDO
    42014526U,	// BREAK
    82388U,	// BREAK16_MM
    82388U,	// BREAK16_MMR6
    42014526U,	// BREAK_MM
    42014526U,	// BREAK_MMR6
    285229899U,	// BSELI_B
    0U,	// BSEL_D_PSEUDO
    0U,	// BSEL_FD_PSEUDO
    0U,	// BSEL_FW_PSEUDO
    0U,	// BSEL_H_PSEUDO
    285236741U,	// BSEL_V
    0U,	// BSEL_W_PSEUDO
    268452789U,	// BSETI_B
    268454580U,	// BSETI_D
    268456316U,	// BSETI_H
    268460092U,	// BSETI_W
    268453103U,	// BSET_B
    268455292U,	// BSET_D
    268456763U,	// BSET_H
    268460883U,	// BSET_W
    17897U,	// BZ_B
    20386U,	// BZ_D
    21609U,	// BZ_H
    24091U,	// BZ_V
    25850U,	// BZ_W
    541378U,	// B_MMR6_Pseudo
    541378U,	// B_MM_Pseudo
    268458374U,	// BeqImm
    805332309U,	// BeqzRxImm16
    25941U,	// BeqzRxImmX16
    1327810U,	// Bimm16
    541378U,	// BimmX16
    268456022U,	// BneImm
    805332282U,	// BnezRxImm16
    25914U,	// BnezRxImmX16
    9854U,	// Break16
    1598819U,	// Bteqz16
    1073764624U,	// BteqzT8CmpX16
    1073764102U,	// BteqzT8CmpiX16
    1073765656U,	// BteqzT8SltX16
    1073764132U,	// BteqzT8SltiX16
    1073765783U,	// BteqzT8SltiuX16
    1073765839U,	// BteqzT8SltuX16
    550243U,	// BteqzX16
    1598792U,	// Btnez16
    1342200080U,	// BtnezT8CmpX16
    1342199558U,	// BtnezT8CmpiX16
    1342201112U,	// BtnezT8SltX16
    1342199588U,	// BtnezT8SltiX16
    1342201239U,	// BtnezT8SltiuX16
    1342201295U,	// BtnezT8SltuX16
    550216U,	// BtnezX16
    0U,	// BuildPairF64
    0U,	// BuildPairF64_64
    1937455U,	// CACHE
    1937430U,	// CACHEE
    1937430U,	// CACHEE_MM
    1937430U,	// CACHEE_MMR6
    1937455U,	// CACHE_MM
    1937455U,	// CACHE_MMR6
    1937455U,	// CACHE_R6
    19173U,	// CEIL_L_D64
    19173U,	// CEIL_L_D_MMR6
    23359U,	// CEIL_L_S
    23359U,	// CEIL_L_S_MMR6
    20348U,	// CEIL_W_D32
    20348U,	// CEIL_W_D64
    20348U,	// CEIL_W_D_MMR6
    20348U,	// CEIL_W_MM
    23691U,	// CEIL_W_S
    23691U,	// CEIL_W_S_MM
    23691U,	// CEIL_W_S_MMR6
    268452718U,	// CEQI_B
    268454525U,	// CEQI_D
    268456261U,	// CEQI_H
    268460037U,	// CEQI_W
    268452872U,	// CEQ_B
    268454837U,	// CEQ_D
    268456452U,	// CEQ_H
    268460313U,	// CEQ_W
    16458U,	// CFC1
    16458U,	// CFC1_MM
    16674U,	// CFC2_MM
    17068U,	// CFCMSA
    268459241U,	// CINS
    268452102U,	// CINS32
    268459241U,	// CINS64_32
    268459241U,	// CINS_i32
    19818U,	// CLASS_D
    19818U,	// CLASS_D_MMR6
    23542U,	// CLASS_S
    23542U,	// CLASS_S_MMR6
    268452957U,	// CLEI_S_B
    268455097U,	// CLEI_S_D
    268456586U,	// CLEI_S_H
    268460600U,	// CLEI_S_W
    268453172U,	// CLEI_U_B
    268455564U,	// CLEI_U_D
    268456874U,	// CLEI_U_H
    268461068U,	// CLEI_U_W
    268452939U,	// CLE_S_B
    268455079U,	// CLE_S_D
    268456568U,	// CLE_S_H
    268460582U,	// CLE_S_W
    268453154U,	// CLE_U_B
    268455546U,	// CLE_U_D
    268456856U,	// CLE_U_H
    268461050U,	// CLE_U_W
    22729U,	// CLO
    22729U,	// CLO_MM
    22729U,	// CLO_MMR6
    22729U,	// CLO_R6
    268452977U,	// CLTI_S_B
    268455117U,	// CLTI_S_D
    268456606U,	// CLTI_S_H
    268460620U,	// CLTI_S_W
    268453192U,	// CLTI_U_B
    268455584U,	// CLTI_U_D
    268456894U,	// CLTI_U_H
    268461088U,	// CLTI_U_W
    268453045U,	// CLT_S_B
    268455195U,	// CLT_S_D
    268456694U,	// CLT_S_H
    268460748U,	// CLT_S_W
    268453272U,	// CLT_U_B
    268455674U,	// CLT_U_D
    268456984U,	// CLT_U_H
    268461178U,	// CLT_U_W
    25936U,	// CLZ
    25936U,	// CLZ_MM
    25936U,	// CLZ_MMR6
    25936U,	// CLZ_R6
    268453505U,	// CMPGDU_EQ_QB
    268453505U,	// CMPGDU_EQ_QB_MMR2
    268453410U,	// CMPGDU_LE_QB
    268453410U,	// CMPGDU_LE_QB_MMR2
    268453624U,	// CMPGDU_LT_QB
    268453624U,	// CMPGDU_LT_QB_MMR2
    268453519U,	// CMPGU_EQ_QB
    268453519U,	// CMPGU_EQ_QB_MM
    268453424U,	// CMPGU_LE_QB
    268453424U,	// CMPGU_LE_QB_MM
    268453638U,	// CMPGU_LT_QB
    268453638U,	// CMPGU_LT_QB_MM
    18076U,	// CMPU_EQ_QB
    18076U,	// CMPU_EQ_QB_MM
    17981U,	// CMPU_LE_QB
    17981U,	// CMPU_LE_QB_MM
    18195U,	// CMPU_LT_QB
    18195U,	// CMPU_LT_QB_MM
    268454387U,	// CMP_AF_D_MMR6
    268458731U,	// CMP_AF_S_MMR6
    268454826U,	// CMP_EQ_D
    268454826U,	// CMP_EQ_D_MMR6
    21801U,	// CMP_EQ_PH
    21801U,	// CMP_EQ_PH_MM
    268458929U,	// CMP_EQ_S
    268458929U,	// CMP_EQ_S_MMR6
    268454387U,	// CMP_F_D
    268458731U,	// CMP_F_S
    268454231U,	// CMP_LE_D
    268454231U,	// CMP_LE_D_MMR6
    21697U,	// CMP_LE_PH
    21697U,	// CMP_LE_PH_MM
    268458652U,	// CMP_LE_S
    268458652U,	// CMP_LE_S_MMR6
    268455317U,	// CMP_LT_D
    268455317U,	// CMP_LT_D_MMR6
    21970U,	// CMP_LT_PH
    21970U,	// CMP_LT_PH_MM
    268459024U,	// CMP_LT_S
    268459024U,	// CMP_LT_S_MMR6
    268454405U,	// CMP_SAF_D
    268454405U,	// CMP_SAF_D_MMR6
    268458741U,	// CMP_SAF_S
    268458741U,	// CMP_SAF_S_MMR6
    268454853U,	// CMP_SEQ_D
    268454853U,	// CMP_SEQ_D_MMR6
    268458948U,	// CMP_SEQ_S
    268458948U,	// CMP_SEQ_S_MMR6
    268454268U,	// CMP_SLE_D
    268454268U,	// CMP_SLE_D_MMR6
    268458681U,	// CMP_SLE_S
    268458681U,	// CMP_SLE_S_MMR6
    268455344U,	// CMP_SLT_D
    268455344U,	// CMP_SLT_D_MMR6
    268459043U,	// CMP_SLT_S
    268459043U,	// CMP_SLT_S_MMR6
    268454901U,	// CMP_SUEQ_D
    268454901U,	// CMP_SUEQ_D_MMR6
    268458979U,	// CMP_SUEQ_S
    268458979U,	// CMP_SUEQ_S_MMR6
    268454316U,	// CMP_SULE_D
    268454316U,	// CMP_SULE_D_MMR6
    268458712U,	// CMP_SULE_S
    268458712U,	// CMP_SULE_S_MMR6
    268455392U,	// CMP_SULT_D
    268455392U,	// CMP_SULT_D_MMR6
    268459074U,	// CMP_SULT_S
    268459074U,	// CMP_SULT_S_MMR6
    268454774U,	// CMP_SUN_D
    268454774U,	// CMP_SUN_D_MMR6
    268458893U,	// CMP_SUN_S
    268458893U,	// CMP_SUN_S_MMR6
    268454881U,	// CMP_UEQ_D
    268454881U,	// CMP_UEQ_D_MMR6
    268458968U,	// CMP_UEQ_S
    268458968U,	// CMP_UEQ_S_MMR6
    268454296U,	// CMP_ULE_D
    268454296U,	// CMP_ULE_D_MMR6
    268458701U,	// CMP_ULE_S
    268458701U,	// CMP_ULE_S_MMR6
    268455372U,	// CMP_ULT_D
    268455372U,	// CMP_ULT_D_MMR6
    268459063U,	// CMP_ULT_S
    268459063U,	// CMP_ULT_S_MMR6
    268454756U,	// CMP_UN_D
    268454756U,	// CMP_UN_D_MMR6
    268458883U,	// CMP_UN_S
    268458883U,	// CMP_UN_S_MMR6
    9969U,	// CONSTPOOL_ENTRY
    0U,	// COPY_FD_PSEUDO
    0U,	// COPY_FW_PSEUDO
    1610630364U,	// COPY_S_B
    1610632536U,	// COPY_S_D
    1610634024U,	// COPY_S_H
    1610638100U,	// COPY_S_W
    1610630579U,	// COPY_U_B
    1610634291U,	// COPY_U_H
    1610638507U,	// COPY_U_W
    10518629U,	// CTC1
    10518629U,	// CTC1_MM
    10518845U,	// CTC2_MM
    17076U,	// CTCMSA
    23161U,	// CVT_D32_S
    24289U,	// CVT_D32_W
    24289U,	// CVT_D32_W_MM
    22341U,	// CVT_D64_L
    23161U,	// CVT_D64_S
    24289U,	// CVT_D64_W
    22341U,	// CVT_D_L_MMR6
    23161U,	// CVT_D_S_MM
    23161U,	// CVT_D_S_MMR6
    24289U,	// CVT_D_W_MMR6
    19194U,	// CVT_L_D64
    19194U,	// CVT_L_D64_MM
    19194U,	// CVT_L_D_MMR6
    23380U,	// CVT_L_S
    23380U,	// CVT_L_S_MM
    23380U,	// CVT_L_S_MMR6
    19541U,	// CVT_S_D32
    19541U,	// CVT_S_D32_MM
    19541U,	// CVT_S_D64
    19541U,	// CVT_S_D_MMR6
    22350U,	// CVT_S_L
    22350U,	// CVT_S_L_MMR6
    25044U,	// CVT_S_W
    25044U,	// CVT_S_W_MM
    25044U,	// CVT_S_W_MMR6
    20369U,	// CVT_W_D32
    20369U,	// CVT_W_D64
    20369U,	// CVT_W_D_MMR6
    20369U,	// CVT_W_MM
    23712U,	// CVT_W_S
    23712U,	// CVT_W_S_MM
    23712U,	// CVT_W_S_MMR6
    268454818U,	// C_EQ_D32
    268454818U,	// C_EQ_D32_MM
    268454818U,	// C_EQ_D64
    268454818U,	// C_EQ_D64_MM
    268458921U,	// C_EQ_S
    268458921U,	// C_EQ_S_MM
    268454380U,	// C_F_D32
    268454380U,	// C_F_D32_MM
    268454380U,	// C_F_D64
    268454380U,	// C_F_D64_MM
    268458724U,	// C_F_S
    268458724U,	// C_F_S_MM
    268454223U,	// C_LE_D32
    268454223U,	// C_LE_D32_MM
    268454223U,	// C_LE_D64
    268454223U,	// C_LE_D64_MM
    268458644U,	// C_LE_S
    268458644U,	// C_LE_S_MM
    268455309U,	// C_LT_D32
    268455309U,	// C_LT_D32_MM
    268455309U,	// C_LT_D64
    268455309U,	// C_LT_D64_MM
    268459016U,	// C_LT_S
    268459016U,	// C_LT_S_MM
    268454214U,	// C_NGE_D32
    268454214U,	// C_NGE_D32_MM
    268454214U,	// C_NGE_D64
    268454214U,	// C_NGE_D64_MM
    268458635U,	// C_NGE_S
    268458635U,	// C_NGE_S_MM
    268454249U,	// C_NGLE_D32
    268454249U,	// C_NGLE_D32_MM
    268454249U,	// C_NGLE_D64
    268454249U,	// C_NGLE_D64_MM
    268458662U,	// C_NGLE_S
    268458662U,	// C_NGLE_S_MM
    268454666U,	// C_NGL_D32
    268454666U,	// C_NGL_D32_MM
    268454666U,	// C_NGL_D64
    268454666U,	// C_NGL_D64_MM
    268458852U,	// C_NGL_S
    268458852U,	// C_NGL_S_MM
    268455300U,	// C_NGT_D32
    268455300U,	// C_NGT_D32_MM
    268455300U,	// C_NGT_D64
    268455300U,	// C_NGT_D64_MM
    268459007U,	// C_NGT_S
    268459007U,	// C_NGT_S_MM
    268454259U,	// C_OLE_D32
    268454259U,	// C_OLE_D32_MM
    268454259U,	// C_OLE_D64
    268454259U,	// C_OLE_D64_MM
    268458672U,	// C_OLE_S
    268458672U,	// C_OLE_S_MM
    268455335U,	// C_OLT_D32
    268455335U,	// C_OLT_D32_MM
    268455335U,	// C_OLT_D64
    268455335U,	// C_OLT_D64_MM
    268459034U,	// C_OLT_S
    268459034U,	// C_OLT_S_MM
    268454844U,	// C_SEQ_D32
    268454844U,	// C_SEQ_D32_MM
    268454844U,	// C_SEQ_D64
    268454844U,	// C_SEQ_D64_MM
    268458939U,	// C_SEQ_S
    268458939U,	// C_SEQ_S_MM
    268454450U,	// C_SF_D32
    268454450U,	// C_SF_D32_MM
    268454450U,	// C_SF_D64
    268454450U,	// C_SF_D64_MM
    268458770U,	// C_SF_S
    268458770U,	// C_SF_S_MM
    268454872U,	// C_UEQ_D32
    268454872U,	// C_UEQ_D32_MM
    268454872U,	// C_UEQ_D64
    268454872U,	// C_UEQ_D64_MM
    268458959U,	// C_UEQ_S
    268458959U,	// C_UEQ_S_MM
    268454287U,	// C_ULE_D32
    268454287U,	// C_ULE_D32_MM
    268454287U,	// C_ULE_D64
    268454287U,	// C_ULE_D64_MM
    268458692U,	// C_ULE_S
    268458692U,	// C_ULE_S_MM
    268455363U,	// C_ULT_D32
    268455363U,	// C_ULT_D32_MM
    268455363U,	// C_ULT_D64
    268455363U,	// C_ULT_D64_MM
    268459054U,	// C_ULT_S
    268459054U,	// C_ULT_S_MM
    268454748U,	// C_UN_D32
    268454748U,	// C_UN_D32_MM
    268454748U,	// C_UN_D64
    268454748U,	// C_UN_D64_MM
    268458875U,	// C_UN_S
    268458875U,	// C_UN_S_MM
    22800U,	// CmpRxRy16
    1879070470U,	// CmpiRxImm16
    22278U,	// CmpiRxImmX16
    550335U,	// Constant32
    268455888U,	// DADD
    268459400U,	// DADDIU_MM64R6
    268459348U,	// DADDU_MM64R6
    268455888U,	// DADD_MM64R6
    268457666U,	// DADDi
    268459400U,	// DADDiu
    268459348U,	// DADDu
    268457697U,	// DAHI
    2199951073U,	// DAHI_MM64R6
    268458170U,	// DALIGN
    268458170U,	// DALIGN_MM64R6
    268457758U,	// DATI
    2199951134U,	// DATI_MM64R6
    268457776U,	// DAUI
    268457776U,	// DAUI_MM64R6
    22760U,	// DBITSWAP
    22760U,	// DBITSWAP_MM64R6
    22728U,	// DCLO
    22728U,	// DCLO_MM64R6
    22728U,	// DCLO_R6
    25935U,	// DCLZ
    25935U,	// DCLZ_MM64R6
    25935U,	// DCLZ_R6
    268459590U,	// DDIV
    268459498U,	// DDIVU
    268459498U,	// DDIVU_MM64R6
    268459590U,	// DDIV_MM64R6
    9995U,	// DERET
    9995U,	// DERET_MM
    9995U,	// DERET_MMR6
    268461540U,	// DEXT
    268461540U,	// DEXT64_32
    268461522U,	// DEXTM
    268458145U,	// DEXTM_MM64R6
    268461553U,	// DEXTU
    268459491U,	// DEXTU_MM64R6
    268459316U,	// DEXT_MM64R6
    546501U,	// DI
    268461534U,	// DINS
    268461515U,	// DINSM
    268461515U,	// DINSM_MM64R6
    268461546U,	// DINSU
    268461546U,	// DINSU_MM64R6
    268461534U,	// DINS_MM64R6
    268459591U,	// DIV
    268459499U,	// DIVU
    268459499U,	// DIVU_MMR6
    268459591U,	// DIV_MMR6
    268453066U,	// DIV_S_B
    268455238U,	// DIV_S_D
    268456715U,	// DIV_S_H
    268460791U,	// DIV_S_W
    268453281U,	// DIV_U_B
    268455705U,	// DIV_U_D
    268456993U,	// DIV_U_H
    268461209U,	// DIV_U_W
    546501U,	// DI_MM
    546501U,	// DI_MMR6
    268452518U,	// DLSA
    2466546342U,	// DLSA_MM64R6
    268452518U,	// DLSA_R6
    268451849U,	// DMFC0
    268451849U,	// DMFC0_MM64R6
    16464U,	// DMFC1
    16464U,	// DMFC1_MM64R6
    268452136U,	// DMFC2
    16680U,	// DMFC2_MM64R6
    58736936U,	// DMFC2_OCTEON
    268455933U,	// DMOD
    268459362U,	// DMODU
    268459362U,	// DMODU_MM64R6
    268455933U,	// DMOD_MM64R6
    2736816158U,	// DMTC0
    2736816158U,	// DMTC0_MM64R6
    10518635U,	// DMTC1
    10518635U,	// DMTC1_MM64R6
    2736816451U,	// DMTC2
    10518851U,	// DMTC2_MM64R6
    58736963U,	// DMTC2_OCTEON
    268457653U,	// DMUH
    268459393U,	// DMUHU
    268459393U,	// DMUHU_MM64R6
    268457653U,	// DMUH_MM64R6
    268458087U,	// DMUL
    268458087U,	// DMULImmMacro
    268458087U,	// DMULMacro
    268458209U,	// DMULOMacro
    268459451U,	// DMULOUMacro
    23842U,	// DMULT
    24027U,	// DMULTu
    268459437U,	// DMULU
    268459437U,	// DMULU_MM64R6
    268458087U,	// DMUL_MM64R6
    268458087U,	// DMUL_R6
    268455146U,	// DOTP_S_D
    268456635U,	// DOTP_S_H
    268460659U,	// DOTP_S_W
    268455613U,	// DOTP_U_D
    268456923U,	// DOTP_U_H
    268461117U,	// DOTP_U_W
    285232275U,	// DPADD_S_D
    285233764U,	// DPADD_S_H
    285237778U,	// DPADD_S_W
    285232742U,	// DPADD_U_D
    285234052U,	// DPADD_U_H
    285238246U,	// DPADD_U_W
    268457505U,	// DPAQX_SA_W_PH
    268457505U,	// DPAQX_SA_W_PH_MMR2
    268457588U,	// DPAQX_S_W_PH
    268457588U,	// DPAQX_S_W_PH_MMR2
    268460119U,	// DPAQ_SA_L_W
    268460119U,	// DPAQ_SA_L_W_MM
    268457547U,	// DPAQ_S_W_PH
    268457547U,	// DPAQ_S_W_PH_MM
    268457841U,	// DPAU_H_QBL
    268457841U,	// DPAU_H_QBL_MM
    268458389U,	// DPAU_H_QBR
    268458389U,	// DPAU_H_QBR_MM
    268457626U,	// DPAX_W_PH
    268457626U,	// DPAX_W_PH_MMR2
    268457495U,	// DPA_W_PH
    268457495U,	// DPA_W_PH_MMR2
    22805U,	// DPOP
    268457520U,	// DPSQX_SA_W_PH
    268457520U,	// DPSQX_SA_W_PH_MMR2
    268457602U,	// DPSQX_S_W_PH
    268457602U,	// DPSQX_S_W_PH_MMR2
    268460132U,	// DPSQ_SA_L_W
    268460132U,	// DPSQ_SA_L_W_MM
    268457575U,	// DPSQ_S_W_PH
    268457575U,	// DPSQ_S_W_PH_MM
    285232242U,	// DPSUB_S_D
    285233743U,	// DPSUB_S_H
    285237745U,	// DPSUB_S_W
    285232709U,	// DPSUB_U_D
    285234031U,	// DPSUB_U_H
    285238213U,	// DPSUB_U_W
    268457853U,	// DPSU_H_QBL
    268457853U,	// DPSU_H_QBL_MM
    268458401U,	// DPSU_H_QBR
    268458401U,	// DPSU_H_QBR_MM
    268457637U,	// DPSX_W_PH
    268457637U,	// DPSX_W_PH_MMR2
    268457616U,	// DPS_W_PH
    268457616U,	// DPS_W_PH_MMR2
    268458036U,	// DROL
    268458036U,	// DROLImm
    268458541U,	// DROR
    268458541U,	// DRORImm
    268458568U,	// DROTR
    268452093U,	// DROTR32
    268452093U,	// DROTR32_MM64R6
    268459634U,	// DROTRV
    268459634U,	// DROTRV_MM64R6
    268458568U,	// DROTR_MM64R6
    21622U,	// DSBH
    21622U,	// DSBH_MM64R6
    26012U,	// DSDIV
    268459590U,	// DSDivIMacro
    268459590U,	// DSDivMacro
    20444U,	// DSHD
    20444U,	// DSHD_MM64R6
    268458030U,	// DSLL
    268452063U,	// DSLL32
    268452063U,	// DSLL32_MM64R6
    2952812590U,	// DSLL64_32
    268459596U,	// DSLLV
    268459596U,	// DSLLV_MM64R6
    268458030U,	// DSLL_MM64R6
    268452512U,	// DSRA
    268452045U,	// DSRA32
    268452045U,	// DSRA32_MM64R6
    268459575U,	// DSRAV
    268459575U,	// DSRAV_MM64R6
    268452512U,	// DSRA_MM64R6
    268458048U,	// DSRL
    268452071U,	// DSRL32
    268452071U,	// DSRL32_MM64R6
    268459603U,	// DSRLV
    268459603U,	// DSRLV_MM64R6
    268458048U,	// DSRL_MM64R6
    268453739U,	// DSUB
    268459327U,	// DSUBU_MM64R6
    268453739U,	// DSUB_MM64R6
    268459327U,	// DSUBu
    25998U,	// DUDIV
    268459498U,	// DUDivIMacro
    268459498U,	// DUDivMacro
    547186U,	// DVP
    547186U,	// DVP_MMR6
    26013U,	// DivRxRy16
    25999U,	// DivuRxRy16
    9924U,	// EHB
    9924U,	// EHB_MM
    9924U,	// EHB_MMR6
    546513U,	// EI
    546513U,	// EI_MM
    546513U,	// EI_MMR6
    9996U,	// ERET
    9928U,	// ERETNC
    9928U,	// ERETNC_MMR6
    9996U,	// ERET_MM
    9996U,	// ERET_MMR6
    0U,	// ERet
    547191U,	// EVP
    547191U,	// EVP_MMR6
    268461541U,	// EXT
    268458348U,	// EXTP
    268458233U,	// EXTPDP
    268459618U,	// EXTPDPV
    268459618U,	// EXTPDPV_MM
    268458233U,	// EXTPDP_MM
    268459627U,	// EXTPV
    268459627U,	// EXTPV_MM
    268458348U,	// EXTP_MM
    268460852U,	// EXTRV_RS_W
    268460852U,	// EXTRV_RS_W_MM
    268460406U,	// EXTRV_R_W
    268460406U,	// EXTRV_R_W_MM
    268456724U,	// EXTRV_S_H
    268456724U,	// EXTRV_S_H_MM
    268461289U,	// EXTRV_W
    268461289U,	// EXTRV_W_MM
    268460841U,	// EXTR_RS_W
    268460841U,	// EXTR_RS_W_MM
    268460385U,	// EXTR_R_W
    268460385U,	// EXTR_R_W_MM
    268456655U,	// EXTR_S_H
    268456655U,	// EXTR_S_H_MM
    268460484U,	// EXTR_W
    268460484U,	// EXTR_W_MM
    268459254U,	// EXTS
    268452110U,	// EXTS32
    268461541U,	// EXT_MM
    268459317U,	// EXT_MMR6
    0U,	// ExtractElementF64
    0U,	// ExtractElementF64_64
    0U,	// FABS_D
    19810U,	// FABS_D32
    19810U,	// FABS_D64
    19810U,	// FABS_MM
    23535U,	// FABS_S
    23535U,	// FABS_S_MM
    0U,	// FABS_W
    268454163U,	// FADD_D
    268454164U,	// FADD_D32
    268454164U,	// FADD_D64
    285231380U,	// FADD_D_MMR6
    268454164U,	// FADD_MM
    268458628U,	// FADD_S
    268458628U,	// FADD_S_MM
    285235844U,	// FADD_S_MMR6
    268459754U,	// FADD_W
    268454397U,	// FCAF_D
    268459873U,	// FCAF_W
    268454836U,	// FCEQ_D
    268460312U,	// FCEQ_W
    19817U,	// FCLASS_D
    25408U,	// FCLASS_W
    268454241U,	// FCLE_D
    268459796U,	// FCLE_W
    268455327U,	// FCLT_D
    268460891U,	// FCLT_W
    2483767U,	// FCMP_D32
    2483767U,	// FCMP_D32_MM
    2483767U,	// FCMP_D64
    2745911U,	// FCMP_S32
    2745911U,	// FCMP_S32_MM
    268454337U,	// FCNE_D
    268459830U,	// FCNE_W
    268454946U,	// FCOR_D
    268460441U,	// FCOR_W
    268454892U,	// FCUEQ_D
    268460328U,	// FCUEQ_W
    268454307U,	// FCULE_D
    268459812U,	// FCULE_W
    268455383U,	// FCULT_D
    268460907U,	// FCULT_W
    268454353U,	// FCUNE_D
    268459846U,	// FCUNE_W
    268454766U,	// FCUN_D
    268460218U,	// FCUN_W
    268455759U,	// FDIV_D
    268455760U,	// FDIV_D32
    268455760U,	// FDIV_D64
    285232976U,	// FDIV_D_MMR6
    268455760U,	// FDIV_MM
    268459111U,	// FDIV_S
    268459111U,	// FDIV_S_MM
    285236327U,	// FDIV_S_MMR6
    268461273U,	// FDIV_W
    268456382U,	// FEXDO_H
    268460234U,	// FEXDO_W
    268454050U,	// FEXP2_D
    0U,	// FEXP2_D_1_PSEUDO
    268459657U,	// FEXP2_W
    0U,	// FEXP2_W_1_PSEUDO
    19234U,	// FEXUPL_D
    24704U,	// FEXUPL_W
    19506U,	// FEXUPR_D
    25001U,	// FEXUPR_W
    19748U,	// FFINT_S_D
    25301U,	// FFINT_S_W
    20227U,	// FFINT_U_D
    25731U,	// FFINT_U_W
    19244U,	// FFQL_D
    24714U,	// FFQL_W
    19516U,	// FFQR_D
    25011U,	// FFQR_W
    17377U,	// FILL_B
    19219U,	// FILL_D
    0U,	// FILL_FD_PSEUDO
    0U,	// FILL_FW_PSEUDO
    20887U,	// FILL_H
    24689U,	// FILL_W
    18585U,	// FLOG2_D
    24192U,	// FLOG2_W
    19183U,	// FLOOR_L_D64
    19183U,	// FLOOR_L_D_MMR6
    23369U,	// FLOOR_L_S
    23369U,	// FLOOR_L_S_MMR6
    20358U,	// FLOOR_W_D32
    20358U,	// FLOOR_W_D64
    20358U,	// FLOOR_W_D_MMR6
    20358U,	// FLOOR_W_MM
    23701U,	// FLOOR_W_S
    23701U,	// FLOOR_W_S_MM
    23701U,	// FLOOR_W_S_MMR6
    285231387U,	// FMADD_D
    285236978U,	// FMADD_W
    268454088U,	// FMAX_A_D
    268459695U,	// FMAX_A_W
    268455834U,	// FMAX_D
    268461298U,	// FMAX_W
    268454068U,	// FMIN_A_D
    268459675U,	// FMIN_A_W
    268454740U,	// FMIN_D
    268460210U,	// FMIN_W
    20319U,	// FMOV_D32
    20319U,	// FMOV_D32_MM
    20319U,	// FMOV_D64
    20319U,	// FMOV_D_MMR6
    23662U,	// FMOV_S
    23662U,	// FMOV_S_MM
    23662U,	// FMOV_S_MMR6
    285231345U,	// FMSUB_D
    285236936U,	// FMSUB_W
    268454724U,	// FMUL_D
    268454725U,	// FMUL_D32
    268454725U,	// FMUL_D64
    285231941U,	// FMUL_D_MMR6
    268454725U,	// FMUL_MM
    268458861U,	// FMUL_S
    268458861U,	// FMUL_S_MM
    285236077U,	// FMUL_S_MMR6
    268460194U,	// FMUL_W
    19011U,	// FNEG_D32
    19011U,	// FNEG_D64
    19011U,	// FNEG_D_MMR6
    19011U,	// FNEG_MM
    23330U,	// FNEG_S
    23330U,	// FNEG_S_MM
    23330U,	// FNEG_S_MMR6
    19345U,	// FRCP_D
    24787U,	// FRCP_W
    19965U,	// FRINT_D
    25477U,	// FRINT_W
    19993U,	// FRSQRT_D
    25505U,	// FRSQRT_W
    268454416U,	// FSAF_D
    268459881U,	// FSAF_W
    268454864U,	// FSEQ_D
    268460320U,	// FSEQ_W
    268454279U,	// FSLE_D
    268459804U,	// FSLE_W
    268455355U,	// FSLT_D
    268460899U,	// FSLT_W
    268454345U,	// FSNE_D
    268459838U,	// FSNE_W
    268454954U,	// FSOR_D
    268460449U,	// FSOR_W
    19984U,	// FSQRT_D
    19985U,	// FSQRT_D32
    19985U,	// FSQRT_D64
    19985U,	// FSQRT_MM
    23639U,	// FSQRT_S
    23639U,	// FSQRT_S_MM
    25496U,	// FSQRT_W
    268454121U,	// FSUB_D
    268454122U,	// FSUB_D32
    268454122U,	// FSUB_D64
    285231338U,	// FSUB_D_MMR6
    268454122U,	// FSUB_MM
    268458610U,	// FSUB_S
    268458610U,	// FSUB_S_MM
    285235826U,	// FSUB_S_MMR6
    268459712U,	// FSUB_W
    268454913U,	// FSUEQ_D
    268460337U,	// FSUEQ_W
    268454328U,	// FSULE_D
    268459821U,	// FSULE_W
    268455404U,	// FSULT_D
    268460916U,	// FSULT_W
    268454362U,	// FSUNE_D
    268459855U,	// FSUNE_W
    268454785U,	// FSUN_D
    268460226U,	// FSUN_W
    19759U,	// FTINT_S_D
    25312U,	// FTINT_S_W
    20238U,	// FTINT_U_D
    25742U,	// FTINT_U_W
    268456459U,	// FTQ_H
    268460346U,	// FTQ_W
    19581U,	// FTRUNC_S_D
    25084U,	// FTRUNC_S_W
    20048U,	// FTRUNC_U_D
    25552U,	// FTRUNC_U_W
    3238024957U,	// GotPrologue16
    268455049U,	// HADD_S_D
    268456538U,	// HADD_S_H
    268460552U,	// HADD_S_W
    268455516U,	// HADD_U_D
    268456826U,	// HADD_U_H
    268461020U,	// HADD_U_W
    268455016U,	// HSUB_S_D
    268456517U,	// HSUB_S_H
    268460519U,	// HSUB_S_W
    268455483U,	// HSUB_U_D
    268456805U,	// HSUB_U_H
    268460987U,	// HSUB_U_W
    268453336U,	// ILVEV_B
    268455750U,	// ILVEV_D
    268457048U,	// ILVEV_H
    268461264U,	// ILVEV_W
    268452864U,	// ILVL_B
    268454732U,	// ILVL_D
    268456374U,	// ILVL_H
    268460202U,	// ILVL_W
    268452616U,	// ILVOD_B
    268454205U,	// ILVOD_D
    268456176U,	// ILVOD_H
    268459787U,	// ILVOD_W
    268452912U,	// ILVR_B
    268454989U,	// ILVR_D
    268456499U,	// ILVR_H
    268460492U,	// ILVR_W
    268461535U,	// INS
    70010111U,	// INSERT_B
    0U,	// INSERT_B_VIDX64_PSEUDO
    0U,	// INSERT_B_VIDX_PSEUDO
    78401030U,	// INSERT_D
    0U,	// INSERT_D_VIDX64_PSEUDO
    0U,	// INSERT_D_VIDX_PSEUDO
    0U,	// INSERT_FD_PSEUDO
    0U,	// INSERT_FD_VIDX64_PSEUDO
    0U,	// INSERT_FD_VIDX_PSEUDO
    0U,	// INSERT_FW_PSEUDO
    0U,	// INSERT_FW_VIDX64_PSEUDO
    0U,	// INSERT_FW_VIDX_PSEUDO
    86790987U,	// INSERT_H
    0U,	// INSERT_H_VIDX64_PSEUDO
    0U,	// INSERT_H_VIDX_PSEUDO
    95183758U,	// INSERT_W
    0U,	// INSERT_W_VIDX64_PSEUDO
    0U,	// INSERT_W_VIDX_PSEUDO
    16801402U,	// INSV
    103564049U,	// INSVE_B
    111954403U,	// INSVE_D
    120344825U,	// INSVE_H
    128737112U,	// INSVE_W
    16801402U,	// INSV_MM
    268461535U,	// INS_MM
    268459242U,	// INS_MMR6
    546619U,	// J
    546652U,	// JAL
    23074U,	// JALR
    547362U,	// JALR16_MM
    23074U,	// JALR64
    0U,	// JALR64Pseudo
    547362U,	// JALRC16_MMR6
    17915U,	// JALRC_HB_MMR6
    18454U,	// JALRC_MMR6
    0U,	// JALRPseudo
    541199U,	// JALRS16_MM
    23791U,	// JALRS_MM
    17932U,	// JALR_HB
    23074U,	// JALR_MM
    548049U,	// JALS_MM
    550173U,	// JALX
    550173U,	// JALX_MM
    546652U,	// JAL_MM
    18333U,	// JIALC
    18333U,	// JIALC64
    18333U,	// JIALC_MMR6
    18322U,	// JIC
    18322U,	// JIC64
    18322U,	// JIC_MMR6
    547358U,	// JR
    541186U,	// JR16_MM
    547358U,	// JR64
    547169U,	// JRADDIUSP
    542737U,	// JRC16_MM
    541080U,	// JRC16_MMR6
    547157U,	// JRCADDIUSP_MMR6
    542213U,	// JR_HB
    542213U,	// JR_HB_R6
    547358U,	// JR_MM
    546619U,	// J_MM
    3282780U,	// Jal16
    3544924U,	// JalB16
    546652U,	// JalOneReg
    22364U,	// JalTwoReg
    9916U,	// JrRa16
    9907U,	// JrcRa16
    550274U,	// JrcRx16
    540673U,	// JumpLinkReg16
    134235669U,	// LB
    134235669U,	// LB64
    134238215U,	// LBE
    134238215U,	// LBE_MM
    134238215U,	// LBE_MMR6
    134234655U,	// LBU16_MM
    134238321U,	// LBUE_MMR6
    3506464035U,	// LBUX
    3506464035U,	// LBUX_MM
    134241594U,	// LBU_MMR6
    134235669U,	// LB_MM
    134235669U,	// LB_MMR6
    134241594U,	// LBu
    134241594U,	// LBu64
    134238321U,	// LBuE
    134238321U,	// LBuE_MM
    134241594U,	// LBu_MM
    134238179U,	// LD
    134234174U,	// LDC1
    134234174U,	// LDC164
    134234174U,	// LDC1_D64_MMR6
    134234174U,	// LDC1_MM
    134234390U,	// LDC2
    134234390U,	// LDC2_MMR6
    134234390U,	// LDC2_R6
    134234475U,	// LDC3
    17203U,	// LDI_B
    19027U,	// LDI_D
    20763U,	// LDI_H
    24539U,	// LDI_W
    134240184U,	// LDL
    134243771U,	// LDMacro
    18400U,	// LDPC
    18400U,	// LDPC_MM64R6
    134240732U,	// LDR
    3506454654U,	// LDXC1
    3506454654U,	// LDXC164
    134234873U,	// LD_B
    134236462U,	// LD_D
    0U,	// LD_F16
    134238433U,	// LD_H
    134238179U,	// LD_MM64R6
    134242044U,	// LD_W
    25189769U,	// LEA_ADDiu
    25189768U,	// LEA_ADDiu64
    25189769U,	// LEA_ADDiu_MM
    134239368U,	// LH
    134239368U,	// LH64
    134238262U,	// LHE
    134238262U,	// LHE_MM
    134234678U,	// LHU16_MM
    3506464024U,	// LHX
    3506464024U,	// LHX_MM
    134239368U,	// LH_MM
    134241660U,	// LHu
    134241660U,	// LHu64
    134238327U,	// LHuE
    134238327U,	// LHuE_MM
    134241660U,	// LHu_MM
    16846U,	// LI16_MM
    16846U,	// LI16_MMR6
    134240280U,	// LL
    134240280U,	// LL64
    134240280U,	// LL64_R6
    134238178U,	// LLD
    134238178U,	// LLD_MM64R6
    134238178U,	// LLD_R6
    134238277U,	// LLE
    134238277U,	// LLE_MM
    134238277U,	// LLE_MMR6
    134240280U,	// LL_MM
    134240280U,	// LL_R6
    134234119U,	// LOAD_ACC128
    134234119U,	// LOAD_ACC64
    134234119U,	// LOAD_ACC64DSP
    134240550U,	// LOAD_CCOND_DSP
    0U,	// LONG_BRANCH_ADDiu
    0U,	// LONG_BRANCH_DADDiu
    0U,	// LONG_BRANCH_LUi
    268452519U,	// LSA
    2467087015U,	// LSA_MMR6
    268452519U,	// LSA_R6
    58742582U,	// LUI_MMR6
    3506454668U,	// LUXC1
    3506454668U,	// LUXC164
    3506454668U,	// LUXC1_MM
    58742582U,	// LUi
    58742582U,	// LUi64
    58742582U,	// LUi_MM
    134243592U,	// LW
    134234685U,	// LW16_MM
    134243592U,	// LW64
    134234226U,	// LWC1
    134234226U,	// LWC1_MM
    134234442U,	// LWC2
    134234442U,	// LWC2_MMR6
    134234442U,	// LWC2_R6
    134234487U,	// LWC3
    134238339U,	// LWE
    134238339U,	// LWE_MM
    134238339U,	// LWE_MMR6
    134243592U,	// LWGP_MM
    134240379U,	// LWL
    134240379U,	// LWL64
    134238282U,	// LWLE
    134238282U,	// LWLE_MM
    134240379U,	// LWL_MM
    3817963U,	// LWM16_MM
    3817963U,	// LWM16_MMR6
    3817711U,	// LWM32_MM
    3823784U,	// LWM_MM
    18437U,	// LWPC
    18437U,	// LWPC_MMR6
    170364U,	// LWP_MM
    170364U,	// LWP_MMR6
    134240854U,	// LWR
    134240854U,	// LWR64
    134238309U,	// LWRE
    134238309U,	// LWRE_MM
    134240854U,	// LWR_MM
    134243592U,	// LWSP_MM
    18430U,	// LWUPC
    18430U,	// LWUPC_MM64R6
    134241777U,	// LWU_MM
    134241777U,	// LWU_MM64R6
    3506464041U,	// LWX
    3506454682U,	// LWXC1
    3506454682U,	// LWXC1_MM
    3506461948U,	// LWXS_MM
    3506464041U,	// LWX_MM
    134243592U,	// LW_MM
    134243592U,	// LW_MMR6
    134241777U,	// LWu
    134235669U,	// LbRxRyOffMemX16
    134241594U,	// LbuRxRyOffMemX16
    134239368U,	// LhRxRyOffMemX16
    134241660U,	// LhuRxRyOffMemX16
    1879070461U,	// LiRxImm16
    22259U,	// LiRxImmAlignX16
    22269U,	// LiRxImmX16
    16997U,	// LoadAddrImm32
    17018U,	// LoadAddrImm64
    134234725U,	// LoadAddrReg32
    134234746U,	// LoadAddrReg64
    22269U,	// LoadImm32
    22273U,	// LoadImm64
    3958024U,	// LwConstant32
    536896776U,	// LwRxPcTcp16
    25864U,	// LwRxPcTcpX16
    134243592U,	// LwRxRyOffMemX16
    134243592U,	// LwRxSpImmX16
    20438U,	// MADD
    285231649U,	// MADDF_D
    285231649U,	// MADDF_D_MMR6
    285235977U,	// MADDF_S
    285235977U,	// MADDF_S_MMR6
    285233647U,	// MADDR_Q_H
    285237507U,	// MADDR_Q_W
    23899U,	// MADDU
    268459355U,	// MADDU_DSP
    268459355U,	// MADDU_DSP_MM
    23899U,	// MADDU_MM
    285230534U,	// MADDV_B
    285232948U,	// MADDV_D
    285234246U,	// MADDV_H
    285238462U,	// MADDV_W
    268454172U,	// MADD_D32
    268454172U,	// MADD_D32_MM
    268454172U,	// MADD_D64
    268455894U,	// MADD_DSP
    268455894U,	// MADD_DSP_MM
    20438U,	// MADD_MM
    285233617U,	// MADD_Q_H
    285237477U,	// MADD_Q_W
    268458627U,	// MADD_S
    268458627U,	// MADD_S_MM
    268457947U,	// MAQ_SA_W_PHL
    268457947U,	// MAQ_SA_W_PHL_MM
    268458470U,	// MAQ_SA_W_PHR
    268458470U,	// MAQ_SA_W_PHR_MM
    268457975U,	// MAQ_S_W_PHL
    268457975U,	// MAQ_S_W_PHL_MM
    268458498U,	// MAQ_S_W_PHR
    268458498U,	// MAQ_S_W_PHR_MM
    268454113U,	// MAXA_D
    268454113U,	// MAXA_D_MMR6
    268458600U,	// MAXA_S
    268458600U,	// MAXA_S_MMR6
    268452987U,	// MAXI_S_B
    268455127U,	// MAXI_S_D
    268456616U,	// MAXI_S_H
    268460630U,	// MAXI_S_W
    268453202U,	// MAXI_U_B
    268455594U,	// MAXI_U_D
    268456904U,	// MAXI_U_H
    268461098U,	// MAXI_U_W
    268452568U,	// MAX_A_B
    268454089U,	// MAX_A_D
    268456128U,	// MAX_A_H
    268459696U,	// MAX_A_W
    268455835U,	// MAX_D
    268455835U,	// MAX_D_MMR6
    268459177U,	// MAX_S
    268453075U,	// MAX_S_B
    268455247U,	// MAX_S_D
    268456735U,	// MAX_S_H
    268459177U,	// MAX_S_MMR6
    268460811U,	// MAX_S_W
    268453290U,	// MAX_U_B
    268455714U,	// MAX_U_D
    268457002U,	// MAX_U_H
    268461218U,	// MAX_U_W
    268451850U,	// MFC0
    268451850U,	// MFC0_MMR6
    16465U,	// MFC1
    16465U,	// MFC1_MM
    16465U,	// MFC1_MMR6
    268452137U,	// MFC2
    16681U,	// MFC2_MMR6
    268451856U,	// MFHC0_MMR6
    16471U,	// MFHC1_D32
    16471U,	// MFHC1_D32_MMR6
    16471U,	// MFHC1_D64
    16471U,	// MFHC1_D64_MMR6
    16471U,	// MFHC1_MM
    16687U,	// MFHC2_MMR6
    546535U,	// MFHI
    546535U,	// MFHI16_MM
    546535U,	// MFHI64
    22247U,	// MFHI_DSP
    22247U,	// MFHI_DSP_MM
    546535U,	// MFHI_MM
    547022U,	// MFLO
    547022U,	// MFLO16_MM
    547022U,	// MFLO64
    22734U,	// MFLO_DSP
    22734U,	// MFLO_DSP_MM
    547022U,	// MFLO_MM
    268454098U,	// MINA_D
    268454098U,	// MINA_D_MMR6
    268458592U,	// MINA_S
    268458592U,	// MINA_S_MMR6
    268452967U,	// MINI_S_B
    268455107U,	// MINI_S_D
    268456596U,	// MINI_S_H
    268460610U,	// MINI_S_W
    268453182U,	// MINI_U_B
    268455574U,	// MINI_U_D
    268456884U,	// MINI_U_H
    268461078U,	// MINI_U_W
    268452549U,	// MIN_A_B
    268454069U,	// MIN_A_D
    268456109U,	// MIN_A_H
    268459676U,	// MIN_A_W
    268454741U,	// MIN_D
    268454741U,	// MIN_D_MMR6
    268458868U,	// MIN_S
    268452997U,	// MIN_S_B
    268455137U,	// MIN_S_D
    268456626U,	// MIN_S_H
    268458868U,	// MIN_S_MMR6
    268460650U,	// MIN_S_W
    268453212U,	// MIN_U_B
    268455604U,	// MIN_U_D
    268456914U,	// MIN_U_H
    268461108U,	// MIN_U_W
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    268455934U,	// MOD
    268453737U,	// MODSUB
    268453737U,	// MODSUB_MM
    268459363U,	// MODU
    268459363U,	// MODU_MMR6
    268455934U,	// MOD_MMR6
    268452930U,	// MOD_S_B
    268455070U,	// MOD_S_D
    268456559U,	// MOD_S_H
    268460573U,	// MOD_S_W
    268453145U,	// MOD_U_B
    268455537U,	// MOD_U_D
    268456847U,	// MOD_U_H
    268461041U,	// MOD_U_W
    20605U,	// MOVE16_MM
    16824U,	// MOVE16_MMR6
    3808844033U,	// MOVEP_MM
    24061U,	// MOVE_V
    268454458U,	// MOVF_D32
    268454458U,	// MOVF_D32_MM
    268454458U,	// MOVF_D64
    268456089U,	// MOVF_I
    268456089U,	// MOVF_I64
    268456089U,	// MOVF_I_MM
    268458778U,	// MOVF_S
    268458778U,	// MOVF_S_MM
    268454793U,	// MOVN_I64_D64
    268458178U,	// MOVN_I64_I
    268458178U,	// MOVN_I64_I64
    268458904U,	// MOVN_I64_S
    268454793U,	// MOVN_I_D32
    268454793U,	// MOVN_I_D32_MM
    268454793U,	// MOVN_I_D64
    268458178U,	// MOVN_I_I
    268458178U,	// MOVN_I_I64
    268458178U,	// MOVN_I_MM
    268458904U,	// MOVN_I_S
    268458904U,	// MOVN_I_S_MM
    268455465U,	// MOVT_D32
    268455465U,	// MOVT_D32_MM
    268455465U,	// MOVT_D64
    268459310U,	// MOVT_I
    268459310U,	// MOVT_I64
    268459310U,	// MOVT_I_MM
    268459103U,	// MOVT_S
    268459103U,	// MOVT_S_MM
    268455875U,	// MOVZ_I64_D64
    268461430U,	// MOVZ_I64_I
    268461430U,	// MOVZ_I64_I64
    268459204U,	// MOVZ_I64_S
    268455875U,	// MOVZ_I_D32
    268455875U,	// MOVZ_I_D32_MM
    268455875U,	// MOVZ_I_D64
    268461430U,	// MOVZ_I_I
    268461430U,	// MOVZ_I_I64
    268461430U,	// MOVZ_I_MM
    268459204U,	// MOVZ_I_S
    268459204U,	// MOVZ_I_S_MM
    0U,	// MSA_FP_EXTEND_D_PSEUDO
    0U,	// MSA_FP_EXTEND_W_PSEUDO
    0U,	// MSA_FP_ROUND_D_PSEUDO
    0U,	// MSA_FP_ROUND_W_PSEUDO
    18289U,	// MSUB
    285231640U,	// MSUBF_D
    285231640U,	// MSUBF_D_MMR6
    285235968U,	// MSUBF_S
    285235968U,	// MSUBF_S_MMR6
    285233636U,	// MSUBR_Q_H
    285237496U,	// MSUBR_Q_W
    23878U,	// MSUBU
    268459334U,	// MSUBU_DSP
    268459334U,	// MSUBU_DSP_MM
    23878U,	// MSUBU_MM
    285230525U,	// MSUBV_B
    285232939U,	// MSUBV_D
    285234237U,	// MSUBV_H
    285238453U,	// MSUBV_W
    268454130U,	// MSUB_D32
    268454130U,	// MSUB_D32_MM
    268454130U,	// MSUB_D64
    268453745U,	// MSUB_DSP
    268453745U,	// MSUB_DSP_MM
    18289U,	// MSUB_MM
    285233607U,	// MSUB_Q_H
    285237467U,	// MSUB_Q_W
    268458609U,	// MSUB_S
    268458609U,	// MSUB_S_MM
    2736816159U,	// MTC0
    2736816159U,	// MTC0_MMR6
    10518636U,	// MTC1
    10518636U,	// MTC1_MM
    10518636U,	// MTC1_MMR6
    2736816452U,	// MTC2
    10518852U,	// MTC2_MMR6
    2736816151U,	// MTHC0_MMR6
    10535006U,	// MTHC1_D32
    10535006U,	// MTHC1_D32_MMR6
    10535006U,	// MTHC1_D64
    10535006U,	// MTHC1_D64_MMR6
    10535006U,	// MTHC1_MM
    10518838U,	// MTHC2_MMR6
    546541U,	// MTHI
    546541U,	// MTHI64
    10524397U,	// MTHI_DSP
    10524397U,	// MTHI_DSP_MM
    546541U,	// MTHI_MM
    10524936U,	// MTHLIP
    10524936U,	// MTHLIP_MM
    547035U,	// MTLO
    547035U,	// MTLO64
    10524891U,	// MTLO_DSP
    10524891U,	// MTLO_DSP_MM
    547035U,	// MTLO_MM
    540715U,	// MTM0
    540840U,	// MTM1
    541014U,	// MTM2
    540721U,	// MTP0
    540846U,	// MTP1
    541020U,	// MTP2
    268457654U,	// MUH
    268459394U,	// MUHU
    268459394U,	// MUHU_MMR6
    268457654U,	// MUH_MMR6
    268458088U,	// MUL
    268457988U,	// MULEQ_S_W_PHL
    268457988U,	// MULEQ_S_W_PHL_MM
    268458511U,	// MULEQ_S_W_PHR
    268458511U,	// MULEQ_S_W_PHR_MM
    268457865U,	// MULEU_S_PH_QBL
    268457865U,	// MULEU_S_PH_QBL_MM
    268458413U,	// MULEU_S_PH_QBR
    268458413U,	// MULEU_S_PH_QBR_MM
    268458088U,	// MULImmMacro
    268458210U,	// MULOMacro
    268459452U,	// MULOUMacro
    268457414U,	// MULQ_RS_PH
    268457414U,	// MULQ_RS_PH_MM
    268460830U,	// MULQ_RS_W
    268460830U,	// MULQ_RS_W_MMR2
    268457358U,	// MULQ_S_PH
    268457358U,	// MULQ_S_PH_MMR2
    268460689U,	// MULQ_S_W
    268460689U,	// MULQ_S_W_MMR2
    268456442U,	// MULR_Q_H
    268460302U,	// MULR_Q_W
    268457560U,	// MULSAQ_S_W_PH
    268457560U,	// MULSAQ_S_W_PH_MM
    268457535U,	// MULSA_W_PH
    268457535U,	// MULSA_W_PH_MMR2
    23843U,	// MULT
    268459484U,	// MULTU_DSP
    268459484U,	// MULTU_DSP_MM
    268459299U,	// MULT_DSP
    268459299U,	// MULT_DSP_MM
    23843U,	// MULT_MM
    24028U,	// MULTu
    24028U,	// MULTu_MM
    268459431U,	// MULU
    268459431U,	// MULU_MMR6
    268453345U,	// MULV_B
    268455767U,	// MULV_D
    268457057U,	// MULV_H
    268461281U,	// MULV_W
    268458088U,	// MUL_MM
    268458088U,	// MUL_MMR6
    268457231U,	// MUL_PH
    268457231U,	// MUL_PH_MMR2
    268456411U,	// MUL_Q_H
    268460271U,	// MUL_Q_W
    268458088U,	// MUL_R6
    268457326U,	// MUL_S_PH
    268457326U,	// MUL_S_PH_MMR2
    546535U,	// Mfhi16
    547022U,	// Mflo16
    20605U,	// Move32R16
    20605U,	// MoveR3216
    23843U,	// MultRxRy16
    142908707U,	// MultRxRyRz16
    24028U,	// MultuRxRy16
    142908892U,	// MultuRxRyRz16
    17128U,	// NLOC_B
    18691U,	// NLOC_D
    20688U,	// NLOC_H
    24273U,	// NLOC_W
    17136U,	// NLZC_B
    18699U,	// NLZC_D
    20696U,	// NLZC_H
    24281U,	// NLZC_W
    268454180U,	// NMADD_D32
    268454180U,	// NMADD_D32_MM
    268454180U,	// NMADD_D64
    268458626U,	// NMADD_S
    268458626U,	// NMADD_S_MM
    268454138U,	// NMSUB_D32
    268454138U,	// NMSUB_D32_MM
    268454138U,	// NMSUB_D64
    268458608U,	// NMSUB_S
    268458608U,	// NMSUB_S_MM
    0U,	// NOP
    268458536U,	// NOR
    268458536U,	// NOR64
    268452753U,	// NORI_B
    268458536U,	// NORImm
    268458536U,	// NORImm64
    268458536U,	// NOR_MM
    268458536U,	// NOR_MMR6
    268459533U,	// NOR_V
    0U,	// NOR_V_D_PSEUDO
    0U,	// NOR_V_H_PSEUDO
    0U,	// NOR_V_W_PSEUDO
    16920U,	// NOT16_MM
    16920U,	// NOT16_MMR6
    20639U,	// NegRxRy16
    23849U,	// NotRxRy16
    268458537U,	// OR
    9224713U,	// OR16_MM
    9224713U,	// OR16_MMR6
    268458537U,	// OR64
    268452754U,	// ORI_B
    268457753U,	// ORI_MMR6
    268458537U,	// OR_MM
    268458537U,	// OR_MMR6
    268459534U,	// OR_V
    0U,	// OR_V_D_PSEUDO
    0U,	// OR_V_H_PSEUDO
    0U,	// OR_V_W_PSEUDO
    268457753U,	// ORi
    268457753U,	// ORi64
    268457753U,	// ORi_MM
    16800297U,	// OrRxRxRy16
    268457220U,	// PACKRL_PH
    268457220U,	// PACKRL_PH_MM
    9935U,	// PAUSE
    9935U,	// PAUSE_MM
    9935U,	// PAUSE_MMR6
    268453327U,	// PCKEV_B
    268455741U,	// PCKEV_D
    268457039U,	// PCKEV_H
    268461255U,	// PCKEV_W
    268452607U,	// PCKOD_B
    268454196U,	// PCKOD_D
    268456167U,	// PCKOD_H
    268459778U,	// PCKOD_W
    17655U,	// PCNT_B
    19957U,	// PCNT_D
    21315U,	// PCNT_H
    25469U,	// PCNT_W
    268457184U,	// PICK_PH
    268457184U,	// PICK_PH_MM
    268453469U,	// PICK_QB
    268453469U,	// PICK_QB_MM
    22806U,	// POP
    22440U,	// PRECEQU_PH_QBL
    17001U,	// PRECEQU_PH_QBLA
    17001U,	// PRECEQU_PH_QBLA_MM
    22440U,	// PRECEQU_PH_QBL_MM
    22988U,	// PRECEQU_PH_QBR
    17039U,	// PRECEQU_PH_QBRA
    17039U,	// PRECEQU_PH_QBRA_MM
    22988U,	// PRECEQU_PH_QBR_MM
    22505U,	// PRECEQ_W_PHL
    22505U,	// PRECEQ_W_PHL_MM
    23028U,	// PRECEQ_W_PHR
    23028U,	// PRECEQ_W_PHR_MM
    22425U,	// PRECEU_PH_QBL
    16985U,	// PRECEU_PH_QBLA
    16985U,	// PRECEU_PH_QBLA_MM
    22425U,	// PRECEU_PH_QBL_MM
    22973U,	// PRECEU_PH_QBR
    17023U,	// PRECEU_PH_QBRA
    17023U,	// PRECEU_PH_QBRA_MM
    22973U,	// PRECEU_PH_QBR_MM
    268457136U,	// PRECRQU_S_QB_PH
    268457136U,	// PRECRQU_S_QB_PH_MM
    268459921U,	// PRECRQ_PH_W
    268459921U,	// PRECRQ_PH_W_MM
    268457109U,	// PRECRQ_QB_PH
    268457109U,	// PRECRQ_QB_PH_MM
    268459952U,	// PRECRQ_RS_PH_W
    268459952U,	// PRECRQ_RS_PH_W_MM
    268457123U,	// PRECR_QB_PH
    268457123U,	// PRECR_QB_PH_MMR2
    268459905U,	// PRECR_SRA_PH_W
    268459905U,	// PRECR_SRA_PH_W_MMR2
    268459934U,	// PRECR_SRA_R_PH_W
    268459934U,	// PRECR_SRA_R_PH_W_MMR2
    1937555U,	// PREF
    1937438U,	// PREFE
    1937438U,	// PREFE_MM
    1937438U,	// PREFE_MMR6
    151889169U,	// PREFX_MM
    1937555U,	// PREF_MM
    1937555U,	// PREF_MMR6
    1937555U,	// PREF_R6
    268455916U,	// PREPEND
    268455916U,	// PREPEND_MMR2
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    16391U,	// PseudoCVT_D32_W
    16391U,	// PseudoCVT_D64_L
    16391U,	// PseudoCVT_D64_W
    16391U,	// PseudoCVT_S_L
    16391U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    0U,	// PseudoIndirectBranch
    0U,	// PseudoIndirectBranch64
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMFHI
    0U,	// PseudoMFHI64
    0U,	// PseudoMFLO
    0U,	// PseudoMFLO64
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMTLOHI
    0U,	// PseudoMTLOHI64
    0U,	// PseudoMTLOHI_DSP
    0U,	// PseudoMULT
    0U,	// PseudoMULTu
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    0U,	// PseudoReturn
    0U,	// PseudoReturn64
    0U,	// PseudoSDIV
    0U,	// PseudoSELECTFP_F_D32
    0U,	// PseudoSELECTFP_F_D64
    0U,	// PseudoSELECTFP_F_I
    0U,	// PseudoSELECTFP_F_I64
    0U,	// PseudoSELECTFP_F_S
    0U,	// PseudoSELECTFP_T_D32
    0U,	// PseudoSELECTFP_T_D64
    0U,	// PseudoSELECTFP_T_I
    0U,	// PseudoSELECTFP_T_I64
    0U,	// PseudoSELECTFP_T_S
    0U,	// PseudoSELECT_D32
    0U,	// PseudoSELECT_D64
    0U,	// PseudoSELECT_I
    0U,	// PseudoSELECT_I64
    0U,	// PseudoSELECT_S
    268455782U,	// PseudoTRUNC_W_D
    268455782U,	// PseudoTRUNC_W_D32
    268459125U,	// PseudoTRUNC_W_S
    0U,	// PseudoUDIV
    18265U,	// RADDU_W_QB
    18265U,	// RADDU_W_QB_MM
    41965895U,	// RDDSP
    159406407U,	// RDDSP_MM
    23119U,	// RDHWR
    23119U,	// RDHWR64
    23119U,	// RDHWR_MM
    268458575U,	// RDHWR_MMR6
    23096U,	// RDPGPR_MMR6
    19353U,	// RECIP_D
    19353U,	// RECIP_D_MM
    23456U,	// RECIP_S
    23456U,	// RECIP_S_MM
    22019U,	// REPLV_PH
    22019U,	// REPLV_PH_MM
    18245U,	// REPLV_QB
    18245U,	// REPLV_QB_MM
    41964786U,	// REPL_PH
    41964786U,	// REPL_PH_MM
    167790191U,	// REPL_QB
    167790191U,	// REPL_QB_MM
    19966U,	// RINT_D
    19966U,	// RINT_D_MMR6
    23630U,	// RINT_S
    23630U,	// RINT_S_MMR6
    268458037U,	// ROL
    268458037U,	// ROLImm
    268458542U,	// ROR
    268458542U,	// RORImm
    268458569U,	// ROTR
    268459635U,	// ROTRV
    268459635U,	// ROTRV_MM
    268458569U,	// ROTR_MM
    19162U,	// ROUND_L_D64
    19162U,	// ROUND_L_D_MMR6
    23348U,	// ROUND_L_S
    23348U,	// ROUND_L_S_MMR6
    20337U,	// ROUND_W_D32
    20337U,	// ROUND_W_D64
    20337U,	// ROUND_W_D_MMR6
    20337U,	// ROUND_W_MM
    23680U,	// ROUND_W_S
    23680U,	// ROUND_W_S_MM
    23680U,	// ROUND_W_S_MMR6
    19994U,	// RSQRT_D
    19994U,	// RSQRT_D_MM
    23638U,	// RSQRT_S
    23638U,	// RSQRT_S_MM
    0U,	// Restore16
    0U,	// RestoreX16
    0U,	// RetRA
    0U,	// RetRA16
    268453036U,	// SAT_S_B
    268455186U,	// SAT_S_D
    268456685U,	// SAT_S_H
    268460739U,	// SAT_S_W
    268453263U,	// SAT_U_B
    268455665U,	// SAT_U_D
    268456975U,	// SAT_U_H
    268461169U,	// SAT_U_W
    134236005U,	// SB
    134234508U,	// SB16_MM
    134234508U,	// SB16_MMR6
    134236005U,	// SB64
    134238220U,	// SBE
    134238220U,	// SBE_MM
    134238220U,	// SBE_MMR6
    134236005U,	// SB_MM
    134236005U,	// SB_MMR6
    4229152U,	// SC
    4229152U,	// SC64
    4229152U,	// SC64_R6
    4231115U,	// SCD
    4231115U,	// SCD_R6
    4231185U,	// SCE
    4231185U,	// SCE_MM
    134238225U,	// SCE_MMR6
    4229152U,	// SC_MM
    4229152U,	// SC_R6
    134238211U,	// SD
    186610U,	// SDBBP
    82425U,	// SDBBP16_MM
    82425U,	// SDBBP16_MMR6
    596210U,	// SDBBP_MM
    186610U,	// SDBBP_MMR6
    186610U,	// SDBBP_R6
    134234180U,	// SDC1
    134234180U,	// SDC164
    134234180U,	// SDC1_D64_MMR6
    134234180U,	// SDC1_MM
    134234396U,	// SDC2
    134234396U,	// SDC2_MMR6
    134234396U,	// SDC2_R6
    134234481U,	// SDC3
    26013U,	// SDIV
    26013U,	// SDIV_MM
    0U,	// SDIV_MM_Pseudo
    134240189U,	// SDL
    134243783U,	// SDMacro
    134240737U,	// SDR
    3506454661U,	// SDXC1
    3506454661U,	// SDXC164
    134238211U,	// SD_MM64R6
    268459591U,	// SDivIMacro
    268459591U,	// SDivMacro
    17910U,	// SEB
    17910U,	// SEB64
    17910U,	// SEB_MM
    17910U,	// SEB_MMR6
    21634U,	// SEH
    21634U,	// SEH64
    21634U,	// SEH_MM
    21634U,	// SEH_MMR6
    268461403U,	// SELEQZ
    268461403U,	// SELEQZ64
    268455865U,	// SELEQZ_D
    268455865U,	// SELEQZ_D_MMR6
    268461403U,	// SELEQZ_MMR6
    268459194U,	// SELEQZ_S
    268459194U,	// SELEQZ_S_MMR6
    268461376U,	// SELNEZ
    268461376U,	// SELNEZ64
    268455848U,	// SELNEZ_D
    268455848U,	// SELNEZ_D_MMR6
    268461376U,	// SELNEZ_MMR6
    268459184U,	// SELNEZ_S
    268459184U,	// SELNEZ_S_MMR6
    285231875U,	// SEL_D
    285231875U,	// SEL_D_MMR6
    285236061U,	// SEL_S
    285236061U,	// SEL_S_MMR6
    268458379U,	// SEQ
    268461529U,	// SEQIMacro
    268461529U,	// SEQMacro
    268457740U,	// SEQi
    134239921U,	// SH
    134234560U,	// SH16_MM
    134234560U,	// SH16_MMR6
    134239921U,	// SH64
    134238267U,	// SHE
    134238267U,	// SHE_MM
    134238267U,	// SHE_MMR6
    268452635U,	// SHF_B
    268456195U,	// SHF_H
    268459890U,	// SHF_W
    22740U,	// SHILO
    24154U,	// SHILOV
    24154U,	// SHILOV_MM
    22740U,	// SHILO_MM
    268457465U,	// SHLLV_PH
    268457465U,	// SHLLV_PH_MM
    268453691U,	// SHLLV_QB
    268453691U,	// SHLLV_QB_MM
    268457402U,	// SHLLV_S_PH
    268457402U,	// SHLLV_S_PH_MM
    268460800U,	// SHLLV_S_W
    268460800U,	// SHLLV_S_W_MM
    268457193U,	// SHLL_PH
    268457193U,	// SHLL_PH_MM
    268453478U,	// SHLL_QB
    268453478U,	// SHLL_QB_MM
    268457315U,	// SHLL_S_PH
    268457315U,	// SHLL_S_PH_MM
    268460640U,	// SHLL_S_W
    268460640U,	// SHLL_S_W_MM
    268457455U,	// SHRAV_PH
    268457455U,	// SHRAV_PH_MM
    268453681U,	// SHRAV_QB
    268453681U,	// SHRAV_QB_MMR2
    268457303U,	// SHRAV_R_PH
    268457303U,	// SHRAV_R_PH_MM
    268453579U,	// SHRAV_R_QB
    268453579U,	// SHRAV_R_QB_MMR2
    268460395U,	// SHRAV_R_W
    268460395U,	// SHRAV_R_W_MM
    268457100U,	// SHRA_PH
    268457100U,	// SHRA_PH_MM
    268453401U,	// SHRA_QB
    268453401U,	// SHRA_QB_MMR2
    268457268U,	// SHRA_R_PH
    268457268U,	// SHRA_R_PH_MM
    268453544U,	// SHRA_R_QB
    268453544U,	// SHRA_R_QB_MMR2
    268460353U,	// SHRA_R_W
    268460353U,	// SHRA_R_W_MM
    268457485U,	// SHRLV_PH
    268457485U,	// SHRLV_PH_MMR2
    268453711U,	// SHRLV_QB
    268453711U,	// SHRLV_QB_MM
    268457211U,	// SHRL_PH
    268457211U,	// SHRL_PH_MMR2
    268453496U,	// SHRL_QB
    268453496U,	// SHRL_QB_MM
    134239921U,	// SH_MM
    134239921U,	// SH_MMR6
    1627407154U,	// SLDI_B
    1627408978U,	// SLDI_D
    1627410714U,	// SLDI_H
    1627414490U,	// SLDI_W
    1627407096U,	// SLD_B
    1627408685U,	// SLD_D
    1627410656U,	// SLD_H
    1627414267U,	// SLD_W
    268458031U,	// SLL
    268452317U,	// SLL16_MM
    268452317U,	// SLL16_MMR6
    4026554415U,	// SLL64_32
    4026554415U,	// SLL64_64
    268452692U,	// SLLI_B
    268454499U,	// SLLI_D
    268456235U,	// SLLI_H
    268460011U,	// SLLI_W
    268459597U,	// SLLV
    268459597U,	// SLLV_MM
    268452841U,	// SLL_B
    268454683U,	// SLL_D
    268456351U,	// SLL_H
    268458031U,	// SLL_MM
    268458031U,	// SLL_MMR6
    268460153U,	// SLL_W
    268459288U,	// SLT
    268459288U,	// SLT64
    268459288U,	// SLTImm64
    268459471U,	// SLTUImm64
    268459288U,	// SLT_MM
    268457764U,	// SLTi
    268457764U,	// SLTi64
    268457764U,	// SLTi_MM
    268459415U,	// SLTiu
    268459415U,	// SLTiu64
    268459415U,	// SLTiu_MM
    268459471U,	// SLTu
    268459471U,	// SLTu64
    268459471U,	// SLTu_MM
    268456027U,	// SNE
    268457685U,	// SNEi
    0U,	// SNZ_B_PSEUDO
    0U,	// SNZ_D_PSEUDO
    0U,	// SNZ_H_PSEUDO
    0U,	// SNZ_V_PSEUDO
    0U,	// SNZ_W_PSEUDO
    1610630059U,	// SPLATI_B
    1610631850U,	// SPLATI_D
    1610633586U,	// SPLATI_H
    1610637362U,	// SPLATI_W
    1610630374U,	// SPLAT_B
    1610632563U,	// SPLAT_D
    1610634034U,	// SPLAT_H
    1610638154U,	// SPLAT_W
    19985U,	// SQRT_D_MMR6
    23639U,	// SQRT_S_MMR6
    268452513U,	// SRA
    268452650U,	// SRAI_B
    268454474U,	// SRAI_D
    268456210U,	// SRAI_H
    268459986U,	// SRAI_W
    268452726U,	// SRARI_B
    268454533U,	// SRARI_D
    268456269U,	// SRARI_H
    268460045U,	// SRARI_W
    268452879U,	// SRAR_B
    268454922U,	// SRAR_D
    268456466U,	// SRAR_H
    268460417U,	// SRAR_W
    268459576U,	// SRAV
    268459576U,	// SRAV_MM
    268452577U,	// SRA_B
    268454106U,	// SRA_D
    268456137U,	// SRA_H
    268452513U,	// SRA_MM
    268459705U,	// SRA_W
    268458049U,	// SRL
    268452324U,	// SRL16_MM
    268452324U,	// SRL16_MMR6
    268452700U,	// SRLI_B
    268454507U,	// SRLI_D
    268456243U,	// SRLI_H
    268460019U,	// SRLI_W
    268452744U,	// SRLRI_B
    268454551U,	// SRLRI_D
    268456287U,	// SRLRI_H
    268460063U,	// SRLRI_W
    268452895U,	// SRLR_B
    268454938U,	// SRLR_D
    268456482U,	// SRLR_H
    268460433U,	// SRLR_W
    268459604U,	// SRLV
    268459604U,	// SRLV_MM
    268452848U,	// SRL_B
    268454708U,	// SRL_D
    268456358U,	// SRL_H
    268458049U,	// SRL_MM
    268460178U,	// SRL_W
    9978U,	// SSNOP
    9978U,	// SSNOP_MM
    9978U,	// SSNOP_MMR6
    134234119U,	// STORE_ACC128
    134234119U,	// STORE_ACC64
    134234119U,	// STORE_ACC64DSP
    134240566U,	// STORE_CCOND_DSP
    134235401U,	// ST_B
    134237731U,	// ST_D
    0U,	// ST_F16
    134239061U,	// ST_H
    134243243U,	// ST_W
    268453740U,	// SUB
    268457164U,	// SUBQH_PH
    268457164U,	// SUBQH_PH_MMR2
    268457279U,	// SUBQH_R_PH
    268457279U,	// SUBQH_R_PH_MMR2
    268460363U,	// SUBQH_R_W
    268460363U,	// SUBQH_R_W_MMR2
    268459968U,	// SUBQH_W
    268459968U,	// SUBQH_W_MMR2
    268457239U,	// SUBQ_PH
    268457239U,	// SUBQ_PH_MM
    268457336U,	// SUBQ_S_PH
    268457336U,	// SUBQ_S_PH_MM
    268460669U,	// SUBQ_S_W
    268460669U,	// SUBQ_S_W_MM
    268453251U,	// SUBSUS_U_B
    268455653U,	// SUBSUS_U_D
    268456963U,	// SUBSUS_U_H
    268461157U,	// SUBSUS_U_W
    268453054U,	// SUBSUU_S_B
    268455226U,	// SUBSUU_S_D
    268456703U,	// SUBSUU_S_H
    268460779U,	// SUBSUU_S_W
    268453016U,	// SUBS_S_B
    268455166U,	// SUBS_S_D
    268456665U,	// SUBS_S_H
    268460719U,	// SUBS_S_W
    268453231U,	// SUBS_U_B
    268455633U,	// SUBS_U_D
    268456943U,	// SUBS_U_H
    268461137U,	// SUBS_U_W
    268452390U,	// SUBU16_MM
    268452390U,	// SUBU16_MMR6
    268453449U,	// SUBUH_QB
    268453449U,	// SUBUH_QB_MMR2
    268453555U,	// SUBUH_R_QB
    268453555U,	// SUBUH_R_QB_MMR2
    268459328U,	// SUBU_MMR6
    268457437U,	// SUBU_PH
    268457437U,	// SUBU_PH_MMR2
    268453663U,	// SUBU_QB
    268453663U,	// SUBU_QB_MM
    268457380U,	// SUBU_S_PH
    268457380U,	// SUBU_S_PH_MMR2
    268453602U,	// SUBU_S_QB
    268453602U,	// SUBU_S_QB_MM
    268452798U,	// SUBVI_B
    268454589U,	// SUBVI_D
    268456325U,	// SUBVI_H
    268460101U,	// SUBVI_W
    268453310U,	// SUBV_B
    268455724U,	// SUBV_D
    268457022U,	// SUBV_H
    268461238U,	// SUBV_W
    268453740U,	// SUB_MM
    268453740U,	// SUB_MMR6
    268459328U,	// SUBu
    268459328U,	// SUBu_MM
    3506454675U,	// SUXC1
    3506454675U,	// SUXC164
    3506454675U,	// SUXC1_MM
    134243597U,	// SW
    134234691U,	// SW16_MM
    134234691U,	// SW16_MMR6
    134243597U,	// SW64
    134234232U,	// SWC1
    134234232U,	// SWC1_MM
    134234448U,	// SWC2
    134234448U,	// SWC2_MMR6
    134234448U,	// SWC2_R6
    134234493U,	// SWC3
    134238344U,	// SWE
    134238344U,	// SWE_MM
    134238344U,	// SWE_MMR6
    134240384U,	// SWL
    134240384U,	// SWL64
    134238288U,	// SWLE
    134238288U,	// SWLE_MM
    134240384U,	// SWL_MM
    3817970U,	// SWM16_MM
    3817970U,	// SWM16_MMR6
    3817718U,	// SWM32_MM
    3823789U,	// SWM_MM
    170369U,	// SWP_MM
    170369U,	// SWP_MMR6
    134240859U,	// SWR
    134240859U,	// SWR64
    134238315U,	// SWRE
    134238315U,	// SWRE_MM
    134240859U,	// SWR_MM
    134243597U,	// SWSP_MM
    134243597U,	// SWSP_MMR6
    3506454689U,	// SWXC1
    3506454689U,	// SWXC1_MM
    134243597U,	// SW_MM
    134243597U,	// SW_MMR6
    206261U,	// SYNC
    218811U,	// SYNCI
    218811U,	// SYNCI_MM
    218811U,	// SYNCI_MMR6
    206261U,	// SYNC_MM
    198618U,	// SYNC_MMR6
    186387U,	// SYSCALL
    595987U,	// SYSCALL_MM
    0U,	// SZ_B_PSEUDO
    0U,	// SZ_D_PSEUDO
    0U,	// SZ_H_PSEUDO
    0U,	// SZ_V_PSEUDO
    0U,	// SZ_W_PSEUDO
    0U,	// Save16
    0U,	// SaveX16
    134236005U,	// SbRxRyOffMemX16
    550268U,	// SebRx16
    550280U,	// SehRx16
    4695381U,	// SelBeqZ
    4695354U,	// SelBneZ
    176396560U,	// SelTBteqZCmp
    176396038U,	// SelTBteqZCmpi
    176397592U,	// SelTBteqZSlt
    176396068U,	// SelTBteqZSlti
    176397719U,	// SelTBteqZSltiu
    176397775U,	// SelTBteqZSltu
    444832016U,	// SelTBtneZCmp
    444831494U,	// SelTBtneZCmpi
    444833048U,	// SelTBtneZSlt
    444831524U,	// SelTBtneZSlti
    444833175U,	// SelTBtneZSltiu
    444833231U,	// SelTBtneZSltu
    134239921U,	// ShRxRyOffMemX16
    268458031U,	// SllX16
    16801357U,	// SllvRxRy16
    184851736U,	// SltCCRxRy16
    23832U,	// SltRxRy16
    184850212U,	// SltiCCRxImmX16
    1879070500U,	// SltiRxImm16
    22308U,	// SltiRxImmX16
    184851863U,	// SltiuCCRxImmX16
    1879072151U,	// SltiuRxImm16
    23959U,	// SltiuRxImmX16
    184851919U,	// SltuCCRxRy16
    24015U,	// SltuRxRy16
    184851919U,	// SltuRxRyRz16
    268452513U,	// SraX16
    16801336U,	// SravRxRy16
    268458049U,	// SrlX16
    16801364U,	// SrlvRxRy16
    268459328U,	// SubuRxRyRz16
    134243597U,	// SwRxRyOffMemX16
    134243597U,	// SwRxSpImmX16
    0U,	// TAILCALL
    0U,	// TAILCALLREG
    0U,	// TAILCALLREG64
    0U,	// TAILCALL_MM
    0U,	// TAILCALL_MMR6
    268458384U,	// TEQ
    22290U,	// TEQI
    22290U,	// TEQI_MM
    268458384U,	// TEQ_MM
    268455978U,	// TGE
    22223U,	// TGEI
    23952U,	// TGEIU
    23952U,	// TGEIU_MM
    22223U,	// TGEI_MM
    268459375U,	// TGEU
    268459375U,	// TGEU_MM
    268455978U,	// TGE_MM
    10006U,	// TLBINV
    9941U,	// TLBINVF
    9941U,	// TLBINVF_MMR6
    10006U,	// TLBINV_MMR6
    9973U,	// TLBP
    9973U,	// TLBP_MM
    9984U,	// TLBR
    9984U,	// TLBR_MM
    9949U,	// TLBWI
    9949U,	// TLBWI_MM
    9989U,	// TLBWR
    9989U,	// TLBWR_MM
    268459293U,	// TLT
    22314U,	// TLTI
    23966U,	// TLTIU_MM
    22314U,	// TLTI_MM
    268459477U,	// TLTU
    268459477U,	// TLTU_MM
    268459293U,	// TLT_MM
    268456032U,	// TNE
    22235U,	// TNEI
    22235U,	// TNEI_MM
    268456032U,	// TNE_MM
    0U,	// TRAP
    19151U,	// TRUNC_L_D64
    19151U,	// TRUNC_L_D_MMR6
    23337U,	// TRUNC_L_S
    23337U,	// TRUNC_L_S_MMR6
    20326U,	// TRUNC_W_D32
    20326U,	// TRUNC_W_D64
    20326U,	// TRUNC_W_D_MMR6
    20326U,	// TRUNC_W_MM
    23669U,	// TRUNC_W_S
    23669U,	// TRUNC_W_S_MM
    23669U,	// TRUNC_W_S_MMR6
    23966U,	// TTLTIU
    25999U,	// UDIV
    25999U,	// UDIV_MM
    0U,	// UDIV_MM_Pseudo
    268459499U,	// UDivIMacro
    268459499U,	// UDivMacro
    134239367U,	// Ulh
    134241659U,	// Ulhu
    134243591U,	// Ulw
    134239920U,	// Ush
    134243596U,	// Usw
    268459429U,	// V3MULU
    268451877U,	// VMM0
    268459444U,	// VMULU
    285229850U,	// VSHF_B
    285231658U,	// VSHF_D
    285233410U,	// VSHF_H
    285237105U,	// VSHF_W
    10001U,	// WAIT
    597261U,	// WAIT_MM
    597261U,	// WAIT_MMR6
    41965902U,	// WRDSP
    159406414U,	// WRDSP_MM
    23104U,	// WRPGPR_MMR6
    21628U,	// WSBH
    21628U,	// WSBH_MM
    21628U,	// WSBH_MMR6
    268458547U,	// XOR
    9224712U,	// XOR16_MM
    9224712U,	// XOR16_MMR6
    268458547U,	// XOR64
    268452761U,	// XORI_B
    268457752U,	// XORI_MMR6
    268458547U,	// XOR_MM
    268458547U,	// XOR_MMR6
    268459540U,	// XOR_V
    0U,	// XOR_V_D_PSEUDO
    0U,	// XOR_V_H_PSEUDO
    0U,	// XOR_V_W_PSEUDO
    268457752U,	// XORi
    268457752U,	// XORi64
    268457752U,	// XORi_MM
    16800307U,	// XorRxRxRy16
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_SEQUENCE
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// ABSMacro
    0U,	// ABSQ_S_PH
    0U,	// ABSQ_S_PH_MM
    0U,	// ABSQ_S_QB
    0U,	// ABSQ_S_QB_MMR2
    0U,	// ABSQ_S_W
    0U,	// ABSQ_S_W_MM
    0U,	// ABS_D_MMR6
    0U,	// ABS_S_MMR6
    0U,	// ADD
    0U,	// ADDIUPC
    0U,	// ADDIUPC_MM
    0U,	// ADDIUPC_MMR6
    0U,	// ADDIUR1SP_MM
    0U,	// ADDIUR2_MM
    0U,	// ADDIUS5_MM
    0U,	// ADDIUSP_MM
    0U,	// ADDIU_MMR6
    0U,	// ADDQH_PH
    0U,	// ADDQH_PH_MMR2
    0U,	// ADDQH_R_PH
    0U,	// ADDQH_R_PH_MMR2
    0U,	// ADDQH_R_W
    0U,	// ADDQH_R_W_MMR2
    0U,	// ADDQH_W
    0U,	// ADDQH_W_MMR2
    0U,	// ADDQ_PH
    0U,	// ADDQ_PH_MM
    0U,	// ADDQ_S_PH
    0U,	// ADDQ_S_PH_MM
    0U,	// ADDQ_S_W
    0U,	// ADDQ_S_W_MM
    0U,	// ADDSC
    0U,	// ADDSC_MM
    0U,	// ADDS_A_B
    0U,	// ADDS_A_D
    0U,	// ADDS_A_H
    0U,	// ADDS_A_W
    0U,	// ADDS_S_B
    0U,	// ADDS_S_D
    0U,	// ADDS_S_H
    0U,	// ADDS_S_W
    0U,	// ADDS_U_B
    0U,	// ADDS_U_D
    0U,	// ADDS_U_H
    0U,	// ADDS_U_W
    0U,	// ADDU16_MM
    0U,	// ADDU16_MMR6
    0U,	// ADDUH_QB
    0U,	// ADDUH_QB_MMR2
    0U,	// ADDUH_R_QB
    0U,	// ADDUH_R_QB_MMR2
    0U,	// ADDU_MMR6
    0U,	// ADDU_PH
    0U,	// ADDU_PH_MMR2
    0U,	// ADDU_QB
    0U,	// ADDU_QB_MM
    0U,	// ADDU_S_PH
    0U,	// ADDU_S_PH_MMR2
    0U,	// ADDU_S_QB
    0U,	// ADDU_S_QB_MM
    2U,	// ADDVI_B
    2U,	// ADDVI_D
    2U,	// ADDVI_H
    2U,	// ADDVI_W
    0U,	// ADDV_B
    0U,	// ADDV_D
    0U,	// ADDV_H
    0U,	// ADDV_W
    0U,	// ADDWC
    0U,	// ADDWC_MM
    0U,	// ADD_A_B
    0U,	// ADD_A_D
    0U,	// ADD_A_H
    0U,	// ADD_A_W
    0U,	// ADD_MM
    0U,	// ADD_MMR6
    0U,	// ADDi
    0U,	// ADDi_MM
    0U,	// ADDiu
    0U,	// ADDiu_MM
    0U,	// ADDu
    0U,	// ADDu_MM
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    64U,	// ALIGN
    64U,	// ALIGN_MMR6
    0U,	// ALUIPC
    0U,	// ALUIPC_MMR6
    0U,	// AND
    0U,	// AND16_MM
    0U,	// AND16_MMR6
    0U,	// AND64
    0U,	// ANDI16_MM
    0U,	// ANDI16_MMR6
    4U,	// ANDI_B
    6U,	// ANDI_MMR6
    0U,	// AND_MM
    0U,	// AND_MMR6
    0U,	// AND_V
    0U,	// AND_V_D_PSEUDO
    0U,	// AND_V_H_PSEUDO
    0U,	// AND_V_W_PSEUDO
    6U,	// ANDi
    6U,	// ANDi64
    6U,	// ANDi_MM
    2U,	// APPEND
    2U,	// APPEND_MMR2
    0U,	// ASUB_S_B
    0U,	// ASUB_S_D
    0U,	// ASUB_S_H
    0U,	// ASUB_S_W
    0U,	// ASUB_U_B
    0U,	// ASUB_U_D
    0U,	// ASUB_U_H
    0U,	// ASUB_U_W
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    6U,	// AUI
    0U,	// AUIPC
    0U,	// AUIPC_MMR6
    6U,	// AUI_MMR6
    0U,	// AVER_S_B
    0U,	// AVER_S_D
    0U,	// AVER_S_H
    0U,	// AVER_S_W
    0U,	// AVER_U_B
    0U,	// AVER_U_D
    0U,	// AVER_U_H
    0U,	// AVER_U_W
    0U,	// AVE_S_B
    0U,	// AVE_S_D
    0U,	// AVE_S_H
    0U,	// AVE_S_W
    0U,	// AVE_U_B
    0U,	// AVE_U_D
    0U,	// AVE_U_H
    0U,	// AVE_U_W
    0U,	// AddiuRxImmX16
    0U,	// AddiuRxPcImmX16
    0U,	// AddiuRxRxImm16
    0U,	// AddiuRxRxImmX16
    0U,	// AddiuRxRyOffMemX16
    0U,	// AddiuSpImm16
    0U,	// AddiuSpImmX16
    0U,	// AdduRxRyRz16
    0U,	// AndRxRxRy16
    0U,	// B
    0U,	// B16_MM
    0U,	// BADDu
    0U,	// BAL
    0U,	// BALC
    0U,	// BALC_MMR6
    8U,	// BALIGN
    8U,	// BALIGN_MMR2
    0U,	// BAL_BR
    0U,	// BBIT0
    0U,	// BBIT032
    0U,	// BBIT1
    0U,	// BBIT132
    0U,	// BC
    0U,	// BC16_MMR6
    0U,	// BC1EQZ
    0U,	// BC1EQZC_MMR6
    0U,	// BC1F
    0U,	// BC1FL
    0U,	// BC1F_MM
    0U,	// BC1NEZ
    0U,	// BC1NEZC_MMR6
    0U,	// BC1T
    0U,	// BC1TL
    0U,	// BC1T_MM
    0U,	// BC2EQZ
    0U,	// BC2EQZC_MMR6
    0U,	// BC2NEZ
    0U,	// BC2NEZC_MMR6
    10U,	// BCLRI_B
    12U,	// BCLRI_D
    14U,	// BCLRI_H
    2U,	// BCLRI_W
    0U,	// BCLR_B
    0U,	// BCLR_D
    0U,	// BCLR_H
    0U,	// BCLR_W
    0U,	// BC_MMR6
    0U,	// BEQ
    0U,	// BEQ64
    0U,	// BEQC
    0U,	// BEQC64
    0U,	// BEQC_MMR6
    0U,	// BEQL
    0U,	// BEQLImmMacro
    0U,	// BEQZ16_MM
    0U,	// BEQZALC
    0U,	// BEQZALC_MMR6
    0U,	// BEQZC
    0U,	// BEQZC16_MMR6
    0U,	// BEQZC64
    0U,	// BEQZC_MM
    0U,	// BEQZC_MMR6
    0U,	// BEQ_MM
    0U,	// BGE
    0U,	// BGEC
    0U,	// BGEC64
    0U,	// BGEC_MMR6
    0U,	// BGEImmMacro
    0U,	// BGEL
    0U,	// BGELImmMacro
    0U,	// BGEU
    0U,	// BGEUC
    0U,	// BGEUC64
    0U,	// BGEUC_MMR6
    0U,	// BGEUImmMacro
    0U,	// BGEUL
    0U,	// BGEULImmMacro
    0U,	// BGEZ
    0U,	// BGEZ64
    0U,	// BGEZAL
    0U,	// BGEZALC
    0U,	// BGEZALC_MMR6
    0U,	// BGEZALL
    0U,	// BGEZALS_MM
    0U,	// BGEZAL_MM
    0U,	// BGEZC
    0U,	// BGEZC64
    0U,	// BGEZC_MMR6
    0U,	// BGEZL
    0U,	// BGEZ_MM
    0U,	// BGT
    0U,	// BGTImmMacro
    0U,	// BGTL
    0U,	// BGTLImmMacro
    0U,	// BGTU
    0U,	// BGTUImmMacro
    0U,	// BGTUL
    0U,	// BGTULImmMacro
    0U,	// BGTZ
    0U,	// BGTZ64
    0U,	// BGTZALC
    0U,	// BGTZALC_MMR6
    0U,	// BGTZC
    0U,	// BGTZC64
    0U,	// BGTZC_MMR6
    0U,	// BGTZL
    0U,	// BGTZ_MM
    16U,	// BINSLI_B
    18U,	// BINSLI_D
    20U,	// BINSLI_H
    22U,	// BINSLI_W
    24U,	// BINSL_B
    24U,	// BINSL_D
    24U,	// BINSL_H
    24U,	// BINSL_W
    16U,	// BINSRI_B
    18U,	// BINSRI_D
    20U,	// BINSRI_H
    22U,	// BINSRI_W
    24U,	// BINSR_B
    24U,	// BINSR_D
    24U,	// BINSR_H
    24U,	// BINSR_W
    0U,	// BITREV
    0U,	// BITREV_MM
    0U,	// BITSWAP
    0U,	// BITSWAP_MMR6
    0U,	// BLE
    0U,	// BLEImmMacro
    0U,	// BLEL
    0U,	// BLELImmMacro
    0U,	// BLEU
    0U,	// BLEUImmMacro
    0U,	// BLEUL
    0U,	// BLEULImmMacro
    0U,	// BLEZ
    0U,	// BLEZ64
    0U,	// BLEZALC
    0U,	// BLEZALC_MMR6
    0U,	// BLEZC
    0U,	// BLEZC64
    0U,	// BLEZC_MMR6
    0U,	// BLEZL
    0U,	// BLEZ_MM
    0U,	// BLT
    0U,	// BLTC
    0U,	// BLTC64
    0U,	// BLTC_MMR6
    0U,	// BLTImmMacro
    0U,	// BLTL
    0U,	// BLTLImmMacro
    0U,	// BLTU
    0U,	// BLTUC
    0U,	// BLTUC64
    0U,	// BLTUC_MMR6
    0U,	// BLTUImmMacro
    0U,	// BLTUL
    0U,	// BLTULImmMacro
    0U,	// BLTZ
    0U,	// BLTZ64
    0U,	// BLTZAL
    0U,	// BLTZALC
    0U,	// BLTZALC_MMR6
    0U,	// BLTZALL
    0U,	// BLTZALS_MM
    0U,	// BLTZAL_MM
    0U,	// BLTZC
    0U,	// BLTZC64
    0U,	// BLTZC_MMR6
    0U,	// BLTZL
    0U,	// BLTZ_MM
    26U,	// BMNZI_B
    24U,	// BMNZ_V
    26U,	// BMZI_B
    24U,	// BMZ_V
    0U,	// BNE
    0U,	// BNE64
    0U,	// BNEC
    0U,	// BNEC64
    0U,	// BNEC_MMR6
    10U,	// BNEGI_B
    12U,	// BNEGI_D
    14U,	// BNEGI_H
    2U,	// BNEGI_W
    0U,	// BNEG_B
    0U,	// BNEG_D
    0U,	// BNEG_H
    0U,	// BNEG_W
    0U,	// BNEL
    0U,	// BNELImmMacro
    0U,	// BNEZ16_MM
    0U,	// BNEZALC
    0U,	// BNEZALC_MMR6
    0U,	// BNEZC
    0U,	// BNEZC16_MMR6
    0U,	// BNEZC64
    0U,	// BNEZC_MM
    0U,	// BNEZC_MMR6
    0U,	// BNE_MM
    0U,	// BNVC
    0U,	// BNVC_MMR6
    0U,	// BNZ_B
    0U,	// BNZ_D
    0U,	// BNZ_H
    0U,	// BNZ_V
    0U,	// BNZ_W
    0U,	// BOVC
    0U,	// BOVC_MMR6
    0U,	// BPOSGE32
    0U,	// BPOSGE32C_MMR3
    0U,	// BPOSGE32_MM
    0U,	// BPOSGE32_PSEUDO
    0U,	// BREAK
    0U,	// BREAK16_MM
    0U,	// BREAK16_MMR6
    0U,	// BREAK_MM
    0U,	// BREAK_MMR6
    26U,	// BSELI_B
    0U,	// BSEL_D_PSEUDO
    0U,	// BSEL_FD_PSEUDO
    0U,	// BSEL_FW_PSEUDO
    0U,	// BSEL_H_PSEUDO
    24U,	// BSEL_V
    0U,	// BSEL_W_PSEUDO
    10U,	// BSETI_B
    12U,	// BSETI_D
    14U,	// BSETI_H
    2U,	// BSETI_W
    0U,	// BSET_B
    0U,	// BSET_D
    0U,	// BSET_H
    0U,	// BSET_W
    0U,	// BZ_B
    0U,	// BZ_D
    0U,	// BZ_H
    0U,	// BZ_V
    0U,	// BZ_W
    0U,	// B_MMR6_Pseudo
    0U,	// B_MM_Pseudo
    0U,	// BeqImm
    0U,	// BeqzRxImm16
    0U,	// BeqzRxImmX16
    0U,	// Bimm16
    0U,	// BimmX16
    0U,	// BneImm
    0U,	// BnezRxImm16
    0U,	// BnezRxImmX16
    0U,	// Break16
    0U,	// Bteqz16
    0U,	// BteqzT8CmpX16
    0U,	// BteqzT8CmpiX16
    0U,	// BteqzT8SltX16
    0U,	// BteqzT8SltiX16
    0U,	// BteqzT8SltiuX16
    0U,	// BteqzT8SltuX16
    0U,	// BteqzX16
    0U,	// Btnez16
    0U,	// BtnezT8CmpX16
    0U,	// BtnezT8CmpiX16
    0U,	// BtnezT8SltX16
    0U,	// BtnezT8SltiX16
    0U,	// BtnezT8SltiuX16
    0U,	// BtnezT8SltuX16
    0U,	// BtnezX16
    0U,	// BuildPairF64
    0U,	// BuildPairF64_64
    0U,	// CACHE
    0U,	// CACHEE
    0U,	// CACHEE_MM
    0U,	// CACHEE_MMR6
    0U,	// CACHE_MM
    0U,	// CACHE_MMR6
    0U,	// CACHE_R6
    0U,	// CEIL_L_D64
    0U,	// CEIL_L_D_MMR6
    0U,	// CEIL_L_S
    0U,	// CEIL_L_S_MMR6
    0U,	// CEIL_W_D32
    0U,	// CEIL_W_D64
    0U,	// CEIL_W_D_MMR6
    0U,	// CEIL_W_MM
    0U,	// CEIL_W_S
    0U,	// CEIL_W_S_MM
    0U,	// CEIL_W_S_MMR6
    0U,	// CEQI_B
    0U,	// CEQI_D
    0U,	// CEQI_H
    0U,	// CEQI_W
    0U,	// CEQ_B
    0U,	// CEQ_D
    0U,	// CEQ_H
    0U,	// CEQ_W
    0U,	// CFC1
    0U,	// CFC1_MM
    0U,	// CFC2_MM
    0U,	// CFCMSA
    578U,	// CINS
    578U,	// CINS32
    578U,	// CINS64_32
    578U,	// CINS_i32
    0U,	// CLASS_D
    0U,	// CLASS_D_MMR6
    0U,	// CLASS_S
    0U,	// CLASS_S_MMR6
    0U,	// CLEI_S_B
    0U,	// CLEI_S_D
    0U,	// CLEI_S_H
    0U,	// CLEI_S_W
    2U,	// CLEI_U_B
    2U,	// CLEI_U_D
    2U,	// CLEI_U_H
    2U,	// CLEI_U_W
    0U,	// CLE_S_B
    0U,	// CLE_S_D
    0U,	// CLE_S_H
    0U,	// CLE_S_W
    0U,	// CLE_U_B
    0U,	// CLE_U_D
    0U,	// CLE_U_H
    0U,	// CLE_U_W
    0U,	// CLO
    0U,	// CLO_MM
    0U,	// CLO_MMR6
    0U,	// CLO_R6
    0U,	// CLTI_S_B
    0U,	// CLTI_S_D
    0U,	// CLTI_S_H
    0U,	// CLTI_S_W
    2U,	// CLTI_U_B
    2U,	// CLTI_U_D
    2U,	// CLTI_U_H
    2U,	// CLTI_U_W
    0U,	// CLT_S_B
    0U,	// CLT_S_D
    0U,	// CLT_S_H
    0U,	// CLT_S_W
    0U,	// CLT_U_B
    0U,	// CLT_U_D
    0U,	// CLT_U_H
    0U,	// CLT_U_W
    0U,	// CLZ
    0U,	// CLZ_MM
    0U,	// CLZ_MMR6
    0U,	// CLZ_R6
    0U,	// CMPGDU_EQ_QB
    0U,	// CMPGDU_EQ_QB_MMR2
    0U,	// CMPGDU_LE_QB
    0U,	// CMPGDU_LE_QB_MMR2
    0U,	// CMPGDU_LT_QB
    0U,	// CMPGDU_LT_QB_MMR2
    0U,	// CMPGU_EQ_QB
    0U,	// CMPGU_EQ_QB_MM
    0U,	// CMPGU_LE_QB
    0U,	// CMPGU_LE_QB_MM
    0U,	// CMPGU_LT_QB
    0U,	// CMPGU_LT_QB_MM
    0U,	// CMPU_EQ_QB
    0U,	// CMPU_EQ_QB_MM
    0U,	// CMPU_LE_QB
    0U,	// CMPU_LE_QB_MM
    0U,	// CMPU_LT_QB
    0U,	// CMPU_LT_QB_MM
    0U,	// CMP_AF_D_MMR6
    0U,	// CMP_AF_S_MMR6
    0U,	// CMP_EQ_D
    0U,	// CMP_EQ_D_MMR6
    0U,	// CMP_EQ_PH
    0U,	// CMP_EQ_PH_MM
    0U,	// CMP_EQ_S
    0U,	// CMP_EQ_S_MMR6
    0U,	// CMP_F_D
    0U,	// CMP_F_S
    0U,	// CMP_LE_D
    0U,	// CMP_LE_D_MMR6
    0U,	// CMP_LE_PH
    0U,	// CMP_LE_PH_MM
    0U,	// CMP_LE_S
    0U,	// CMP_LE_S_MMR6
    0U,	// CMP_LT_D
    0U,	// CMP_LT_D_MMR6
    0U,	// CMP_LT_PH
    0U,	// CMP_LT_PH_MM
    0U,	// CMP_LT_S
    0U,	// CMP_LT_S_MMR6
    0U,	// CMP_SAF_D
    0U,	// CMP_SAF_D_MMR6
    0U,	// CMP_SAF_S
    0U,	// CMP_SAF_S_MMR6
    0U,	// CMP_SEQ_D
    0U,	// CMP_SEQ_D_MMR6
    0U,	// CMP_SEQ_S
    0U,	// CMP_SEQ_S_MMR6
    0U,	// CMP_SLE_D
    0U,	// CMP_SLE_D_MMR6
    0U,	// CMP_SLE_S
    0U,	// CMP_SLE_S_MMR6
    0U,	// CMP_SLT_D
    0U,	// CMP_SLT_D_MMR6
    0U,	// CMP_SLT_S
    0U,	// CMP_SLT_S_MMR6
    0U,	// CMP_SUEQ_D
    0U,	// CMP_SUEQ_D_MMR6
    0U,	// CMP_SUEQ_S
    0U,	// CMP_SUEQ_S_MMR6
    0U,	// CMP_SULE_D
    0U,	// CMP_SULE_D_MMR6
    0U,	// CMP_SULE_S
    0U,	// CMP_SULE_S_MMR6
    0U,	// CMP_SULT_D
    0U,	// CMP_SULT_D_MMR6
    0U,	// CMP_SULT_S
    0U,	// CMP_SULT_S_MMR6
    0U,	// CMP_SUN_D
    0U,	// CMP_SUN_D_MMR6
    0U,	// CMP_SUN_S
    0U,	// CMP_SUN_S_MMR6
    0U,	// CMP_UEQ_D
    0U,	// CMP_UEQ_D_MMR6
    0U,	// CMP_UEQ_S
    0U,	// CMP_UEQ_S_MMR6
    0U,	// CMP_ULE_D
    0U,	// CMP_ULE_D_MMR6
    0U,	// CMP_ULE_S
    0U,	// CMP_ULE_S_MMR6
    0U,	// CMP_ULT_D
    0U,	// CMP_ULT_D_MMR6
    0U,	// CMP_ULT_S
    0U,	// CMP_ULT_S_MMR6
    0U,	// CMP_UN_D
    0U,	// CMP_UN_D_MMR6
    0U,	// CMP_UN_S
    0U,	// CMP_UN_S_MMR6
    0U,	// CONSTPOOL_ENTRY
    0U,	// COPY_FD_PSEUDO
    0U,	// COPY_FW_PSEUDO
    142U,	// COPY_S_B
    28U,	// COPY_S_D
    138U,	// COPY_S_H
    136U,	// COPY_S_W
    142U,	// COPY_U_B
    138U,	// COPY_U_H
    136U,	// COPY_U_W
    0U,	// CTC1
    0U,	// CTC1_MM
    0U,	// CTC2_MM
    0U,	// CTCMSA
    0U,	// CVT_D32_S
    0U,	// CVT_D32_W
    0U,	// CVT_D32_W_MM
    0U,	// CVT_D64_L
    0U,	// CVT_D64_S
    0U,	// CVT_D64_W
    0U,	// CVT_D_L_MMR6
    0U,	// CVT_D_S_MM
    0U,	// CVT_D_S_MMR6
    0U,	// CVT_D_W_MMR6
    0U,	// CVT_L_D64
    0U,	// CVT_L_D64_MM
    0U,	// CVT_L_D_MMR6
    0U,	// CVT_L_S
    0U,	// CVT_L_S_MM
    0U,	// CVT_L_S_MMR6
    0U,	// CVT_S_D32
    0U,	// CVT_S_D32_MM
    0U,	// CVT_S_D64
    0U,	// CVT_S_D_MMR6
    0U,	// CVT_S_L
    0U,	// CVT_S_L_MMR6
    0U,	// CVT_S_W
    0U,	// CVT_S_W_MM
    0U,	// CVT_S_W_MMR6
    0U,	// CVT_W_D32
    0U,	// CVT_W_D64
    0U,	// CVT_W_D_MMR6
    0U,	// CVT_W_MM
    0U,	// CVT_W_S
    0U,	// CVT_W_S_MM
    0U,	// CVT_W_S_MMR6
    0U,	// C_EQ_D32
    0U,	// C_EQ_D32_MM
    0U,	// C_EQ_D64
    0U,	// C_EQ_D64_MM
    0U,	// C_EQ_S
    0U,	// C_EQ_S_MM
    0U,	// C_F_D32
    0U,	// C_F_D32_MM
    0U,	// C_F_D64
    0U,	// C_F_D64_MM
    0U,	// C_F_S
    0U,	// C_F_S_MM
    0U,	// C_LE_D32
    0U,	// C_LE_D32_MM
    0U,	// C_LE_D64
    0U,	// C_LE_D64_MM
    0U,	// C_LE_S
    0U,	// C_LE_S_MM
    0U,	// C_LT_D32
    0U,	// C_LT_D32_MM
    0U,	// C_LT_D64
    0U,	// C_LT_D64_MM
    0U,	// C_LT_S
    0U,	// C_LT_S_MM
    0U,	// C_NGE_D32
    0U,	// C_NGE_D32_MM
    0U,	// C_NGE_D64
    0U,	// C_NGE_D64_MM
    0U,	// C_NGE_S
    0U,	// C_NGE_S_MM
    0U,	// C_NGLE_D32
    0U,	// C_NGLE_D32_MM
    0U,	// C_NGLE_D64
    0U,	// C_NGLE_D64_MM
    0U,	// C_NGLE_S
    0U,	// C_NGLE_S_MM
    0U,	// C_NGL_D32
    0U,	// C_NGL_D32_MM
    0U,	// C_NGL_D64
    0U,	// C_NGL_D64_MM
    0U,	// C_NGL_S
    0U,	// C_NGL_S_MM
    0U,	// C_NGT_D32
    0U,	// C_NGT_D32_MM
    0U,	// C_NGT_D64
    0U,	// C_NGT_D64_MM
    0U,	// C_NGT_S
    0U,	// C_NGT_S_MM
    0U,	// C_OLE_D32
    0U,	// C_OLE_D32_MM
    0U,	// C_OLE_D64
    0U,	// C_OLE_D64_MM
    0U,	// C_OLE_S
    0U,	// C_OLE_S_MM
    0U,	// C_OLT_D32
    0U,	// C_OLT_D32_MM
    0U,	// C_OLT_D64
    0U,	// C_OLT_D64_MM
    0U,	// C_OLT_S
    0U,	// C_OLT_S_MM
    0U,	// C_SEQ_D32
    0U,	// C_SEQ_D32_MM
    0U,	// C_SEQ_D64
    0U,	// C_SEQ_D64_MM
    0U,	// C_SEQ_S
    0U,	// C_SEQ_S_MM
    0U,	// C_SF_D32
    0U,	// C_SF_D32_MM
    0U,	// C_SF_D64
    0U,	// C_SF_D64_MM
    0U,	// C_SF_S
    0U,	// C_SF_S_MM
    0U,	// C_UEQ_D32
    0U,	// C_UEQ_D32_MM
    0U,	// C_UEQ_D64
    0U,	// C_UEQ_D64_MM
    0U,	// C_UEQ_S
    0U,	// C_UEQ_S_MM
    0U,	// C_ULE_D32
    0U,	// C_ULE_D32_MM
    0U,	// C_ULE_D64
    0U,	// C_ULE_D64_MM
    0U,	// C_ULE_S
    0U,	// C_ULE_S_MM
    0U,	// C_ULT_D32
    0U,	// C_ULT_D32_MM
    0U,	// C_ULT_D64
    0U,	// C_ULT_D64_MM
    0U,	// C_ULT_S
    0U,	// C_ULT_S_MM
    0U,	// C_UN_D32
    0U,	// C_UN_D32_MM
    0U,	// C_UN_D64
    0U,	// C_UN_D64_MM
    0U,	// C_UN_S
    0U,	// C_UN_S_MM
    0U,	// CmpRxRy16
    0U,	// CmpiRxImm16
    0U,	// CmpiRxImmX16
    0U,	// Constant32
    0U,	// DADD
    0U,	// DADDIU_MM64R6
    0U,	// DADDU_MM64R6
    0U,	// DADD_MM64R6
    0U,	// DADDi
    0U,	// DADDiu
    0U,	// DADDu
    6U,	// DAHI
    0U,	// DAHI_MM64R6
    1088U,	// DALIGN
    1088U,	// DALIGN_MM64R6
    6U,	// DATI
    0U,	// DATI_MM64R6
    6U,	// DAUI
    6U,	// DAUI_MM64R6
    0U,	// DBITSWAP
    0U,	// DBITSWAP_MM64R6
    0U,	// DCLO
    0U,	// DCLO_MM64R6
    0U,	// DCLO_R6
    0U,	// DCLZ
    0U,	// DCLZ_MM64R6
    0U,	// DCLZ_R6
    0U,	// DDIV
    0U,	// DDIVU
    0U,	// DDIVU_MM64R6
    0U,	// DDIV_MM64R6
    0U,	// DERET
    0U,	// DERET_MM
    0U,	// DERET_MMR6
    1602U,	// DEXT
    1602U,	// DEXT64_32
    2114U,	// DEXTM
    2114U,	// DEXTM_MM64R6
    222U,	// DEXTU
    222U,	// DEXTU_MM64R6
    1602U,	// DEXT_MM64R6
    0U,	// DI
    2636U,	// DINS
    2626U,	// DINSM
    3138U,	// DINSM_MM64R6
    286U,	// DINSU
    286U,	// DINSU_MM64R6
    2626U,	// DINS_MM64R6
    0U,	// DIV
    0U,	// DIVU
    0U,	// DIVU_MMR6
    0U,	// DIV_MMR6
    0U,	// DIV_S_B
    0U,	// DIV_S_D
    0U,	// DIV_S_H
    0U,	// DIV_S_W
    0U,	// DIV_U_B
    0U,	// DIV_U_D
    0U,	// DIV_U_H
    0U,	// DIV_U_W
    0U,	// DI_MM
    0U,	// DI_MMR6
    3648U,	// DLSA
    0U,	// DLSA_MM64R6
    3648U,	// DLSA_R6
    10U,	// DMFC0
    10U,	// DMFC0_MM64R6
    0U,	// DMFC1
    0U,	// DMFC1_MM64R6
    10U,	// DMFC2
    0U,	// DMFC2_MM64R6
    0U,	// DMFC2_OCTEON
    0U,	// DMOD
    0U,	// DMODU
    0U,	// DMODU_MM64R6
    0U,	// DMOD_MM64R6
    0U,	// DMTC0
    0U,	// DMTC0_MM64R6
    0U,	// DMTC1
    0U,	// DMTC1_MM64R6
    0U,	// DMTC2
    0U,	// DMTC2_MM64R6
    0U,	// DMTC2_OCTEON
    0U,	// DMUH
    0U,	// DMUHU
    0U,	// DMUHU_MM64R6
    0U,	// DMUH_MM64R6
    0U,	// DMUL
    0U,	// DMULImmMacro
    0U,	// DMULMacro
    0U,	// DMULOMacro
    0U,	// DMULOUMacro
    0U,	// DMULT
    0U,	// DMULTu
    0U,	// DMULU
    0U,	// DMULU_MM64R6
    0U,	// DMUL_MM64R6
    0U,	// DMUL_R6
    0U,	// DOTP_S_D
    0U,	// DOTP_S_H
    0U,	// DOTP_S_W
    0U,	// DOTP_U_D
    0U,	// DOTP_U_H
    0U,	// DOTP_U_W
    24U,	// DPADD_S_D
    24U,	// DPADD_S_H
    24U,	// DPADD_S_W
    24U,	// DPADD_U_D
    24U,	// DPADD_U_H
    24U,	// DPADD_U_W
    0U,	// DPAQX_SA_W_PH
    0U,	// DPAQX_SA_W_PH_MMR2
    0U,	// DPAQX_S_W_PH
    0U,	// DPAQX_S_W_PH_MMR2
    0U,	// DPAQ_SA_L_W
    0U,	// DPAQ_SA_L_W_MM
    0U,	// DPAQ_S_W_PH
    0U,	// DPAQ_S_W_PH_MM
    0U,	// DPAU_H_QBL
    0U,	// DPAU_H_QBL_MM
    0U,	// DPAU_H_QBR
    0U,	// DPAU_H_QBR_MM
    0U,	// DPAX_W_PH
    0U,	// DPAX_W_PH_MMR2
    0U,	// DPA_W_PH
    0U,	// DPA_W_PH_MMR2
    0U,	// DPOP
    0U,	// DPSQX_SA_W_PH
    0U,	// DPSQX_SA_W_PH_MMR2
    0U,	// DPSQX_S_W_PH
    0U,	// DPSQX_S_W_PH_MMR2
    0U,	// DPSQ_SA_L_W
    0U,	// DPSQ_SA_L_W_MM
    0U,	// DPSQ_S_W_PH
    0U,	// DPSQ_S_W_PH_MM
    24U,	// DPSUB_S_D
    24U,	// DPSUB_S_H
    24U,	// DPSUB_S_W
    24U,	// DPSUB_U_D
    24U,	// DPSUB_U_H
    24U,	// DPSUB_U_W
    0U,	// DPSU_H_QBL
    0U,	// DPSU_H_QBL_MM
    0U,	// DPSU_H_QBR
    0U,	// DPSU_H_QBR_MM
    0U,	// DPSX_W_PH
    0U,	// DPSX_W_PH_MMR2
    0U,	// DPS_W_PH
    0U,	// DPS_W_PH_MMR2
    0U,	// DROL
    0U,	// DROLImm
    0U,	// DROR
    0U,	// DRORImm
    12U,	// DROTR
    2U,	// DROTR32
    2U,	// DROTR32_MM64R6
    0U,	// DROTRV
    0U,	// DROTRV_MM64R6
    12U,	// DROTR_MM64R6
    0U,	// DSBH
    0U,	// DSBH_MM64R6
    0U,	// DSDIV
    0U,	// DSDivIMacro
    0U,	// DSDivMacro
    0U,	// DSHD
    0U,	// DSHD_MM64R6
    12U,	// DSLL
    2U,	// DSLL32
    2U,	// DSLL32_MM64R6
    0U,	// DSLL64_32
    0U,	// DSLLV
    0U,	// DSLLV_MM64R6
    12U,	// DSLL_MM64R6
    12U,	// DSRA
    2U,	// DSRA32
    2U,	// DSRA32_MM64R6
    0U,	// DSRAV
    0U,	// DSRAV_MM64R6
    12U,	// DSRA_MM64R6
    12U,	// DSRL
    2U,	// DSRL32
    2U,	// DSRL32_MM64R6
    0U,	// DSRLV
    0U,	// DSRLV_MM64R6
    12U,	// DSRL_MM64R6
    0U,	// DSUB
    0U,	// DSUBU_MM64R6
    0U,	// DSUB_MM64R6
    0U,	// DSUBu
    0U,	// DUDIV
    0U,	// DUDivIMacro
    0U,	// DUDivMacro
    0U,	// DVP
    0U,	// DVP_MMR6
    0U,	// DivRxRy16
    0U,	// DivuRxRy16
    0U,	// EHB
    0U,	// EHB_MM
    0U,	// EHB_MMR6
    0U,	// EI
    0U,	// EI_MM
    0U,	// EI_MMR6
    0U,	// ERET
    0U,	// ERETNC
    0U,	// ERETNC_MMR6
    0U,	// ERET_MM
    0U,	// ERET_MMR6
    0U,	// ERet
    0U,	// EVP
    0U,	// EVP_MMR6
    1602U,	// EXT
    2U,	// EXTP
    2U,	// EXTPDP
    0U,	// EXTPDPV
    0U,	// EXTPDPV_MM
    2U,	// EXTPDP_MM
    0U,	// EXTPV
    0U,	// EXTPV_MM
    2U,	// EXTP_MM
    0U,	// EXTRV_RS_W
    0U,	// EXTRV_RS_W_MM
    0U,	// EXTRV_R_W
    0U,	// EXTRV_R_W_MM
    0U,	// EXTRV_S_H
    0U,	// EXTRV_S_H_MM
    0U,	// EXTRV_W
    0U,	// EXTRV_W_MM
    2U,	// EXTR_RS_W
    2U,	// EXTR_RS_W_MM
    2U,	// EXTR_R_W
    2U,	// EXTR_R_W_MM
    2U,	// EXTR_S_H
    2U,	// EXTR_S_H_MM
    2U,	// EXTR_W
    2U,	// EXTR_W_MM
    578U,	// EXTS
    578U,	// EXTS32
    1602U,	// EXT_MM
    1602U,	// EXT_MMR6
    0U,	// ExtractElementF64
    0U,	// ExtractElementF64_64
    0U,	// FABS_D
    0U,	// FABS_D32
    0U,	// FABS_D64
    0U,	// FABS_MM
    0U,	// FABS_S
    0U,	// FABS_S_MM
    0U,	// FABS_W
    0U,	// FADD_D
    0U,	// FADD_D32
    0U,	// FADD_D64
    32U,	// FADD_D_MMR6
    0U,	// FADD_MM
    0U,	// FADD_S
    0U,	// FADD_S_MM
    32U,	// FADD_S_MMR6
    0U,	// FADD_W
    0U,	// FCAF_D
    0U,	// FCAF_W
    0U,	// FCEQ_D
    0U,	// FCEQ_W
    0U,	// FCLASS_D
    0U,	// FCLASS_W
    0U,	// FCLE_D
    0U,	// FCLE_W
    0U,	// FCLT_D
    0U,	// FCLT_W
    0U,	// FCMP_D32
    0U,	// FCMP_D32_MM
    0U,	// FCMP_D64
    0U,	// FCMP_S32
    0U,	// FCMP_S32_MM
    0U,	// FCNE_D
    0U,	// FCNE_W
    0U,	// FCOR_D
    0U,	// FCOR_W
    0U,	// FCUEQ_D
    0U,	// FCUEQ_W
    0U,	// FCULE_D
    0U,	// FCULE_W
    0U,	// FCULT_D
    0U,	// FCULT_W
    0U,	// FCUNE_D
    0U,	// FCUNE_W
    0U,	// FCUN_D
    0U,	// FCUN_W
    0U,	// FDIV_D
    0U,	// FDIV_D32
    0U,	// FDIV_D64
    32U,	// FDIV_D_MMR6
    0U,	// FDIV_MM
    0U,	// FDIV_S
    0U,	// FDIV_S_MM
    32U,	// FDIV_S_MMR6
    0U,	// FDIV_W
    0U,	// FEXDO_H
    0U,	// FEXDO_W
    0U,	// FEXP2_D
    0U,	// FEXP2_D_1_PSEUDO
    0U,	// FEXP2_W
    0U,	// FEXP2_W_1_PSEUDO
    0U,	// FEXUPL_D
    0U,	// FEXUPL_W
    0U,	// FEXUPR_D
    0U,	// FEXUPR_W
    0U,	// FFINT_S_D
    0U,	// FFINT_S_W
    0U,	// FFINT_U_D
    0U,	// FFINT_U_W
    0U,	// FFQL_D
    0U,	// FFQL_W
    0U,	// FFQR_D
    0U,	// FFQR_W
    0U,	// FILL_B
    0U,	// FILL_D
    0U,	// FILL_FD_PSEUDO
    0U,	// FILL_FW_PSEUDO
    0U,	// FILL_H
    0U,	// FILL_W
    0U,	// FLOG2_D
    0U,	// FLOG2_W
    0U,	// FLOOR_L_D64
    0U,	// FLOOR_L_D_MMR6
    0U,	// FLOOR_L_S
    0U,	// FLOOR_L_S_MMR6
    0U,	// FLOOR_W_D32
    0U,	// FLOOR_W_D64
    0U,	// FLOOR_W_D_MMR6
    0U,	// FLOOR_W_MM
    0U,	// FLOOR_W_S
    0U,	// FLOOR_W_S_MM
    0U,	// FLOOR_W_S_MMR6
    24U,	// FMADD_D
    24U,	// FMADD_W
    0U,	// FMAX_A_D
    0U,	// FMAX_A_W
    0U,	// FMAX_D
    0U,	// FMAX_W
    0U,	// FMIN_A_D
    0U,	// FMIN_A_W
    0U,	// FMIN_D
    0U,	// FMIN_W
    0U,	// FMOV_D32
    0U,	// FMOV_D32_MM
    0U,	// FMOV_D64
    0U,	// FMOV_D_MMR6
    0U,	// FMOV_S
    0U,	// FMOV_S_MM
    0U,	// FMOV_S_MMR6
    24U,	// FMSUB_D
    24U,	// FMSUB_W
    0U,	// FMUL_D
    0U,	// FMUL_D32
    0U,	// FMUL_D64
    32U,	// FMUL_D_MMR6
    0U,	// FMUL_MM
    0U,	// FMUL_S
    0U,	// FMUL_S_MM
    32U,	// FMUL_S_MMR6
    0U,	// FMUL_W
    0U,	// FNEG_D32
    0U,	// FNEG_D64
    0U,	// FNEG_D_MMR6
    0U,	// FNEG_MM
    0U,	// FNEG_S
    0U,	// FNEG_S_MM
    0U,	// FNEG_S_MMR6
    0U,	// FRCP_D
    0U,	// FRCP_W
    0U,	// FRINT_D
    0U,	// FRINT_W
    0U,	// FRSQRT_D
    0U,	// FRSQRT_W
    0U,	// FSAF_D
    0U,	// FSAF_W
    0U,	// FSEQ_D
    0U,	// FSEQ_W
    0U,	// FSLE_D
    0U,	// FSLE_W
    0U,	// FSLT_D
    0U,	// FSLT_W
    0U,	// FSNE_D
    0U,	// FSNE_W
    0U,	// FSOR_D
    0U,	// FSOR_W
    0U,	// FSQRT_D
    0U,	// FSQRT_D32
    0U,	// FSQRT_D64
    0U,	// FSQRT_MM
    0U,	// FSQRT_S
    0U,	// FSQRT_S_MM
    0U,	// FSQRT_W
    0U,	// FSUB_D
    0U,	// FSUB_D32
    0U,	// FSUB_D64
    32U,	// FSUB_D_MMR6
    0U,	// FSUB_MM
    0U,	// FSUB_S
    0U,	// FSUB_S_MM
    32U,	// FSUB_S_MMR6
    0U,	// FSUB_W
    0U,	// FSUEQ_D
    0U,	// FSUEQ_W
    0U,	// FSULE_D
    0U,	// FSULE_W
    0U,	// FSULT_D
    0U,	// FSULT_W
    0U,	// FSUNE_D
    0U,	// FSUNE_W
    0U,	// FSUN_D
    0U,	// FSUN_W
    0U,	// FTINT_S_D
    0U,	// FTINT_S_W
    0U,	// FTINT_U_D
    0U,	// FTINT_U_W
    0U,	// FTQ_H
    0U,	// FTQ_W
    0U,	// FTRUNC_S_D
    0U,	// FTRUNC_S_W
    0U,	// FTRUNC_U_D
    0U,	// FTRUNC_U_W
    0U,	// GotPrologue16
    0U,	// HADD_S_D
    0U,	// HADD_S_H
    0U,	// HADD_S_W
    0U,	// HADD_U_D
    0U,	// HADD_U_H
    0U,	// HADD_U_W
    0U,	// HSUB_S_D
    0U,	// HSUB_S_H
    0U,	// HSUB_S_W
    0U,	// HSUB_U_D
    0U,	// HSUB_U_H
    0U,	// HSUB_U_W
    0U,	// ILVEV_B
    0U,	// ILVEV_D
    0U,	// ILVEV_H
    0U,	// ILVEV_W
    0U,	// ILVL_B
    0U,	// ILVL_D
    0U,	// ILVL_H
    0U,	// ILVL_W
    0U,	// ILVOD_B
    0U,	// ILVOD_D
    0U,	// ILVOD_H
    0U,	// ILVOD_W
    0U,	// ILVR_B
    0U,	// ILVR_D
    0U,	// ILVR_H
    0U,	// ILVR_W
    2626U,	// INS
    0U,	// INSERT_B
    0U,	// INSERT_B_VIDX64_PSEUDO
    0U,	// INSERT_B_VIDX_PSEUDO
    0U,	// INSERT_D
    0U,	// INSERT_D_VIDX64_PSEUDO
    0U,	// INSERT_D_VIDX_PSEUDO
    0U,	// INSERT_FD_PSEUDO
    0U,	// INSERT_FD_VIDX64_PSEUDO
    0U,	// INSERT_FD_VIDX_PSEUDO
    0U,	// INSERT_FW_PSEUDO
    0U,	// INSERT_FW_VIDX64_PSEUDO
    0U,	// INSERT_FW_VIDX_PSEUDO
    0U,	// INSERT_H
    0U,	// INSERT_H_VIDX64_PSEUDO
    0U,	// INSERT_H_VIDX_PSEUDO
    0U,	// INSERT_W
    0U,	// INSERT_W_VIDX64_PSEUDO
    0U,	// INSERT_W_VIDX_PSEUDO
    0U,	// INSV
    0U,	// INSVE_B
    0U,	// INSVE_D
    0U,	// INSVE_H
    0U,	// INSVE_W
    0U,	// INSV_MM
    2626U,	// INS_MM
    2626U,	// INS_MMR6
    0U,	// J
    0U,	// JAL
    0U,	// JALR
    0U,	// JALR16_MM
    0U,	// JALR64
    0U,	// JALR64Pseudo
    0U,	// JALRC16_MMR6
    0U,	// JALRC_HB_MMR6
    0U,	// JALRC_MMR6
    0U,	// JALRPseudo
    0U,	// JALRS16_MM
    0U,	// JALRS_MM
    0U,	// JALR_HB
    0U,	// JALR_MM
    0U,	// JALS_MM
    0U,	// JALX
    0U,	// JALX_MM
    0U,	// JAL_MM
    0U,	// JIALC
    0U,	// JIALC64
    0U,	// JIALC_MMR6
    0U,	// JIC
    0U,	// JIC64
    0U,	// JIC_MMR6
    0U,	// JR
    0U,	// JR16_MM
    0U,	// JR64
    0U,	// JRADDIUSP
    0U,	// JRC16_MM
    0U,	// JRC16_MMR6
    0U,	// JRCADDIUSP_MMR6
    0U,	// JR_HB
    0U,	// JR_HB_R6
    0U,	// JR_MM
    0U,	// J_MM
    0U,	// Jal16
    0U,	// JalB16
    0U,	// JalOneReg
    0U,	// JalTwoReg
    0U,	// JrRa16
    0U,	// JrcRa16
    0U,	// JrcRx16
    0U,	// JumpLinkReg16
    0U,	// LB
    0U,	// LB64
    0U,	// LBE
    0U,	// LBE_MM
    0U,	// LBE_MMR6
    0U,	// LBU16_MM
    0U,	// LBUE_MMR6
    0U,	// LBUX
    0U,	// LBUX_MM
    0U,	// LBU_MMR6
    0U,	// LB_MM
    0U,	// LB_MMR6
    0U,	// LBu
    0U,	// LBu64
    0U,	// LBuE
    0U,	// LBuE_MM
    0U,	// LBu_MM
    0U,	// LD
    0U,	// LDC1
    0U,	// LDC164
    0U,	// LDC1_D64_MMR6
    0U,	// LDC1_MM
    0U,	// LDC2
    0U,	// LDC2_MMR6
    0U,	// LDC2_R6
    0U,	// LDC3
    0U,	// LDI_B
    0U,	// LDI_D
    0U,	// LDI_H
    0U,	// LDI_W
    0U,	// LDL
    0U,	// LDMacro
    0U,	// LDPC
    0U,	// LDPC_MM64R6
    0U,	// LDR
    0U,	// LDXC1
    0U,	// LDXC164
    0U,	// LD_B
    0U,	// LD_D
    0U,	// LD_F16
    0U,	// LD_H
    0U,	// LD_MM64R6
    0U,	// LD_W
    0U,	// LEA_ADDiu
    0U,	// LEA_ADDiu64
    0U,	// LEA_ADDiu_MM
    0U,	// LH
    0U,	// LH64
    0U,	// LHE
    0U,	// LHE_MM
    0U,	// LHU16_MM
    0U,	// LHX
    0U,	// LHX_MM
    0U,	// LH_MM
    0U,	// LHu
    0U,	// LHu64
    0U,	// LHuE
    0U,	// LHuE_MM
    0U,	// LHu_MM
    0U,	// LI16_MM
    0U,	// LI16_MMR6
    0U,	// LL
    0U,	// LL64
    0U,	// LL64_R6
    0U,	// LLD
    0U,	// LLD_MM64R6
    0U,	// LLD_R6
    0U,	// LLE
    0U,	// LLE_MM
    0U,	// LLE_MMR6
    0U,	// LL_MM
    0U,	// LL_R6
    0U,	// LOAD_ACC128
    0U,	// LOAD_ACC64
    0U,	// LOAD_ACC64DSP
    0U,	// LOAD_CCOND_DSP
    0U,	// LONG_BRANCH_ADDiu
    0U,	// LONG_BRANCH_DADDiu
    0U,	// LONG_BRANCH_LUi
    3648U,	// LSA
    0U,	// LSA_MMR6
    3648U,	// LSA_R6
    0U,	// LUI_MMR6
    0U,	// LUXC1
    0U,	// LUXC164
    0U,	// LUXC1_MM
    0U,	// LUi
    0U,	// LUi64
    0U,	// LUi_MM
    0U,	// LW
    0U,	// LW16_MM
    0U,	// LW64
    0U,	// LWC1
    0U,	// LWC1_MM
    0U,	// LWC2
    0U,	// LWC2_MMR6
    0U,	// LWC2_R6
    0U,	// LWC3
    0U,	// LWE
    0U,	// LWE_MM
    0U,	// LWE_MMR6
    0U,	// LWGP_MM
    0U,	// LWL
    0U,	// LWL64
    0U,	// LWLE
    0U,	// LWLE_MM
    0U,	// LWL_MM
    0U,	// LWM16_MM
    0U,	// LWM16_MMR6
    0U,	// LWM32_MM
    0U,	// LWM_MM
    0U,	// LWPC
    0U,	// LWPC_MMR6
    0U,	// LWP_MM
    0U,	// LWP_MMR6
    0U,	// LWR
    0U,	// LWR64
    0U,	// LWRE
    0U,	// LWRE_MM
    0U,	// LWR_MM
    0U,	// LWSP_MM
    0U,	// LWUPC
    0U,	// LWUPC_MM64R6
    0U,	// LWU_MM
    0U,	// LWU_MM64R6
    0U,	// LWX
    0U,	// LWXC1
    0U,	// LWXC1_MM
    0U,	// LWXS_MM
    0U,	// LWX_MM
    0U,	// LW_MM
    0U,	// LW_MMR6
    0U,	// LWu
    0U,	// LbRxRyOffMemX16
    0U,	// LbuRxRyOffMemX16
    0U,	// LhRxRyOffMemX16
    0U,	// LhuRxRyOffMemX16
    0U,	// LiRxImm16
    0U,	// LiRxImmAlignX16
    0U,	// LiRxImmX16
    0U,	// LoadAddrImm32
    0U,	// LoadAddrImm64
    0U,	// LoadAddrReg32
    0U,	// LoadAddrReg64
    0U,	// LoadImm32
    0U,	// LoadImm64
    0U,	// LwConstant32
    0U,	// LwRxPcTcp16
    0U,	// LwRxPcTcpX16
    0U,	// LwRxRyOffMemX16
    0U,	// LwRxSpImmX16
    0U,	// MADD
    24U,	// MADDF_D
    24U,	// MADDF_D_MMR6
    24U,	// MADDF_S
    24U,	// MADDF_S_MMR6
    24U,	// MADDR_Q_H
    24U,	// MADDR_Q_W
    0U,	// MADDU
    0U,	// MADDU_DSP
    0U,	// MADDU_DSP_MM
    0U,	// MADDU_MM
    24U,	// MADDV_B
    24U,	// MADDV_D
    24U,	// MADDV_H
    24U,	// MADDV_W
    4160U,	// MADD_D32
    4160U,	// MADD_D32_MM
    4160U,	// MADD_D64
    0U,	// MADD_DSP
    0U,	// MADD_DSP_MM
    0U,	// MADD_MM
    24U,	// MADD_Q_H
    24U,	// MADD_Q_W
    4160U,	// MADD_S
    4160U,	// MADD_S_MM
    0U,	// MAQ_SA_W_PHL
    0U,	// MAQ_SA_W_PHL_MM
    0U,	// MAQ_SA_W_PHR
    0U,	// MAQ_SA_W_PHR_MM
    0U,	// MAQ_S_W_PHL
    0U,	// MAQ_S_W_PHL_MM
    0U,	// MAQ_S_W_PHR
    0U,	// MAQ_S_W_PHR_MM
    0U,	// MAXA_D
    0U,	// MAXA_D_MMR6
    0U,	// MAXA_S
    0U,	// MAXA_S_MMR6
    0U,	// MAXI_S_B
    0U,	// MAXI_S_D
    0U,	// MAXI_S_H
    0U,	// MAXI_S_W
    2U,	// MAXI_U_B
    2U,	// MAXI_U_D
    2U,	// MAXI_U_H
    2U,	// MAXI_U_W
    0U,	// MAX_A_B
    0U,	// MAX_A_D
    0U,	// MAX_A_H
    0U,	// MAX_A_W
    0U,	// MAX_D
    0U,	// MAX_D_MMR6
    0U,	// MAX_S
    0U,	// MAX_S_B
    0U,	// MAX_S_D
    0U,	// MAX_S_H
    0U,	// MAX_S_MMR6
    0U,	// MAX_S_W
    0U,	// MAX_U_B
    0U,	// MAX_U_D
    0U,	// MAX_U_H
    0U,	// MAX_U_W
    10U,	// MFC0
    10U,	// MFC0_MMR6
    0U,	// MFC1
    0U,	// MFC1_MM
    0U,	// MFC1_MMR6
    10U,	// MFC2
    0U,	// MFC2_MMR6
    10U,	// MFHC0_MMR6
    0U,	// MFHC1_D32
    0U,	// MFHC1_D32_MMR6
    0U,	// MFHC1_D64
    0U,	// MFHC1_D64_MMR6
    0U,	// MFHC1_MM
    0U,	// MFHC2_MMR6
    0U,	// MFHI
    0U,	// MFHI16_MM
    0U,	// MFHI64
    0U,	// MFHI_DSP
    0U,	// MFHI_DSP_MM
    0U,	// MFHI_MM
    0U,	// MFLO
    0U,	// MFLO16_MM
    0U,	// MFLO64
    0U,	// MFLO_DSP
    0U,	// MFLO_DSP_MM
    0U,	// MFLO_MM
    0U,	// MINA_D
    0U,	// MINA_D_MMR6
    0U,	// MINA_S
    0U,	// MINA_S_MMR6
    0U,	// MINI_S_B
    0U,	// MINI_S_D
    0U,	// MINI_S_H
    0U,	// MINI_S_W
    2U,	// MINI_U_B
    2U,	// MINI_U_D
    2U,	// MINI_U_H
    2U,	// MINI_U_W
    0U,	// MIN_A_B
    0U,	// MIN_A_D
    0U,	// MIN_A_H
    0U,	// MIN_A_W
    0U,	// MIN_D
    0U,	// MIN_D_MMR6
    0U,	// MIN_S
    0U,	// MIN_S_B
    0U,	// MIN_S_D
    0U,	// MIN_S_H
    0U,	// MIN_S_MMR6
    0U,	// MIN_S_W
    0U,	// MIN_U_B
    0U,	// MIN_U_D
    0U,	// MIN_U_H
    0U,	// MIN_U_W
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    0U,	// MOD
    0U,	// MODSUB
    0U,	// MODSUB_MM
    0U,	// MODU
    0U,	// MODU_MMR6
    0U,	// MOD_MMR6
    0U,	// MOD_S_B
    0U,	// MOD_S_D
    0U,	// MOD_S_H
    0U,	// MOD_S_W
    0U,	// MOD_U_B
    0U,	// MOD_U_D
    0U,	// MOD_U_H
    0U,	// MOD_U_W
    0U,	// MOVE16_MM
    0U,	// MOVE16_MMR6
    0U,	// MOVEP_MM
    0U,	// MOVE_V
    0U,	// MOVF_D32
    0U,	// MOVF_D32_MM
    0U,	// MOVF_D64
    0U,	// MOVF_I
    0U,	// MOVF_I64
    0U,	// MOVF_I_MM
    0U,	// MOVF_S
    0U,	// MOVF_S_MM
    0U,	// MOVN_I64_D64
    0U,	// MOVN_I64_I
    0U,	// MOVN_I64_I64
    0U,	// MOVN_I64_S
    0U,	// MOVN_I_D32
    0U,	// MOVN_I_D32_MM
    0U,	// MOVN_I_D64
    0U,	// MOVN_I_I
    0U,	// MOVN_I_I64
    0U,	// MOVN_I_MM
    0U,	// MOVN_I_S
    0U,	// MOVN_I_S_MM
    0U,	// MOVT_D32
    0U,	// MOVT_D32_MM
    0U,	// MOVT_D64
    0U,	// MOVT_I
    0U,	// MOVT_I64
    0U,	// MOVT_I_MM
    0U,	// MOVT_S
    0U,	// MOVT_S_MM
    0U,	// MOVZ_I64_D64
    0U,	// MOVZ_I64_I
    0U,	// MOVZ_I64_I64
    0U,	// MOVZ_I64_S
    0U,	// MOVZ_I_D32
    0U,	// MOVZ_I_D32_MM
    0U,	// MOVZ_I_D64
    0U,	// MOVZ_I_I
    0U,	// MOVZ_I_I64
    0U,	// MOVZ_I_MM
    0U,	// MOVZ_I_S
    0U,	// MOVZ_I_S_MM
    0U,	// MSA_FP_EXTEND_D_PSEUDO
    0U,	// MSA_FP_EXTEND_W_PSEUDO
    0U,	// MSA_FP_ROUND_D_PSEUDO
    0U,	// MSA_FP_ROUND_W_PSEUDO
    0U,	// MSUB
    24U,	// MSUBF_D
    24U,	// MSUBF_D_MMR6
    24U,	// MSUBF_S
    24U,	// MSUBF_S_MMR6
    24U,	// MSUBR_Q_H
    24U,	// MSUBR_Q_W
    0U,	// MSUBU
    0U,	// MSUBU_DSP
    0U,	// MSUBU_DSP_MM
    0U,	// MSUBU_MM
    24U,	// MSUBV_B
    24U,	// MSUBV_D
    24U,	// MSUBV_H
    24U,	// MSUBV_W
    4160U,	// MSUB_D32
    4160U,	// MSUB_D32_MM
    4160U,	// MSUB_D64
    0U,	// MSUB_DSP
    0U,	// MSUB_DSP_MM
    0U,	// MSUB_MM
    24U,	// MSUB_Q_H
    24U,	// MSUB_Q_W
    4160U,	// MSUB_S
    4160U,	// MSUB_S_MM
    0U,	// MTC0
    0U,	// MTC0_MMR6
    0U,	// MTC1
    0U,	// MTC1_MM
    0U,	// MTC1_MMR6
    0U,	// MTC2
    0U,	// MTC2_MMR6
    0U,	// MTHC0_MMR6
    0U,	// MTHC1_D32
    0U,	// MTHC1_D32_MMR6
    0U,	// MTHC1_D64
    0U,	// MTHC1_D64_MMR6
    0U,	// MTHC1_MM
    0U,	// MTHC2_MMR6
    0U,	// MTHI
    0U,	// MTHI64
    0U,	// MTHI_DSP
    0U,	// MTHI_DSP_MM
    0U,	// MTHI_MM
    0U,	// MTHLIP
    0U,	// MTHLIP_MM
    0U,	// MTLO
    0U,	// MTLO64
    0U,	// MTLO_DSP
    0U,	// MTLO_DSP_MM
    0U,	// MTLO_MM
    0U,	// MTM0
    0U,	// MTM1
    0U,	// MTM2
    0U,	// MTP0
    0U,	// MTP1
    0U,	// MTP2
    0U,	// MUH
    0U,	// MUHU
    0U,	// MUHU_MMR6
    0U,	// MUH_MMR6
    0U,	// MUL
    0U,	// MULEQ_S_W_PHL
    0U,	// MULEQ_S_W_PHL_MM
    0U,	// MULEQ_S_W_PHR
    0U,	// MULEQ_S_W_PHR_MM
    0U,	// MULEU_S_PH_QBL
    0U,	// MULEU_S_PH_QBL_MM
    0U,	// MULEU_S_PH_QBR
    0U,	// MULEU_S_PH_QBR_MM
    0U,	// MULImmMacro
    0U,	// MULOMacro
    0U,	// MULOUMacro
    0U,	// MULQ_RS_PH
    0U,	// MULQ_RS_PH_MM
    0U,	// MULQ_RS_W
    0U,	// MULQ_RS_W_MMR2
    0U,	// MULQ_S_PH
    0U,	// MULQ_S_PH_MMR2
    0U,	// MULQ_S_W
    0U,	// MULQ_S_W_MMR2
    0U,	// MULR_Q_H
    0U,	// MULR_Q_W
    0U,	// MULSAQ_S_W_PH
    0U,	// MULSAQ_S_W_PH_MM
    0U,	// MULSA_W_PH
    0U,	// MULSA_W_PH_MMR2
    0U,	// MULT
    0U,	// MULTU_DSP
    0U,	// MULTU_DSP_MM
    0U,	// MULT_DSP
    0U,	// MULT_DSP_MM
    0U,	// MULT_MM
    0U,	// MULTu
    0U,	// MULTu_MM
    0U,	// MULU
    0U,	// MULU_MMR6
    0U,	// MULV_B
    0U,	// MULV_D
    0U,	// MULV_H
    0U,	// MULV_W
    0U,	// MUL_MM
    0U,	// MUL_MMR6
    0U,	// MUL_PH
    0U,	// MUL_PH_MMR2
    0U,	// MUL_Q_H
    0U,	// MUL_Q_W
    0U,	// MUL_R6
    0U,	// MUL_S_PH
    0U,	// MUL_S_PH_MMR2
    0U,	// Mfhi16
    0U,	// Mflo16
    0U,	// Move32R16
    0U,	// MoveR3216
    0U,	// MultRxRy16
    0U,	// MultRxRyRz16
    0U,	// MultuRxRy16
    0U,	// MultuRxRyRz16
    0U,	// NLOC_B
    0U,	// NLOC_D
    0U,	// NLOC_H
    0U,	// NLOC_W
    0U,	// NLZC_B
    0U,	// NLZC_D
    0U,	// NLZC_H
    0U,	// NLZC_W
    4160U,	// NMADD_D32
    4160U,	// NMADD_D32_MM
    4160U,	// NMADD_D64
    4160U,	// NMADD_S
    4160U,	// NMADD_S_MM
    4160U,	// NMSUB_D32
    4160U,	// NMSUB_D32_MM
    4160U,	// NMSUB_D64
    4160U,	// NMSUB_S
    4160U,	// NMSUB_S_MM
    0U,	// NOP
    0U,	// NOR
    0U,	// NOR64
    4U,	// NORI_B
    0U,	// NORImm
    0U,	// NORImm64
    0U,	// NOR_MM
    0U,	// NOR_MMR6
    0U,	// NOR_V
    0U,	// NOR_V_D_PSEUDO
    0U,	// NOR_V_H_PSEUDO
    0U,	// NOR_V_W_PSEUDO
    0U,	// NOT16_MM
    0U,	// NOT16_MMR6
    0U,	// NegRxRy16
    0U,	// NotRxRy16
    0U,	// OR
    0U,	// OR16_MM
    0U,	// OR16_MMR6
    0U,	// OR64
    4U,	// ORI_B
    6U,	// ORI_MMR6
    0U,	// OR_MM
    0U,	// OR_MMR6
    0U,	// OR_V
    0U,	// OR_V_D_PSEUDO
    0U,	// OR_V_H_PSEUDO
    0U,	// OR_V_W_PSEUDO
    6U,	// ORi
    6U,	// ORi64
    6U,	// ORi_MM
    0U,	// OrRxRxRy16
    0U,	// PACKRL_PH
    0U,	// PACKRL_PH_MM
    0U,	// PAUSE
    0U,	// PAUSE_MM
    0U,	// PAUSE_MMR6
    0U,	// PCKEV_B
    0U,	// PCKEV_D
    0U,	// PCKEV_H
    0U,	// PCKEV_W
    0U,	// PCKOD_B
    0U,	// PCKOD_D
    0U,	// PCKOD_H
    0U,	// PCKOD_W
    0U,	// PCNT_B
    0U,	// PCNT_D
    0U,	// PCNT_H
    0U,	// PCNT_W
    0U,	// PICK_PH
    0U,	// PICK_PH_MM
    0U,	// PICK_QB
    0U,	// PICK_QB_MM
    0U,	// POP
    0U,	// PRECEQU_PH_QBL
    0U,	// PRECEQU_PH_QBLA
    0U,	// PRECEQU_PH_QBLA_MM
    0U,	// PRECEQU_PH_QBL_MM
    0U,	// PRECEQU_PH_QBR
    0U,	// PRECEQU_PH_QBRA
    0U,	// PRECEQU_PH_QBRA_MM
    0U,	// PRECEQU_PH_QBR_MM
    0U,	// PRECEQ_W_PHL
    0U,	// PRECEQ_W_PHL_MM
    0U,	// PRECEQ_W_PHR
    0U,	// PRECEQ_W_PHR_MM
    0U,	// PRECEU_PH_QBL
    0U,	// PRECEU_PH_QBLA
    0U,	// PRECEU_PH_QBLA_MM
    0U,	// PRECEU_PH_QBL_MM
    0U,	// PRECEU_PH_QBR
    0U,	// PRECEU_PH_QBRA
    0U,	// PRECEU_PH_QBRA_MM
    0U,	// PRECEU_PH_QBR_MM
    0U,	// PRECRQU_S_QB_PH
    0U,	// PRECRQU_S_QB_PH_MM
    0U,	// PRECRQ_PH_W
    0U,	// PRECRQ_PH_W_MM
    0U,	// PRECRQ_QB_PH
    0U,	// PRECRQ_QB_PH_MM
    0U,	// PRECRQ_RS_PH_W
    0U,	// PRECRQ_RS_PH_W_MM
    0U,	// PRECR_QB_PH
    0U,	// PRECR_QB_PH_MMR2
    2U,	// PRECR_SRA_PH_W
    2U,	// PRECR_SRA_PH_W_MMR2
    2U,	// PRECR_SRA_R_PH_W
    2U,	// PRECR_SRA_R_PH_W_MMR2
    0U,	// PREF
    0U,	// PREFE
    0U,	// PREFE_MM
    0U,	// PREFE_MMR6
    0U,	// PREFX_MM
    0U,	// PREF_MM
    0U,	// PREF_MMR6
    0U,	// PREF_R6
    2U,	// PREPEND
    2U,	// PREPEND_MMR2
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    0U,	// PseudoCVT_D32_W
    0U,	// PseudoCVT_D64_L
    0U,	// PseudoCVT_D64_W
    0U,	// PseudoCVT_S_L
    0U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    0U,	// PseudoIndirectBranch
    0U,	// PseudoIndirectBranch64
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMFHI
    0U,	// PseudoMFHI64
    0U,	// PseudoMFLO
    0U,	// PseudoMFLO64
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMTLOHI
    0U,	// PseudoMTLOHI64
    0U,	// PseudoMTLOHI_DSP
    0U,	// PseudoMULT
    0U,	// PseudoMULTu
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    0U,	// PseudoReturn
    0U,	// PseudoReturn64
    0U,	// PseudoSDIV
    0U,	// PseudoSELECTFP_F_D32
    0U,	// PseudoSELECTFP_F_D64
    0U,	// PseudoSELECTFP_F_I
    0U,	// PseudoSELECTFP_F_I64
    0U,	// PseudoSELECTFP_F_S
    0U,	// PseudoSELECTFP_T_D32
    0U,	// PseudoSELECTFP_T_D64
    0U,	// PseudoSELECTFP_T_I
    0U,	// PseudoSELECTFP_T_I64
    0U,	// PseudoSELECTFP_T_S
    0U,	// PseudoSELECT_D32
    0U,	// PseudoSELECT_D64
    0U,	// PseudoSELECT_I
    0U,	// PseudoSELECT_I64
    0U,	// PseudoSELECT_S
    0U,	// PseudoTRUNC_W_D
    0U,	// PseudoTRUNC_W_D32
    0U,	// PseudoTRUNC_W_S
    0U,	// PseudoUDIV
    0U,	// RADDU_W_QB
    0U,	// RADDU_W_QB_MM
    0U,	// RDDSP
    0U,	// RDDSP_MM
    0U,	// RDHWR
    0U,	// RDHWR64
    0U,	// RDHWR_MM
    10U,	// RDHWR_MMR6
    0U,	// RDPGPR_MMR6
    0U,	// RECIP_D
    0U,	// RECIP_D_MM
    0U,	// RECIP_S
    0U,	// RECIP_S_MM
    0U,	// REPLV_PH
    0U,	// REPLV_PH_MM
    0U,	// REPLV_QB
    0U,	// REPLV_QB_MM
    0U,	// REPL_PH
    0U,	// REPL_PH_MM
    0U,	// REPL_QB
    0U,	// REPL_QB_MM
    0U,	// RINT_D
    0U,	// RINT_D_MMR6
    0U,	// RINT_S
    0U,	// RINT_S_MMR6
    0U,	// ROL
    0U,	// ROLImm
    0U,	// ROR
    0U,	// RORImm
    2U,	// ROTR
    0U,	// ROTRV
    0U,	// ROTRV_MM
    2U,	// ROTR_MM
    0U,	// ROUND_L_D64
    0U,	// ROUND_L_D_MMR6
    0U,	// ROUND_L_S
    0U,	// ROUND_L_S_MMR6
    0U,	// ROUND_W_D32
    0U,	// ROUND_W_D64
    0U,	// ROUND_W_D_MMR6
    0U,	// ROUND_W_MM
    0U,	// ROUND_W_S
    0U,	// ROUND_W_S_MM
    0U,	// ROUND_W_S_MMR6
    0U,	// RSQRT_D
    0U,	// RSQRT_D_MM
    0U,	// RSQRT_S
    0U,	// RSQRT_S_MM
    0U,	// Restore16
    0U,	// RestoreX16
    0U,	// RetRA
    0U,	// RetRA16
    10U,	// SAT_S_B
    12U,	// SAT_S_D
    14U,	// SAT_S_H
    2U,	// SAT_S_W
    10U,	// SAT_U_B
    12U,	// SAT_U_D
    14U,	// SAT_U_H
    2U,	// SAT_U_W
    0U,	// SB
    0U,	// SB16_MM
    0U,	// SB16_MMR6
    0U,	// SB64
    0U,	// SBE
    0U,	// SBE_MM
    0U,	// SBE_MMR6
    0U,	// SB_MM
    0U,	// SB_MMR6
    0U,	// SC
    0U,	// SC64
    0U,	// SC64_R6
    0U,	// SCD
    0U,	// SCD_R6
    0U,	// SCE
    0U,	// SCE_MM
    0U,	// SCE_MMR6
    0U,	// SC_MM
    0U,	// SC_R6
    0U,	// SD
    0U,	// SDBBP
    0U,	// SDBBP16_MM
    0U,	// SDBBP16_MMR6
    0U,	// SDBBP_MM
    0U,	// SDBBP_MMR6
    0U,	// SDBBP_R6
    0U,	// SDC1
    0U,	// SDC164
    0U,	// SDC1_D64_MMR6
    0U,	// SDC1_MM
    0U,	// SDC2
    0U,	// SDC2_MMR6
    0U,	// SDC2_R6
    0U,	// SDC3
    0U,	// SDIV
    0U,	// SDIV_MM
    0U,	// SDIV_MM_Pseudo
    0U,	// SDL
    0U,	// SDMacro
    0U,	// SDR
    0U,	// SDXC1
    0U,	// SDXC164
    0U,	// SD_MM64R6
    0U,	// SDivIMacro
    0U,	// SDivMacro
    0U,	// SEB
    0U,	// SEB64
    0U,	// SEB_MM
    0U,	// SEB_MMR6
    0U,	// SEH
    0U,	// SEH64
    0U,	// SEH_MM
    0U,	// SEH_MMR6
    0U,	// SELEQZ
    0U,	// SELEQZ64
    0U,	// SELEQZ_D
    0U,	// SELEQZ_D_MMR6
    0U,	// SELEQZ_MMR6
    0U,	// SELEQZ_S
    0U,	// SELEQZ_S_MMR6
    0U,	// SELNEZ
    0U,	// SELNEZ64
    0U,	// SELNEZ_D
    0U,	// SELNEZ_D_MMR6
    0U,	// SELNEZ_MMR6
    0U,	// SELNEZ_S
    0U,	// SELNEZ_S_MMR6
    24U,	// SEL_D
    24U,	// SEL_D_MMR6
    24U,	// SEL_S
    24U,	// SEL_S_MMR6
    0U,	// SEQ
    0U,	// SEQIMacro
    0U,	// SEQMacro
    0U,	// SEQi
    0U,	// SH
    0U,	// SH16_MM
    0U,	// SH16_MMR6
    0U,	// SH64
    0U,	// SHE
    0U,	// SHE_MM
    0U,	// SHE_MMR6
    4U,	// SHF_B
    4U,	// SHF_H
    4U,	// SHF_W
    0U,	// SHILO
    0U,	// SHILOV
    0U,	// SHILOV_MM
    0U,	// SHILO_MM
    0U,	// SHLLV_PH
    0U,	// SHLLV_PH_MM
    0U,	// SHLLV_QB
    0U,	// SHLLV_QB_MM
    0U,	// SHLLV_S_PH
    0U,	// SHLLV_S_PH_MM
    0U,	// SHLLV_S_W
    0U,	// SHLLV_S_W_MM
    14U,	// SHLL_PH
    14U,	// SHLL_PH_MM
    10U,	// SHLL_QB
    10U,	// SHLL_QB_MM
    14U,	// SHLL_S_PH
    14U,	// SHLL_S_PH_MM
    2U,	// SHLL_S_W
    2U,	// SHLL_S_W_MM
    0U,	// SHRAV_PH
    0U,	// SHRAV_PH_MM
    0U,	// SHRAV_QB
    0U,	// SHRAV_QB_MMR2
    0U,	// SHRAV_R_PH
    0U,	// SHRAV_R_PH_MM
    0U,	// SHRAV_R_QB
    0U,	// SHRAV_R_QB_MMR2
    0U,	// SHRAV_R_W
    0U,	// SHRAV_R_W_MM
    14U,	// SHRA_PH
    14U,	// SHRA_PH_MM
    10U,	// SHRA_QB
    10U,	// SHRA_QB_MMR2
    14U,	// SHRA_R_PH
    14U,	// SHRA_R_PH_MM
    10U,	// SHRA_R_QB
    10U,	// SHRA_R_QB_MMR2
    2U,	// SHRA_R_W
    2U,	// SHRA_R_W_MM
    0U,	// SHRLV_PH
    0U,	// SHRLV_PH_MMR2
    0U,	// SHRLV_QB
    0U,	// SHRLV_QB_MM
    14U,	// SHRL_PH
    14U,	// SHRL_PH_MMR2
    10U,	// SHRL_QB
    10U,	// SHRL_QB_MM
    0U,	// SH_MM
    0U,	// SH_MMR6
    148U,	// SLDI_B
    34U,	// SLDI_D
    144U,	// SLDI_H
    36U,	// SLDI_W
    152U,	// SLD_B
    152U,	// SLD_D
    152U,	// SLD_H
    152U,	// SLD_W
    2U,	// SLL
    0U,	// SLL16_MM
    0U,	// SLL16_MMR6
    0U,	// SLL64_32
    0U,	// SLL64_64
    10U,	// SLLI_B
    12U,	// SLLI_D
    14U,	// SLLI_H
    2U,	// SLLI_W
    0U,	// SLLV
    0U,	// SLLV_MM
    0U,	// SLL_B
    0U,	// SLL_D
    0U,	// SLL_H
    2U,	// SLL_MM
    2U,	// SLL_MMR6
    0U,	// SLL_W
    0U,	// SLT
    0U,	// SLT64
    0U,	// SLTImm64
    0U,	// SLTUImm64
    0U,	// SLT_MM
    0U,	// SLTi
    0U,	// SLTi64
    0U,	// SLTi_MM
    0U,	// SLTiu
    0U,	// SLTiu64
    0U,	// SLTiu_MM
    0U,	// SLTu
    0U,	// SLTu64
    0U,	// SLTu_MM
    0U,	// SNE
    0U,	// SNEi
    0U,	// SNZ_B_PSEUDO
    0U,	// SNZ_D_PSEUDO
    0U,	// SNZ_H_PSEUDO
    0U,	// SNZ_V_PSEUDO
    0U,	// SNZ_W_PSEUDO
    142U,	// SPLATI_B
    28U,	// SPLATI_D
    138U,	// SPLATI_H
    136U,	// SPLATI_W
    128U,	// SPLAT_B
    128U,	// SPLAT_D
    128U,	// SPLAT_H
    128U,	// SPLAT_W
    0U,	// SQRT_D_MMR6
    0U,	// SQRT_S_MMR6
    2U,	// SRA
    10U,	// SRAI_B
    12U,	// SRAI_D
    14U,	// SRAI_H
    2U,	// SRAI_W
    10U,	// SRARI_B
    12U,	// SRARI_D
    14U,	// SRARI_H
    2U,	// SRARI_W
    0U,	// SRAR_B
    0U,	// SRAR_D
    0U,	// SRAR_H
    0U,	// SRAR_W
    0U,	// SRAV
    0U,	// SRAV_MM
    0U,	// SRA_B
    0U,	// SRA_D
    0U,	// SRA_H
    2U,	// SRA_MM
    0U,	// SRA_W
    2U,	// SRL
    0U,	// SRL16_MM
    0U,	// SRL16_MMR6
    10U,	// SRLI_B
    12U,	// SRLI_D
    14U,	// SRLI_H
    2U,	// SRLI_W
    10U,	// SRLRI_B
    12U,	// SRLRI_D
    14U,	// SRLRI_H
    2U,	// SRLRI_W
    0U,	// SRLR_B
    0U,	// SRLR_D
    0U,	// SRLR_H
    0U,	// SRLR_W
    0U,	// SRLV
    0U,	// SRLV_MM
    0U,	// SRL_B
    0U,	// SRL_D
    0U,	// SRL_H
    2U,	// SRL_MM
    0U,	// SRL_W
    0U,	// SSNOP
    0U,	// SSNOP_MM
    0U,	// SSNOP_MMR6
    0U,	// STORE_ACC128
    0U,	// STORE_ACC64
    0U,	// STORE_ACC64DSP
    0U,	// STORE_CCOND_DSP
    0U,	// ST_B
    0U,	// ST_D
    0U,	// ST_F16
    0U,	// ST_H
    0U,	// ST_W
    0U,	// SUB
    0U,	// SUBQH_PH
    0U,	// SUBQH_PH_MMR2
    0U,	// SUBQH_R_PH
    0U,	// SUBQH_R_PH_MMR2
    0U,	// SUBQH_R_W
    0U,	// SUBQH_R_W_MMR2
    0U,	// SUBQH_W
    0U,	// SUBQH_W_MMR2
    0U,	// SUBQ_PH
    0U,	// SUBQ_PH_MM
    0U,	// SUBQ_S_PH
    0U,	// SUBQ_S_PH_MM
    0U,	// SUBQ_S_W
    0U,	// SUBQ_S_W_MM
    0U,	// SUBSUS_U_B
    0U,	// SUBSUS_U_D
    0U,	// SUBSUS_U_H
    0U,	// SUBSUS_U_W
    0U,	// SUBSUU_S_B
    0U,	// SUBSUU_S_D
    0U,	// SUBSUU_S_H
    0U,	// SUBSUU_S_W
    0U,	// SUBS_S_B
    0U,	// SUBS_S_D
    0U,	// SUBS_S_H
    0U,	// SUBS_S_W
    0U,	// SUBS_U_B
    0U,	// SUBS_U_D
    0U,	// SUBS_U_H
    0U,	// SUBS_U_W
    0U,	// SUBU16_MM
    0U,	// SUBU16_MMR6
    0U,	// SUBUH_QB
    0U,	// SUBUH_QB_MMR2
    0U,	// SUBUH_R_QB
    0U,	// SUBUH_R_QB_MMR2
    0U,	// SUBU_MMR6
    0U,	// SUBU_PH
    0U,	// SUBU_PH_MMR2
    0U,	// SUBU_QB
    0U,	// SUBU_QB_MM
    0U,	// SUBU_S_PH
    0U,	// SUBU_S_PH_MMR2
    0U,	// SUBU_S_QB
    0U,	// SUBU_S_QB_MM
    2U,	// SUBVI_B
    2U,	// SUBVI_D
    2U,	// SUBVI_H
    2U,	// SUBVI_W
    0U,	// SUBV_B
    0U,	// SUBV_D
    0U,	// SUBV_H
    0U,	// SUBV_W
    0U,	// SUB_MM
    0U,	// SUB_MMR6
    0U,	// SUBu
    0U,	// SUBu_MM
    0U,	// SUXC1
    0U,	// SUXC164
    0U,	// SUXC1_MM
    0U,	// SW
    0U,	// SW16_MM
    0U,	// SW16_MMR6
    0U,	// SW64
    0U,	// SWC1
    0U,	// SWC1_MM
    0U,	// SWC2
    0U,	// SWC2_MMR6
    0U,	// SWC2_R6
    0U,	// SWC3
    0U,	// SWE
    0U,	// SWE_MM
    0U,	// SWE_MMR6
    0U,	// SWL
    0U,	// SWL64
    0U,	// SWLE
    0U,	// SWLE_MM
    0U,	// SWL_MM
    0U,	// SWM16_MM
    0U,	// SWM16_MMR6
    0U,	// SWM32_MM
    0U,	// SWM_MM
    0U,	// SWP_MM
    0U,	// SWP_MMR6
    0U,	// SWR
    0U,	// SWR64
    0U,	// SWRE
    0U,	// SWRE_MM
    0U,	// SWR_MM
    0U,	// SWSP_MM
    0U,	// SWSP_MMR6
    0U,	// SWXC1
    0U,	// SWXC1_MM
    0U,	// SW_MM
    0U,	// SW_MMR6
    0U,	// SYNC
    0U,	// SYNCI
    0U,	// SYNCI_MM
    0U,	// SYNCI_MMR6
    0U,	// SYNC_MM
    0U,	// SYNC_MMR6
    0U,	// SYSCALL
    0U,	// SYSCALL_MM
    0U,	// SZ_B_PSEUDO
    0U,	// SZ_D_PSEUDO
    0U,	// SZ_H_PSEUDO
    0U,	// SZ_V_PSEUDO
    0U,	// SZ_W_PSEUDO
    0U,	// Save16
    0U,	// SaveX16
    0U,	// SbRxRyOffMemX16
    0U,	// SebRx16
    0U,	// SehRx16
    0U,	// SelBeqZ
    0U,	// SelBneZ
    1U,	// SelTBteqZCmp
    1U,	// SelTBteqZCmpi
    1U,	// SelTBteqZSlt
    1U,	// SelTBteqZSlti
    1U,	// SelTBteqZSltiu
    1U,	// SelTBteqZSltu
    1U,	// SelTBtneZCmp
    1U,	// SelTBtneZCmpi
    1U,	// SelTBtneZSlt
    1U,	// SelTBtneZSlti
    1U,	// SelTBtneZSltiu
    1U,	// SelTBtneZSltu
    0U,	// ShRxRyOffMemX16
    2U,	// SllX16
    0U,	// SllvRxRy16
    0U,	// SltCCRxRy16
    0U,	// SltRxRy16
    0U,	// SltiCCRxImmX16
    0U,	// SltiRxImm16
    0U,	// SltiRxImmX16
    0U,	// SltiuCCRxImmX16
    0U,	// SltiuRxImm16
    0U,	// SltiuRxImmX16
    0U,	// SltuCCRxRy16
    0U,	// SltuRxRy16
    0U,	// SltuRxRyRz16
    2U,	// SraX16
    0U,	// SravRxRy16
    2U,	// SrlX16
    0U,	// SrlvRxRy16
    0U,	// SubuRxRyRz16
    0U,	// SwRxRyOffMemX16
    0U,	// SwRxSpImmX16
    0U,	// TAILCALL
    0U,	// TAILCALLREG
    0U,	// TAILCALLREG64
    0U,	// TAILCALL_MM
    0U,	// TAILCALL_MMR6
    38U,	// TEQ
    0U,	// TEQI
    0U,	// TEQI_MM
    14U,	// TEQ_MM
    38U,	// TGE
    0U,	// TGEI
    0U,	// TGEIU
    0U,	// TGEIU_MM
    0U,	// TGEI_MM
    38U,	// TGEU
    14U,	// TGEU_MM
    14U,	// TGE_MM
    0U,	// TLBINV
    0U,	// TLBINVF
    0U,	// TLBINVF_MMR6
    0U,	// TLBINV_MMR6
    0U,	// TLBP
    0U,	// TLBP_MM
    0U,	// TLBR
    0U,	// TLBR_MM
    0U,	// TLBWI
    0U,	// TLBWI_MM
    0U,	// TLBWR
    0U,	// TLBWR_MM
    38U,	// TLT
    0U,	// TLTI
    0U,	// TLTIU_MM
    0U,	// TLTI_MM
    38U,	// TLTU
    14U,	// TLTU_MM
    14U,	// TLT_MM
    38U,	// TNE
    0U,	// TNEI
    0U,	// TNEI_MM
    14U,	// TNE_MM
    0U,	// TRAP
    0U,	// TRUNC_L_D64
    0U,	// TRUNC_L_D_MMR6
    0U,	// TRUNC_L_S
    0U,	// TRUNC_L_S_MMR6
    0U,	// TRUNC_W_D32
    0U,	// TRUNC_W_D64
    0U,	// TRUNC_W_D_MMR6
    0U,	// TRUNC_W_MM
    0U,	// TRUNC_W_S
    0U,	// TRUNC_W_S_MM
    0U,	// TRUNC_W_S_MMR6
    0U,	// TTLTIU
    0U,	// UDIV
    0U,	// UDIV_MM
    0U,	// UDIV_MM_Pseudo
    0U,	// UDivIMacro
    0U,	// UDivMacro
    0U,	// Ulh
    0U,	// Ulhu
    0U,	// Ulw
    0U,	// Ush
    0U,	// Usw
    0U,	// V3MULU
    0U,	// VMM0
    0U,	// VMULU
    24U,	// VSHF_B
    24U,	// VSHF_D
    24U,	// VSHF_H
    24U,	// VSHF_W
    0U,	// WAIT
    0U,	// WAIT_MM
    0U,	// WAIT_MMR6
    0U,	// WRDSP
    0U,	// WRDSP_MM
    0U,	// WRPGPR_MMR6
    0U,	// WSBH
    0U,	// WSBH_MM
    0U,	// WSBH_MMR6
    0U,	// XOR
    0U,	// XOR16_MM
    0U,	// XOR16_MMR6
    0U,	// XOR64
    4U,	// XORI_B
    6U,	// XORI_MMR6
    0U,	// XOR_MM
    0U,	// XOR_MMR6
    0U,	// XOR_V
    0U,	// XOR_V_D_PSEUDO
    0U,	// XOR_V_H_PSEUDO
    0U,	// XOR_V_W_PSEUDO
    6U,	// XORi
    6U,	// XORi64
    6U,	// XORi_MM
    0U,	// XorRxRxRy16
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MI->getOpcode()] << 0;
  Bits |= (uint64_t)OpInfo1[MI->getOpcode()] << 32;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 14) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, FENTRY_CALL, PATCHABL...
    return;
    break;
  case 1:
    // ABSMacro, ABSQ_S_PH, ABSQ_S_PH_MM, ABSQ_S_QB, ABSQ_S_QB_MMR2, ABSQ_S_W...
    printOperand(MI, 0, O);
    break;
  case 2:
    // ADDIUS5_MM, CTC1, CTC1_MM, CTC2_MM, DAHI_MM64R6, DATI_MM64R6, DLSA_MM6...
    printOperand(MI, 1, O);
    O << ", ";
    break;
  case 3:
    // AND16_MM, AND16_MMR6, LSA_MMR6, MTHC1_D32, MTHC1_D32_MMR6, MTHC1_D64, ...
    printOperand(MI, 2, O);
    O << ", ";
    break;
  case 4:
    // BREAK, BREAK_MM, BREAK_MMR6, SDBBP_MM, SYSCALL_MM, WAIT_MM, WAIT_MMR6
    printUImm<10>(MI, 0, O);
    break;
  case 5:
    // BREAK16_MM, BREAK16_MMR6, SDBBP16_MM, SDBBP16_MMR6
    printUImm<4>(MI, 0, O);
    return;
    break;
  case 6:
    // CACHE, CACHEE, CACHEE_MM, CACHEE_MMR6, CACHE_MM, CACHE_MMR6, CACHE_R6,...
    printUImm<5>(MI, 2, O);
    O << ", ";
    break;
  case 7:
    // FCMP_D32, FCMP_D32_MM, FCMP_D64, FCMP_S32, FCMP_S32_MM
    printFCCOperand(MI, 2, O);
    break;
  case 8:
    // Jal16, JalB16
    printUImm<26>(MI, 0, O);
    break;
  case 9:
    // LWM16_MM, LWM16_MMR6, LWM32_MM, LWM_MM, MOVEP_MM, SWM16_MM, SWM16_MMR6...
    printRegisterList(MI, 0, O);
    O << ", ";
    break;
  case 10:
    // LWP_MM, LWP_MMR6, SWP_MM, SWP_MMR6
    printRegisterPair(MI, 0, O);
    O << ", ";
    printMemOperand(MI, 2, O);
    return;
    break;
  case 11:
    // SDBBP, SDBBP_MMR6, SDBBP_R6, SYSCALL
    printUImm<20>(MI, 0, O);
    return;
    break;
  case 12:
    // SYNC, SYNC_MM, SYNC_MMR6
    printUImm<5>(MI, 0, O);
    return;
    break;
  case 13:
    // SYNCI, SYNCI_MM, SYNCI_MMR6
    printMemOperand(MI, 0, O);
    return;
    break;
  case 14:
    // SelBeqZ, SelBneZ, SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZ...
    printOperand(MI, 3, O);
    break;
  }


  // Fragment 1 encoded into 5 bits for 18 unique commands.
  switch ((Bits >> 18) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSMacro, ABSQ_S_PH, ABSQ_S_PH_MM, ABSQ_S_QB, ABSQ_S_QB_MMR2, ABSQ_S_W...
    O << ", ";
    break;
  case 1:
    // ADDIUS5_MM, DLSA_MM64R6, MOVEP_MM, MultRxRyRz16, MultuRxRyRz16, SltCCR...
    printOperand(MI, 2, O);
    break;
  case 2:
    // ADDIUSP_MM, AddiuSpImmX16, B16_MM, BAL, BALC, BALC_MMR6, BC, BC16_MMR6...
    return;
    break;
  case 3:
    // AND16_MM, AND16_MMR6, LSA_MMR6, OR16_MM, OR16_MMR6, PREFX_MM, XOR16_MM...
    printOperand(MI, 1, O);
    break;
  case 4:
    // AddiuRxPcImmX16
    O << ", $pc, ";
    printOperand(MI, 1, O);
    return;
    break;
  case 5:
    // AddiuSpImm16, Bimm16
    O << " # 16 bit inst";
    return;
    break;
  case 6:
    // Bteqz16, Btnez16
    O << "  # 16 bit inst";
    return;
    break;
  case 7:
    // CACHE, CACHEE, CACHEE_MM, CACHEE_MMR6, CACHE_MM, CACHE_MMR6, CACHE_R6,...
    printMemOperand(MI, 0, O);
    return;
    break;
  case 8:
    // CTC1, CTC1_MM, CTC2_MM, DAHI_MM64R6, DATI_MM64R6, DMTC0, DMTC0_MM64R6,...
    printOperand(MI, 0, O);
    break;
  case 9:
    // FCMP_D32, FCMP_D32_MM, FCMP_D64
    O << ".d\t";
    printOperand(MI, 0, O);
    O << ", ";
    printOperand(MI, 1, O);
    return;
    break;
  case 10:
    // FCMP_S32, FCMP_S32_MM
    O << ".s\t";
    printOperand(MI, 0, O);
    O << ", ";
    printOperand(MI, 1, O);
    return;
    break;
  case 11:
    // INSERT_B, INSERT_D, INSERT_H, INSERT_W, INSVE_B, INSVE_D, INSVE_H, INS...
    O << '[';
    break;
  case 12:
    // Jal16
    O << "\n\tnop";
    return;
    break;
  case 13:
    // JalB16
    O << "\t# branch\n\tnop";
    return;
    break;
  case 14:
    // LWM16_MM, LWM16_MMR6, LWM32_MM, LWM_MM, SWM16_MM, SWM16_MMR6, SWM32_MM...
    printMemOperand(MI, 1, O);
    return;
    break;
  case 15:
    // LwConstant32
    O << ", 1f\n\tb\t2f\n\t.align\t2\n1: \t.word\t";
    printOperand(MI, 1, O);
    O << "\n2:";
    return;
    break;
  case 16:
    // SC, SC64, SC64_R6, SCD, SCD_R6, SCE, SCE_MM, SC_MM, SC_R6
    printMemOperand(MI, 2, O);
    return;
    break;
  case 17:
    // SelBeqZ, SelBneZ
    O << ", .+4\n\t\n\tmove ";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 23 unique commands.
  switch ((Bits >> 23) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSMacro, ABSQ_S_PH, ABSQ_S_PH_MM, ABSQ_S_QB, ABSQ_S_QB_MMR2, ABSQ_S_W...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ADDIUS5_MM, AND16_MM, AND16_MMR6, CTC1, CTC1_MM, CTC2_MM, DMTC1, DMTC1...
    return;
    break;
  case 2:
    // AddiuRxRxImm16, AddiuRxRxImmX16, AndRxRxRy16, BINSLI_B, BINSLI_D, BINS...
    printOperand(MI, 2, O);
    break;
  case 3:
    // AddiuRxRyOffMemX16, LEA_ADDiu, LEA_ADDiu64, LEA_ADDiu_MM
    printMemOperandEA(MI, 1, O);
    return;
    break;
  case 4:
    // BBIT0, BBIT032, BBIT1, BBIT132
    printUImm<5>(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 5:
    // BREAK, BREAK_MM, BREAK_MMR6, RDDSP, REPL_PH, REPL_PH_MM, WRDSP
    printUImm<10>(MI, 1, O);
    return;
    break;
  case 6:
    // DAHI_MM64R6, DATI_MM64R6, DLSA_MM64R6, DMTC0, DMTC0_MM64R6, DMTC2, LSA...
    O << ", ";
    break;
  case 7:
    // DMFC2_OCTEON, DMTC2_OCTEON, LUI_MMR6, LUi, LUi64, LUi_MM
    printUImm<16>(MI, 1, O);
    return;
    break;
  case 8:
    // INSERT_B
    printUImm<4>(MI, 3, O);
    O << "], ";
    printOperand(MI, 2, O);
    return;
    break;
  case 9:
    // INSERT_D
    printUImm<1>(MI, 3, O);
    O << "], ";
    printOperand(MI, 2, O);
    return;
    break;
  case 10:
    // INSERT_H
    printUImm<3>(MI, 3, O);
    O << "], ";
    printOperand(MI, 2, O);
    return;
    break;
  case 11:
    // INSERT_W
    printUImm<2>(MI, 3, O);
    O << "], ";
    printOperand(MI, 2, O);
    return;
    break;
  case 12:
    // INSVE_B
    printUImm<4>(MI, 2, O);
    O << "], ";
    printOperand(MI, 3, O);
    O << '[';
    printUImm<0>(MI, 4, O);
    O << ']';
    return;
    break;
  case 13:
    // INSVE_D
    printUImm<1>(MI, 2, O);
    O << "], ";
    printOperand(MI, 3, O);
    O << '[';
    printUImm<0>(MI, 4, O);
    O << ']';
    return;
    break;
  case 14:
    // INSVE_H
    printUImm<3>(MI, 2, O);
    O << "], ";
    printOperand(MI, 3, O);
    O << '[';
    printUImm<0>(MI, 4, O);
    O << ']';
    return;
    break;
  case 15:
    // INSVE_W
    printUImm<2>(MI, 2, O);
    O << "], ";
    printOperand(MI, 3, O);
    O << '[';
    printUImm<0>(MI, 4, O);
    O << ']';
    return;
    break;
  case 16:
    // LB, LB64, LBE, LBE_MM, LBE_MMR6, LBU16_MM, LBUE_MMR6, LBU_MMR6, LB_MM,...
    printMemOperand(MI, 1, O);
    return;
    break;
  case 17:
    // MultRxRyRz16, MultuRxRyRz16
    O << "\n\tmflo\t";
    printOperand(MI, 0, O);
    return;
    break;
  case 18:
    // PREFX_MM
    O << '(';
    printOperand(MI, 0, O);
    O << ')';
    return;
    break;
  case 19:
    // RDDSP_MM, WRDSP_MM
    printUImm<7>(MI, 1, O);
    return;
    break;
  case 20:
    // REPL_QB, REPL_QB_MM
    printUImm<8>(MI, 1, O);
    return;
    break;
  case 21:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    printOperand(MI, 4, O);
    break;
  case 22:
    // SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImmX16, SltuCCRxRy16, SltuRxRyRz...
    O << "\n\tmove\t";
    printOperand(MI, 0, O);
    O << ", $t8";
    return;
    break;
  }


  // Fragment 3 encoded into 5 bits for 18 unique commands.
  switch ((Bits >> 28) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSMacro, ABSQ_S_PH, ABSQ_S_PH_MM, ABSQ_S_QB, ABSQ_S_QB_MMR2, ABSQ_S_W...
    return;
    break;
  case 1:
    // ADD, ADDIUR2_MM, ADDIU_MMR6, ADDQH_PH, ADDQH_PH_MMR2, ADDQH_R_PH, ADDQ...
    O << ", ";
    break;
  case 2:
    // AddiuRxRxImm16, LwRxPcTcp16
    O << "\t# 16 bit inst";
    return;
    break;
  case 3:
    // BeqzRxImm16, BnezRxImm16
    O << "  # 16 bit inst";
    return;
    break;
  case 4:
    // BteqzT8CmpX16, BteqzT8CmpiX16, BteqzT8SltX16, BteqzT8SltiX16, BteqzT8S...
    O << "\n\tbteqz\t";
    printOperand(MI, 2, O);
    return;
    break;
  case 5:
    // BtnezT8CmpX16, BtnezT8CmpiX16, BtnezT8SltX16, BtnezT8SltiX16, BtnezT8S...
    O << "\n\tbtnez\t";
    printOperand(MI, 2, O);
    return;
    break;
  case 6:
    // COPY_S_B, COPY_S_D, COPY_S_H, COPY_S_W, COPY_U_B, COPY_U_H, COPY_U_W, ...
    O << '[';
    break;
  case 7:
    // CmpiRxImm16, LiRxImm16, SltiRxImm16, SltiuRxImm16
    O << " \t# 16 bit inst";
    return;
    break;
  case 8:
    // DAHI_MM64R6, DATI_MM64R6
    printUImm<16>(MI, 2, O);
    return;
    break;
  case 9:
    // DLSA_MM64R6, LSA_MMR6
    printOperand(MI, 0, O);
    O << ", ";
    printUImm<2, 1>(MI, 3, O);
    return;
    break;
  case 10:
    // DMTC0, DMTC0_MM64R6, DMTC2, MTC0, MTC0_MMR6, MTC2, MTHC0_MMR6
    printUImm<3>(MI, 2, O);
    return;
    break;
  case 11:
    // DSLL64_32
    O << ", 32";
    return;
    break;
  case 12:
    // GotPrologue16
    O << "\n\taddiu\t";
    printOperand(MI, 1, O);
    O << ", $pc, ";
    printOperand(MI, 3, O);
    O << "\n ";
    return;
    break;
  case 13:
    // LBUX, LBUX_MM, LDXC1, LDXC164, LHX, LHX_MM, LUXC1, LUXC164, LUXC1_MM, ...
    O << '(';
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 14:
    // MOVEP_MM
    printOperand(MI, 3, O);
    return;
    break;
  case 15:
    // SLL64_32, SLL64_64
    O << ", 0";
    return;
    break;
  case 16:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    O << "\n\tbteqz\t.+4\n\tmove ";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 17:
    // SelTBtneZCmp, SelTBtneZCmpi, SelTBtneZSlt, SelTBtneZSlti, SelTBtneZSlt...
    O << "\n\tbtnez\t.+4\n\tmove ";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 4 encoded into 5 bits for 20 unique commands.
  switch ((Bits >> 33) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD, ADDIUR2_MM, ADDIU_MMR6, ADDQH_PH, ADDQH_PH_MMR2, ADDQH_R_PH, ADDQ...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ADDVI_B, ADDVI_D, ADDVI_H, ADDVI_W, APPEND, APPEND_MMR2, BCLRI_W, BNEG...
    printUImm<5>(MI, 2, O);
    break;
  case 2:
    // ANDI_B, NORI_B, ORI_B, SHF_B, SHF_H, SHF_W, XORI_B
    printUImm<8>(MI, 2, O);
    return;
    break;
  case 3:
    // ANDI_MMR6, ANDi, ANDi64, ANDi_MM, AUI, AUI_MMR6, DAHI, DATI, DAUI, DAU...
    printUImm<16>(MI, 2, O);
    return;
    break;
  case 4:
    // BALIGN, BALIGN_MMR2, COPY_S_W, COPY_U_W, SPLATI_W
    printUImm<2>(MI, 2, O);
    break;
  case 5:
    // BCLRI_B, BNEGI_B, BSETI_B, COPY_S_H, COPY_U_H, DMFC0, DMFC0_MM64R6, DM...
    printUImm<3>(MI, 2, O);
    break;
  case 6:
    // BCLRI_D, BNEGI_D, BSETI_D, DINS, DROTR, DROTR_MM64R6, DSLL, DSLL_MM64R...
    printUImm<6>(MI, 2, O);
    break;
  case 7:
    // BCLRI_H, BNEGI_H, BSETI_H, COPY_S_B, COPY_U_B, SAT_S_H, SAT_U_H, SHLL_...
    printUImm<4>(MI, 2, O);
    break;
  case 8:
    // BINSLI_B, BINSRI_B, SLDI_H
    printUImm<3>(MI, 3, O);
    break;
  case 9:
    // BINSLI_D, BINSRI_D
    printUImm<6>(MI, 3, O);
    return;
    break;
  case 10:
    // BINSLI_H, BINSRI_H, SLDI_B
    printUImm<4>(MI, 3, O);
    break;
  case 11:
    // BINSLI_W, BINSRI_W
    printUImm<5>(MI, 3, O);
    return;
    break;
  case 12:
    // BINSL_B, BINSL_D, BINSL_H, BINSL_W, BINSR_B, BINSR_D, BINSR_H, BINSR_W...
    printOperand(MI, 3, O);
    break;
  case 13:
    // BMNZI_B, BMZI_B, BSELI_B
    printUImm<8>(MI, 3, O);
    return;
    break;
  case 14:
    // COPY_S_D, SPLATI_D
    printUImm<1>(MI, 2, O);
    O << ']';
    return;
    break;
  case 15:
    // DEXTU, DEXTU_MM64R6, DINSU, DINSU_MM64R6
    printUImm<5, 32>(MI, 2, O);
    O << ", ";
    break;
  case 16:
    // FADD_D_MMR6, FADD_S_MMR6, FDIV_D_MMR6, FDIV_S_MMR6, FMUL_D_MMR6, FMUL_...
    printOperand(MI, 1, O);
    return;
    break;
  case 17:
    // SLDI_D
    printUImm<1>(MI, 3, O);
    O << ']';
    return;
    break;
  case 18:
    // SLDI_W
    printUImm<2>(MI, 3, O);
    O << ']';
    return;
    break;
  case 19:
    // TEQ, TGE, TGEU, TLT, TLTU, TNE
    printUImm<10>(MI, 2, O);
    return;
    break;
  }


  // Fragment 5 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 38) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD, ADDIUR2_MM, ADDIU_MMR6, ADDQH_PH, ADDQH_PH_MMR2, ADDQH_R_PH, ADDQ...
    return;
    break;
  case 1:
    // ALIGN, ALIGN_MMR6, CINS, CINS32, CINS64_32, CINS_i32, DALIGN, DALIGN_M...
    O << ", ";
    break;
  case 2:
    // COPY_S_B, COPY_S_H, COPY_S_W, COPY_U_B, COPY_U_H, COPY_U_W, SLDI_B, SL...
    O << ']';
    return;
    break;
  case 3:
    // DEXTU, DEXTU_MM64R6
    printUImm<5, 1>(MI, 3, O);
    return;
    break;
  case 4:
    // DINSU, DINSU_MM64R6
    printUImm<6>(MI, 3, O);
    return;
    break;
  }


  // Fragment 6 encoded into 4 bits for 9 unique commands.
  switch ((Bits >> 41) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ALIGN, ALIGN_MMR6
    printUImm<2>(MI, 3, O);
    return;
    break;
  case 1:
    // CINS, CINS32, CINS64_32, CINS_i32, EXTS, EXTS32
    printUImm<5>(MI, 3, O);
    return;
    break;
  case 2:
    // DALIGN, DALIGN_MM64R6
    printUImm<3>(MI, 3, O);
    return;
    break;
  case 3:
    // DEXT, DEXT64_32, DEXT_MM64R6, EXT, EXT_MM, EXT_MMR6
    printUImm<5, 1>(MI, 3, O);
    return;
    break;
  case 4:
    // DEXTM, DEXTM_MM64R6
    printUImm<5, 33>(MI, 3, O);
    return;
    break;
  case 5:
    // DINS, DINSM, DINS_MM64R6, INS, INS_MM, INS_MMR6
    printUImm<6>(MI, 3, O);
    return;
    break;
  case 6:
    // DINSM_MM64R6
    printUImm<6, 2>(MI, 3, O);
    return;
    break;
  case 7:
    // DLSA, DLSA_R6, LSA, LSA_R6
    printUImm<2, 1>(MI, 3, O);
    return;
    break;
  case 8:
    // MADD_D32, MADD_D32_MM, MADD_D64, MADD_S, MADD_S_MM, MSUB_D32, MSUB_D32...
    printOperand(MI, 3, O);
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *MipsInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 418 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'f', '1', '0', 0,
  /* 4 */ 'w', '1', '0', 0,
  /* 8 */ 'f', '2', '0', 0,
  /* 12 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '0', 0,
  /* 25 */ 'w', '2', '0', 0,
  /* 29 */ 'f', '3', '0', 0,
  /* 33 */ 'w', '3', '0', 0,
  /* 37 */ 'a', 'c', '0', 0,
  /* 41 */ 'f', 'c', 'c', '0', 0,
  /* 46 */ 'f', '0', 0,
  /* 49 */ 'm', 'p', 'l', '0', 0,
  /* 54 */ 'p', '0', 0,
  /* 57 */ 'w', '0', 0,
  /* 60 */ 'f', '1', '1', 0,
  /* 64 */ 'w', '1', '1', 0,
  /* 68 */ 'f', '2', '1', 0,
  /* 72 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '1', 0,
  /* 85 */ 'w', '2', '1', 0,
  /* 89 */ 'f', '3', '1', 0,
  /* 93 */ 'w', '3', '1', 0,
  /* 97 */ 'a', 'c', '1', 0,
  /* 101 */ 'f', 'c', 'c', '1', 0,
  /* 106 */ 'f', '1', 0,
  /* 109 */ 'm', 'p', 'l', '1', 0,
  /* 114 */ 'p', '1', 0,
  /* 117 */ 'w', '1', 0,
  /* 120 */ 'f', '1', '2', 0,
  /* 124 */ 'w', '1', '2', 0,
  /* 128 */ 'f', '2', '2', 0,
  /* 132 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '2', 0,
  /* 145 */ 'w', '2', '2', 0,
  /* 149 */ 'a', 'c', '2', 0,
  /* 153 */ 'f', 'c', 'c', '2', 0,
  /* 158 */ 'f', '2', 0,
  /* 161 */ 'm', 'p', 'l', '2', 0,
  /* 166 */ 'p', '2', 0,
  /* 169 */ 'w', '2', 0,
  /* 172 */ 'f', '1', '3', 0,
  /* 176 */ 'w', '1', '3', 0,
  /* 180 */ 'f', '2', '3', 0,
  /* 184 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '3', 0,
  /* 197 */ 'w', '2', '3', 0,
  /* 201 */ 'a', 'c', '3', 0,
  /* 205 */ 'f', 'c', 'c', '3', 0,
  /* 210 */ 'f', '3', 0,
  /* 213 */ 'w', '3', 0,
  /* 216 */ 'f', '1', '4', 0,
  /* 220 */ 'w', '1', '4', 0,
  /* 224 */ 'f', '2', '4', 0,
  /* 228 */ 'w', '2', '4', 0,
  /* 232 */ 'f', 'c', 'c', '4', 0,
  /* 237 */ 'f', '4', 0,
  /* 240 */ 'w', '4', 0,
  /* 243 */ 'f', '1', '5', 0,
  /* 247 */ 'w', '1', '5', 0,
  /* 251 */ 'f', '2', '5', 0,
  /* 255 */ 'w', '2', '5', 0,
  /* 259 */ 'f', 'c', 'c', '5', 0,
  /* 264 */ 'f', '5', 0,
  /* 267 */ 'w', '5', 0,
  /* 270 */ 'f', '1', '6', 0,
  /* 274 */ 'w', '1', '6', 0,
  /* 278 */ 'f', '2', '6', 0,
  /* 282 */ 'w', '2', '6', 0,
  /* 286 */ 'f', 'c', 'c', '6', 0,
  /* 291 */ 'f', '6', 0,
  /* 294 */ 'w', '6', 0,
  /* 297 */ 'f', '1', '7', 0,
  /* 301 */ 'w', '1', '7', 0,
  /* 305 */ 'f', '2', '7', 0,
  /* 309 */ 'w', '2', '7', 0,
  /* 313 */ 'f', 'c', 'c', '7', 0,
  /* 318 */ 'f', '7', 0,
  /* 321 */ 'w', '7', 0,
  /* 324 */ 'f', '1', '8', 0,
  /* 328 */ 'w', '1', '8', 0,
  /* 332 */ 'f', '2', '8', 0,
  /* 336 */ 'w', '2', '8', 0,
  /* 340 */ 'f', '8', 0,
  /* 343 */ 'w', '8', 0,
  /* 346 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '1', '6', '_', '1', '9', 0,
  /* 362 */ 'f', '1', '9', 0,
  /* 366 */ 'w', '1', '9', 0,
  /* 370 */ 'f', '2', '9', 0,
  /* 374 */ 'w', '2', '9', 0,
  /* 378 */ 'f', '9', 0,
  /* 381 */ 'w', '9', 0,
  /* 384 */ 'D', 'S', 'P', 'E', 'F', 'I', 0,
  /* 391 */ 'r', 'a', 0,
  /* 394 */ 'h', 'w', 'r', '_', 'c', 'c', 0,
  /* 401 */ 'p', 'c', 0,
  /* 404 */ 'D', 'S', 'P', 'C', 'C', 'o', 'n', 'd', 0,
  /* 413 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', 0,
  /* 424 */ 'h', 'i', 0,
  /* 427 */ 'h', 'w', 'r', '_', 'c', 'p', 'u', 'n', 'u', 'm', 0,
  /* 438 */ 'l', 'o', 0,
  /* 441 */ 'z', 'e', 'r', 'o', 0,
  /* 446 */ 'h', 'w', 'r', '_', 's', 'y', 'n', 'c', 'i', '_', 's', 't', 'e', 'p', 0,
  /* 461 */ 'f', 'p', 0,
  /* 464 */ 'g', 'p', 0,
  /* 467 */ 's', 'p', 0,
  /* 470 */ 'h', 'w', 'r', '_', 'c', 'c', 'r', 'e', 's', 0,
  /* 480 */ 'D', 'S', 'P', 'P', 'o', 's', 0,
  /* 487 */ 'D', 'S', 'P', 'S', 'C', 'o', 'u', 'n', 't', 0,
  /* 497 */ 'D', 'S', 'P', 'C', 'a', 'r', 'r', 'y', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    62, 404, 497, 384, 413, 480, 487, 461, 464, 122, 62, 2, 272, 218, 
    245, 174, 299, 401, 391, 467, 441, 218, 245, 272, 299, 37, 97, 149, 
    201, 62, 2, 62, 122, 174, 218, 245, 272, 299, 326, 360, 2, 62, 
    122, 174, 218, 245, 272, 299, 326, 360, 2, 62, 122, 174, 218, 245, 
    272, 299, 326, 360, 1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 
    9, 69, 129, 181, 225, 252, 279, 306, 333, 371, 30, 90, 1, 61, 
    121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 225, 252, 
    279, 306, 333, 371, 30, 90, 1, 61, 121, 173, 217, 244, 271, 298, 
    325, 359, 9, 69, 129, 181, 225, 252, 279, 306, 333, 371, 30, 90, 
    46, 158, 237, 291, 340, 0, 120, 216, 270, 324, 8, 128, 224, 278, 
    332, 29, 12, 72, 132, 184, 46, 106, 158, 210, 237, 264, 291, 318, 
    340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 324, 362, 8, 68, 
    128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 41, 101, 153, 205, 
    232, 259, 286, 313, 2, 62, 122, 174, 218, 245, 272, 299, 326, 360, 
    1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 
    225, 252, 279, 306, 333, 371, 30, 90, 461, 46, 106, 158, 210, 237, 
    264, 291, 318, 340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 324, 
    362, 8, 68, 128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 464, 
    37, 97, 149, 201, 427, 446, 394, 470, 218, 245, 272, 299, 326, 360, 
    1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 
    225, 252, 279, 306, 333, 371, 30, 90, 279, 306, 37, 97, 149, 201, 
    49, 109, 161, 54, 114, 166, 391, 271, 298, 325, 359, 9, 69, 129, 
    181, 467, 326, 360, 1, 61, 121, 173, 217, 244, 225, 252, 122, 174, 
    57, 117, 169, 213, 240, 267, 294, 321, 343, 381, 4, 64, 124, 176, 
    220, 247, 274, 301, 328, 366, 25, 85, 145, 197, 228, 255, 282, 309, 
    336, 374, 33, 93, 441, 218, 245, 272, 299, 37, 46, 106, 158, 210, 
    237, 264, 291, 318, 340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 
    324, 362, 8, 68, 128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 
    346, 424, 279, 306, 438, 271, 298, 325, 359, 9, 69, 129, 181, 326, 
    360, 1, 61, 121, 173, 217, 244, 225, 252, 122, 174, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool MipsInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case Mips::ADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (ADDu GPR32Opnd:$dst, GPR32Opnd:$src, ZERO)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::BC1F:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1F FCC0, brtarget:$offset)
      AsmString = "bc1f $\x02";
      break;
    }
    return false;
  case Mips::BC1FL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1FL FCC0, brtarget:$offset)
      AsmString = "bc1fl $\x02";
      break;
    }
    return false;
  case Mips::BC1F_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1F_MM FCC0, brtarget:$offset)
      AsmString = "bc1f $\x02";
      break;
    }
    return false;
  case Mips::BC1T:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1T FCC0, brtarget:$offset)
      AsmString = "bc1t $\x02";
      break;
    }
    return false;
  case Mips::BC1TL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1TL FCC0, brtarget:$offset)
      AsmString = "bc1tl $\x02";
      break;
    }
    return false;
  case Mips::BC1T_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1T_MM FCC0, brtarget:$offset)
      AsmString = "bc1t $\x02";
      break;
    }
    return false;
  case Mips::BREAK:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK 0, 0)
      AsmString = "break";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK uimm10:$imm, 0)
      AsmString = "break $\xFF\x01\x01";
      break;
    }
    return false;
  case Mips::C_EQ_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_EQ_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.eq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_EQ_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_EQ_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.eq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_EQ_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_EQ_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.eq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_EQ_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_EQ_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.eq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_EQ_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_EQ_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.eq.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_EQ_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_EQ_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.eq.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_F_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_F_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.f.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_F_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_F_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.f.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_F_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_F_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.f.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_F_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_F_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.f.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_F_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_F_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.f.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_F_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_F_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.f.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LE_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.le.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LE_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.le.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LE_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.le.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LE_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.le.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LE_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.le.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LE_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.le.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LT_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LT_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.lt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LT_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LT_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.lt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LT_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LT_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.lt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LT_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LT_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.lt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LT_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LT_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.lt.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LT_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LT_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.lt.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGE_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.nge.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGE_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.nge.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGE_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.nge.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGE_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.nge.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGE_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.nge.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGE_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.nge.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGLE_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGLE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ngle.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGLE_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGLE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ngle.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGLE_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGLE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ngle.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGLE_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGLE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ngle.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGLE_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGLE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ngle.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGLE_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGLE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ngle.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGL_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGL_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ngl.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGL_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGL_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ngl.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGL_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGL_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ngl.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGL_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGL_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ngl.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGL_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGL_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ngl.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGL_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGL_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ngl.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGT_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGT_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ngt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGT_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGT_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ngt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGT_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGT_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ngt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGT_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGT_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ngt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGT_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGT_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ngt.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGT_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGT_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ngt.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLE_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ole.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLE_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ole.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLE_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ole.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLE_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ole.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLE_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ole.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLE_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ole.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLT_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLT_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.olt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLT_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLT_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.olt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLT_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLT_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.olt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLT_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLT_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.olt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLT_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLT_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.olt.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLT_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLT_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.olt.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SEQ_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SEQ_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.seq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SEQ_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SEQ_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.seq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SEQ_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SEQ_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.seq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SEQ_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SEQ_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.seq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SEQ_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SEQ_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.seq.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SEQ_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SEQ_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.seq.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SF_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SF_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.sf.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SF_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SF_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.sf.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SF_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SF_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.sf.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SF_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SF_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.sf.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SF_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SF_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.sf.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SF_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SF_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.sf.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UEQ_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UEQ_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ueq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UEQ_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UEQ_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ueq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UEQ_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UEQ_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ueq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UEQ_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UEQ_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ueq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UEQ_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UEQ_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ueq.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UEQ_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UEQ_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ueq.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULE_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ule.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULE_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ule.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULE_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ule.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULE_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ule.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULE_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ule.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULE_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ule.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULT_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULT_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ult.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULT_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULT_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ult.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULT_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULT_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ult.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULT_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULT_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ult.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULT_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULT_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ult.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULT_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULT_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ult.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UN_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UN_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.un.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UN_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UN_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.un.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UN_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UN_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.un.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UN_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UN_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.un.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UN_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UN_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.un.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UN_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UN_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.un.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::DADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (DADDu GPR64Opnd:$dst, GPR64Opnd:$src, ZERO_64)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::DI:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DI ZERO)
      AsmString = "di";
      break;
    }
    return false;
  case Mips::DIV:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DIV GPR32Opnd:$rs, GPR32Opnd:$rs, GPR32Opnd:$rt)
      AsmString = "div $\x01, $\x03";
      break;
    }
    return false;
  case Mips::DIVU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DIVU GPR32Opnd:$rs, GPR32Opnd:$rs, GPR32Opnd:$rt)
      AsmString = "divu $\x01, $\x03";
      break;
    }
    return false;
  case Mips::DI_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DI_MM ZERO)
      AsmString = "di";
      break;
    }
    return false;
  case Mips::DI_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DI_MMR6 ZERO)
      AsmString = "di";
      break;
    }
    return false;
  case Mips::DSUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DSUB GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rs)
      AsmString = "dneg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (DSUB GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rt)
      AsmString = "dneg $\x01";
      break;
    }
    return false;
  case Mips::DSUBU_MM64R6:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DSUBU_MM64R6 GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rs)
      AsmString = "dnegu $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (DSUBU_MM64R6 GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rt)
      AsmString = "dnegu $\x01";
      break;
    }
    return false;
  case Mips::DSUB_MM64R6:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DSUB_MM64R6 GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rs)
      AsmString = "dneg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (DSUB_MM64R6 GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rt)
      AsmString = "dneg $\x01";
      break;
    }
    return false;
  case Mips::DSUBu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DSUBu GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rs)
      AsmString = "dnegu $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (DSUBu GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rt)
      AsmString = "dnegu $\x01";
      break;
    }
    return false;
  case Mips::EI:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::EI_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI_MM ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::EI_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI_MMR6 ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::JALR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR ZERO, GPR32Opnd:$rs)
      AsmString = "jr $\x02";
      break;
    }
    return false;
  case Mips::JALR64:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO_64 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR64 ZERO_64, GPR64Opnd:$rs)
      AsmString = "jr $\x02";
      break;
    }
    return false;
  case Mips::JALRC_HB_MMR6:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALRC_HB_MMR6 RA, GPR32Opnd:$rs)
      AsmString = "jalrc.hb $\x02";
      break;
    }
    return false;
  case Mips::JALRC_MMR6:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALRC_MMR6 RA, GPR32Opnd:$rs)
      AsmString = "jalrc $\x02";
      break;
    }
    return false;
  case Mips::JALR_HB:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR_HB RA, GPR32Opnd:$rs)
      AsmString = "jalr.hb $\x02";
      break;
    }
    return false;
  case Mips::JIALC:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (JIALC GPR32Opnd:$rs, 0)
      AsmString = "jalrc $\x01";
      break;
    }
    return false;
  case Mips::JIALC64:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (JIALC64 GPR64Opnd:$rs, 0)
      AsmString = "jalrc $\x01";
      break;
    }
    return false;
  case Mips::JIC:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (JIC GPR32Opnd:$rs, 0)
      AsmString = "jrc $\x01";
      break;
    }
    return false;
  case Mips::JIC64:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (JIC64 GPR64Opnd:$rs, 0)
      AsmString = "jrc $\x01";
      break;
    }
    return false;
  case Mips::MOVE16_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO) {
      // (MOVE16_MM ZERO, ZERO)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::NORImm:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (NORImm GPR32Opnd:$rs, GPR32Opnd:$rs, simm32_relaxed:$imm)
      AsmString = "nor	$\x01, $\x03";
      break;
    }
    return false;
  case Mips::NORImm64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (NORImm64 GPR64Opnd:$rs, GPR64Opnd:$rs, imm64:$imm)
      AsmString = "nor	$\x01, $\x03";
      break;
    }
    return false;
  case Mips::OR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (OR GPR32Opnd:$dst, GPR32Opnd:$src, ZERO)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::OR64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (OR64 GPR64Opnd:$dst, GPR64Opnd:$src, ZERO_64)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::RDHWR_MMR6:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::HWRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RDHWR_MMR6 GPR32Opnd:$rt, HWRegsOpnd:$rs, 0)
      AsmString = "rdhwr $\x01, $\x02";
      break;
    }
    return false;
  case Mips::SDBBP:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SDBBP_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP_MMR6 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SDBBP_R6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP_R6 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SLL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SLL_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL_MM ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SLL_MMR6:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL_MMR6 ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SLTImm64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (SLTImm64 GPR64Opnd:$rs, GPR64Opnd:$rs, imm64:$imm)
      AsmString = "slt	$\x01, $\x03";
      break;
    }
    return false;
  case Mips::SLTUImm64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (SLTUImm64 GPR64Opnd:$rs, GPR64Opnd:$rs, imm64:$imm)
      AsmString = "sltu	$\x01, $\x03";
      break;
    }
    return false;
  case Mips::SUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUB GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (SUB GPR32Opnd:$rt, ZERO, GPR32Opnd:$rt)
      AsmString = "neg $\x01";
      break;
    }
    return false;
  case Mips::SUBu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBu GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "negu $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (SUBu GPR32Opnd:$rt, ZERO, GPR32Opnd:$rt)
      AsmString = "negu $\x01";
      break;
    }
    return false;
  case Mips::SYNC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYNC 0)
      AsmString = "sync";
      break;
    }
    return false;
  case Mips::SYNC_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYNC_MMR6 0)
      AsmString = "sync";
      break;
    }
    return false;
  case Mips::SYSCALL:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYSCALL 0)
      AsmString = "syscall";
      break;
    }
    return false;
  case Mips::SYSCALL_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYSCALL_MM 0)
      AsmString = "syscall";
      break;
    }
    return false;
  case Mips::TEQ:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TEQ GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "teq $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TEQ_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TEQ_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "teq $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGE:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGE GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tge $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGEU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGEU GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tgeu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGEU_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGEU_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tgeu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGE_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGE_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tge $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLT:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLT GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tlt $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLTU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLTU GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tltu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLTU_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLTU_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tltu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLT_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLT_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tlt $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TNE:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TNE GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tne $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TNE_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TNE_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tne $\x01, $\x02";
      break;
    }
    return false;
  case Mips::WAIT_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (WAIT_MM 0)
      AsmString = "wait";
      break;
    }
    return false;
  case Mips::WRDSP:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31) {
      // (WRDSP GPR32Opnd:$rt, 31)
      AsmString = "wrdsp $\x01";
      break;
    }
    return false;
  case Mips::WRDSP_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31) {
      // (WRDSP_MM GPR32Opnd:$rt, 31)
      AsmString = "wrdsp $\x01";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t')      OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void MipsInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printUImm<10>(MI, OpIdx, OS);
    break;
  }
}

#endif // PRINT_ALIAS_INSTR
