/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Machine Code Emitter                                                       *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

uint64_t AArch64MCCodeEmitter::getBinaryCodeForInstr(const MCInst &MI,
    SmallVectorImpl<MCFixup> &Fixups,
    const MCSubtargetInfo &STI) const {
  static const uint64_t InstBits[] = {
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(1310767104),	// ABSv16i8
    UINT64_C(1591785472),	// ABSv1i64
    UINT64_C(245413888),	// ABSv2i32
    UINT64_C(1323350016),	// ABSv2i64
    UINT64_C(241219584),	// ABSv4i16
    UINT64_C(1319155712),	// ABSv4i32
    UINT64_C(1314961408),	// ABSv8i16
    UINT64_C(237025280),	// ABSv8i8
    UINT64_C(973078528),	// ADCSWr
    UINT64_C(3120562176),	// ADCSXr
    UINT64_C(436207616),	// ADCWr
    UINT64_C(2583691264),	// ADCXr
    UINT64_C(245383168),	// ADDHNv2i64_v2i32
    UINT64_C(1319124992),	// ADDHNv2i64_v4i32
    UINT64_C(241188864),	// ADDHNv4i32_v4i16
    UINT64_C(1314930688),	// ADDHNv4i32_v8i16
    UINT64_C(1310736384),	// ADDHNv8i16_v16i8
    UINT64_C(236994560),	// ADDHNv8i16_v8i8
    UINT64_C(1310768128),	// ADDPv16i8
    UINT64_C(245414912),	// ADDPv2i32
    UINT64_C(1323351040),	// ADDPv2i64
    UINT64_C(1592899584),	// ADDPv2i64p
    UINT64_C(241220608),	// ADDPv4i16
    UINT64_C(1319156736),	// ADDPv4i32
    UINT64_C(1314962432),	// ADDPv8i16
    UINT64_C(237026304),	// ADDPv8i8
    UINT64_C(822083584),	// ADDSWri
    UINT64_C(0),	// ADDSWrr
    UINT64_C(721420288),	// ADDSWrs
    UINT64_C(723517440),	// ADDSWrx
    UINT64_C(2969567232),	// ADDSXri
    UINT64_C(0),	// ADDSXrr
    UINT64_C(2868903936),	// ADDSXrs
    UINT64_C(2871001088),	// ADDSXrx
    UINT64_C(2871025664),	// ADDSXrx64
    UINT64_C(1311881216),	// ADDVv16i8v
    UINT64_C(242333696),	// ADDVv4i16v
    UINT64_C(1320269824),	// ADDVv4i32v
    UINT64_C(1316075520),	// ADDVv8i16v
    UINT64_C(238139392),	// ADDVv8i8v
    UINT64_C(285212672),	// ADDWri
    UINT64_C(0),	// ADDWrr
    UINT64_C(184549376),	// ADDWrs
    UINT64_C(186646528),	// ADDWrx
    UINT64_C(2432696320),	// ADDXri
    UINT64_C(0),	// ADDXrr
    UINT64_C(2332033024),	// ADDXrs
    UINT64_C(2334130176),	// ADDXrx
    UINT64_C(2334154752),	// ADDXrx64
    UINT64_C(1310753792),	// ADDv16i8
    UINT64_C(1591772160),	// ADDv1i64
    UINT64_C(245400576),	// ADDv2i32
    UINT64_C(1323336704),	// ADDv2i64
    UINT64_C(241206272),	// ADDv4i16
    UINT64_C(1319142400),	// ADDv4i32
    UINT64_C(1314948096),	// ADDv8i16
    UINT64_C(237011968),	// ADDv8i8
    UINT64_C(0),	// ADJCALLSTACKDOWN
    UINT64_C(0),	// ADJCALLSTACKUP
    UINT64_C(268435456),	// ADR
    UINT64_C(2415919104),	// ADRP
    UINT64_C(1311266816),	// AESDrr
    UINT64_C(1311262720),	// AESErr
    UINT64_C(1311275008),	// AESIMCrr
    UINT64_C(1311270912),	// AESMCrr
    UINT64_C(1912602624),	// ANDSWri
    UINT64_C(0),	// ANDSWrr
    UINT64_C(1778384896),	// ANDSWrs
    UINT64_C(4060086272),	// ANDSXri
    UINT64_C(0),	// ANDSXrr
    UINT64_C(3925868544),	// ANDSXrs
    UINT64_C(301989888),	// ANDWri
    UINT64_C(0),	// ANDWrr
    UINT64_C(167772160),	// ANDWrs
    UINT64_C(2449473536),	// ANDXri
    UINT64_C(0),	// ANDXrr
    UINT64_C(2315255808),	// ANDXrs
    UINT64_C(1310727168),	// ANDv16i8
    UINT64_C(236985344),	// ANDv8i8
    UINT64_C(448800768),	// ASRVWr
    UINT64_C(2596284416),	// ASRVXr
    UINT64_C(335544320),	// B
    UINT64_C(855638016),	// BFMWri
    UINT64_C(3007315968),	// BFMXri
    UINT64_C(0),	// BICSWrr
    UINT64_C(1780482048),	// BICSWrs
    UINT64_C(0),	// BICSXrr
    UINT64_C(3927965696),	// BICSXrs
    UINT64_C(0),	// BICWrr
    UINT64_C(169869312),	// BICWrs
    UINT64_C(0),	// BICXrr
    UINT64_C(2317352960),	// BICXrs
    UINT64_C(1314921472),	// BICv16i8
    UINT64_C(788534272),	// BICv2i32
    UINT64_C(788567040),	// BICv4i16
    UINT64_C(1862276096),	// BICv4i32
    UINT64_C(1862308864),	// BICv8i16
    UINT64_C(241179648),	// BICv8i8
    UINT64_C(1860180992),	// BIFv16i8
    UINT64_C(786439168),	// BIFv8i8
    UINT64_C(1855986688),	// BITv16i8
    UINT64_C(782244864),	// BITv8i8
    UINT64_C(2483027968),	// BL
    UINT64_C(3594452992),	// BLR
    UINT64_C(3592355840),	// BR
    UINT64_C(3558866944),	// BRK
    UINT64_C(1851792384),	// BSLv16i8
    UINT64_C(778050560),	// BSLv8i8
    UINT64_C(1409286144),	// Bcc
    UINT64_C(148962304),	// CASALb
    UINT64_C(3370187776),	// CASALd
    UINT64_C(1222704128),	// CASALh
    UINT64_C(2296445952),	// CASALs
    UINT64_C(148929536),	// CASAb
    UINT64_C(3370155008),	// CASAd
    UINT64_C(1222671360),	// CASAh
    UINT64_C(2296413184),	// CASAs
    UINT64_C(144768000),	// CASLb
    UINT64_C(3365993472),	// CASLd
    UINT64_C(1218509824),	// CASLh
    UINT64_C(2292251648),	// CASLs
    UINT64_C(1214315520),	// CASPALd
    UINT64_C(140573696),	// CASPALs
    UINT64_C(1214282752),	// CASPAd
    UINT64_C(140540928),	// CASPAs
    UINT64_C(1210121216),	// CASPLd
    UINT64_C(136379392),	// CASPLs
    UINT64_C(1210088448),	// CASPd
    UINT64_C(136346624),	// CASPs
    UINT64_C(144735232),	// CASb
    UINT64_C(3365960704),	// CASd
    UINT64_C(1218477056),	// CASh
    UINT64_C(2292218880),	// CASs
    UINT64_C(889192448),	// CBNZW
    UINT64_C(3036676096),	// CBNZX
    UINT64_C(872415232),	// CBZW
    UINT64_C(3019898880),	// CBZX
    UINT64_C(977274880),	// CCMNWi
    UINT64_C(977272832),	// CCMNWr
    UINT64_C(3124758528),	// CCMNXi
    UINT64_C(3124756480),	// CCMNXr
    UINT64_C(2051016704),	// CCMPWi
    UINT64_C(2051014656),	// CCMPWr
    UINT64_C(4198500352),	// CCMPXi
    UINT64_C(4198498304),	// CCMPXr
    UINT64_C(3573755999),	// CLREX
    UINT64_C(1522537472),	// CLSWr
    UINT64_C(3670021120),	// CLSXr
    UINT64_C(1310738432),	// CLSv16i8
    UINT64_C(245385216),	// CLSv2i32
    UINT64_C(241190912),	// CLSv4i16
    UINT64_C(1319127040),	// CLSv4i32
    UINT64_C(1314932736),	// CLSv8i16
    UINT64_C(236996608),	// CLSv8i8
    UINT64_C(1522536448),	// CLZWr
    UINT64_C(3670020096),	// CLZXr
    UINT64_C(1847609344),	// CLZv16i8
    UINT64_C(782256128),	// CLZv2i32
    UINT64_C(778061824),	// CLZv4i16
    UINT64_C(1855997952),	// CLZv4i32
    UINT64_C(1851803648),	// CLZv8i16
    UINT64_C(773867520),	// CLZv8i8
    UINT64_C(1847626752),	// CMEQv16i8
    UINT64_C(1310758912),	// CMEQv16i8rz
    UINT64_C(2128645120),	// CMEQv1i64
    UINT64_C(1591777280),	// CMEQv1i64rz
    UINT64_C(782273536),	// CMEQv2i32
    UINT64_C(245405696),	// CMEQv2i32rz
    UINT64_C(1860209664),	// CMEQv2i64
    UINT64_C(1323341824),	// CMEQv2i64rz
    UINT64_C(778079232),	// CMEQv4i16
    UINT64_C(241211392),	// CMEQv4i16rz
    UINT64_C(1856015360),	// CMEQv4i32
    UINT64_C(1319147520),	// CMEQv4i32rz
    UINT64_C(1851821056),	// CMEQv8i16
    UINT64_C(1314953216),	// CMEQv8i16rz
    UINT64_C(773884928),	// CMEQv8i8
    UINT64_C(237017088),	// CMEQv8i8rz
    UINT64_C(1310735360),	// CMGEv16i8
    UINT64_C(1847625728),	// CMGEv16i8rz
    UINT64_C(1591753728),	// CMGEv1i64
    UINT64_C(2128644096),	// CMGEv1i64rz
    UINT64_C(245382144),	// CMGEv2i32
    UINT64_C(782272512),	// CMGEv2i32rz
    UINT64_C(1323318272),	// CMGEv2i64
    UINT64_C(1860208640),	// CMGEv2i64rz
    UINT64_C(241187840),	// CMGEv4i16
    UINT64_C(778078208),	// CMGEv4i16rz
    UINT64_C(1319123968),	// CMGEv4i32
    UINT64_C(1856014336),	// CMGEv4i32rz
    UINT64_C(1314929664),	// CMGEv8i16
    UINT64_C(1851820032),	// CMGEv8i16rz
    UINT64_C(236993536),	// CMGEv8i8
    UINT64_C(773883904),	// CMGEv8i8rz
    UINT64_C(1310733312),	// CMGTv16i8
    UINT64_C(1310754816),	// CMGTv16i8rz
    UINT64_C(1591751680),	// CMGTv1i64
    UINT64_C(1591773184),	// CMGTv1i64rz
    UINT64_C(245380096),	// CMGTv2i32
    UINT64_C(245401600),	// CMGTv2i32rz
    UINT64_C(1323316224),	// CMGTv2i64
    UINT64_C(1323337728),	// CMGTv2i64rz
    UINT64_C(241185792),	// CMGTv4i16
    UINT64_C(241207296),	// CMGTv4i16rz
    UINT64_C(1319121920),	// CMGTv4i32
    UINT64_C(1319143424),	// CMGTv4i32rz
    UINT64_C(1314927616),	// CMGTv8i16
    UINT64_C(1314949120),	// CMGTv8i16rz
    UINT64_C(236991488),	// CMGTv8i8
    UINT64_C(237012992),	// CMGTv8i8rz
    UINT64_C(1847604224),	// CMHIv16i8
    UINT64_C(2128622592),	// CMHIv1i64
    UINT64_C(782251008),	// CMHIv2i32
    UINT64_C(1860187136),	// CMHIv2i64
    UINT64_C(778056704),	// CMHIv4i16
    UINT64_C(1855992832),	// CMHIv4i32
    UINT64_C(1851798528),	// CMHIv8i16
    UINT64_C(773862400),	// CMHIv8i8
    UINT64_C(1847606272),	// CMHSv16i8
    UINT64_C(2128624640),	// CMHSv1i64
    UINT64_C(782253056),	// CMHSv2i32
    UINT64_C(1860189184),	// CMHSv2i64
    UINT64_C(778058752),	// CMHSv4i16
    UINT64_C(1855994880),	// CMHSv4i32
    UINT64_C(1851800576),	// CMHSv8i16
    UINT64_C(773864448),	// CMHSv8i8
    UINT64_C(1847629824),	// CMLEv16i8rz
    UINT64_C(2128648192),	// CMLEv1i64rz
    UINT64_C(782276608),	// CMLEv2i32rz
    UINT64_C(1860212736),	// CMLEv2i64rz
    UINT64_C(778082304),	// CMLEv4i16rz
    UINT64_C(1856018432),	// CMLEv4i32rz
    UINT64_C(1851824128),	// CMLEv8i16rz
    UINT64_C(773888000),	// CMLEv8i8rz
    UINT64_C(1310763008),	// CMLTv16i8rz
    UINT64_C(1591781376),	// CMLTv1i64rz
    UINT64_C(245409792),	// CMLTv2i32rz
    UINT64_C(1323345920),	// CMLTv2i64rz
    UINT64_C(241215488),	// CMLTv4i16rz
    UINT64_C(1319151616),	// CMLTv4i32rz
    UINT64_C(1314957312),	// CMLTv8i16rz
    UINT64_C(237021184),	// CMLTv8i8rz
    UINT64_C(0),	// CMP_SWAP_128
    UINT64_C(0),	// CMP_SWAP_16
    UINT64_C(0),	// CMP_SWAP_32
    UINT64_C(0),	// CMP_SWAP_64
    UINT64_C(0),	// CMP_SWAP_8
    UINT64_C(1310755840),	// CMTSTv16i8
    UINT64_C(1591774208),	// CMTSTv1i64
    UINT64_C(245402624),	// CMTSTv2i32
    UINT64_C(1323338752),	// CMTSTv2i64
    UINT64_C(241208320),	// CMTSTv4i16
    UINT64_C(1319144448),	// CMTSTv4i32
    UINT64_C(1314950144),	// CMTSTv8i16
    UINT64_C(237014016),	// CMTSTv8i8
    UINT64_C(1310742528),	// CNTv16i8
    UINT64_C(237000704),	// CNTv8i8
    UINT64_C(1577190400),	// CPYi16
    UINT64_C(1577321472),	// CPYi32
    UINT64_C(1577583616),	// CPYi64
    UINT64_C(1577124864),	// CPYi8
    UINT64_C(448806912),	// CRC32Brr
    UINT64_C(448811008),	// CRC32CBrr
    UINT64_C(448812032),	// CRC32CHrr
    UINT64_C(448813056),	// CRC32CWrr
    UINT64_C(2596297728),	// CRC32CXrr
    UINT64_C(448807936),	// CRC32Hrr
    UINT64_C(448808960),	// CRC32Wrr
    UINT64_C(2596293632),	// CRC32Xrr
    UINT64_C(444596224),	// CSELWr
    UINT64_C(2592079872),	// CSELXr
    UINT64_C(444597248),	// CSINCWr
    UINT64_C(2592080896),	// CSINCXr
    UINT64_C(1518338048),	// CSINVWr
    UINT64_C(3665821696),	// CSINVXr
    UINT64_C(1518339072),	// CSNEGWr
    UINT64_C(3665822720),	// CSNEGXr
    UINT64_C(3567255553),	// DCPS1
    UINT64_C(3567255554),	// DCPS2
    UINT64_C(3567255555),	// DCPS3
    UINT64_C(3573756095),	// DMB
    UINT64_C(3602842592),	// DRPS
    UINT64_C(3573756063),	// DSB
    UINT64_C(1308691456),	// DUPv16i8gpr
    UINT64_C(1308689408),	// DUPv16i8lane
    UINT64_C(235146240),	// DUPv2i32gpr
    UINT64_C(235144192),	// DUPv2i32lane
    UINT64_C(1309150208),	// DUPv2i64gpr
    UINT64_C(1309148160),	// DUPv2i64lane
    UINT64_C(235015168),	// DUPv4i16gpr
    UINT64_C(235013120),	// DUPv4i16lane
    UINT64_C(1308888064),	// DUPv4i32gpr
    UINT64_C(1308886016),	// DUPv4i32lane
    UINT64_C(1308756992),	// DUPv8i16gpr
    UINT64_C(1308754944),	// DUPv8i16lane
    UINT64_C(234949632),	// DUPv8i8gpr
    UINT64_C(234947584),	// DUPv8i8lane
    UINT64_C(0),	// EONWrr
    UINT64_C(1243611136),	// EONWrs
    UINT64_C(0),	// EONXrr
    UINT64_C(3391094784),	// EONXrs
    UINT64_C(1375731712),	// EORWri
    UINT64_C(0),	// EORWrr
    UINT64_C(1241513984),	// EORWrs
    UINT64_C(3523215360),	// EORXri
    UINT64_C(0),	// EORXrr
    UINT64_C(3388997632),	// EORXrs
    UINT64_C(1847598080),	// EORv16i8
    UINT64_C(773856256),	// EORv8i8
    UINT64_C(3600745440),	// ERET
    UINT64_C(327155712),	// EXTRWrri
    UINT64_C(2478833664),	// EXTRXrri
    UINT64_C(1845493760),	// EXTv16i8
    UINT64_C(771751936),	// EXTv8i8
    UINT64_C(0),	// F128CSEL
    UINT64_C(2126517248),	// FABD16
    UINT64_C(2124469248),	// FABD32
    UINT64_C(2128663552),	// FABD64
    UINT64_C(782291968),	// FABDv2f32
    UINT64_C(1860228096),	// FABDv2f64
    UINT64_C(784339968),	// FABDv4f16
    UINT64_C(1856033792),	// FABDv4f32
    UINT64_C(1858081792),	// FABDv8f16
    UINT64_C(509657088),	// FABSDr
    UINT64_C(518045696),	// FABSHr
    UINT64_C(505462784),	// FABSSr
    UINT64_C(245430272),	// FABSv2f32
    UINT64_C(1323366400),	// FABSv2f64
    UINT64_C(251197440),	// FABSv4f16
    UINT64_C(1319172096),	// FABSv4f32
    UINT64_C(1324939264),	// FABSv8f16
    UINT64_C(2118134784),	// FACGE16
    UINT64_C(2116086784),	// FACGE32
    UINT64_C(2120281088),	// FACGE64
    UINT64_C(773909504),	// FACGEv2f32
    UINT64_C(1851845632),	// FACGEv2f64
    UINT64_C(775957504),	// FACGEv4f16
    UINT64_C(1847651328),	// FACGEv4f32
    UINT64_C(1849699328),	// FACGEv8f16
    UINT64_C(2126523392),	// FACGT16
    UINT64_C(2124475392),	// FACGT32
    UINT64_C(2128669696),	// FACGT64
    UINT64_C(782298112),	// FACGTv2f32
    UINT64_C(1860234240),	// FACGTv2f64
    UINT64_C(784346112),	// FACGTv4f16
    UINT64_C(1856039936),	// FACGTv4f32
    UINT64_C(1858087936),	// FACGTv8f16
    UINT64_C(509618176),	// FADDDrr
    UINT64_C(518006784),	// FADDHrr
    UINT64_C(773903360),	// FADDPv2f32
    UINT64_C(1851839488),	// FADDPv2f64
    UINT64_C(1580259328),	// FADDPv2i16p
    UINT64_C(2117130240),	// FADDPv2i32p
    UINT64_C(2121324544),	// FADDPv2i64p
    UINT64_C(775951360),	// FADDPv4f16
    UINT64_C(1847645184),	// FADDPv4f32
    UINT64_C(1849693184),	// FADDPv8f16
    UINT64_C(505423872),	// FADDSrr
    UINT64_C(237032448),	// FADDv2f32
    UINT64_C(1314968576),	// FADDv2f64
    UINT64_C(239080448),	// FADDv4f16
    UINT64_C(1310774272),	// FADDv4f32
    UINT64_C(1312822272),	// FADDv8f16
    UINT64_C(509608960),	// FCCMPDrr
    UINT64_C(509608976),	// FCCMPEDrr
    UINT64_C(517997584),	// FCCMPEHrr
    UINT64_C(505414672),	// FCCMPESrr
    UINT64_C(517997568),	// FCCMPHrr
    UINT64_C(505414656),	// FCCMPSrr
    UINT64_C(1581261824),	// FCMEQ16
    UINT64_C(1579213824),	// FCMEQ32
    UINT64_C(1583408128),	// FCMEQ64
    UINT64_C(1593366528),	// FCMEQv1i16rz
    UINT64_C(1587599360),	// FCMEQv1i32rz
    UINT64_C(1591793664),	// FCMEQv1i64rz
    UINT64_C(237036544),	// FCMEQv2f32
    UINT64_C(1314972672),	// FCMEQv2f64
    UINT64_C(245422080),	// FCMEQv2i32rz
    UINT64_C(1323358208),	// FCMEQv2i64rz
    UINT64_C(239084544),	// FCMEQv4f16
    UINT64_C(1310778368),	// FCMEQv4f32
    UINT64_C(251189248),	// FCMEQv4i16rz
    UINT64_C(1319163904),	// FCMEQv4i32rz
    UINT64_C(1312826368),	// FCMEQv8f16
    UINT64_C(1324931072),	// FCMEQv8i16rz
    UINT64_C(2118132736),	// FCMGE16
    UINT64_C(2116084736),	// FCMGE32
    UINT64_C(2120279040),	// FCMGE64
    UINT64_C(2130233344),	// FCMGEv1i16rz
    UINT64_C(2124466176),	// FCMGEv1i32rz
    UINT64_C(2128660480),	// FCMGEv1i64rz
    UINT64_C(773907456),	// FCMGEv2f32
    UINT64_C(1851843584),	// FCMGEv2f64
    UINT64_C(782288896),	// FCMGEv2i32rz
    UINT64_C(1860225024),	// FCMGEv2i64rz
    UINT64_C(775955456),	// FCMGEv4f16
    UINT64_C(1847649280),	// FCMGEv4f32
    UINT64_C(788056064),	// FCMGEv4i16rz
    UINT64_C(1856030720),	// FCMGEv4i32rz
    UINT64_C(1849697280),	// FCMGEv8f16
    UINT64_C(1861797888),	// FCMGEv8i16rz
    UINT64_C(2126521344),	// FCMGT16
    UINT64_C(2124473344),	// FCMGT32
    UINT64_C(2128667648),	// FCMGT64
    UINT64_C(1593362432),	// FCMGTv1i16rz
    UINT64_C(1587595264),	// FCMGTv1i32rz
    UINT64_C(1591789568),	// FCMGTv1i64rz
    UINT64_C(782296064),	// FCMGTv2f32
    UINT64_C(1860232192),	// FCMGTv2f64
    UINT64_C(245417984),	// FCMGTv2i32rz
    UINT64_C(1323354112),	// FCMGTv2i64rz
    UINT64_C(784344064),	// FCMGTv4f16
    UINT64_C(1856037888),	// FCMGTv4f32
    UINT64_C(251185152),	// FCMGTv4i16rz
    UINT64_C(1319159808),	// FCMGTv4i32rz
    UINT64_C(1858085888),	// FCMGTv8f16
    UINT64_C(1324926976),	// FCMGTv8i16rz
    UINT64_C(2130237440),	// FCMLEv1i16rz
    UINT64_C(2124470272),	// FCMLEv1i32rz
    UINT64_C(2128664576),	// FCMLEv1i64rz
    UINT64_C(782292992),	// FCMLEv2i32rz
    UINT64_C(1860229120),	// FCMLEv2i64rz
    UINT64_C(788060160),	// FCMLEv4i16rz
    UINT64_C(1856034816),	// FCMLEv4i32rz
    UINT64_C(1861801984),	// FCMLEv8i16rz
    UINT64_C(1593370624),	// FCMLTv1i16rz
    UINT64_C(1587603456),	// FCMLTv1i32rz
    UINT64_C(1591797760),	// FCMLTv1i64rz
    UINT64_C(245426176),	// FCMLTv2i32rz
    UINT64_C(1323362304),	// FCMLTv2i64rz
    UINT64_C(251193344),	// FCMLTv4i16rz
    UINT64_C(1319168000),	// FCMLTv4i32rz
    UINT64_C(1324935168),	// FCMLTv8i16rz
    UINT64_C(509616136),	// FCMPDri
    UINT64_C(509616128),	// FCMPDrr
    UINT64_C(509616152),	// FCMPEDri
    UINT64_C(509616144),	// FCMPEDrr
    UINT64_C(518004760),	// FCMPEHri
    UINT64_C(518004752),	// FCMPEHrr
    UINT64_C(505421848),	// FCMPESri
    UINT64_C(505421840),	// FCMPESrr
    UINT64_C(518004744),	// FCMPHri
    UINT64_C(518004736),	// FCMPHrr
    UINT64_C(505421832),	// FCMPSri
    UINT64_C(505421824),	// FCMPSrr
    UINT64_C(509611008),	// FCSELDrrr
    UINT64_C(517999616),	// FCSELHrrr
    UINT64_C(505416704),	// FCSELSrrr
    UINT64_C(509870080),	// FCVTASUWDr
    UINT64_C(518258688),	// FCVTASUWHr
    UINT64_C(505675776),	// FCVTASUWSr
    UINT64_C(2657353728),	// FCVTASUXDr
    UINT64_C(2665742336),	// FCVTASUXHr
    UINT64_C(2653159424),	// FCVTASUXSr
    UINT64_C(1585039360),	// FCVTASv1f16
    UINT64_C(1579272192),	// FCVTASv1i32
    UINT64_C(1583466496),	// FCVTASv1i64
    UINT64_C(237094912),	// FCVTASv2f32
    UINT64_C(1315031040),	// FCVTASv2f64
    UINT64_C(242862080),	// FCVTASv4f16
    UINT64_C(1310836736),	// FCVTASv4f32
    UINT64_C(1316603904),	// FCVTASv8f16
    UINT64_C(509935616),	// FCVTAUUWDr
    UINT64_C(518324224),	// FCVTAUUWHr
    UINT64_C(505741312),	// FCVTAUUWSr
    UINT64_C(2657419264),	// FCVTAUUXDr
    UINT64_C(2665807872),	// FCVTAUUXHr
    UINT64_C(2653224960),	// FCVTAUUXSr
    UINT64_C(2121910272),	// FCVTAUv1f16
    UINT64_C(2116143104),	// FCVTAUv1i32
    UINT64_C(2120337408),	// FCVTAUv1i64
    UINT64_C(773965824),	// FCVTAUv2f32
    UINT64_C(1851901952),	// FCVTAUv2f64
    UINT64_C(779732992),	// FCVTAUv4f16
    UINT64_C(1847707648),	// FCVTAUv4f32
    UINT64_C(1853474816),	// FCVTAUv8f16
    UINT64_C(518176768),	// FCVTDHr
    UINT64_C(505593856),	// FCVTDSr
    UINT64_C(509853696),	// FCVTHDr
    UINT64_C(505659392),	// FCVTHSr
    UINT64_C(241268736),	// FCVTLv2i32
    UINT64_C(237074432),	// FCVTLv4i16
    UINT64_C(1315010560),	// FCVTLv4i32
    UINT64_C(1310816256),	// FCVTLv8i16
    UINT64_C(510656512),	// FCVTMSUWDr
    UINT64_C(519045120),	// FCVTMSUWHr
    UINT64_C(506462208),	// FCVTMSUWSr
    UINT64_C(2658140160),	// FCVTMSUXDr
    UINT64_C(2666528768),	// FCVTMSUXHr
    UINT64_C(2653945856),	// FCVTMSUXSr
    UINT64_C(1585035264),	// FCVTMSv1f16
    UINT64_C(1579268096),	// FCVTMSv1i32
    UINT64_C(1583462400),	// FCVTMSv1i64
    UINT64_C(237090816),	// FCVTMSv2f32
    UINT64_C(1315026944),	// FCVTMSv2f64
    UINT64_C(242857984),	// FCVTMSv4f16
    UINT64_C(1310832640),	// FCVTMSv4f32
    UINT64_C(1316599808),	// FCVTMSv8f16
    UINT64_C(510722048),	// FCVTMUUWDr
    UINT64_C(519110656),	// FCVTMUUWHr
    UINT64_C(506527744),	// FCVTMUUWSr
    UINT64_C(2658205696),	// FCVTMUUXDr
    UINT64_C(2666594304),	// FCVTMUUXHr
    UINT64_C(2654011392),	// FCVTMUUXSr
    UINT64_C(2121906176),	// FCVTMUv1f16
    UINT64_C(2116139008),	// FCVTMUv1i32
    UINT64_C(2120333312),	// FCVTMUv1i64
    UINT64_C(773961728),	// FCVTMUv2f32
    UINT64_C(1851897856),	// FCVTMUv2f64
    UINT64_C(779728896),	// FCVTMUv4f16
    UINT64_C(1847703552),	// FCVTMUv4f32
    UINT64_C(1853470720),	// FCVTMUv8f16
    UINT64_C(509607936),	// FCVTNSUWDr
    UINT64_C(517996544),	// FCVTNSUWHr
    UINT64_C(505413632),	// FCVTNSUWSr
    UINT64_C(2657091584),	// FCVTNSUXDr
    UINT64_C(2665480192),	// FCVTNSUXHr
    UINT64_C(2652897280),	// FCVTNSUXSr
    UINT64_C(1585031168),	// FCVTNSv1f16
    UINT64_C(1579264000),	// FCVTNSv1i32
    UINT64_C(1583458304),	// FCVTNSv1i64
    UINT64_C(237086720),	// FCVTNSv2f32
    UINT64_C(1315022848),	// FCVTNSv2f64
    UINT64_C(242853888),	// FCVTNSv4f16
    UINT64_C(1310828544),	// FCVTNSv4f32
    UINT64_C(1316595712),	// FCVTNSv8f16
    UINT64_C(509673472),	// FCVTNUUWDr
    UINT64_C(518062080),	// FCVTNUUWHr
    UINT64_C(505479168),	// FCVTNUUWSr
    UINT64_C(2657157120),	// FCVTNUUXDr
    UINT64_C(2665545728),	// FCVTNUUXHr
    UINT64_C(2652962816),	// FCVTNUUXSr
    UINT64_C(2121902080),	// FCVTNUv1f16
    UINT64_C(2116134912),	// FCVTNUv1i32
    UINT64_C(2120329216),	// FCVTNUv1i64
    UINT64_C(773957632),	// FCVTNUv2f32
    UINT64_C(1851893760),	// FCVTNUv2f64
    UINT64_C(779724800),	// FCVTNUv4f16
    UINT64_C(1847699456),	// FCVTNUv4f32
    UINT64_C(1853466624),	// FCVTNUv8f16
    UINT64_C(241264640),	// FCVTNv2i32
    UINT64_C(237070336),	// FCVTNv4i16
    UINT64_C(1315006464),	// FCVTNv4i32
    UINT64_C(1310812160),	// FCVTNv8i16
    UINT64_C(510132224),	// FCVTPSUWDr
    UINT64_C(518520832),	// FCVTPSUWHr
    UINT64_C(505937920),	// FCVTPSUWSr
    UINT64_C(2657615872),	// FCVTPSUXDr
    UINT64_C(2666004480),	// FCVTPSUXHr
    UINT64_C(2653421568),	// FCVTPSUXSr
    UINT64_C(1593419776),	// FCVTPSv1f16
    UINT64_C(1587652608),	// FCVTPSv1i32
    UINT64_C(1591846912),	// FCVTPSv1i64
    UINT64_C(245475328),	// FCVTPSv2f32
    UINT64_C(1323411456),	// FCVTPSv2f64
    UINT64_C(251242496),	// FCVTPSv4f16
    UINT64_C(1319217152),	// FCVTPSv4f32
    UINT64_C(1324984320),	// FCVTPSv8f16
    UINT64_C(510197760),	// FCVTPUUWDr
    UINT64_C(518586368),	// FCVTPUUWHr
    UINT64_C(506003456),	// FCVTPUUWSr
    UINT64_C(2657681408),	// FCVTPUUXDr
    UINT64_C(2666070016),	// FCVTPUUXHr
    UINT64_C(2653487104),	// FCVTPUUXSr
    UINT64_C(2130290688),	// FCVTPUv1f16
    UINT64_C(2124523520),	// FCVTPUv1i32
    UINT64_C(2128717824),	// FCVTPUv1i64
    UINT64_C(782346240),	// FCVTPUv2f32
    UINT64_C(1860282368),	// FCVTPUv2f64
    UINT64_C(788113408),	// FCVTPUv4f16
    UINT64_C(1856088064),	// FCVTPUv4f32
    UINT64_C(1861855232),	// FCVTPUv8f16
    UINT64_C(509755392),	// FCVTSDr
    UINT64_C(518144000),	// FCVTSHr
    UINT64_C(2120312832),	// FCVTXNv1i64
    UINT64_C(778135552),	// FCVTXNv2f32
    UINT64_C(1851877376),	// FCVTXNv4f32
    UINT64_C(509116416),	// FCVTZSSWDri
    UINT64_C(517505024),	// FCVTZSSWHri
    UINT64_C(504922112),	// FCVTZSSWSri
    UINT64_C(2656567296),	// FCVTZSSXDri
    UINT64_C(2664955904),	// FCVTZSSXHri
    UINT64_C(2652372992),	// FCVTZSSXSri
    UINT64_C(511180800),	// FCVTZSUWDr
    UINT64_C(519569408),	// FCVTZSUWHr
    UINT64_C(506986496),	// FCVTZSUWSr
    UINT64_C(2658664448),	// FCVTZSUXDr
    UINT64_C(2667053056),	// FCVTZSUXHr
    UINT64_C(2654470144),	// FCVTZSUXSr
    UINT64_C(1598094336),	// FCVTZSd
    UINT64_C(1594948608),	// FCVTZSh
    UINT64_C(1595997184),	// FCVTZSs
    UINT64_C(1593423872),	// FCVTZSv1f16
    UINT64_C(1587656704),	// FCVTZSv1i32
    UINT64_C(1591851008),	// FCVTZSv1i64
    UINT64_C(245479424),	// FCVTZSv2f32
    UINT64_C(1323415552),	// FCVTZSv2f64
    UINT64_C(253819904),	// FCVTZSv2i32_shift
    UINT64_C(1329658880),	// FCVTZSv2i64_shift
    UINT64_C(251246592),	// FCVTZSv4f16
    UINT64_C(1319221248),	// FCVTZSv4f32
    UINT64_C(252771328),	// FCVTZSv4i16_shift
    UINT64_C(1327561728),	// FCVTZSv4i32_shift
    UINT64_C(1324988416),	// FCVTZSv8f16
    UINT64_C(1326513152),	// FCVTZSv8i16_shift
    UINT64_C(509181952),	// FCVTZUSWDri
    UINT64_C(517570560),	// FCVTZUSWHri
    UINT64_C(504987648),	// FCVTZUSWSri
    UINT64_C(2656632832),	// FCVTZUSXDri
    UINT64_C(2665021440),	// FCVTZUSXHri
    UINT64_C(2652438528),	// FCVTZUSXSri
    UINT64_C(511246336),	// FCVTZUUWDr
    UINT64_C(519634944),	// FCVTZUUWHr
    UINT64_C(507052032),	// FCVTZUUWSr
    UINT64_C(2658729984),	// FCVTZUUXDr
    UINT64_C(2667118592),	// FCVTZUUXHr
    UINT64_C(2654535680),	// FCVTZUUXSr
    UINT64_C(2134965248),	// FCVTZUd
    UINT64_C(2131819520),	// FCVTZUh
    UINT64_C(2132868096),	// FCVTZUs
    UINT64_C(2130294784),	// FCVTZUv1f16
    UINT64_C(2124527616),	// FCVTZUv1i32
    UINT64_C(2128721920),	// FCVTZUv1i64
    UINT64_C(782350336),	// FCVTZUv2f32
    UINT64_C(1860286464),	// FCVTZUv2f64
    UINT64_C(790690816),	// FCVTZUv2i32_shift
    UINT64_C(1866529792),	// FCVTZUv2i64_shift
    UINT64_C(788117504),	// FCVTZUv4f16
    UINT64_C(1856092160),	// FCVTZUv4f32
    UINT64_C(789642240),	// FCVTZUv4i16_shift
    UINT64_C(1864432640),	// FCVTZUv4i32_shift
    UINT64_C(1861859328),	// FCVTZUv8f16
    UINT64_C(1863384064),	// FCVTZUv8i16_shift
    UINT64_C(509614080),	// FDIVDrr
    UINT64_C(518002688),	// FDIVHrr
    UINT64_C(505419776),	// FDIVSrr
    UINT64_C(773913600),	// FDIVv2f32
    UINT64_C(1851849728),	// FDIVv2f64
    UINT64_C(775961600),	// FDIVv4f16
    UINT64_C(1847655424),	// FDIVv4f32
    UINT64_C(1849703424),	// FDIVv8f16
    UINT64_C(524288000),	// FMADDDrrr
    UINT64_C(532676608),	// FMADDHrrr
    UINT64_C(520093696),	// FMADDSrrr
    UINT64_C(509626368),	// FMAXDrr
    UINT64_C(518014976),	// FMAXHrr
    UINT64_C(509634560),	// FMAXNMDrr
    UINT64_C(518023168),	// FMAXNMHrr
    UINT64_C(773899264),	// FMAXNMPv2f32
    UINT64_C(1851835392),	// FMAXNMPv2f64
    UINT64_C(1580255232),	// FMAXNMPv2i16p
    UINT64_C(2117126144),	// FMAXNMPv2i32p
    UINT64_C(2121320448),	// FMAXNMPv2i64p
    UINT64_C(775947264),	// FMAXNMPv4f16
    UINT64_C(1847641088),	// FMAXNMPv4f32
    UINT64_C(1849689088),	// FMAXNMPv8f16
    UINT64_C(505440256),	// FMAXNMSrr
    UINT64_C(238077952),	// FMAXNMVv4i16v
    UINT64_C(1848690688),	// FMAXNMVv4i32v
    UINT64_C(1311819776),	// FMAXNMVv8i16v
    UINT64_C(237028352),	// FMAXNMv2f32
    UINT64_C(1314964480),	// FMAXNMv2f64
    UINT64_C(239076352),	// FMAXNMv4f16
    UINT64_C(1310770176),	// FMAXNMv4f32
    UINT64_C(1312818176),	// FMAXNMv8f16
    UINT64_C(773911552),	// FMAXPv2f32
    UINT64_C(1851847680),	// FMAXPv2f64
    UINT64_C(1580267520),	// FMAXPv2i16p
    UINT64_C(2117138432),	// FMAXPv2i32p
    UINT64_C(2121332736),	// FMAXPv2i64p
    UINT64_C(775959552),	// FMAXPv4f16
    UINT64_C(1847653376),	// FMAXPv4f32
    UINT64_C(1849701376),	// FMAXPv8f16
    UINT64_C(505432064),	// FMAXSrr
    UINT64_C(238090240),	// FMAXVv4i16v
    UINT64_C(1848702976),	// FMAXVv4i32v
    UINT64_C(1311832064),	// FMAXVv8i16v
    UINT64_C(237040640),	// FMAXv2f32
    UINT64_C(1314976768),	// FMAXv2f64
    UINT64_C(239088640),	// FMAXv4f16
    UINT64_C(1310782464),	// FMAXv4f32
    UINT64_C(1312830464),	// FMAXv8f16
    UINT64_C(509630464),	// FMINDrr
    UINT64_C(518019072),	// FMINHrr
    UINT64_C(509638656),	// FMINNMDrr
    UINT64_C(518027264),	// FMINNMHrr
    UINT64_C(782287872),	// FMINNMPv2f32
    UINT64_C(1860224000),	// FMINNMPv2f64
    UINT64_C(1588643840),	// FMINNMPv2i16p
    UINT64_C(2125514752),	// FMINNMPv2i32p
    UINT64_C(2129709056),	// FMINNMPv2i64p
    UINT64_C(784335872),	// FMINNMPv4f16
    UINT64_C(1856029696),	// FMINNMPv4f32
    UINT64_C(1858077696),	// FMINNMPv8f16
    UINT64_C(505444352),	// FMINNMSrr
    UINT64_C(246466560),	// FMINNMVv4i16v
    UINT64_C(1857079296),	// FMINNMVv4i32v
    UINT64_C(1320208384),	// FMINNMVv8i16v
    UINT64_C(245416960),	// FMINNMv2f32
    UINT64_C(1323353088),	// FMINNMv2f64
    UINT64_C(247464960),	// FMINNMv4f16
    UINT64_C(1319158784),	// FMINNMv4f32
    UINT64_C(1321206784),	// FMINNMv8f16
    UINT64_C(782300160),	// FMINPv2f32
    UINT64_C(1860236288),	// FMINPv2f64
    UINT64_C(1588656128),	// FMINPv2i16p
    UINT64_C(2125527040),	// FMINPv2i32p
    UINT64_C(2129721344),	// FMINPv2i64p
    UINT64_C(784348160),	// FMINPv4f16
    UINT64_C(1856041984),	// FMINPv4f32
    UINT64_C(1858089984),	// FMINPv8f16
    UINT64_C(505436160),	// FMINSrr
    UINT64_C(246478848),	// FMINVv4i16v
    UINT64_C(1857091584),	// FMINVv4i32v
    UINT64_C(1320220672),	// FMINVv8i16v
    UINT64_C(245429248),	// FMINv2f32
    UINT64_C(1323365376),	// FMINv2f64
    UINT64_C(247477248),	// FMINv4f16
    UINT64_C(1319171072),	// FMINv4f32
    UINT64_C(1321219072),	// FMINv8f16
    UINT64_C(1593839616),	// FMLAv1i16_indexed
    UINT64_C(1602228224),	// FMLAv1i32_indexed
    UINT64_C(1606422528),	// FMLAv1i64_indexed
    UINT64_C(237030400),	// FMLAv2f32
    UINT64_C(1314966528),	// FMLAv2f64
    UINT64_C(260050944),	// FMLAv2i32_indexed
    UINT64_C(1337987072),	// FMLAv2i64_indexed
    UINT64_C(239078400),	// FMLAv4f16
    UINT64_C(1310772224),	// FMLAv4f32
    UINT64_C(251662336),	// FMLAv4i16_indexed
    UINT64_C(1333792768),	// FMLAv4i32_indexed
    UINT64_C(1312820224),	// FMLAv8f16
    UINT64_C(1325404160),	// FMLAv8i16_indexed
    UINT64_C(1593856000),	// FMLSv1i16_indexed
    UINT64_C(1602244608),	// FMLSv1i32_indexed
    UINT64_C(1606438912),	// FMLSv1i64_indexed
    UINT64_C(245419008),	// FMLSv2f32
    UINT64_C(1323355136),	// FMLSv2f64
    UINT64_C(260067328),	// FMLSv2i32_indexed
    UINT64_C(1338003456),	// FMLSv2i64_indexed
    UINT64_C(247467008),	// FMLSv4f16
    UINT64_C(1319160832),	// FMLSv4f32
    UINT64_C(251678720),	// FMLSv4i16_indexed
    UINT64_C(1333809152),	// FMLSv4i32_indexed
    UINT64_C(1321208832),	// FMLSv8f16
    UINT64_C(1325420544),	// FMLSv8i16_indexed
    UINT64_C(0),	// FMOVD0
    UINT64_C(2662203392),	// FMOVDXHighr
    UINT64_C(2657484800),	// FMOVDXr
    UINT64_C(509612032),	// FMOVDi
    UINT64_C(509624320),	// FMOVDr
    UINT64_C(518389760),	// FMOVHWr
    UINT64_C(2665873408),	// FMOVHXr
    UINT64_C(518000640),	// FMOVHi
    UINT64_C(518012928),	// FMOVHr
    UINT64_C(0),	// FMOVS0
    UINT64_C(505806848),	// FMOVSWr
    UINT64_C(505417728),	// FMOVSi
    UINT64_C(505430016),	// FMOVSr
    UINT64_C(518455296),	// FMOVWHr
    UINT64_C(505872384),	// FMOVWSr
    UINT64_C(2662268928),	// FMOVXDHighr
    UINT64_C(2657550336),	// FMOVXDr
    UINT64_C(2665938944),	// FMOVXHr
    UINT64_C(251720704),	// FMOVv2f32_ns
    UINT64_C(1862333440),	// FMOVv2f64_ns
    UINT64_C(251722752),	// FMOVv4f16_ns
    UINT64_C(1325462528),	// FMOVv4f32_ns
    UINT64_C(1325464576),	// FMOVv8f16_ns
    UINT64_C(524320768),	// FMSUBDrrr
    UINT64_C(532709376),	// FMSUBHrrr
    UINT64_C(520126464),	// FMSUBSrrr
    UINT64_C(509609984),	// FMULDrr
    UINT64_C(517998592),	// FMULHrr
    UINT64_C(505415680),	// FMULSrr
    UINT64_C(1581259776),	// FMULX16
    UINT64_C(1579211776),	// FMULX32
    UINT64_C(1583406080),	// FMULX64
    UINT64_C(2130743296),	// FMULXv1i16_indexed
    UINT64_C(2139131904),	// FMULXv1i32_indexed
    UINT64_C(2143326208),	// FMULXv1i64_indexed
    UINT64_C(237034496),	// FMULXv2f32
    UINT64_C(1314970624),	// FMULXv2f64
    UINT64_C(796954624),	// FMULXv2i32_indexed
    UINT64_C(1874890752),	// FMULXv2i64_indexed
    UINT64_C(239082496),	// FMULXv4f16
    UINT64_C(1310776320),	// FMULXv4f32
    UINT64_C(788566016),	// FMULXv4i16_indexed
    UINT64_C(1870696448),	// FMULXv4i32_indexed
    UINT64_C(1312824320),	// FMULXv8f16
    UINT64_C(1862307840),	// FMULXv8i16_indexed
    UINT64_C(1593872384),	// FMULv1i16_indexed
    UINT64_C(1602260992),	// FMULv1i32_indexed
    UINT64_C(1606455296),	// FMULv1i64_indexed
    UINT64_C(773905408),	// FMULv2f32
    UINT64_C(1851841536),	// FMULv2f64
    UINT64_C(260083712),	// FMULv2i32_indexed
    UINT64_C(1338019840),	// FMULv2i64_indexed
    UINT64_C(775953408),	// FMULv4f16
    UINT64_C(1847647232),	// FMULv4f32
    UINT64_C(251695104),	// FMULv4i16_indexed
    UINT64_C(1333825536),	// FMULv4i32_indexed
    UINT64_C(1849695232),	// FMULv8f16
    UINT64_C(1325436928),	// FMULv8i16_indexed
    UINT64_C(509689856),	// FNEGDr
    UINT64_C(518078464),	// FNEGHr
    UINT64_C(505495552),	// FNEGSr
    UINT64_C(782301184),	// FNEGv2f32
    UINT64_C(1860237312),	// FNEGv2f64
    UINT64_C(788068352),	// FNEGv4f16
    UINT64_C(1856043008),	// FNEGv4f32
    UINT64_C(1861810176),	// FNEGv8f16
    UINT64_C(526385152),	// FNMADDDrrr
    UINT64_C(534773760),	// FNMADDHrrr
    UINT64_C(522190848),	// FNMADDSrrr
    UINT64_C(526417920),	// FNMSUBDrrr
    UINT64_C(534806528),	// FNMSUBHrrr
    UINT64_C(522223616),	// FNMSUBSrrr
    UINT64_C(509642752),	// FNMULDrr
    UINT64_C(518031360),	// FNMULHrr
    UINT64_C(505448448),	// FNMULSrr
    UINT64_C(1593432064),	// FRECPEv1f16
    UINT64_C(1587664896),	// FRECPEv1i32
    UINT64_C(1591859200),	// FRECPEv1i64
    UINT64_C(245487616),	// FRECPEv2f32
    UINT64_C(1323423744),	// FRECPEv2f64
    UINT64_C(251254784),	// FRECPEv4f16
    UINT64_C(1319229440),	// FRECPEv4f32
    UINT64_C(1324996608),	// FRECPEv8f16
    UINT64_C(1581267968),	// FRECPS16
    UINT64_C(1579219968),	// FRECPS32
    UINT64_C(1583414272),	// FRECPS64
    UINT64_C(237042688),	// FRECPSv2f32
    UINT64_C(1314978816),	// FRECPSv2f64
    UINT64_C(239090688),	// FRECPSv4f16
    UINT64_C(1310784512),	// FRECPSv4f32
    UINT64_C(1312832512),	// FRECPSv8f16
    UINT64_C(1593440256),	// FRECPXv1f16
    UINT64_C(1587673088),	// FRECPXv1i32
    UINT64_C(1591867392),	// FRECPXv1i64
    UINT64_C(510017536),	// FRINTADr
    UINT64_C(518406144),	// FRINTAHr
    UINT64_C(505823232),	// FRINTASr
    UINT64_C(773949440),	// FRINTAv2f32
    UINT64_C(1851885568),	// FRINTAv2f64
    UINT64_C(779716608),	// FRINTAv4f16
    UINT64_C(1847691264),	// FRINTAv4f32
    UINT64_C(1853458432),	// FRINTAv8f16
    UINT64_C(510115840),	// FRINTIDr
    UINT64_C(518504448),	// FRINTIHr
    UINT64_C(505921536),	// FRINTISr
    UINT64_C(782342144),	// FRINTIv2f32
    UINT64_C(1860278272),	// FRINTIv2f64
    UINT64_C(788109312),	// FRINTIv4f16
    UINT64_C(1856083968),	// FRINTIv4f32
    UINT64_C(1861851136),	// FRINTIv8f16
    UINT64_C(509952000),	// FRINTMDr
    UINT64_C(518340608),	// FRINTMHr
    UINT64_C(505757696),	// FRINTMSr
    UINT64_C(237082624),	// FRINTMv2f32
    UINT64_C(1315018752),	// FRINTMv2f64
    UINT64_C(242849792),	// FRINTMv4f16
    UINT64_C(1310824448),	// FRINTMv4f32
    UINT64_C(1316591616),	// FRINTMv8f16
    UINT64_C(509886464),	// FRINTNDr
    UINT64_C(518275072),	// FRINTNHr
    UINT64_C(505692160),	// FRINTNSr
    UINT64_C(237078528),	// FRINTNv2f32
    UINT64_C(1315014656),	// FRINTNv2f64
    UINT64_C(242845696),	// FRINTNv4f16
    UINT64_C(1310820352),	// FRINTNv4f32
    UINT64_C(1316587520),	// FRINTNv8f16
    UINT64_C(509919232),	// FRINTPDr
    UINT64_C(518307840),	// FRINTPHr
    UINT64_C(505724928),	// FRINTPSr
    UINT64_C(245467136),	// FRINTPv2f32
    UINT64_C(1323403264),	// FRINTPv2f64
    UINT64_C(251234304),	// FRINTPv4f16
    UINT64_C(1319208960),	// FRINTPv4f32
    UINT64_C(1324976128),	// FRINTPv8f16
    UINT64_C(510083072),	// FRINTXDr
    UINT64_C(518471680),	// FRINTXHr
    UINT64_C(505888768),	// FRINTXSr
    UINT64_C(773953536),	// FRINTXv2f32
    UINT64_C(1851889664),	// FRINTXv2f64
    UINT64_C(779720704),	// FRINTXv4f16
    UINT64_C(1847695360),	// FRINTXv4f32
    UINT64_C(1853462528),	// FRINTXv8f16
    UINT64_C(509984768),	// FRINTZDr
    UINT64_C(518373376),	// FRINTZHr
    UINT64_C(505790464),	// FRINTZSr
    UINT64_C(245471232),	// FRINTZv2f32
    UINT64_C(1323407360),	// FRINTZv2f64
    UINT64_C(251238400),	// FRINTZv4f16
    UINT64_C(1319213056),	// FRINTZv4f32
    UINT64_C(1324980224),	// FRINTZv8f16
    UINT64_C(2130302976),	// FRSQRTEv1f16
    UINT64_C(2124535808),	// FRSQRTEv1i32
    UINT64_C(2128730112),	// FRSQRTEv1i64
    UINT64_C(782358528),	// FRSQRTEv2f32
    UINT64_C(1860294656),	// FRSQRTEv2f64
    UINT64_C(788125696),	// FRSQRTEv4f16
    UINT64_C(1856100352),	// FRSQRTEv4f32
    UINT64_C(1861867520),	// FRSQRTEv8f16
    UINT64_C(1589656576),	// FRSQRTS16
    UINT64_C(1587608576),	// FRSQRTS32
    UINT64_C(1591802880),	// FRSQRTS64
    UINT64_C(245431296),	// FRSQRTSv2f32
    UINT64_C(1323367424),	// FRSQRTSv2f64
    UINT64_C(247479296),	// FRSQRTSv4f16
    UINT64_C(1319173120),	// FRSQRTSv4f32
    UINT64_C(1321221120),	// FRSQRTSv8f16
    UINT64_C(509722624),	// FSQRTDr
    UINT64_C(518111232),	// FSQRTHr
    UINT64_C(505528320),	// FSQRTSr
    UINT64_C(782366720),	// FSQRTv2f32
    UINT64_C(1860302848),	// FSQRTv2f64
    UINT64_C(788133888),	// FSQRTv4f16
    UINT64_C(1856108544),	// FSQRTv4f32
    UINT64_C(1861875712),	// FSQRTv8f16
    UINT64_C(509622272),	// FSUBDrr
    UINT64_C(518010880),	// FSUBHrr
    UINT64_C(505427968),	// FSUBSrr
    UINT64_C(245421056),	// FSUBv2f32
    UINT64_C(1323357184),	// FSUBv2f64
    UINT64_C(247469056),	// FSUBv4f16
    UINT64_C(1319162880),	// FSUBv4f32
    UINT64_C(1321210880),	// FSUBv8f16
    UINT64_C(3573751839),	// HINT
    UINT64_C(3560964096),	// HLT
    UINT64_C(3556769794),	// HVC
    UINT64_C(1308761088),	// INSvi16gpr
    UINT64_C(1845625856),	// INSvi16lane
    UINT64_C(1308892160),	// INSvi32gpr
    UINT64_C(1845756928),	// INSvi32lane
    UINT64_C(1309154304),	// INSvi64gpr
    UINT64_C(1846019072),	// INSvi64lane
    UINT64_C(1308695552),	// INSvi8gpr
    UINT64_C(1845560320),	// INSvi8lane
    UINT64_C(3573756127),	// ISB
    UINT64_C(1279270912),	// LD1Fourv16b
    UINT64_C(1287659520),	// LD1Fourv16b_POST
    UINT64_C(205532160),	// LD1Fourv1d
    UINT64_C(213920768),	// LD1Fourv1d_POST
    UINT64_C(1279273984),	// LD1Fourv2d
    UINT64_C(1287662592),	// LD1Fourv2d_POST
    UINT64_C(205531136),	// LD1Fourv2s
    UINT64_C(213919744),	// LD1Fourv2s_POST
    UINT64_C(205530112),	// LD1Fourv4h
    UINT64_C(213918720),	// LD1Fourv4h_POST
    UINT64_C(1279272960),	// LD1Fourv4s
    UINT64_C(1287661568),	// LD1Fourv4s_POST
    UINT64_C(205529088),	// LD1Fourv8b
    UINT64_C(213917696),	// LD1Fourv8b_POST
    UINT64_C(1279271936),	// LD1Fourv8h
    UINT64_C(1287660544),	// LD1Fourv8h_POST
    UINT64_C(1279291392),	// LD1Onev16b
    UINT64_C(1287680000),	// LD1Onev16b_POST
    UINT64_C(205552640),	// LD1Onev1d
    UINT64_C(213941248),	// LD1Onev1d_POST
    UINT64_C(1279294464),	// LD1Onev2d
    UINT64_C(1287683072),	// LD1Onev2d_POST
    UINT64_C(205551616),	// LD1Onev2s
    UINT64_C(213940224),	// LD1Onev2s_POST
    UINT64_C(205550592),	// LD1Onev4h
    UINT64_C(213939200),	// LD1Onev4h_POST
    UINT64_C(1279293440),	// LD1Onev4s
    UINT64_C(1287682048),	// LD1Onev4s_POST
    UINT64_C(205549568),	// LD1Onev8b
    UINT64_C(213938176),	// LD1Onev8b_POST
    UINT64_C(1279292416),	// LD1Onev8h
    UINT64_C(1287681024),	// LD1Onev8h_POST
    UINT64_C(1296089088),	// LD1Rv16b
    UINT64_C(1304477696),	// LD1Rv16b_POST
    UINT64_C(222350336),	// LD1Rv1d
    UINT64_C(230738944),	// LD1Rv1d_POST
    UINT64_C(1296092160),	// LD1Rv2d
    UINT64_C(1304480768),	// LD1Rv2d_POST
    UINT64_C(222349312),	// LD1Rv2s
    UINT64_C(230737920),	// LD1Rv2s_POST
    UINT64_C(222348288),	// LD1Rv4h
    UINT64_C(230736896),	// LD1Rv4h_POST
    UINT64_C(1296091136),	// LD1Rv4s
    UINT64_C(1304479744),	// LD1Rv4s_POST
    UINT64_C(222347264),	// LD1Rv8b
    UINT64_C(230735872),	// LD1Rv8b_POST
    UINT64_C(1296090112),	// LD1Rv8h
    UINT64_C(1304478720),	// LD1Rv8h_POST
    UINT64_C(1279287296),	// LD1Threev16b
    UINT64_C(1287675904),	// LD1Threev16b_POST
    UINT64_C(205548544),	// LD1Threev1d
    UINT64_C(213937152),	// LD1Threev1d_POST
    UINT64_C(1279290368),	// LD1Threev2d
    UINT64_C(1287678976),	// LD1Threev2d_POST
    UINT64_C(205547520),	// LD1Threev2s
    UINT64_C(213936128),	// LD1Threev2s_POST
    UINT64_C(205546496),	// LD1Threev4h
    UINT64_C(213935104),	// LD1Threev4h_POST
    UINT64_C(1279289344),	// LD1Threev4s
    UINT64_C(1287677952),	// LD1Threev4s_POST
    UINT64_C(205545472),	// LD1Threev8b
    UINT64_C(213934080),	// LD1Threev8b_POST
    UINT64_C(1279288320),	// LD1Threev8h
    UINT64_C(1287676928),	// LD1Threev8h_POST
    UINT64_C(1279303680),	// LD1Twov16b
    UINT64_C(1287692288),	// LD1Twov16b_POST
    UINT64_C(205564928),	// LD1Twov1d
    UINT64_C(213953536),	// LD1Twov1d_POST
    UINT64_C(1279306752),	// LD1Twov2d
    UINT64_C(1287695360),	// LD1Twov2d_POST
    UINT64_C(205563904),	// LD1Twov2s
    UINT64_C(213952512),	// LD1Twov2s_POST
    UINT64_C(205562880),	// LD1Twov4h
    UINT64_C(213951488),	// LD1Twov4h_POST
    UINT64_C(1279305728),	// LD1Twov4s
    UINT64_C(1287694336),	// LD1Twov4s_POST
    UINT64_C(205561856),	// LD1Twov8b
    UINT64_C(213950464),	// LD1Twov8b_POST
    UINT64_C(1279304704),	// LD1Twov8h
    UINT64_C(1287693312),	// LD1Twov8h_POST
    UINT64_C(222314496),	// LD1i16
    UINT64_C(230703104),	// LD1i16_POST
    UINT64_C(222330880),	// LD1i32
    UINT64_C(230719488),	// LD1i32_POST
    UINT64_C(222331904),	// LD1i64
    UINT64_C(230720512),	// LD1i64_POST
    UINT64_C(222298112),	// LD1i8
    UINT64_C(230686720),	// LD1i8_POST
    UINT64_C(1298186240),	// LD2Rv16b
    UINT64_C(1306574848),	// LD2Rv16b_POST
    UINT64_C(224447488),	// LD2Rv1d
    UINT64_C(232836096),	// LD2Rv1d_POST
    UINT64_C(1298189312),	// LD2Rv2d
    UINT64_C(1306577920),	// LD2Rv2d_POST
    UINT64_C(224446464),	// LD2Rv2s
    UINT64_C(232835072),	// LD2Rv2s_POST
    UINT64_C(224445440),	// LD2Rv4h
    UINT64_C(232834048),	// LD2Rv4h_POST
    UINT64_C(1298188288),	// LD2Rv4s
    UINT64_C(1306576896),	// LD2Rv4s_POST
    UINT64_C(224444416),	// LD2Rv8b
    UINT64_C(232833024),	// LD2Rv8b_POST
    UINT64_C(1298187264),	// LD2Rv8h
    UINT64_C(1306575872),	// LD2Rv8h_POST
    UINT64_C(1279295488),	// LD2Twov16b
    UINT64_C(1287684096),	// LD2Twov16b_POST
    UINT64_C(1279298560),	// LD2Twov2d
    UINT64_C(1287687168),	// LD2Twov2d_POST
    UINT64_C(205555712),	// LD2Twov2s
    UINT64_C(213944320),	// LD2Twov2s_POST
    UINT64_C(205554688),	// LD2Twov4h
    UINT64_C(213943296),	// LD2Twov4h_POST
    UINT64_C(1279297536),	// LD2Twov4s
    UINT64_C(1287686144),	// LD2Twov4s_POST
    UINT64_C(205553664),	// LD2Twov8b
    UINT64_C(213942272),	// LD2Twov8b_POST
    UINT64_C(1279296512),	// LD2Twov8h
    UINT64_C(1287685120),	// LD2Twov8h_POST
    UINT64_C(224411648),	// LD2i16
    UINT64_C(232800256),	// LD2i16_POST
    UINT64_C(224428032),	// LD2i32
    UINT64_C(232816640),	// LD2i32_POST
    UINT64_C(224429056),	// LD2i64
    UINT64_C(232817664),	// LD2i64_POST
    UINT64_C(224395264),	// LD2i8
    UINT64_C(232783872),	// LD2i8_POST
    UINT64_C(1296097280),	// LD3Rv16b
    UINT64_C(1304485888),	// LD3Rv16b_POST
    UINT64_C(222358528),	// LD3Rv1d
    UINT64_C(230747136),	// LD3Rv1d_POST
    UINT64_C(1296100352),	// LD3Rv2d
    UINT64_C(1304488960),	// LD3Rv2d_POST
    UINT64_C(222357504),	// LD3Rv2s
    UINT64_C(230746112),	// LD3Rv2s_POST
    UINT64_C(222356480),	// LD3Rv4h
    UINT64_C(230745088),	// LD3Rv4h_POST
    UINT64_C(1296099328),	// LD3Rv4s
    UINT64_C(1304487936),	// LD3Rv4s_POST
    UINT64_C(222355456),	// LD3Rv8b
    UINT64_C(230744064),	// LD3Rv8b_POST
    UINT64_C(1296098304),	// LD3Rv8h
    UINT64_C(1304486912),	// LD3Rv8h_POST
    UINT64_C(1279279104),	// LD3Threev16b
    UINT64_C(1287667712),	// LD3Threev16b_POST
    UINT64_C(1279282176),	// LD3Threev2d
    UINT64_C(1287670784),	// LD3Threev2d_POST
    UINT64_C(205539328),	// LD3Threev2s
    UINT64_C(213927936),	// LD3Threev2s_POST
    UINT64_C(205538304),	// LD3Threev4h
    UINT64_C(213926912),	// LD3Threev4h_POST
    UINT64_C(1279281152),	// LD3Threev4s
    UINT64_C(1287669760),	// LD3Threev4s_POST
    UINT64_C(205537280),	// LD3Threev8b
    UINT64_C(213925888),	// LD3Threev8b_POST
    UINT64_C(1279280128),	// LD3Threev8h
    UINT64_C(1287668736),	// LD3Threev8h_POST
    UINT64_C(222322688),	// LD3i16
    UINT64_C(230711296),	// LD3i16_POST
    UINT64_C(222339072),	// LD3i32
    UINT64_C(230727680),	// LD3i32_POST
    UINT64_C(222340096),	// LD3i64
    UINT64_C(230728704),	// LD3i64_POST
    UINT64_C(222306304),	// LD3i8
    UINT64_C(230694912),	// LD3i8_POST
    UINT64_C(1279262720),	// LD4Fourv16b
    UINT64_C(1287651328),	// LD4Fourv16b_POST
    UINT64_C(1279265792),	// LD4Fourv2d
    UINT64_C(1287654400),	// LD4Fourv2d_POST
    UINT64_C(205522944),	// LD4Fourv2s
    UINT64_C(213911552),	// LD4Fourv2s_POST
    UINT64_C(205521920),	// LD4Fourv4h
    UINT64_C(213910528),	// LD4Fourv4h_POST
    UINT64_C(1279264768),	// LD4Fourv4s
    UINT64_C(1287653376),	// LD4Fourv4s_POST
    UINT64_C(205520896),	// LD4Fourv8b
    UINT64_C(213909504),	// LD4Fourv8b_POST
    UINT64_C(1279263744),	// LD4Fourv8h
    UINT64_C(1287652352),	// LD4Fourv8h_POST
    UINT64_C(1298194432),	// LD4Rv16b
    UINT64_C(1306583040),	// LD4Rv16b_POST
    UINT64_C(224455680),	// LD4Rv1d
    UINT64_C(232844288),	// LD4Rv1d_POST
    UINT64_C(1298197504),	// LD4Rv2d
    UINT64_C(1306586112),	// LD4Rv2d_POST
    UINT64_C(224454656),	// LD4Rv2s
    UINT64_C(232843264),	// LD4Rv2s_POST
    UINT64_C(224453632),	// LD4Rv4h
    UINT64_C(232842240),	// LD4Rv4h_POST
    UINT64_C(1298196480),	// LD4Rv4s
    UINT64_C(1306585088),	// LD4Rv4s_POST
    UINT64_C(224452608),	// LD4Rv8b
    UINT64_C(232841216),	// LD4Rv8b_POST
    UINT64_C(1298195456),	// LD4Rv8h
    UINT64_C(1306584064),	// LD4Rv8h_POST
    UINT64_C(224419840),	// LD4i16
    UINT64_C(232808448),	// LD4i16_POST
    UINT64_C(224436224),	// LD4i32
    UINT64_C(232824832),	// LD4i32_POST
    UINT64_C(224437248),	// LD4i64
    UINT64_C(232825856),	// LD4i64_POST
    UINT64_C(224403456),	// LD4i8
    UINT64_C(232792064),	// LD4i8_POST
    UINT64_C(954204160),	// LDADDALb
    UINT64_C(4175429632),	// LDADDALd
    UINT64_C(2027945984),	// LDADDALh
    UINT64_C(3101687808),	// LDADDALs
    UINT64_C(950009856),	// LDADDAb
    UINT64_C(4171235328),	// LDADDAd
    UINT64_C(2023751680),	// LDADDAh
    UINT64_C(3097493504),	// LDADDAs
    UINT64_C(945815552),	// LDADDLb
    UINT64_C(4167041024),	// LDADDLd
    UINT64_C(2019557376),	// LDADDLh
    UINT64_C(3093299200),	// LDADDLs
    UINT64_C(941621248),	// LDADDb
    UINT64_C(4162846720),	// LDADDd
    UINT64_C(2015363072),	// LDADDh
    UINT64_C(3089104896),	// LDADDs
    UINT64_C(148896768),	// LDARB
    UINT64_C(1222638592),	// LDARH
    UINT64_C(2296380416),	// LDARW
    UINT64_C(3370122240),	// LDARX
    UINT64_C(2288025600),	// LDAXPW
    UINT64_C(3361767424),	// LDAXPX
    UINT64_C(140508160),	// LDAXRB
    UINT64_C(1214249984),	// LDAXRH
    UINT64_C(2287991808),	// LDAXRW
    UINT64_C(3361733632),	// LDAXRX
    UINT64_C(954208256),	// LDCLRALb
    UINT64_C(4175433728),	// LDCLRALd
    UINT64_C(2027950080),	// LDCLRALh
    UINT64_C(3101691904),	// LDCLRALs
    UINT64_C(950013952),	// LDCLRAb
    UINT64_C(4171239424),	// LDCLRAd
    UINT64_C(2023755776),	// LDCLRAh
    UINT64_C(3097497600),	// LDCLRAs
    UINT64_C(945819648),	// LDCLRLb
    UINT64_C(4167045120),	// LDCLRLd
    UINT64_C(2019561472),	// LDCLRLh
    UINT64_C(3093303296),	// LDCLRLs
    UINT64_C(941625344),	// LDCLRb
    UINT64_C(4162850816),	// LDCLRd
    UINT64_C(2015367168),	// LDCLRh
    UINT64_C(3089108992),	// LDCLRs
    UINT64_C(954212352),	// LDEORALb
    UINT64_C(4175437824),	// LDEORALd
    UINT64_C(2027954176),	// LDEORALh
    UINT64_C(3101696000),	// LDEORALs
    UINT64_C(950018048),	// LDEORAb
    UINT64_C(4171243520),	// LDEORAd
    UINT64_C(2023759872),	// LDEORAh
    UINT64_C(3097501696),	// LDEORAs
    UINT64_C(945823744),	// LDEORLb
    UINT64_C(4167049216),	// LDEORLd
    UINT64_C(2019565568),	// LDEORLh
    UINT64_C(3093307392),	// LDEORLs
    UINT64_C(941629440),	// LDEORb
    UINT64_C(4162854912),	// LDEORd
    UINT64_C(2015371264),	// LDEORh
    UINT64_C(3089113088),	// LDEORs
    UINT64_C(148864000),	// LDLARB
    UINT64_C(1222605824),	// LDLARH
    UINT64_C(2296347648),	// LDLARW
    UINT64_C(3370089472),	// LDLARX
    UINT64_C(1816133632),	// LDNPDi
    UINT64_C(2889875456),	// LDNPQi
    UINT64_C(742391808),	// LDNPSi
    UINT64_C(675282944),	// LDNPWi
    UINT64_C(2822766592),	// LDNPXi
    UINT64_C(1832910848),	// LDPDi
    UINT64_C(1824522240),	// LDPDpost
    UINT64_C(1841299456),	// LDPDpre
    UINT64_C(2906652672),	// LDPQi
    UINT64_C(2898264064),	// LDPQpost
    UINT64_C(2915041280),	// LDPQpre
    UINT64_C(1765801984),	// LDPSWi
    UINT64_C(1757413376),	// LDPSWpost
    UINT64_C(1774190592),	// LDPSWpre
    UINT64_C(759169024),	// LDPSi
    UINT64_C(750780416),	// LDPSpost
    UINT64_C(767557632),	// LDPSpre
    UINT64_C(692060160),	// LDPWi
    UINT64_C(683671552),	// LDPWpost
    UINT64_C(700448768),	// LDPWpre
    UINT64_C(2839543808),	// LDPXi
    UINT64_C(2831155200),	// LDPXpost
    UINT64_C(2847932416),	// LDPXpre
    UINT64_C(943719424),	// LDRBBpost
    UINT64_C(943721472),	// LDRBBpre
    UINT64_C(945833984),	// LDRBBroW
    UINT64_C(945842176),	// LDRBBroX
    UINT64_C(960495616),	// LDRBBui
    UINT64_C(1010828288),	// LDRBpost
    UINT64_C(1010830336),	// LDRBpre
    UINT64_C(1012942848),	// LDRBroW
    UINT64_C(1012951040),	// LDRBroX
    UINT64_C(1027604480),	// LDRBui
    UINT64_C(1543503872),	// LDRDl
    UINT64_C(4232053760),	// LDRDpost
    UINT64_C(4232055808),	// LDRDpre
    UINT64_C(4234168320),	// LDRDroW
    UINT64_C(4234176512),	// LDRDroX
    UINT64_C(4248829952),	// LDRDui
    UINT64_C(2017461248),	// LDRHHpost
    UINT64_C(2017463296),	// LDRHHpre
    UINT64_C(2019575808),	// LDRHHroW
    UINT64_C(2019584000),	// LDRHHroX
    UINT64_C(2034237440),	// LDRHHui
    UINT64_C(2084570112),	// LDRHpost
    UINT64_C(2084572160),	// LDRHpre
    UINT64_C(2086684672),	// LDRHroW
    UINT64_C(2086692864),	// LDRHroX
    UINT64_C(2101346304),	// LDRHui
    UINT64_C(2617245696),	// LDRQl
    UINT64_C(1019216896),	// LDRQpost
    UINT64_C(1019218944),	// LDRQpre
    UINT64_C(1021331456),	// LDRQroW
    UINT64_C(1021339648),	// LDRQroX
    UINT64_C(1035993088),	// LDRQui
    UINT64_C(952108032),	// LDRSBWpost
    UINT64_C(952110080),	// LDRSBWpre
    UINT64_C(954222592),	// LDRSBWroW
    UINT64_C(954230784),	// LDRSBWroX
    UINT64_C(968884224),	// LDRSBWui
    UINT64_C(947913728),	// LDRSBXpost
    UINT64_C(947915776),	// LDRSBXpre
    UINT64_C(950028288),	// LDRSBXroW
    UINT64_C(950036480),	// LDRSBXroX
    UINT64_C(964689920),	// LDRSBXui
    UINT64_C(2025849856),	// LDRSHWpost
    UINT64_C(2025851904),	// LDRSHWpre
    UINT64_C(2027964416),	// LDRSHWroW
    UINT64_C(2027972608),	// LDRSHWroX
    UINT64_C(2042626048),	// LDRSHWui
    UINT64_C(2021655552),	// LDRSHXpost
    UINT64_C(2021657600),	// LDRSHXpre
    UINT64_C(2023770112),	// LDRSHXroW
    UINT64_C(2023778304),	// LDRSHXroX
    UINT64_C(2038431744),	// LDRSHXui
    UINT64_C(2550136832),	// LDRSWl
    UINT64_C(3095397376),	// LDRSWpost
    UINT64_C(3095399424),	// LDRSWpre
    UINT64_C(3097511936),	// LDRSWroW
    UINT64_C(3097520128),	// LDRSWroX
    UINT64_C(3112173568),	// LDRSWui
    UINT64_C(469762048),	// LDRSl
    UINT64_C(3158311936),	// LDRSpost
    UINT64_C(3158313984),	// LDRSpre
    UINT64_C(3160426496),	// LDRSroW
    UINT64_C(3160434688),	// LDRSroX
    UINT64_C(3175088128),	// LDRSui
    UINT64_C(402653184),	// LDRWl
    UINT64_C(3091203072),	// LDRWpost
    UINT64_C(3091205120),	// LDRWpre
    UINT64_C(3093317632),	// LDRWroW
    UINT64_C(3093325824),	// LDRWroX
    UINT64_C(3107979264),	// LDRWui
    UINT64_C(1476395008),	// LDRXl
    UINT64_C(4164944896),	// LDRXpost
    UINT64_C(4164946944),	// LDRXpre
    UINT64_C(4167059456),	// LDRXroW
    UINT64_C(4167067648),	// LDRXroX
    UINT64_C(4181721088),	// LDRXui
    UINT64_C(954216448),	// LDSETALb
    UINT64_C(4175441920),	// LDSETALd
    UINT64_C(2027958272),	// LDSETALh
    UINT64_C(3101700096),	// LDSETALs
    UINT64_C(950022144),	// LDSETAb
    UINT64_C(4171247616),	// LDSETAd
    UINT64_C(2023763968),	// LDSETAh
    UINT64_C(3097505792),	// LDSETAs
    UINT64_C(945827840),	// LDSETLb
    UINT64_C(4167053312),	// LDSETLd
    UINT64_C(2019569664),	// LDSETLh
    UINT64_C(3093311488),	// LDSETLs
    UINT64_C(941633536),	// LDSETb
    UINT64_C(4162859008),	// LDSETd
    UINT64_C(2015375360),	// LDSETh
    UINT64_C(3089117184),	// LDSETs
    UINT64_C(954220544),	// LDSMAXALb
    UINT64_C(4175446016),	// LDSMAXALd
    UINT64_C(2027962368),	// LDSMAXALh
    UINT64_C(3101704192),	// LDSMAXALs
    UINT64_C(950026240),	// LDSMAXAb
    UINT64_C(4171251712),	// LDSMAXAd
    UINT64_C(2023768064),	// LDSMAXAh
    UINT64_C(3097509888),	// LDSMAXAs
    UINT64_C(945831936),	// LDSMAXLb
    UINT64_C(4167057408),	// LDSMAXLd
    UINT64_C(2019573760),	// LDSMAXLh
    UINT64_C(3093315584),	// LDSMAXLs
    UINT64_C(941637632),	// LDSMAXb
    UINT64_C(4162863104),	// LDSMAXd
    UINT64_C(2015379456),	// LDSMAXh
    UINT64_C(3089121280),	// LDSMAXs
    UINT64_C(954224640),	// LDSMINALb
    UINT64_C(4175450112),	// LDSMINALd
    UINT64_C(2027966464),	// LDSMINALh
    UINT64_C(3101708288),	// LDSMINALs
    UINT64_C(950030336),	// LDSMINAb
    UINT64_C(4171255808),	// LDSMINAd
    UINT64_C(2023772160),	// LDSMINAh
    UINT64_C(3097513984),	// LDSMINAs
    UINT64_C(945836032),	// LDSMINLb
    UINT64_C(4167061504),	// LDSMINLd
    UINT64_C(2019577856),	// LDSMINLh
    UINT64_C(3093319680),	// LDSMINLs
    UINT64_C(941641728),	// LDSMINb
    UINT64_C(4162867200),	// LDSMINd
    UINT64_C(2015383552),	// LDSMINh
    UINT64_C(3089125376),	// LDSMINs
    UINT64_C(943720448),	// LDTRBi
    UINT64_C(2017462272),	// LDTRHi
    UINT64_C(952109056),	// LDTRSBWi
    UINT64_C(947914752),	// LDTRSBXi
    UINT64_C(2025850880),	// LDTRSHWi
    UINT64_C(2021656576),	// LDTRSHXi
    UINT64_C(3095398400),	// LDTRSWi
    UINT64_C(3091204096),	// LDTRWi
    UINT64_C(4164945920),	// LDTRXi
    UINT64_C(954228736),	// LDUMAXALb
    UINT64_C(4175454208),	// LDUMAXALd
    UINT64_C(2027970560),	// LDUMAXALh
    UINT64_C(3101712384),	// LDUMAXALs
    UINT64_C(950034432),	// LDUMAXAb
    UINT64_C(4171259904),	// LDUMAXAd
    UINT64_C(2023776256),	// LDUMAXAh
    UINT64_C(3097518080),	// LDUMAXAs
    UINT64_C(945840128),	// LDUMAXLb
    UINT64_C(4167065600),	// LDUMAXLd
    UINT64_C(2019581952),	// LDUMAXLh
    UINT64_C(3093323776),	// LDUMAXLs
    UINT64_C(941645824),	// LDUMAXb
    UINT64_C(4162871296),	// LDUMAXd
    UINT64_C(2015387648),	// LDUMAXh
    UINT64_C(3089129472),	// LDUMAXs
    UINT64_C(954232832),	// LDUMINALb
    UINT64_C(4175458304),	// LDUMINALd
    UINT64_C(2027974656),	// LDUMINALh
    UINT64_C(3101716480),	// LDUMINALs
    UINT64_C(950038528),	// LDUMINAb
    UINT64_C(4171264000),	// LDUMINAd
    UINT64_C(2023780352),	// LDUMINAh
    UINT64_C(3097522176),	// LDUMINAs
    UINT64_C(945844224),	// LDUMINLb
    UINT64_C(4167069696),	// LDUMINLd
    UINT64_C(2019586048),	// LDUMINLh
    UINT64_C(3093327872),	// LDUMINLs
    UINT64_C(941649920),	// LDUMINb
    UINT64_C(4162875392),	// LDUMINd
    UINT64_C(2015391744),	// LDUMINh
    UINT64_C(3089133568),	// LDUMINs
    UINT64_C(943718400),	// LDURBBi
    UINT64_C(1010827264),	// LDURBi
    UINT64_C(4232052736),	// LDURDi
    UINT64_C(2017460224),	// LDURHHi
    UINT64_C(2084569088),	// LDURHi
    UINT64_C(1019215872),	// LDURQi
    UINT64_C(952107008),	// LDURSBWi
    UINT64_C(947912704),	// LDURSBXi
    UINT64_C(2025848832),	// LDURSHWi
    UINT64_C(2021654528),	// LDURSHXi
    UINT64_C(3095396352),	// LDURSWi
    UINT64_C(3158310912),	// LDURSi
    UINT64_C(3091202048),	// LDURWi
    UINT64_C(4164943872),	// LDURXi
    UINT64_C(2287992832),	// LDXPW
    UINT64_C(3361734656),	// LDXPX
    UINT64_C(140475392),	// LDXRB
    UINT64_C(1214217216),	// LDXRH
    UINT64_C(2287959040),	// LDXRW
    UINT64_C(3361700864),	// LDXRX
    UINT64_C(0),	// LOADgot
    UINT64_C(448798720),	// LSLVWr
    UINT64_C(2596282368),	// LSLVXr
    UINT64_C(448799744),	// LSRVWr
    UINT64_C(2596283392),	// LSRVXr
    UINT64_C(452984832),	// MADDWrrr
    UINT64_C(2600468480),	// MADDXrrr
    UINT64_C(1310757888),	// MLAv16i8
    UINT64_C(245404672),	// MLAv2i32
    UINT64_C(796917760),	// MLAv2i32_indexed
    UINT64_C(241210368),	// MLAv4i16
    UINT64_C(792723456),	// MLAv4i16_indexed
    UINT64_C(1319146496),	// MLAv4i32
    UINT64_C(1870659584),	// MLAv4i32_indexed
    UINT64_C(1314952192),	// MLAv8i16
    UINT64_C(1866465280),	// MLAv8i16_indexed
    UINT64_C(237016064),	// MLAv8i8
    UINT64_C(1847628800),	// MLSv16i8
    UINT64_C(782275584),	// MLSv2i32
    UINT64_C(796934144),	// MLSv2i32_indexed
    UINT64_C(778081280),	// MLSv4i16
    UINT64_C(792739840),	// MLSv4i16_indexed
    UINT64_C(1856017408),	// MLSv4i32
    UINT64_C(1870675968),	// MLSv4i32_indexed
    UINT64_C(1851823104),	// MLSv8i16
    UINT64_C(1866481664),	// MLSv8i16_indexed
    UINT64_C(773886976),	// MLSv8i8
    UINT64_C(788587520),	// MOVID
    UINT64_C(1325458432),	// MOVIv16b_ns
    UINT64_C(1862329344),	// MOVIv2d_ns
    UINT64_C(251659264),	// MOVIv2i32
    UINT64_C(251708416),	// MOVIv2s_msl
    UINT64_C(251692032),	// MOVIv4i16
    UINT64_C(1325401088),	// MOVIv4i32
    UINT64_C(1325450240),	// MOVIv4s_msl
    UINT64_C(251716608),	// MOVIv8b_ns
    UINT64_C(1325433856),	// MOVIv8i16
    UINT64_C(1920991232),	// MOVKWi
    UINT64_C(4068474880),	// MOVKXi
    UINT64_C(310378496),	// MOVNWi
    UINT64_C(2457862144),	// MOVNXi
    UINT64_C(1384120320),	// MOVZWi
    UINT64_C(3531603968),	// MOVZXi
    UINT64_C(0),	// MOVaddr
    UINT64_C(0),	// MOVaddrBA
    UINT64_C(0),	// MOVaddrCP
    UINT64_C(0),	// MOVaddrEXT
    UINT64_C(0),	// MOVaddrJT
    UINT64_C(0),	// MOVaddrTLS
    UINT64_C(0),	// MOVi32imm
    UINT64_C(0),	// MOVi64imm
    UINT64_C(3575644160),	// MRS
    UINT64_C(3573547008),	// MSR
    UINT64_C(3573563423),	// MSRpstateImm1
    UINT64_C(3573563423),	// MSRpstateImm4
    UINT64_C(453017600),	// MSUBWrrr
    UINT64_C(2600501248),	// MSUBXrrr
    UINT64_C(1310759936),	// MULv16i8
    UINT64_C(245406720),	// MULv2i32
    UINT64_C(260079616),	// MULv2i32_indexed
    UINT64_C(241212416),	// MULv4i16
    UINT64_C(255885312),	// MULv4i16_indexed
    UINT64_C(1319148544),	// MULv4i32
    UINT64_C(1333821440),	// MULv4i32_indexed
    UINT64_C(1314954240),	// MULv8i16
    UINT64_C(1329627136),	// MULv8i16_indexed
    UINT64_C(237018112),	// MULv8i8
    UINT64_C(788530176),	// MVNIv2i32
    UINT64_C(788579328),	// MVNIv2s_msl
    UINT64_C(788562944),	// MVNIv4i16
    UINT64_C(1862272000),	// MVNIv4i32
    UINT64_C(1862321152),	// MVNIv4s_msl
    UINT64_C(1862304768),	// MVNIv8i16
    UINT64_C(1847638016),	// NEGv16i8
    UINT64_C(2128656384),	// NEGv1i64
    UINT64_C(782284800),	// NEGv2i32
    UINT64_C(1860220928),	// NEGv2i64
    UINT64_C(778090496),	// NEGv4i16
    UINT64_C(1856026624),	// NEGv4i32
    UINT64_C(1851832320),	// NEGv8i16
    UINT64_C(773896192),	// NEGv8i8
    UINT64_C(1847613440),	// NOTv16i8
    UINT64_C(773871616),	// NOTv8i8
    UINT64_C(0),	// ORNWrr
    UINT64_C(706740224),	// ORNWrs
    UINT64_C(0),	// ORNXrr
    UINT64_C(2854223872),	// ORNXrs
    UINT64_C(1323310080),	// ORNv16i8
    UINT64_C(249568256),	// ORNv8i8
    UINT64_C(838860800),	// ORRWri
    UINT64_C(0),	// ORRWrr
    UINT64_C(704643072),	// ORRWrs
    UINT64_C(2986344448),	// ORRXri
    UINT64_C(0),	// ORRXrr
    UINT64_C(2852126720),	// ORRXrs
    UINT64_C(1319115776),	// ORRv16i8
    UINT64_C(251663360),	// ORRv2i32
    UINT64_C(251696128),	// ORRv4i16
    UINT64_C(1325405184),	// ORRv4i32
    UINT64_C(1325437952),	// ORRv8i16
    UINT64_C(245373952),	// ORRv8i8
    UINT64_C(1310777344),	// PMULLv16i8
    UINT64_C(249618432),	// PMULLv1i64
    UINT64_C(1323360256),	// PMULLv2i64
    UINT64_C(237035520),	// PMULLv8i8
    UINT64_C(1847630848),	// PMULv16i8
    UINT64_C(773889024),	// PMULv8i8
    UINT64_C(3623878656),	// PRFMl
    UINT64_C(4171253760),	// PRFMroW
    UINT64_C(4171261952),	// PRFMroX
    UINT64_C(4185915392),	// PRFMui
    UINT64_C(4169138176),	// PRFUMi
    UINT64_C(782254080),	// RADDHNv2i64_v2i32
    UINT64_C(1855995904),	// RADDHNv2i64_v4i32
    UINT64_C(778059776),	// RADDHNv4i32_v4i16
    UINT64_C(1851801600),	// RADDHNv4i32_v8i16
    UINT64_C(1847607296),	// RADDHNv8i16_v16i8
    UINT64_C(773865472),	// RADDHNv8i16_v8i8
    UINT64_C(1522532352),	// RBITWr
    UINT64_C(3670016000),	// RBITXr
    UINT64_C(1851807744),	// RBITv16i8
    UINT64_C(778065920),	// RBITv8i8
    UINT64_C(3596550144),	// RET
    UINT64_C(0),	// RET_ReallyLR
    UINT64_C(1522533376),	// REV16Wr
    UINT64_C(3670017024),	// REV16Xr
    UINT64_C(1310726144),	// REV16v16i8
    UINT64_C(236984320),	// REV16v8i8
    UINT64_C(3670018048),	// REV32Xr
    UINT64_C(1847592960),	// REV32v16i8
    UINT64_C(778045440),	// REV32v4i16
    UINT64_C(1851787264),	// REV32v8i16
    UINT64_C(773851136),	// REV32v8i8
    UINT64_C(1310722048),	// REV64v16i8
    UINT64_C(245368832),	// REV64v2i32
    UINT64_C(241174528),	// REV64v4i16
    UINT64_C(1319110656),	// REV64v4i32
    UINT64_C(1314916352),	// REV64v8i16
    UINT64_C(236980224),	// REV64v8i8
    UINT64_C(1522534400),	// REVWr
    UINT64_C(3670019072),	// REVXr
    UINT64_C(448801792),	// RORVWr
    UINT64_C(2596285440),	// RORVXr
    UINT64_C(1325960192),	// RSHRNv16i8_shift
    UINT64_C(253791232),	// RSHRNv2i32_shift
    UINT64_C(252742656),	// RSHRNv4i16_shift
    UINT64_C(1327533056),	// RSHRNv4i32_shift
    UINT64_C(1326484480),	// RSHRNv8i16_shift
    UINT64_C(252218368),	// RSHRNv8i8_shift
    UINT64_C(782262272),	// RSUBHNv2i64_v2i32
    UINT64_C(1856004096),	// RSUBHNv2i64_v4i32
    UINT64_C(778067968),	// RSUBHNv4i32_v4i16
    UINT64_C(1851809792),	// RSUBHNv4i32_v8i16
    UINT64_C(1847615488),	// RSUBHNv8i16_v16i8
    UINT64_C(773873664),	// RSUBHNv8i16_v8i8
    UINT64_C(1310740480),	// SABALv16i8_v8i16
    UINT64_C(245387264),	// SABALv2i32_v2i64
    UINT64_C(241192960),	// SABALv4i16_v4i32
    UINT64_C(1319129088),	// SABALv4i32_v2i64
    UINT64_C(1314934784),	// SABALv8i16_v4i32
    UINT64_C(236998656),	// SABALv8i8_v8i16
    UINT64_C(1310751744),	// SABAv16i8
    UINT64_C(245398528),	// SABAv2i32
    UINT64_C(241204224),	// SABAv4i16
    UINT64_C(1319140352),	// SABAv4i32
    UINT64_C(1314946048),	// SABAv8i16
    UINT64_C(237009920),	// SABAv8i8
    UINT64_C(1310748672),	// SABDLv16i8_v8i16
    UINT64_C(245395456),	// SABDLv2i32_v2i64
    UINT64_C(241201152),	// SABDLv4i16_v4i32
    UINT64_C(1319137280),	// SABDLv4i32_v2i64
    UINT64_C(1314942976),	// SABDLv8i16_v4i32
    UINT64_C(237006848),	// SABDLv8i8_v8i16
    UINT64_C(1310749696),	// SABDv16i8
    UINT64_C(245396480),	// SABDv2i32
    UINT64_C(241202176),	// SABDv4i16
    UINT64_C(1319138304),	// SABDv4i32
    UINT64_C(1314944000),	// SABDv8i16
    UINT64_C(237007872),	// SABDv8i8
    UINT64_C(1310746624),	// SADALPv16i8_v8i16
    UINT64_C(245393408),	// SADALPv2i32_v1i64
    UINT64_C(241199104),	// SADALPv4i16_v2i32
    UINT64_C(1319135232),	// SADALPv4i32_v2i64
    UINT64_C(1314940928),	// SADALPv8i16_v4i32
    UINT64_C(237004800),	// SADALPv8i8_v4i16
    UINT64_C(1310730240),	// SADDLPv16i8_v8i16
    UINT64_C(245377024),	// SADDLPv2i32_v1i64
    UINT64_C(241182720),	// SADDLPv4i16_v2i32
    UINT64_C(1319118848),	// SADDLPv4i32_v2i64
    UINT64_C(1314924544),	// SADDLPv8i16_v4i32
    UINT64_C(236988416),	// SADDLPv8i8_v4i16
    UINT64_C(1311782912),	// SADDLVv16i8v
    UINT64_C(242235392),	// SADDLVv4i16v
    UINT64_C(1320171520),	// SADDLVv4i32v
    UINT64_C(1315977216),	// SADDLVv8i16v
    UINT64_C(238041088),	// SADDLVv8i8v
    UINT64_C(1310720000),	// SADDLv16i8_v8i16
    UINT64_C(245366784),	// SADDLv2i32_v2i64
    UINT64_C(241172480),	// SADDLv4i16_v4i32
    UINT64_C(1319108608),	// SADDLv4i32_v2i64
    UINT64_C(1314914304),	// SADDLv8i16_v4i32
    UINT64_C(236978176),	// SADDLv8i8_v8i16
    UINT64_C(1310724096),	// SADDWv16i8_v8i16
    UINT64_C(245370880),	// SADDWv2i32_v2i64
    UINT64_C(241176576),	// SADDWv4i16_v4i32
    UINT64_C(1319112704),	// SADDWv4i32_v2i64
    UINT64_C(1314918400),	// SADDWv8i16_v4i32
    UINT64_C(236982272),	// SADDWv8i8_v8i16
    UINT64_C(2046820352),	// SBCSWr
    UINT64_C(4194304000),	// SBCSXr
    UINT64_C(1509949440),	// SBCWr
    UINT64_C(3657433088),	// SBCXr
    UINT64_C(318767104),	// SBFMWri
    UINT64_C(2470445056),	// SBFMXri
    UINT64_C(507674624),	// SCVTFSWDri
    UINT64_C(516063232),	// SCVTFSWHri
    UINT64_C(503480320),	// SCVTFSWSri
    UINT64_C(2655125504),	// SCVTFSXDri
    UINT64_C(2663514112),	// SCVTFSXHri
    UINT64_C(2650931200),	// SCVTFSXSri
    UINT64_C(509739008),	// SCVTFUWDri
    UINT64_C(518127616),	// SCVTFUWHri
    UINT64_C(505544704),	// SCVTFUWSri
    UINT64_C(2657222656),	// SCVTFUXDri
    UINT64_C(2665611264),	// SCVTFUXHri
    UINT64_C(2653028352),	// SCVTFUXSri
    UINT64_C(1598088192),	// SCVTFd
    UINT64_C(1594942464),	// SCVTFh
    UINT64_C(1595991040),	// SCVTFs
    UINT64_C(1585043456),	// SCVTFv1i16
    UINT64_C(1579276288),	// SCVTFv1i32
    UINT64_C(1583470592),	// SCVTFv1i64
    UINT64_C(237099008),	// SCVTFv2f32
    UINT64_C(1315035136),	// SCVTFv2f64
    UINT64_C(253813760),	// SCVTFv2i32_shift
    UINT64_C(1329652736),	// SCVTFv2i64_shift
    UINT64_C(242866176),	// SCVTFv4f16
    UINT64_C(1310840832),	// SCVTFv4f32
    UINT64_C(252765184),	// SCVTFv4i16_shift
    UINT64_C(1327555584),	// SCVTFv4i32_shift
    UINT64_C(1316608000),	// SCVTFv8f16
    UINT64_C(1326507008),	// SCVTFv8i16_shift
    UINT64_C(448793600),	// SDIVWr
    UINT64_C(2596277248),	// SDIVXr
    UINT64_C(1577058304),	// SHA1Crrr
    UINT64_C(1579681792),	// SHA1Hrr
    UINT64_C(1577066496),	// SHA1Mrrr
    UINT64_C(1577062400),	// SHA1Prrr
    UINT64_C(1577070592),	// SHA1SU0rrr
    UINT64_C(1579685888),	// SHA1SU1rr
    UINT64_C(1577078784),	// SHA256H2rrr
    UINT64_C(1577074688),	// SHA256Hrrr
    UINT64_C(1579689984),	// SHA256SU0rr
    UINT64_C(1577082880),	// SHA256SU1rrr
    UINT64_C(1310721024),	// SHADDv16i8
    UINT64_C(245367808),	// SHADDv2i32
    UINT64_C(241173504),	// SHADDv4i16
    UINT64_C(1319109632),	// SHADDv4i32
    UINT64_C(1314915328),	// SHADDv8i16
    UINT64_C(236979200),	// SHADDv8i8
    UINT64_C(1847670784),	// SHLLv16i8
    UINT64_C(782317568),	// SHLLv2i32
    UINT64_C(778123264),	// SHLLv4i16
    UINT64_C(1856059392),	// SHLLv4i32
    UINT64_C(1851865088),	// SHLLv8i16
    UINT64_C(773928960),	// SHLLv8i8
    UINT64_C(1598051328),	// SHLd
    UINT64_C(1325945856),	// SHLv16i8_shift
    UINT64_C(253776896),	// SHLv2i32_shift
    UINT64_C(1329615872),	// SHLv2i64_shift
    UINT64_C(252728320),	// SHLv4i16_shift
    UINT64_C(1327518720),	// SHLv4i32_shift
    UINT64_C(1326470144),	// SHLv8i16_shift
    UINT64_C(252204032),	// SHLv8i8_shift
    UINT64_C(1325958144),	// SHRNv16i8_shift
    UINT64_C(253789184),	// SHRNv2i32_shift
    UINT64_C(252740608),	// SHRNv4i16_shift
    UINT64_C(1327531008),	// SHRNv4i32_shift
    UINT64_C(1326482432),	// SHRNv8i16_shift
    UINT64_C(252216320),	// SHRNv8i8_shift
    UINT64_C(1310729216),	// SHSUBv16i8
    UINT64_C(245376000),	// SHSUBv2i32
    UINT64_C(241181696),	// SHSUBv4i16
    UINT64_C(1319117824),	// SHSUBv4i32
    UINT64_C(1314923520),	// SHSUBv8i16
    UINT64_C(236987392),	// SHSUBv8i8
    UINT64_C(2134922240),	// SLId
    UINT64_C(1862816768),	// SLIv16i8_shift
    UINT64_C(790647808),	// SLIv2i32_shift
    UINT64_C(1866486784),	// SLIv2i64_shift
    UINT64_C(789599232),	// SLIv4i16_shift
    UINT64_C(1864389632),	// SLIv4i32_shift
    UINT64_C(1863341056),	// SLIv8i16_shift
    UINT64_C(789074944),	// SLIv8i8_shift
    UINT64_C(2602565632),	// SMADDLrrr
    UINT64_C(1310761984),	// SMAXPv16i8
    UINT64_C(245408768),	// SMAXPv2i32
    UINT64_C(241214464),	// SMAXPv4i16
    UINT64_C(1319150592),	// SMAXPv4i32
    UINT64_C(1314956288),	// SMAXPv8i16
    UINT64_C(237020160),	// SMAXPv8i8
    UINT64_C(1311811584),	// SMAXVv16i8v
    UINT64_C(242264064),	// SMAXVv4i16v
    UINT64_C(1320200192),	// SMAXVv4i32v
    UINT64_C(1316005888),	// SMAXVv8i16v
    UINT64_C(238069760),	// SMAXVv8i8v
    UINT64_C(1310745600),	// SMAXv16i8
    UINT64_C(245392384),	// SMAXv2i32
    UINT64_C(241198080),	// SMAXv4i16
    UINT64_C(1319134208),	// SMAXv4i32
    UINT64_C(1314939904),	// SMAXv8i16
    UINT64_C(237003776),	// SMAXv8i8
    UINT64_C(3556769795),	// SMC
    UINT64_C(1310764032),	// SMINPv16i8
    UINT64_C(245410816),	// SMINPv2i32
    UINT64_C(241216512),	// SMINPv4i16
    UINT64_C(1319152640),	// SMINPv4i32
    UINT64_C(1314958336),	// SMINPv8i16
    UINT64_C(237022208),	// SMINPv8i8
    UINT64_C(1311877120),	// SMINVv16i8v
    UINT64_C(242329600),	// SMINVv4i16v
    UINT64_C(1320265728),	// SMINVv4i32v
    UINT64_C(1316071424),	// SMINVv8i16v
    UINT64_C(238135296),	// SMINVv8i8v
    UINT64_C(1310747648),	// SMINv16i8
    UINT64_C(245394432),	// SMINv2i32
    UINT64_C(241200128),	// SMINv4i16
    UINT64_C(1319136256),	// SMINv4i32
    UINT64_C(1314941952),	// SMINv8i16
    UINT64_C(237005824),	// SMINv8i8
    UINT64_C(1310752768),	// SMLALv16i8_v8i16
    UINT64_C(260055040),	// SMLALv2i32_indexed
    UINT64_C(245399552),	// SMLALv2i32_v2i64
    UINT64_C(255860736),	// SMLALv4i16_indexed
    UINT64_C(241205248),	// SMLALv4i16_v4i32
    UINT64_C(1333796864),	// SMLALv4i32_indexed
    UINT64_C(1319141376),	// SMLALv4i32_v2i64
    UINT64_C(1329602560),	// SMLALv8i16_indexed
    UINT64_C(1314947072),	// SMLALv8i16_v4i32
    UINT64_C(237010944),	// SMLALv8i8_v8i16
    UINT64_C(1310760960),	// SMLSLv16i8_v8i16
    UINT64_C(260071424),	// SMLSLv2i32_indexed
    UINT64_C(245407744),	// SMLSLv2i32_v2i64
    UINT64_C(255877120),	// SMLSLv4i16_indexed
    UINT64_C(241213440),	// SMLSLv4i16_v4i32
    UINT64_C(1333813248),	// SMLSLv4i32_indexed
    UINT64_C(1319149568),	// SMLSLv4i32_v2i64
    UINT64_C(1329618944),	// SMLSLv8i16_indexed
    UINT64_C(1314955264),	// SMLSLv8i16_v4i32
    UINT64_C(237019136),	// SMLSLv8i8_v8i16
    UINT64_C(235023360),	// SMOVvi16to32
    UINT64_C(1308765184),	// SMOVvi16to64
    UINT64_C(1308896256),	// SMOVvi32to64
    UINT64_C(234957824),	// SMOVvi8to32
    UINT64_C(1308699648),	// SMOVvi8to64
    UINT64_C(2602598400),	// SMSUBLrrr
    UINT64_C(2604662784),	// SMULHrr
    UINT64_C(1310769152),	// SMULLv16i8_v8i16
    UINT64_C(260087808),	// SMULLv2i32_indexed
    UINT64_C(245415936),	// SMULLv2i32_v2i64
    UINT64_C(255893504),	// SMULLv4i16_indexed
    UINT64_C(241221632),	// SMULLv4i16_v4i32
    UINT64_C(1333829632),	// SMULLv4i32_indexed
    UINT64_C(1319157760),	// SMULLv4i32_v2i64
    UINT64_C(1329635328),	// SMULLv8i16_indexed
    UINT64_C(1314963456),	// SMULLv8i16_v4i32
    UINT64_C(237027328),	// SMULLv8i8_v8i16
    UINT64_C(1310750720),	// SQABSv16i8
    UINT64_C(1583380480),	// SQABSv1i16
    UINT64_C(1587574784),	// SQABSv1i32
    UINT64_C(1591769088),	// SQABSv1i64
    UINT64_C(1579186176),	// SQABSv1i8
    UINT64_C(245397504),	// SQABSv2i32
    UINT64_C(1323333632),	// SQABSv2i64
    UINT64_C(241203200),	// SQABSv4i16
    UINT64_C(1319139328),	// SQABSv4i32
    UINT64_C(1314945024),	// SQABSv8i16
    UINT64_C(237008896),	// SQABSv8i8
    UINT64_C(1310723072),	// SQADDv16i8
    UINT64_C(1583352832),	// SQADDv1i16
    UINT64_C(1587547136),	// SQADDv1i32
    UINT64_C(1591741440),	// SQADDv1i64
    UINT64_C(1579158528),	// SQADDv1i8
    UINT64_C(245369856),	// SQADDv2i32
    UINT64_C(1323305984),	// SQADDv2i64
    UINT64_C(241175552),	// SQADDv4i16
    UINT64_C(1319111680),	// SQADDv4i32
    UINT64_C(1314917376),	// SQADDv8i16
    UINT64_C(236981248),	// SQADDv8i8
    UINT64_C(1583386624),	// SQDMLALi16
    UINT64_C(1587580928),	// SQDMLALi32
    UINT64_C(1598042112),	// SQDMLALv1i32_indexed
    UINT64_C(1602236416),	// SQDMLALv1i64_indexed
    UINT64_C(260059136),	// SQDMLALv2i32_indexed
    UINT64_C(245403648),	// SQDMLALv2i32_v2i64
    UINT64_C(255864832),	// SQDMLALv4i16_indexed
    UINT64_C(241209344),	// SQDMLALv4i16_v4i32
    UINT64_C(1333800960),	// SQDMLALv4i32_indexed
    UINT64_C(1319145472),	// SQDMLALv4i32_v2i64
    UINT64_C(1329606656),	// SQDMLALv8i16_indexed
    UINT64_C(1314951168),	// SQDMLALv8i16_v4i32
    UINT64_C(1583394816),	// SQDMLSLi16
    UINT64_C(1587589120),	// SQDMLSLi32
    UINT64_C(1598058496),	// SQDMLSLv1i32_indexed
    UINT64_C(1602252800),	// SQDMLSLv1i64_indexed
    UINT64_C(260075520),	// SQDMLSLv2i32_indexed
    UINT64_C(245411840),	// SQDMLSLv2i32_v2i64
    UINT64_C(255881216),	// SQDMLSLv4i16_indexed
    UINT64_C(241217536),	// SQDMLSLv4i16_v4i32
    UINT64_C(1333817344),	// SQDMLSLv4i32_indexed
    UINT64_C(1319153664),	// SQDMLSLv4i32_v2i64
    UINT64_C(1329623040),	// SQDMLSLv8i16_indexed
    UINT64_C(1314959360),	// SQDMLSLv8i16_v4i32
    UINT64_C(1583395840),	// SQDMULHv1i16
    UINT64_C(1598078976),	// SQDMULHv1i16_indexed
    UINT64_C(1587590144),	// SQDMULHv1i32
    UINT64_C(1602273280),	// SQDMULHv1i32_indexed
    UINT64_C(245412864),	// SQDMULHv2i32
    UINT64_C(260096000),	// SQDMULHv2i32_indexed
    UINT64_C(241218560),	// SQDMULHv4i16
    UINT64_C(255901696),	// SQDMULHv4i16_indexed
    UINT64_C(1319154688),	// SQDMULHv4i32
    UINT64_C(1333837824),	// SQDMULHv4i32_indexed
    UINT64_C(1314960384),	// SQDMULHv8i16
    UINT64_C(1329643520),	// SQDMULHv8i16_indexed
    UINT64_C(1583403008),	// SQDMULLi16
    UINT64_C(1587597312),	// SQDMULLi32
    UINT64_C(1598074880),	// SQDMULLv1i32_indexed
    UINT64_C(1602269184),	// SQDMULLv1i64_indexed
    UINT64_C(260091904),	// SQDMULLv2i32_indexed
    UINT64_C(245420032),	// SQDMULLv2i32_v2i64
    UINT64_C(255897600),	// SQDMULLv4i16_indexed
    UINT64_C(241225728),	// SQDMULLv4i16_v4i32
    UINT64_C(1333833728),	// SQDMULLv4i32_indexed
    UINT64_C(1319161856),	// SQDMULLv4i32_v2i64
    UINT64_C(1329639424),	// SQDMULLv8i16_indexed
    UINT64_C(1314967552),	// SQDMULLv8i16_v4i32
    UINT64_C(1847621632),	// SQNEGv16i8
    UINT64_C(2120251392),	// SQNEGv1i16
    UINT64_C(2124445696),	// SQNEGv1i32
    UINT64_C(2128640000),	// SQNEGv1i64
    UINT64_C(2116057088),	// SQNEGv1i8
    UINT64_C(782268416),	// SQNEGv2i32
    UINT64_C(1860204544),	// SQNEGv2i64
    UINT64_C(778074112),	// SQNEGv4i16
    UINT64_C(1856010240),	// SQNEGv4i32
    UINT64_C(1851815936),	// SQNEGv8i16
    UINT64_C(773879808),	// SQNEGv8i8
    UINT64_C(2134953984),	// SQRDMLAHi16_indexed
    UINT64_C(2139148288),	// SQRDMLAHi32_indexed
    UINT64_C(2118157312),	// SQRDMLAHv1i16
    UINT64_C(2122351616),	// SQRDMLAHv1i32
    UINT64_C(780174336),	// SQRDMLAHv2i32
    UINT64_C(796971008),	// SQRDMLAHv2i32_indexed
    UINT64_C(775980032),	// SQRDMLAHv4i16
    UINT64_C(792776704),	// SQRDMLAHv4i16_indexed
    UINT64_C(1853916160),	// SQRDMLAHv4i32
    UINT64_C(1870712832),	// SQRDMLAHv4i32_indexed
    UINT64_C(1849721856),	// SQRDMLAHv8i16
    UINT64_C(1866518528),	// SQRDMLAHv8i16_indexed
    UINT64_C(2134962176),	// SQRDMLSHi16_indexed
    UINT64_C(2139156480),	// SQRDMLSHi32_indexed
    UINT64_C(2118159360),	// SQRDMLSHv1i16
    UINT64_C(2122353664),	// SQRDMLSHv1i32
    UINT64_C(780176384),	// SQRDMLSHv2i32
    UINT64_C(796979200),	// SQRDMLSHv2i32_indexed
    UINT64_C(775982080),	// SQRDMLSHv4i16
    UINT64_C(792784896),	// SQRDMLSHv4i16_indexed
    UINT64_C(1853918208),	// SQRDMLSHv4i32
    UINT64_C(1870721024),	// SQRDMLSHv4i32_indexed
    UINT64_C(1849723904),	// SQRDMLSHv8i16
    UINT64_C(1866526720),	// SQRDMLSHv8i16_indexed
    UINT64_C(2120266752),	// SQRDMULHv1i16
    UINT64_C(1598083072),	// SQRDMULHv1i16_indexed
    UINT64_C(2124461056),	// SQRDMULHv1i32
    UINT64_C(1602277376),	// SQRDMULHv1i32_indexed
    UINT64_C(782283776),	// SQRDMULHv2i32
    UINT64_C(260100096),	// SQRDMULHv2i32_indexed
    UINT64_C(778089472),	// SQRDMULHv4i16
    UINT64_C(255905792),	// SQRDMULHv4i16_indexed
    UINT64_C(1856025600),	// SQRDMULHv4i32
    UINT64_C(1333841920),	// SQRDMULHv4i32_indexed
    UINT64_C(1851831296),	// SQRDMULHv8i16
    UINT64_C(1329647616),	// SQRDMULHv8i16_indexed
    UINT64_C(1310743552),	// SQRSHLv16i8
    UINT64_C(1583373312),	// SQRSHLv1i16
    UINT64_C(1587567616),	// SQRSHLv1i32
    UINT64_C(1591761920),	// SQRSHLv1i64
    UINT64_C(1579179008),	// SQRSHLv1i8
    UINT64_C(245390336),	// SQRSHLv2i32
    UINT64_C(1323326464),	// SQRSHLv2i64
    UINT64_C(241196032),	// SQRSHLv4i16
    UINT64_C(1319132160),	// SQRSHLv4i32
    UINT64_C(1314937856),	// SQRSHLv8i16
    UINT64_C(237001728),	// SQRSHLv8i8
    UINT64_C(1594399744),	// SQRSHRNb
    UINT64_C(1594924032),	// SQRSHRNh
    UINT64_C(1595972608),	// SQRSHRNs
    UINT64_C(1325964288),	// SQRSHRNv16i8_shift
    UINT64_C(253795328),	// SQRSHRNv2i32_shift
    UINT64_C(252746752),	// SQRSHRNv4i16_shift
    UINT64_C(1327537152),	// SQRSHRNv4i32_shift
    UINT64_C(1326488576),	// SQRSHRNv8i16_shift
    UINT64_C(252222464),	// SQRSHRNv8i8_shift
    UINT64_C(2131266560),	// SQRSHRUNb
    UINT64_C(2131790848),	// SQRSHRUNh
    UINT64_C(2132839424),	// SQRSHRUNs
    UINT64_C(1862831104),	// SQRSHRUNv16i8_shift
    UINT64_C(790662144),	// SQRSHRUNv2i32_shift
    UINT64_C(789613568),	// SQRSHRUNv4i16_shift
    UINT64_C(1864403968),	// SQRSHRUNv4i32_shift
    UINT64_C(1863355392),	// SQRSHRUNv8i16_shift
    UINT64_C(789089280),	// SQRSHRUNv8i8_shift
    UINT64_C(2131256320),	// SQSHLUb
    UINT64_C(2134926336),	// SQSHLUd
    UINT64_C(2131780608),	// SQSHLUh
    UINT64_C(2132829184),	// SQSHLUs
    UINT64_C(1862820864),	// SQSHLUv16i8_shift
    UINT64_C(790651904),	// SQSHLUv2i32_shift
    UINT64_C(1866490880),	// SQSHLUv2i64_shift
    UINT64_C(789603328),	// SQSHLUv4i16_shift
    UINT64_C(1864393728),	// SQSHLUv4i32_shift
    UINT64_C(1863345152),	// SQSHLUv8i16_shift
    UINT64_C(789079040),	// SQSHLUv8i8_shift
    UINT64_C(1594389504),	// SQSHLb
    UINT64_C(1598059520),	// SQSHLd
    UINT64_C(1594913792),	// SQSHLh
    UINT64_C(1595962368),	// SQSHLs
    UINT64_C(1310739456),	// SQSHLv16i8
    UINT64_C(1325954048),	// SQSHLv16i8_shift
    UINT64_C(1583369216),	// SQSHLv1i16
    UINT64_C(1587563520),	// SQSHLv1i32
    UINT64_C(1591757824),	// SQSHLv1i64
    UINT64_C(1579174912),	// SQSHLv1i8
    UINT64_C(245386240),	// SQSHLv2i32
    UINT64_C(253785088),	// SQSHLv2i32_shift
    UINT64_C(1323322368),	// SQSHLv2i64
    UINT64_C(1329624064),	// SQSHLv2i64_shift
    UINT64_C(241191936),	// SQSHLv4i16
    UINT64_C(252736512),	// SQSHLv4i16_shift
    UINT64_C(1319128064),	// SQSHLv4i32
    UINT64_C(1327526912),	// SQSHLv4i32_shift
    UINT64_C(1314933760),	// SQSHLv8i16
    UINT64_C(1326478336),	// SQSHLv8i16_shift
    UINT64_C(236997632),	// SQSHLv8i8
    UINT64_C(252212224),	// SQSHLv8i8_shift
    UINT64_C(1594397696),	// SQSHRNb
    UINT64_C(1594921984),	// SQSHRNh
    UINT64_C(1595970560),	// SQSHRNs
    UINT64_C(1325962240),	// SQSHRNv16i8_shift
    UINT64_C(253793280),	// SQSHRNv2i32_shift
    UINT64_C(252744704),	// SQSHRNv4i16_shift
    UINT64_C(1327535104),	// SQSHRNv4i32_shift
    UINT64_C(1326486528),	// SQSHRNv8i16_shift
    UINT64_C(252220416),	// SQSHRNv8i8_shift
    UINT64_C(2131264512),	// SQSHRUNb
    UINT64_C(2131788800),	// SQSHRUNh
    UINT64_C(2132837376),	// SQSHRUNs
    UINT64_C(1862829056),	// SQSHRUNv16i8_shift
    UINT64_C(790660096),	// SQSHRUNv2i32_shift
    UINT64_C(789611520),	// SQSHRUNv4i16_shift
    UINT64_C(1864401920),	// SQSHRUNv4i32_shift
    UINT64_C(1863353344),	// SQSHRUNv8i16_shift
    UINT64_C(789087232),	// SQSHRUNv8i8_shift
    UINT64_C(1310731264),	// SQSUBv16i8
    UINT64_C(1583361024),	// SQSUBv1i16
    UINT64_C(1587555328),	// SQSUBv1i32
    UINT64_C(1591749632),	// SQSUBv1i64
    UINT64_C(1579166720),	// SQSUBv1i8
    UINT64_C(245378048),	// SQSUBv2i32
    UINT64_C(1323314176),	// SQSUBv2i64
    UINT64_C(241183744),	// SQSUBv4i16
    UINT64_C(1319119872),	// SQSUBv4i32
    UINT64_C(1314925568),	// SQSUBv8i16
    UINT64_C(236989440),	// SQSUBv8i8
    UINT64_C(1310803968),	// SQXTNv16i8
    UINT64_C(1583433728),	// SQXTNv1i16
    UINT64_C(1587628032),	// SQXTNv1i32
    UINT64_C(1579239424),	// SQXTNv1i8
    UINT64_C(245450752),	// SQXTNv2i32
    UINT64_C(241256448),	// SQXTNv4i16
    UINT64_C(1319192576),	// SQXTNv4i32
    UINT64_C(1314998272),	// SQXTNv8i16
    UINT64_C(237062144),	// SQXTNv8i8
    UINT64_C(1847666688),	// SQXTUNv16i8
    UINT64_C(2120296448),	// SQXTUNv1i16
    UINT64_C(2124490752),	// SQXTUNv1i32
    UINT64_C(2116102144),	// SQXTUNv1i8
    UINT64_C(782313472),	// SQXTUNv2i32
    UINT64_C(778119168),	// SQXTUNv4i16
    UINT64_C(1856055296),	// SQXTUNv4i32
    UINT64_C(1851860992),	// SQXTUNv8i16
    UINT64_C(773924864),	// SQXTUNv8i8
    UINT64_C(1310725120),	// SRHADDv16i8
    UINT64_C(245371904),	// SRHADDv2i32
    UINT64_C(241177600),	// SRHADDv4i16
    UINT64_C(1319113728),	// SRHADDv4i32
    UINT64_C(1314919424),	// SRHADDv8i16
    UINT64_C(236983296),	// SRHADDv8i8
    UINT64_C(2134918144),	// SRId
    UINT64_C(1862812672),	// SRIv16i8_shift
    UINT64_C(790643712),	// SRIv2i32_shift
    UINT64_C(1866482688),	// SRIv2i64_shift
    UINT64_C(789595136),	// SRIv4i16_shift
    UINT64_C(1864385536),	// SRIv4i32_shift
    UINT64_C(1863336960),	// SRIv8i16_shift
    UINT64_C(789070848),	// SRIv8i8_shift
    UINT64_C(1310741504),	// SRSHLv16i8
    UINT64_C(1591759872),	// SRSHLv1i64
    UINT64_C(245388288),	// SRSHLv2i32
    UINT64_C(1323324416),	// SRSHLv2i64
    UINT64_C(241193984),	// SRSHLv4i16
    UINT64_C(1319130112),	// SRSHLv4i32
    UINT64_C(1314935808),	// SRSHLv8i16
    UINT64_C(236999680),	// SRSHLv8i8
    UINT64_C(1598039040),	// SRSHRd
    UINT64_C(1325933568),	// SRSHRv16i8_shift
    UINT64_C(253764608),	// SRSHRv2i32_shift
    UINT64_C(1329603584),	// SRSHRv2i64_shift
    UINT64_C(252716032),	// SRSHRv4i16_shift
    UINT64_C(1327506432),	// SRSHRv4i32_shift
    UINT64_C(1326457856),	// SRSHRv8i16_shift
    UINT64_C(252191744),	// SRSHRv8i8_shift
    UINT64_C(1598043136),	// SRSRAd
    UINT64_C(1325937664),	// SRSRAv16i8_shift
    UINT64_C(253768704),	// SRSRAv2i32_shift
    UINT64_C(1329607680),	// SRSRAv2i64_shift
    UINT64_C(252720128),	// SRSRAv4i16_shift
    UINT64_C(1327510528),	// SRSRAv4i32_shift
    UINT64_C(1326461952),	// SRSRAv8i16_shift
    UINT64_C(252195840),	// SRSRAv8i8_shift
    UINT64_C(1325966336),	// SSHLLv16i8_shift
    UINT64_C(253797376),	// SSHLLv2i32_shift
    UINT64_C(252748800),	// SSHLLv4i16_shift
    UINT64_C(1327539200),	// SSHLLv4i32_shift
    UINT64_C(1326490624),	// SSHLLv8i16_shift
    UINT64_C(252224512),	// SSHLLv8i8_shift
    UINT64_C(1310737408),	// SSHLv16i8
    UINT64_C(1591755776),	// SSHLv1i64
    UINT64_C(245384192),	// SSHLv2i32
    UINT64_C(1323320320),	// SSHLv2i64
    UINT64_C(241189888),	// SSHLv4i16
    UINT64_C(1319126016),	// SSHLv4i32
    UINT64_C(1314931712),	// SSHLv8i16
    UINT64_C(236995584),	// SSHLv8i8
    UINT64_C(1598030848),	// SSHRd
    UINT64_C(1325925376),	// SSHRv16i8_shift
    UINT64_C(253756416),	// SSHRv2i32_shift
    UINT64_C(1329595392),	// SSHRv2i64_shift
    UINT64_C(252707840),	// SSHRv4i16_shift
    UINT64_C(1327498240),	// SSHRv4i32_shift
    UINT64_C(1326449664),	// SSHRv8i16_shift
    UINT64_C(252183552),	// SSHRv8i8_shift
    UINT64_C(1598034944),	// SSRAd
    UINT64_C(1325929472),	// SSRAv16i8_shift
    UINT64_C(253760512),	// SSRAv2i32_shift
    UINT64_C(1329599488),	// SSRAv2i64_shift
    UINT64_C(252711936),	// SSRAv4i16_shift
    UINT64_C(1327502336),	// SSRAv4i32_shift
    UINT64_C(1326453760),	// SSRAv8i16_shift
    UINT64_C(252187648),	// SSRAv8i8_shift
    UINT64_C(1310728192),	// SSUBLv16i8_v8i16
    UINT64_C(245374976),	// SSUBLv2i32_v2i64
    UINT64_C(241180672),	// SSUBLv4i16_v4i32
    UINT64_C(1319116800),	// SSUBLv4i32_v2i64
    UINT64_C(1314922496),	// SSUBLv8i16_v4i32
    UINT64_C(236986368),	// SSUBLv8i8_v8i16
    UINT64_C(1310732288),	// SSUBWv16i8_v8i16
    UINT64_C(245379072),	// SSUBWv2i32_v2i64
    UINT64_C(241184768),	// SSUBWv4i16_v4i32
    UINT64_C(1319120896),	// SSUBWv4i32_v2i64
    UINT64_C(1314926592),	// SSUBWv8i16_v4i32
    UINT64_C(236990464),	// SSUBWv8i8_v8i16
    UINT64_C(1275076608),	// ST1Fourv16b
    UINT64_C(1283465216),	// ST1Fourv16b_POST
    UINT64_C(201337856),	// ST1Fourv1d
    UINT64_C(209726464),	// ST1Fourv1d_POST
    UINT64_C(1275079680),	// ST1Fourv2d
    UINT64_C(1283468288),	// ST1Fourv2d_POST
    UINT64_C(201336832),	// ST1Fourv2s
    UINT64_C(209725440),	// ST1Fourv2s_POST
    UINT64_C(201335808),	// ST1Fourv4h
    UINT64_C(209724416),	// ST1Fourv4h_POST
    UINT64_C(1275078656),	// ST1Fourv4s
    UINT64_C(1283467264),	// ST1Fourv4s_POST
    UINT64_C(201334784),	// ST1Fourv8b
    UINT64_C(209723392),	// ST1Fourv8b_POST
    UINT64_C(1275077632),	// ST1Fourv8h
    UINT64_C(1283466240),	// ST1Fourv8h_POST
    UINT64_C(1275097088),	// ST1Onev16b
    UINT64_C(1283485696),	// ST1Onev16b_POST
    UINT64_C(201358336),	// ST1Onev1d
    UINT64_C(209746944),	// ST1Onev1d_POST
    UINT64_C(1275100160),	// ST1Onev2d
    UINT64_C(1283488768),	// ST1Onev2d_POST
    UINT64_C(201357312),	// ST1Onev2s
    UINT64_C(209745920),	// ST1Onev2s_POST
    UINT64_C(201356288),	// ST1Onev4h
    UINT64_C(209744896),	// ST1Onev4h_POST
    UINT64_C(1275099136),	// ST1Onev4s
    UINT64_C(1283487744),	// ST1Onev4s_POST
    UINT64_C(201355264),	// ST1Onev8b
    UINT64_C(209743872),	// ST1Onev8b_POST
    UINT64_C(1275098112),	// ST1Onev8h
    UINT64_C(1283486720),	// ST1Onev8h_POST
    UINT64_C(1275092992),	// ST1Threev16b
    UINT64_C(1283481600),	// ST1Threev16b_POST
    UINT64_C(201354240),	// ST1Threev1d
    UINT64_C(209742848),	// ST1Threev1d_POST
    UINT64_C(1275096064),	// ST1Threev2d
    UINT64_C(1283484672),	// ST1Threev2d_POST
    UINT64_C(201353216),	// ST1Threev2s
    UINT64_C(209741824),	// ST1Threev2s_POST
    UINT64_C(201352192),	// ST1Threev4h
    UINT64_C(209740800),	// ST1Threev4h_POST
    UINT64_C(1275095040),	// ST1Threev4s
    UINT64_C(1283483648),	// ST1Threev4s_POST
    UINT64_C(201351168),	// ST1Threev8b
    UINT64_C(209739776),	// ST1Threev8b_POST
    UINT64_C(1275094016),	// ST1Threev8h
    UINT64_C(1283482624),	// ST1Threev8h_POST
    UINT64_C(1275109376),	// ST1Twov16b
    UINT64_C(1283497984),	// ST1Twov16b_POST
    UINT64_C(201370624),	// ST1Twov1d
    UINT64_C(209759232),	// ST1Twov1d_POST
    UINT64_C(1275112448),	// ST1Twov2d
    UINT64_C(1283501056),	// ST1Twov2d_POST
    UINT64_C(201369600),	// ST1Twov2s
    UINT64_C(209758208),	// ST1Twov2s_POST
    UINT64_C(201368576),	// ST1Twov4h
    UINT64_C(209757184),	// ST1Twov4h_POST
    UINT64_C(1275111424),	// ST1Twov4s
    UINT64_C(1283500032),	// ST1Twov4s_POST
    UINT64_C(201367552),	// ST1Twov8b
    UINT64_C(209756160),	// ST1Twov8b_POST
    UINT64_C(1275110400),	// ST1Twov8h
    UINT64_C(1283499008),	// ST1Twov8h_POST
    UINT64_C(218120192),	// ST1i16
    UINT64_C(226508800),	// ST1i16_POST
    UINT64_C(218136576),	// ST1i32
    UINT64_C(226525184),	// ST1i32_POST
    UINT64_C(218137600),	// ST1i64
    UINT64_C(226526208),	// ST1i64_POST
    UINT64_C(218103808),	// ST1i8
    UINT64_C(226492416),	// ST1i8_POST
    UINT64_C(1275101184),	// ST2Twov16b
    UINT64_C(1283489792),	// ST2Twov16b_POST
    UINT64_C(1275104256),	// ST2Twov2d
    UINT64_C(1283492864),	// ST2Twov2d_POST
    UINT64_C(201361408),	// ST2Twov2s
    UINT64_C(209750016),	// ST2Twov2s_POST
    UINT64_C(201360384),	// ST2Twov4h
    UINT64_C(209748992),	// ST2Twov4h_POST
    UINT64_C(1275103232),	// ST2Twov4s
    UINT64_C(1283491840),	// ST2Twov4s_POST
    UINT64_C(201359360),	// ST2Twov8b
    UINT64_C(209747968),	// ST2Twov8b_POST
    UINT64_C(1275102208),	// ST2Twov8h
    UINT64_C(1283490816),	// ST2Twov8h_POST
    UINT64_C(220217344),	// ST2i16
    UINT64_C(228605952),	// ST2i16_POST
    UINT64_C(220233728),	// ST2i32
    UINT64_C(228622336),	// ST2i32_POST
    UINT64_C(220234752),	// ST2i64
    UINT64_C(228623360),	// ST2i64_POST
    UINT64_C(220200960),	// ST2i8
    UINT64_C(228589568),	// ST2i8_POST
    UINT64_C(1275084800),	// ST3Threev16b
    UINT64_C(1283473408),	// ST3Threev16b_POST
    UINT64_C(1275087872),	// ST3Threev2d
    UINT64_C(1283476480),	// ST3Threev2d_POST
    UINT64_C(201345024),	// ST3Threev2s
    UINT64_C(209733632),	// ST3Threev2s_POST
    UINT64_C(201344000),	// ST3Threev4h
    UINT64_C(209732608),	// ST3Threev4h_POST
    UINT64_C(1275086848),	// ST3Threev4s
    UINT64_C(1283475456),	// ST3Threev4s_POST
    UINT64_C(201342976),	// ST3Threev8b
    UINT64_C(209731584),	// ST3Threev8b_POST
    UINT64_C(1275085824),	// ST3Threev8h
    UINT64_C(1283474432),	// ST3Threev8h_POST
    UINT64_C(218128384),	// ST3i16
    UINT64_C(226516992),	// ST3i16_POST
    UINT64_C(218144768),	// ST3i32
    UINT64_C(226533376),	// ST3i32_POST
    UINT64_C(218145792),	// ST3i64
    UINT64_C(226534400),	// ST3i64_POST
    UINT64_C(218112000),	// ST3i8
    UINT64_C(226500608),	// ST3i8_POST
    UINT64_C(1275068416),	// ST4Fourv16b
    UINT64_C(1283457024),	// ST4Fourv16b_POST
    UINT64_C(1275071488),	// ST4Fourv2d
    UINT64_C(1283460096),	// ST4Fourv2d_POST
    UINT64_C(201328640),	// ST4Fourv2s
    UINT64_C(209717248),	// ST4Fourv2s_POST
    UINT64_C(201327616),	// ST4Fourv4h
    UINT64_C(209716224),	// ST4Fourv4h_POST
    UINT64_C(1275070464),	// ST4Fourv4s
    UINT64_C(1283459072),	// ST4Fourv4s_POST
    UINT64_C(201326592),	// ST4Fourv8b
    UINT64_C(209715200),	// ST4Fourv8b_POST
    UINT64_C(1275069440),	// ST4Fourv8h
    UINT64_C(1283458048),	// ST4Fourv8h_POST
    UINT64_C(220225536),	// ST4i16
    UINT64_C(228614144),	// ST4i16_POST
    UINT64_C(220241920),	// ST4i32
    UINT64_C(228630528),	// ST4i32_POST
    UINT64_C(220242944),	// ST4i64
    UINT64_C(228631552),	// ST4i64_POST
    UINT64_C(220209152),	// ST4i8
    UINT64_C(228597760),	// ST4i8_POST
    UINT64_C(144669696),	// STLLRB
    UINT64_C(1218411520),	// STLLRH
    UINT64_C(2292153344),	// STLLRW
    UINT64_C(3365895168),	// STLLRX
    UINT64_C(144702464),	// STLRB
    UINT64_C(1218444288),	// STLRH
    UINT64_C(2292186112),	// STLRW
    UINT64_C(3365927936),	// STLRX
    UINT64_C(2283831296),	// STLXPW
    UINT64_C(3357573120),	// STLXPX
    UINT64_C(134250496),	// STLXRB
    UINT64_C(1207992320),	// STLXRH
    UINT64_C(2281734144),	// STLXRW
    UINT64_C(3355475968),	// STLXRX
    UINT64_C(1811939328),	// STNPDi
    UINT64_C(2885681152),	// STNPQi
    UINT64_C(738197504),	// STNPSi
    UINT64_C(671088640),	// STNPWi
    UINT64_C(2818572288),	// STNPXi
    UINT64_C(1828716544),	// STPDi
    UINT64_C(1820327936),	// STPDpost
    UINT64_C(1837105152),	// STPDpre
    UINT64_C(2902458368),	// STPQi
    UINT64_C(2894069760),	// STPQpost
    UINT64_C(2910846976),	// STPQpre
    UINT64_C(754974720),	// STPSi
    UINT64_C(746586112),	// STPSpost
    UINT64_C(763363328),	// STPSpre
    UINT64_C(687865856),	// STPWi
    UINT64_C(679477248),	// STPWpost
    UINT64_C(696254464),	// STPWpre
    UINT64_C(2835349504),	// STPXi
    UINT64_C(2826960896),	// STPXpost
    UINT64_C(2843738112),	// STPXpre
    UINT64_C(939525120),	// STRBBpost
    UINT64_C(939527168),	// STRBBpre
    UINT64_C(941639680),	// STRBBroW
    UINT64_C(941647872),	// STRBBroX
    UINT64_C(956301312),	// STRBBui
    UINT64_C(1006633984),	// STRBpost
    UINT64_C(1006636032),	// STRBpre
    UINT64_C(1008748544),	// STRBroW
    UINT64_C(1008756736),	// STRBroX
    UINT64_C(1023410176),	// STRBui
    UINT64_C(4227859456),	// STRDpost
    UINT64_C(4227861504),	// STRDpre
    UINT64_C(4229974016),	// STRDroW
    UINT64_C(4229982208),	// STRDroX
    UINT64_C(4244635648),	// STRDui
    UINT64_C(2013266944),	// STRHHpost
    UINT64_C(2013268992),	// STRHHpre
    UINT64_C(2015381504),	// STRHHroW
    UINT64_C(2015389696),	// STRHHroX
    UINT64_C(2030043136),	// STRHHui
    UINT64_C(2080375808),	// STRHpost
    UINT64_C(2080377856),	// STRHpre
    UINT64_C(2082490368),	// STRHroW
    UINT64_C(2082498560),	// STRHroX
    UINT64_C(2097152000),	// STRHui
    UINT64_C(1015022592),	// STRQpost
    UINT64_C(1015024640),	// STRQpre
    UINT64_C(1017137152),	// STRQroW
    UINT64_C(1017145344),	// STRQroX
    UINT64_C(1031798784),	// STRQui
    UINT64_C(3154117632),	// STRSpost
    UINT64_C(3154119680),	// STRSpre
    UINT64_C(3156232192),	// STRSroW
    UINT64_C(3156240384),	// STRSroX
    UINT64_C(3170893824),	// STRSui
    UINT64_C(3087008768),	// STRWpost
    UINT64_C(3087010816),	// STRWpre
    UINT64_C(3089123328),	// STRWroW
    UINT64_C(3089131520),	// STRWroX
    UINT64_C(3103784960),	// STRWui
    UINT64_C(4160750592),	// STRXpost
    UINT64_C(4160752640),	// STRXpre
    UINT64_C(4162865152),	// STRXroW
    UINT64_C(4162873344),	// STRXroX
    UINT64_C(4177526784),	// STRXui
    UINT64_C(939526144),	// STTRBi
    UINT64_C(2013267968),	// STTRHi
    UINT64_C(3087009792),	// STTRWi
    UINT64_C(4160751616),	// STTRXi
    UINT64_C(939524096),	// STURBBi
    UINT64_C(1006632960),	// STURBi
    UINT64_C(4227858432),	// STURDi
    UINT64_C(2013265920),	// STURHHi
    UINT64_C(2080374784),	// STURHi
    UINT64_C(1015021568),	// STURQi
    UINT64_C(3154116608),	// STURSi
    UINT64_C(3087007744),	// STURWi
    UINT64_C(4160749568),	// STURXi
    UINT64_C(2283798528),	// STXPW
    UINT64_C(3357540352),	// STXPX
    UINT64_C(134217728),	// STXRB
    UINT64_C(1207959552),	// STXRH
    UINT64_C(2281701376),	// STXRW
    UINT64_C(3355443200),	// STXRX
    UINT64_C(245391360),	// SUBHNv2i64_v2i32
    UINT64_C(1319133184),	// SUBHNv2i64_v4i32
    UINT64_C(241197056),	// SUBHNv4i32_v4i16
    UINT64_C(1314938880),	// SUBHNv4i32_v8i16
    UINT64_C(1310744576),	// SUBHNv8i16_v16i8
    UINT64_C(237002752),	// SUBHNv8i16_v8i8
    UINT64_C(1895825408),	// SUBSWri
    UINT64_C(0),	// SUBSWrr
    UINT64_C(1795162112),	// SUBSWrs
    UINT64_C(1797259264),	// SUBSWrx
    UINT64_C(4043309056),	// SUBSXri
    UINT64_C(0),	// SUBSXrr
    UINT64_C(3942645760),	// SUBSXrs
    UINT64_C(3944742912),	// SUBSXrx
    UINT64_C(3944767488),	// SUBSXrx64
    UINT64_C(1358954496),	// SUBWri
    UINT64_C(0),	// SUBWrr
    UINT64_C(1258291200),	// SUBWrs
    UINT64_C(1260388352),	// SUBWrx
    UINT64_C(3506438144),	// SUBXri
    UINT64_C(0),	// SUBXrr
    UINT64_C(3405774848),	// SUBXrs
    UINT64_C(3407872000),	// SUBXrx
    UINT64_C(3407896576),	// SUBXrx64
    UINT64_C(1847624704),	// SUBv16i8
    UINT64_C(2128643072),	// SUBv1i64
    UINT64_C(782271488),	// SUBv2i32
    UINT64_C(1860207616),	// SUBv2i64
    UINT64_C(778077184),	// SUBv4i16
    UINT64_C(1856013312),	// SUBv4i32
    UINT64_C(1851819008),	// SUBv8i16
    UINT64_C(773882880),	// SUBv8i8
    UINT64_C(1310734336),	// SUQADDv16i8
    UINT64_C(1583364096),	// SUQADDv1i16
    UINT64_C(1587558400),	// SUQADDv1i32
    UINT64_C(1591752704),	// SUQADDv1i64
    UINT64_C(1579169792),	// SUQADDv1i8
    UINT64_C(245381120),	// SUQADDv2i32
    UINT64_C(1323317248),	// SUQADDv2i64
    UINT64_C(241186816),	// SUQADDv4i16
    UINT64_C(1319122944),	// SUQADDv4i32
    UINT64_C(1314928640),	// SUQADDv8i16
    UINT64_C(236992512),	// SUQADDv8i8
    UINT64_C(3556769793),	// SVC
    UINT64_C(954236928),	// SWPALb
    UINT64_C(4175462400),	// SWPALd
    UINT64_C(2027978752),	// SWPALh
    UINT64_C(3101720576),	// SWPALs
    UINT64_C(950042624),	// SWPAb
    UINT64_C(4171268096),	// SWPAd
    UINT64_C(2023784448),	// SWPAh
    UINT64_C(3097526272),	// SWPAs
    UINT64_C(945848320),	// SWPLb
    UINT64_C(4167073792),	// SWPLd
    UINT64_C(2019590144),	// SWPLh
    UINT64_C(3093331968),	// SWPLs
    UINT64_C(941654016),	// SWPb
    UINT64_C(4162879488),	// SWPd
    UINT64_C(2015395840),	// SWPh
    UINT64_C(3089137664),	// SWPs
    UINT64_C(3576168448),	// SYSLxt
    UINT64_C(3574071296),	// SYSxt
    UINT64_C(1308647424),	// TBLv16i8Four
    UINT64_C(1308622848),	// TBLv16i8One
    UINT64_C(1308639232),	// TBLv16i8Three
    UINT64_C(1308631040),	// TBLv16i8Two
    UINT64_C(234905600),	// TBLv8i8Four
    UINT64_C(234881024),	// TBLv8i8One
    UINT64_C(234897408),	// TBLv8i8Three
    UINT64_C(234889216),	// TBLv8i8Two
    UINT64_C(922746880),	// TBNZW
    UINT64_C(3070230528),	// TBNZX
    UINT64_C(1308651520),	// TBXv16i8Four
    UINT64_C(1308626944),	// TBXv16i8One
    UINT64_C(1308643328),	// TBXv16i8Three
    UINT64_C(1308635136),	// TBXv16i8Two
    UINT64_C(234909696),	// TBXv8i8Four
    UINT64_C(234885120),	// TBXv8i8One
    UINT64_C(234901504),	// TBXv8i8Three
    UINT64_C(234893312),	// TBXv8i8Two
    UINT64_C(905969664),	// TBZW
    UINT64_C(3053453312),	// TBZX
    UINT64_C(0),	// TCRETURNdi
    UINT64_C(0),	// TCRETURNri
    UINT64_C(0),	// TLSDESCCALL
    UINT64_C(0),	// TLSDESC_CALLSEQ
    UINT64_C(1308633088),	// TRN1v16i8
    UINT64_C(243279872),	// TRN1v2i32
    UINT64_C(1321216000),	// TRN1v2i64
    UINT64_C(239085568),	// TRN1v4i16
    UINT64_C(1317021696),	// TRN1v4i32
    UINT64_C(1312827392),	// TRN1v8i16
    UINT64_C(234891264),	// TRN1v8i8
    UINT64_C(1308649472),	// TRN2v16i8
    UINT64_C(243296256),	// TRN2v2i32
    UINT64_C(1321232384),	// TRN2v2i64
    UINT64_C(239101952),	// TRN2v4i16
    UINT64_C(1317038080),	// TRN2v4i32
    UINT64_C(1312843776),	// TRN2v8i16
    UINT64_C(234907648),	// TRN2v8i8
    UINT64_C(1847611392),	// UABALv16i8_v8i16
    UINT64_C(782258176),	// UABALv2i32_v2i64
    UINT64_C(778063872),	// UABALv4i16_v4i32
    UINT64_C(1856000000),	// UABALv4i32_v2i64
    UINT64_C(1851805696),	// UABALv8i16_v4i32
    UINT64_C(773869568),	// UABALv8i8_v8i16
    UINT64_C(1847622656),	// UABAv16i8
    UINT64_C(782269440),	// UABAv2i32
    UINT64_C(778075136),	// UABAv4i16
    UINT64_C(1856011264),	// UABAv4i32
    UINT64_C(1851816960),	// UABAv8i16
    UINT64_C(773880832),	// UABAv8i8
    UINT64_C(1847619584),	// UABDLv16i8_v8i16
    UINT64_C(782266368),	// UABDLv2i32_v2i64
    UINT64_C(778072064),	// UABDLv4i16_v4i32
    UINT64_C(1856008192),	// UABDLv4i32_v2i64
    UINT64_C(1851813888),	// UABDLv8i16_v4i32
    UINT64_C(773877760),	// UABDLv8i8_v8i16
    UINT64_C(1847620608),	// UABDv16i8
    UINT64_C(782267392),	// UABDv2i32
    UINT64_C(778073088),	// UABDv4i16
    UINT64_C(1856009216),	// UABDv4i32
    UINT64_C(1851814912),	// UABDv8i16
    UINT64_C(773878784),	// UABDv8i8
    UINT64_C(1847617536),	// UADALPv16i8_v8i16
    UINT64_C(782264320),	// UADALPv2i32_v1i64
    UINT64_C(778070016),	// UADALPv4i16_v2i32
    UINT64_C(1856006144),	// UADALPv4i32_v2i64
    UINT64_C(1851811840),	// UADALPv8i16_v4i32
    UINT64_C(773875712),	// UADALPv8i8_v4i16
    UINT64_C(1847601152),	// UADDLPv16i8_v8i16
    UINT64_C(782247936),	// UADDLPv2i32_v1i64
    UINT64_C(778053632),	// UADDLPv4i16_v2i32
    UINT64_C(1855989760),	// UADDLPv4i32_v2i64
    UINT64_C(1851795456),	// UADDLPv8i16_v4i32
    UINT64_C(773859328),	// UADDLPv8i8_v4i16
    UINT64_C(1848653824),	// UADDLVv16i8v
    UINT64_C(779106304),	// UADDLVv4i16v
    UINT64_C(1857042432),	// UADDLVv4i32v
    UINT64_C(1852848128),	// UADDLVv8i16v
    UINT64_C(774912000),	// UADDLVv8i8v
    UINT64_C(1847590912),	// UADDLv16i8_v8i16
    UINT64_C(782237696),	// UADDLv2i32_v2i64
    UINT64_C(778043392),	// UADDLv4i16_v4i32
    UINT64_C(1855979520),	// UADDLv4i32_v2i64
    UINT64_C(1851785216),	// UADDLv8i16_v4i32
    UINT64_C(773849088),	// UADDLv8i8_v8i16
    UINT64_C(1847595008),	// UADDWv16i8_v8i16
    UINT64_C(782241792),	// UADDWv2i32_v2i64
    UINT64_C(778047488),	// UADDWv4i16_v4i32
    UINT64_C(1855983616),	// UADDWv4i32_v2i64
    UINT64_C(1851789312),	// UADDWv8i16_v4i32
    UINT64_C(773853184),	// UADDWv8i8_v8i16
    UINT64_C(1392508928),	// UBFMWri
    UINT64_C(3544186880),	// UBFMXri
    UINT64_C(507740160),	// UCVTFSWDri
    UINT64_C(516128768),	// UCVTFSWHri
    UINT64_C(503545856),	// UCVTFSWSri
    UINT64_C(2655191040),	// UCVTFSXDri
    UINT64_C(2663579648),	// UCVTFSXHri
    UINT64_C(2650996736),	// UCVTFSXSri
    UINT64_C(509804544),	// UCVTFUWDri
    UINT64_C(518193152),	// UCVTFUWHri
    UINT64_C(505610240),	// UCVTFUWSri
    UINT64_C(2657288192),	// UCVTFUXDri
    UINT64_C(2665676800),	// UCVTFUXHri
    UINT64_C(2653093888),	// UCVTFUXSri
    UINT64_C(2134959104),	// UCVTFd
    UINT64_C(2131813376),	// UCVTFh
    UINT64_C(2132861952),	// UCVTFs
    UINT64_C(2121914368),	// UCVTFv1i16
    UINT64_C(2116147200),	// UCVTFv1i32
    UINT64_C(2120341504),	// UCVTFv1i64
    UINT64_C(773969920),	// UCVTFv2f32
    UINT64_C(1851906048),	// UCVTFv2f64
    UINT64_C(790684672),	// UCVTFv2i32_shift
    UINT64_C(1866523648),	// UCVTFv2i64_shift
    UINT64_C(779737088),	// UCVTFv4f16
    UINT64_C(1847711744),	// UCVTFv4f32
    UINT64_C(789636096),	// UCVTFv4i16_shift
    UINT64_C(1864426496),	// UCVTFv4i32_shift
    UINT64_C(1853478912),	// UCVTFv8f16
    UINT64_C(1863377920),	// UCVTFv8i16_shift
    UINT64_C(448792576),	// UDIVWr
    UINT64_C(2596276224),	// UDIVXr
    UINT64_C(1847591936),	// UHADDv16i8
    UINT64_C(782238720),	// UHADDv2i32
    UINT64_C(778044416),	// UHADDv4i16
    UINT64_C(1855980544),	// UHADDv4i32
    UINT64_C(1851786240),	// UHADDv8i16
    UINT64_C(773850112),	// UHADDv8i8
    UINT64_C(1847600128),	// UHSUBv16i8
    UINT64_C(782246912),	// UHSUBv2i32
    UINT64_C(778052608),	// UHSUBv4i16
    UINT64_C(1855988736),	// UHSUBv4i32
    UINT64_C(1851794432),	// UHSUBv8i16
    UINT64_C(773858304),	// UHSUBv8i8
    UINT64_C(2610954240),	// UMADDLrrr
    UINT64_C(1847632896),	// UMAXPv16i8
    UINT64_C(782279680),	// UMAXPv2i32
    UINT64_C(778085376),	// UMAXPv4i16
    UINT64_C(1856021504),	// UMAXPv4i32
    UINT64_C(1851827200),	// UMAXPv8i16
    UINT64_C(773891072),	// UMAXPv8i8
    UINT64_C(1848682496),	// UMAXVv16i8v
    UINT64_C(779134976),	// UMAXVv4i16v
    UINT64_C(1857071104),	// UMAXVv4i32v
    UINT64_C(1852876800),	// UMAXVv8i16v
    UINT64_C(774940672),	// UMAXVv8i8v
    UINT64_C(1847616512),	// UMAXv16i8
    UINT64_C(782263296),	// UMAXv2i32
    UINT64_C(778068992),	// UMAXv4i16
    UINT64_C(1856005120),	// UMAXv4i32
    UINT64_C(1851810816),	// UMAXv8i16
    UINT64_C(773874688),	// UMAXv8i8
    UINT64_C(1847634944),	// UMINPv16i8
    UINT64_C(782281728),	// UMINPv2i32
    UINT64_C(778087424),	// UMINPv4i16
    UINT64_C(1856023552),	// UMINPv4i32
    UINT64_C(1851829248),	// UMINPv8i16
    UINT64_C(773893120),	// UMINPv8i8
    UINT64_C(1848748032),	// UMINVv16i8v
    UINT64_C(779200512),	// UMINVv4i16v
    UINT64_C(1857136640),	// UMINVv4i32v
    UINT64_C(1852942336),	// UMINVv8i16v
    UINT64_C(775006208),	// UMINVv8i8v
    UINT64_C(1847618560),	// UMINv16i8
    UINT64_C(782265344),	// UMINv2i32
    UINT64_C(778071040),	// UMINv4i16
    UINT64_C(1856007168),	// UMINv4i32
    UINT64_C(1851812864),	// UMINv8i16
    UINT64_C(773876736),	// UMINv8i8
    UINT64_C(1847623680),	// UMLALv16i8_v8i16
    UINT64_C(796925952),	// UMLALv2i32_indexed
    UINT64_C(782270464),	// UMLALv2i32_v2i64
    UINT64_C(792731648),	// UMLALv4i16_indexed
    UINT64_C(778076160),	// UMLALv4i16_v4i32
    UINT64_C(1870667776),	// UMLALv4i32_indexed
    UINT64_C(1856012288),	// UMLALv4i32_v2i64
    UINT64_C(1866473472),	// UMLALv8i16_indexed
    UINT64_C(1851817984),	// UMLALv8i16_v4i32
    UINT64_C(773881856),	// UMLALv8i8_v8i16
    UINT64_C(1847631872),	// UMLSLv16i8_v8i16
    UINT64_C(796942336),	// UMLSLv2i32_indexed
    UINT64_C(782278656),	// UMLSLv2i32_v2i64
    UINT64_C(792748032),	// UMLSLv4i16_indexed
    UINT64_C(778084352),	// UMLSLv4i16_v4i32
    UINT64_C(1870684160),	// UMLSLv4i32_indexed
    UINT64_C(1856020480),	// UMLSLv4i32_v2i64
    UINT64_C(1866489856),	// UMLSLv8i16_indexed
    UINT64_C(1851826176),	// UMLSLv8i16_v4i32
    UINT64_C(773890048),	// UMLSLv8i8_v8i16
    UINT64_C(235027456),	// UMOVvi16
    UINT64_C(235158528),	// UMOVvi32
    UINT64_C(1309162496),	// UMOVvi64
    UINT64_C(234961920),	// UMOVvi8
    UINT64_C(2610987008),	// UMSUBLrrr
    UINT64_C(2613051392),	// UMULHrr
    UINT64_C(1847640064),	// UMULLv16i8_v8i16
    UINT64_C(796958720),	// UMULLv2i32_indexed
    UINT64_C(782286848),	// UMULLv2i32_v2i64
    UINT64_C(792764416),	// UMULLv4i16_indexed
    UINT64_C(778092544),	// UMULLv4i16_v4i32
    UINT64_C(1870700544),	// UMULLv4i32_indexed
    UINT64_C(1856028672),	// UMULLv4i32_v2i64
    UINT64_C(1866506240),	// UMULLv8i16_indexed
    UINT64_C(1851834368),	// UMULLv8i16_v4i32
    UINT64_C(773898240),	// UMULLv8i8_v8i16
    UINT64_C(1847593984),	// UQADDv16i8
    UINT64_C(2120223744),	// UQADDv1i16
    UINT64_C(2124418048),	// UQADDv1i32
    UINT64_C(2128612352),	// UQADDv1i64
    UINT64_C(2116029440),	// UQADDv1i8
    UINT64_C(782240768),	// UQADDv2i32
    UINT64_C(1860176896),	// UQADDv2i64
    UINT64_C(778046464),	// UQADDv4i16
    UINT64_C(1855982592),	// UQADDv4i32
    UINT64_C(1851788288),	// UQADDv8i16
    UINT64_C(773852160),	// UQADDv8i8
    UINT64_C(1847614464),	// UQRSHLv16i8
    UINT64_C(2120244224),	// UQRSHLv1i16
    UINT64_C(2124438528),	// UQRSHLv1i32
    UINT64_C(2128632832),	// UQRSHLv1i64
    UINT64_C(2116049920),	// UQRSHLv1i8
    UINT64_C(782261248),	// UQRSHLv2i32
    UINT64_C(1860197376),	// UQRSHLv2i64
    UINT64_C(778066944),	// UQRSHLv4i16
    UINT64_C(1856003072),	// UQRSHLv4i32
    UINT64_C(1851808768),	// UQRSHLv8i16
    UINT64_C(773872640),	// UQRSHLv8i8
    UINT64_C(2131270656),	// UQRSHRNb
    UINT64_C(2131794944),	// UQRSHRNh
    UINT64_C(2132843520),	// UQRSHRNs
    UINT64_C(1862835200),	// UQRSHRNv16i8_shift
    UINT64_C(790666240),	// UQRSHRNv2i32_shift
    UINT64_C(789617664),	// UQRSHRNv4i16_shift
    UINT64_C(1864408064),	// UQRSHRNv4i32_shift
    UINT64_C(1863359488),	// UQRSHRNv8i16_shift
    UINT64_C(789093376),	// UQRSHRNv8i8_shift
    UINT64_C(2131260416),	// UQSHLb
    UINT64_C(2134930432),	// UQSHLd
    UINT64_C(2131784704),	// UQSHLh
    UINT64_C(2132833280),	// UQSHLs
    UINT64_C(1847610368),	// UQSHLv16i8
    UINT64_C(1862824960),	// UQSHLv16i8_shift
    UINT64_C(2120240128),	// UQSHLv1i16
    UINT64_C(2124434432),	// UQSHLv1i32
    UINT64_C(2128628736),	// UQSHLv1i64
    UINT64_C(2116045824),	// UQSHLv1i8
    UINT64_C(782257152),	// UQSHLv2i32
    UINT64_C(790656000),	// UQSHLv2i32_shift
    UINT64_C(1860193280),	// UQSHLv2i64
    UINT64_C(1866494976),	// UQSHLv2i64_shift
    UINT64_C(778062848),	// UQSHLv4i16
    UINT64_C(789607424),	// UQSHLv4i16_shift
    UINT64_C(1855998976),	// UQSHLv4i32
    UINT64_C(1864397824),	// UQSHLv4i32_shift
    UINT64_C(1851804672),	// UQSHLv8i16
    UINT64_C(1863349248),	// UQSHLv8i16_shift
    UINT64_C(773868544),	// UQSHLv8i8
    UINT64_C(789083136),	// UQSHLv8i8_shift
    UINT64_C(2131268608),	// UQSHRNb
    UINT64_C(2131792896),	// UQSHRNh
    UINT64_C(2132841472),	// UQSHRNs
    UINT64_C(1862833152),	// UQSHRNv16i8_shift
    UINT64_C(790664192),	// UQSHRNv2i32_shift
    UINT64_C(789615616),	// UQSHRNv4i16_shift
    UINT64_C(1864406016),	// UQSHRNv4i32_shift
    UINT64_C(1863357440),	// UQSHRNv8i16_shift
    UINT64_C(789091328),	// UQSHRNv8i8_shift
    UINT64_C(1847602176),	// UQSUBv16i8
    UINT64_C(2120231936),	// UQSUBv1i16
    UINT64_C(2124426240),	// UQSUBv1i32
    UINT64_C(2128620544),	// UQSUBv1i64
    UINT64_C(2116037632),	// UQSUBv1i8
    UINT64_C(782248960),	// UQSUBv2i32
    UINT64_C(1860185088),	// UQSUBv2i64
    UINT64_C(778054656),	// UQSUBv4i16
    UINT64_C(1855990784),	// UQSUBv4i32
    UINT64_C(1851796480),	// UQSUBv8i16
    UINT64_C(773860352),	// UQSUBv8i8
    UINT64_C(1847674880),	// UQXTNv16i8
    UINT64_C(2120304640),	// UQXTNv1i16
    UINT64_C(2124498944),	// UQXTNv1i32
    UINT64_C(2116110336),	// UQXTNv1i8
    UINT64_C(782321664),	// UQXTNv2i32
    UINT64_C(778127360),	// UQXTNv4i16
    UINT64_C(1856063488),	// UQXTNv4i32
    UINT64_C(1851869184),	// UQXTNv8i16
    UINT64_C(773933056),	// UQXTNv8i8
    UINT64_C(245483520),	// URECPEv2i32
    UINT64_C(1319225344),	// URECPEv4i32
    UINT64_C(1847596032),	// URHADDv16i8
    UINT64_C(782242816),	// URHADDv2i32
    UINT64_C(778048512),	// URHADDv4i16
    UINT64_C(1855984640),	// URHADDv4i32
    UINT64_C(1851790336),	// URHADDv8i16
    UINT64_C(773854208),	// URHADDv8i8
    UINT64_C(1847612416),	// URSHLv16i8
    UINT64_C(2128630784),	// URSHLv1i64
    UINT64_C(782259200),	// URSHLv2i32
    UINT64_C(1860195328),	// URSHLv2i64
    UINT64_C(778064896),	// URSHLv4i16
    UINT64_C(1856001024),	// URSHLv4i32
    UINT64_C(1851806720),	// URSHLv8i16
    UINT64_C(773870592),	// URSHLv8i8
    UINT64_C(2134909952),	// URSHRd
    UINT64_C(1862804480),	// URSHRv16i8_shift
    UINT64_C(790635520),	// URSHRv2i32_shift
    UINT64_C(1866474496),	// URSHRv2i64_shift
    UINT64_C(789586944),	// URSHRv4i16_shift
    UINT64_C(1864377344),	// URSHRv4i32_shift
    UINT64_C(1863328768),	// URSHRv8i16_shift
    UINT64_C(789062656),	// URSHRv8i8_shift
    UINT64_C(782354432),	// URSQRTEv2i32
    UINT64_C(1856096256),	// URSQRTEv4i32
    UINT64_C(2134914048),	// URSRAd
    UINT64_C(1862808576),	// URSRAv16i8_shift
    UINT64_C(790639616),	// URSRAv2i32_shift
    UINT64_C(1866478592),	// URSRAv2i64_shift
    UINT64_C(789591040),	// URSRAv4i16_shift
    UINT64_C(1864381440),	// URSRAv4i32_shift
    UINT64_C(1863332864),	// URSRAv8i16_shift
    UINT64_C(789066752),	// URSRAv8i8_shift
    UINT64_C(1862837248),	// USHLLv16i8_shift
    UINT64_C(790668288),	// USHLLv2i32_shift
    UINT64_C(789619712),	// USHLLv4i16_shift
    UINT64_C(1864410112),	// USHLLv4i32_shift
    UINT64_C(1863361536),	// USHLLv8i16_shift
    UINT64_C(789095424),	// USHLLv8i8_shift
    UINT64_C(1847608320),	// USHLv16i8
    UINT64_C(2128626688),	// USHLv1i64
    UINT64_C(782255104),	// USHLv2i32
    UINT64_C(1860191232),	// USHLv2i64
    UINT64_C(778060800),	// USHLv4i16
    UINT64_C(1855996928),	// USHLv4i32
    UINT64_C(1851802624),	// USHLv8i16
    UINT64_C(773866496),	// USHLv8i8
    UINT64_C(2134901760),	// USHRd
    UINT64_C(1862796288),	// USHRv16i8_shift
    UINT64_C(790627328),	// USHRv2i32_shift
    UINT64_C(1866466304),	// USHRv2i64_shift
    UINT64_C(789578752),	// USHRv4i16_shift
    UINT64_C(1864369152),	// USHRv4i32_shift
    UINT64_C(1863320576),	// USHRv8i16_shift
    UINT64_C(789054464),	// USHRv8i8_shift
    UINT64_C(1847605248),	// USQADDv16i8
    UINT64_C(2120235008),	// USQADDv1i16
    UINT64_C(2124429312),	// USQADDv1i32
    UINT64_C(2128623616),	// USQADDv1i64
    UINT64_C(2116040704),	// USQADDv1i8
    UINT64_C(782252032),	// USQADDv2i32
    UINT64_C(1860188160),	// USQADDv2i64
    UINT64_C(778057728),	// USQADDv4i16
    UINT64_C(1855993856),	// USQADDv4i32
    UINT64_C(1851799552),	// USQADDv8i16
    UINT64_C(773863424),	// USQADDv8i8
    UINT64_C(2134905856),	// USRAd
    UINT64_C(1862800384),	// USRAv16i8_shift
    UINT64_C(790631424),	// USRAv2i32_shift
    UINT64_C(1866470400),	// USRAv2i64_shift
    UINT64_C(789582848),	// USRAv4i16_shift
    UINT64_C(1864373248),	// USRAv4i32_shift
    UINT64_C(1863324672),	// USRAv8i16_shift
    UINT64_C(789058560),	// USRAv8i8_shift
    UINT64_C(1847599104),	// USUBLv16i8_v8i16
    UINT64_C(782245888),	// USUBLv2i32_v2i64
    UINT64_C(778051584),	// USUBLv4i16_v4i32
    UINT64_C(1855987712),	// USUBLv4i32_v2i64
    UINT64_C(1851793408),	// USUBLv8i16_v4i32
    UINT64_C(773857280),	// USUBLv8i8_v8i16
    UINT64_C(1847603200),	// USUBWv16i8_v8i16
    UINT64_C(782249984),	// USUBWv2i32_v2i64
    UINT64_C(778055680),	// USUBWv4i16_v4i32
    UINT64_C(1855991808),	// USUBWv4i32_v2i64
    UINT64_C(1851797504),	// USUBWv8i16_v4i32
    UINT64_C(773861376),	// USUBWv8i8_v8i16
    UINT64_C(1308628992),	// UZP1v16i8
    UINT64_C(243275776),	// UZP1v2i32
    UINT64_C(1321211904),	// UZP1v2i64
    UINT64_C(239081472),	// UZP1v4i16
    UINT64_C(1317017600),	// UZP1v4i32
    UINT64_C(1312823296),	// UZP1v8i16
    UINT64_C(234887168),	// UZP1v8i8
    UINT64_C(1308645376),	// UZP2v16i8
    UINT64_C(243292160),	// UZP2v2i32
    UINT64_C(1321228288),	// UZP2v2i64
    UINT64_C(239097856),	// UZP2v4i16
    UINT64_C(1317033984),	// UZP2v4i32
    UINT64_C(1312839680),	// UZP2v8i16
    UINT64_C(234903552),	// UZP2v8i8
    UINT64_C(1310795776),	// XTNv16i8
    UINT64_C(245442560),	// XTNv2i32
    UINT64_C(241248256),	// XTNv4i16
    UINT64_C(1319184384),	// XTNv4i32
    UINT64_C(1314990080),	// XTNv8i16
    UINT64_C(237053952),	// XTNv8i8
    UINT64_C(1308637184),	// ZIP1v16i8
    UINT64_C(243283968),	// ZIP1v2i32
    UINT64_C(1321220096),	// ZIP1v2i64
    UINT64_C(239089664),	// ZIP1v4i16
    UINT64_C(1317025792),	// ZIP1v4i32
    UINT64_C(1312831488),	// ZIP1v8i16
    UINT64_C(234895360),	// ZIP1v8i8
    UINT64_C(1308653568),	// ZIP2v16i8
    UINT64_C(243300352),	// ZIP2v2i32
    UINT64_C(1321236480),	// ZIP2v2i64
    UINT64_C(239106048),	// ZIP2v4i16
    UINT64_C(1317042176),	// ZIP2v4i32
    UINT64_C(1312847872),	// ZIP2v8i16
    UINT64_C(234911744),	// ZIP2v8i8
    UINT64_C(0)
  };
  const unsigned opcode = MI.getOpcode();
  uint64_t Value = InstBits[opcode];
  uint64_t op = 0;
  (void)op;  // suppress warning
  switch (opcode) {
    case AArch64::ADDSWrr:
    case AArch64::ADDSXrr:
    case AArch64::ADDWrr:
    case AArch64::ADDXrr:
    case AArch64::ADJCALLSTACKDOWN:
    case AArch64::ADJCALLSTACKUP:
    case AArch64::ANDSWrr:
    case AArch64::ANDSXrr:
    case AArch64::ANDWrr:
    case AArch64::ANDXrr:
    case AArch64::BICSWrr:
    case AArch64::BICSXrr:
    case AArch64::BICWrr:
    case AArch64::BICXrr:
    case AArch64::CMP_SWAP_128:
    case AArch64::CMP_SWAP_16:
    case AArch64::CMP_SWAP_32:
    case AArch64::CMP_SWAP_64:
    case AArch64::CMP_SWAP_8:
    case AArch64::DRPS:
    case AArch64::EONWrr:
    case AArch64::EONXrr:
    case AArch64::EORWrr:
    case AArch64::EORXrr:
    case AArch64::ERET:
    case AArch64::F128CSEL:
    case AArch64::FMOVD0:
    case AArch64::FMOVS0:
    case AArch64::LOADgot:
    case AArch64::MOVaddr:
    case AArch64::MOVaddrBA:
    case AArch64::MOVaddrCP:
    case AArch64::MOVaddrEXT:
    case AArch64::MOVaddrJT:
    case AArch64::MOVaddrTLS:
    case AArch64::MOVi32imm:
    case AArch64::MOVi64imm:
    case AArch64::ORNWrr:
    case AArch64::ORNXrr:
    case AArch64::ORRWrr:
    case AArch64::ORRXrr:
    case AArch64::RET_ReallyLR:
    case AArch64::SUBSWrr:
    case AArch64::SUBSXrr:
    case AArch64::SUBWrr:
    case AArch64::SUBXrr:
    case AArch64::TCRETURNdi:
    case AArch64::TCRETURNri:
    case AArch64::TLSDESCCALL:
    case AArch64::TLSDESC_CALLSEQ: {
      break;
    }
    case AArch64::CLREX:
    case AArch64::DMB:
    case AArch64::DSB:
    case AArch64::ISB: {
      // op: CRm
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 8;
      break;
    }
    case AArch64::ABSv16i8:
    case AArch64::ABSv1i64:
    case AArch64::ABSv2i32:
    case AArch64::ABSv2i64:
    case AArch64::ABSv4i16:
    case AArch64::ABSv4i32:
    case AArch64::ABSv8i16:
    case AArch64::ABSv8i8:
    case AArch64::ADDPv2i64p:
    case AArch64::ADDVv16i8v:
    case AArch64::ADDVv4i16v:
    case AArch64::ADDVv4i32v:
    case AArch64::ADDVv8i16v:
    case AArch64::ADDVv8i8v:
    case AArch64::AESIMCrr:
    case AArch64::AESMCrr:
    case AArch64::CLSWr:
    case AArch64::CLSXr:
    case AArch64::CLSv16i8:
    case AArch64::CLSv2i32:
    case AArch64::CLSv4i16:
    case AArch64::CLSv4i32:
    case AArch64::CLSv8i16:
    case AArch64::CLSv8i8:
    case AArch64::CLZWr:
    case AArch64::CLZXr:
    case AArch64::CLZv16i8:
    case AArch64::CLZv2i32:
    case AArch64::CLZv4i16:
    case AArch64::CLZv4i32:
    case AArch64::CLZv8i16:
    case AArch64::CLZv8i8:
    case AArch64::CMEQv16i8rz:
    case AArch64::CMEQv1i64rz:
    case AArch64::CMEQv2i32rz:
    case AArch64::CMEQv2i64rz:
    case AArch64::CMEQv4i16rz:
    case AArch64::CMEQv4i32rz:
    case AArch64::CMEQv8i16rz:
    case AArch64::CMEQv8i8rz:
    case AArch64::CMGEv16i8rz:
    case AArch64::CMGEv1i64rz:
    case AArch64::CMGEv2i32rz:
    case AArch64::CMGEv2i64rz:
    case AArch64::CMGEv4i16rz:
    case AArch64::CMGEv4i32rz:
    case AArch64::CMGEv8i16rz:
    case AArch64::CMGEv8i8rz:
    case AArch64::CMGTv16i8rz:
    case AArch64::CMGTv1i64rz:
    case AArch64::CMGTv2i32rz:
    case AArch64::CMGTv2i64rz:
    case AArch64::CMGTv4i16rz:
    case AArch64::CMGTv4i32rz:
    case AArch64::CMGTv8i16rz:
    case AArch64::CMGTv8i8rz:
    case AArch64::CMLEv16i8rz:
    case AArch64::CMLEv1i64rz:
    case AArch64::CMLEv2i32rz:
    case AArch64::CMLEv2i64rz:
    case AArch64::CMLEv4i16rz:
    case AArch64::CMLEv4i32rz:
    case AArch64::CMLEv8i16rz:
    case AArch64::CMLEv8i8rz:
    case AArch64::CMLTv16i8rz:
    case AArch64::CMLTv1i64rz:
    case AArch64::CMLTv2i32rz:
    case AArch64::CMLTv2i64rz:
    case AArch64::CMLTv4i16rz:
    case AArch64::CMLTv4i32rz:
    case AArch64::CMLTv8i16rz:
    case AArch64::CMLTv8i8rz:
    case AArch64::CNTv16i8:
    case AArch64::CNTv8i8:
    case AArch64::DUPv16i8gpr:
    case AArch64::DUPv2i32gpr:
    case AArch64::DUPv2i64gpr:
    case AArch64::DUPv4i16gpr:
    case AArch64::DUPv4i32gpr:
    case AArch64::DUPv8i16gpr:
    case AArch64::DUPv8i8gpr:
    case AArch64::FABSDr:
    case AArch64::FABSHr:
    case AArch64::FABSSr:
    case AArch64::FABSv2f32:
    case AArch64::FABSv2f64:
    case AArch64::FABSv4f16:
    case AArch64::FABSv4f32:
    case AArch64::FABSv8f16:
    case AArch64::FADDPv2i16p:
    case AArch64::FADDPv2i32p:
    case AArch64::FADDPv2i64p:
    case AArch64::FCMEQv1i16rz:
    case AArch64::FCMEQv1i32rz:
    case AArch64::FCMEQv1i64rz:
    case AArch64::FCMEQv2i32rz:
    case AArch64::FCMEQv2i64rz:
    case AArch64::FCMEQv4i16rz:
    case AArch64::FCMEQv4i32rz:
    case AArch64::FCMEQv8i16rz:
    case AArch64::FCMGEv1i16rz:
    case AArch64::FCMGEv1i32rz:
    case AArch64::FCMGEv1i64rz:
    case AArch64::FCMGEv2i32rz:
    case AArch64::FCMGEv2i64rz:
    case AArch64::FCMGEv4i16rz:
    case AArch64::FCMGEv4i32rz:
    case AArch64::FCMGEv8i16rz:
    case AArch64::FCMGTv1i16rz:
    case AArch64::FCMGTv1i32rz:
    case AArch64::FCMGTv1i64rz:
    case AArch64::FCMGTv2i32rz:
    case AArch64::FCMGTv2i64rz:
    case AArch64::FCMGTv4i16rz:
    case AArch64::FCMGTv4i32rz:
    case AArch64::FCMGTv8i16rz:
    case AArch64::FCMLEv1i16rz:
    case AArch64::FCMLEv1i32rz:
    case AArch64::FCMLEv1i64rz:
    case AArch64::FCMLEv2i32rz:
    case AArch64::FCMLEv2i64rz:
    case AArch64::FCMLEv4i16rz:
    case AArch64::FCMLEv4i32rz:
    case AArch64::FCMLEv8i16rz:
    case AArch64::FCMLTv1i16rz:
    case AArch64::FCMLTv1i32rz:
    case AArch64::FCMLTv1i64rz:
    case AArch64::FCMLTv2i32rz:
    case AArch64::FCMLTv2i64rz:
    case AArch64::FCMLTv4i16rz:
    case AArch64::FCMLTv4i32rz:
    case AArch64::FCMLTv8i16rz:
    case AArch64::FCVTASUWDr:
    case AArch64::FCVTASUWHr:
    case AArch64::FCVTASUWSr:
    case AArch64::FCVTASUXDr:
    case AArch64::FCVTASUXHr:
    case AArch64::FCVTASUXSr:
    case AArch64::FCVTASv1f16:
    case AArch64::FCVTASv1i32:
    case AArch64::FCVTASv1i64:
    case AArch64::FCVTASv2f32:
    case AArch64::FCVTASv2f64:
    case AArch64::FCVTASv4f16:
    case AArch64::FCVTASv4f32:
    case AArch64::FCVTASv8f16:
    case AArch64::FCVTAUUWDr:
    case AArch64::FCVTAUUWHr:
    case AArch64::FCVTAUUWSr:
    case AArch64::FCVTAUUXDr:
    case AArch64::FCVTAUUXHr:
    case AArch64::FCVTAUUXSr:
    case AArch64::FCVTAUv1f16:
    case AArch64::FCVTAUv1i32:
    case AArch64::FCVTAUv1i64:
    case AArch64::FCVTAUv2f32:
    case AArch64::FCVTAUv2f64:
    case AArch64::FCVTAUv4f16:
    case AArch64::FCVTAUv4f32:
    case AArch64::FCVTAUv8f16:
    case AArch64::FCVTDHr:
    case AArch64::FCVTDSr:
    case AArch64::FCVTHDr:
    case AArch64::FCVTHSr:
    case AArch64::FCVTLv2i32:
    case AArch64::FCVTLv4i16:
    case AArch64::FCVTLv4i32:
    case AArch64::FCVTLv8i16:
    case AArch64::FCVTMSUWDr:
    case AArch64::FCVTMSUWHr:
    case AArch64::FCVTMSUWSr:
    case AArch64::FCVTMSUXDr:
    case AArch64::FCVTMSUXHr:
    case AArch64::FCVTMSUXSr:
    case AArch64::FCVTMSv1f16:
    case AArch64::FCVTMSv1i32:
    case AArch64::FCVTMSv1i64:
    case AArch64::FCVTMSv2f32:
    case AArch64::FCVTMSv2f64:
    case AArch64::FCVTMSv4f16:
    case AArch64::FCVTMSv4f32:
    case AArch64::FCVTMSv8f16:
    case AArch64::FCVTMUUWDr:
    case AArch64::FCVTMUUWHr:
    case AArch64::FCVTMUUWSr:
    case AArch64::FCVTMUUXDr:
    case AArch64::FCVTMUUXHr:
    case AArch64::FCVTMUUXSr:
    case AArch64::FCVTMUv1f16:
    case AArch64::FCVTMUv1i32:
    case AArch64::FCVTMUv1i64:
    case AArch64::FCVTMUv2f32:
    case AArch64::FCVTMUv2f64:
    case AArch64::FCVTMUv4f16:
    case AArch64::FCVTMUv4f32:
    case AArch64::FCVTMUv8f16:
    case AArch64::FCVTNSUWDr:
    case AArch64::FCVTNSUWHr:
    case AArch64::FCVTNSUWSr:
    case AArch64::FCVTNSUXDr:
    case AArch64::FCVTNSUXHr:
    case AArch64::FCVTNSUXSr:
    case AArch64::FCVTNSv1f16:
    case AArch64::FCVTNSv1i32:
    case AArch64::FCVTNSv1i64:
    case AArch64::FCVTNSv2f32:
    case AArch64::FCVTNSv2f64:
    case AArch64::FCVTNSv4f16:
    case AArch64::FCVTNSv4f32:
    case AArch64::FCVTNSv8f16:
    case AArch64::FCVTNUUWDr:
    case AArch64::FCVTNUUWHr:
    case AArch64::FCVTNUUWSr:
    case AArch64::FCVTNUUXDr:
    case AArch64::FCVTNUUXHr:
    case AArch64::FCVTNUUXSr:
    case AArch64::FCVTNUv1f16:
    case AArch64::FCVTNUv1i32:
    case AArch64::FCVTNUv1i64:
    case AArch64::FCVTNUv2f32:
    case AArch64::FCVTNUv2f64:
    case AArch64::FCVTNUv4f16:
    case AArch64::FCVTNUv4f32:
    case AArch64::FCVTNUv8f16:
    case AArch64::FCVTNv2i32:
    case AArch64::FCVTNv4i16:
    case AArch64::FCVTPSUWDr:
    case AArch64::FCVTPSUWHr:
    case AArch64::FCVTPSUWSr:
    case AArch64::FCVTPSUXDr:
    case AArch64::FCVTPSUXHr:
    case AArch64::FCVTPSUXSr:
    case AArch64::FCVTPSv1f16:
    case AArch64::FCVTPSv1i32:
    case AArch64::FCVTPSv1i64:
    case AArch64::FCVTPSv2f32:
    case AArch64::FCVTPSv2f64:
    case AArch64::FCVTPSv4f16:
    case AArch64::FCVTPSv4f32:
    case AArch64::FCVTPSv8f16:
    case AArch64::FCVTPUUWDr:
    case AArch64::FCVTPUUWHr:
    case AArch64::FCVTPUUWSr:
    case AArch64::FCVTPUUXDr:
    case AArch64::FCVTPUUXHr:
    case AArch64::FCVTPUUXSr:
    case AArch64::FCVTPUv1f16:
    case AArch64::FCVTPUv1i32:
    case AArch64::FCVTPUv1i64:
    case AArch64::FCVTPUv2f32:
    case AArch64::FCVTPUv2f64:
    case AArch64::FCVTPUv4f16:
    case AArch64::FCVTPUv4f32:
    case AArch64::FCVTPUv8f16:
    case AArch64::FCVTSDr:
    case AArch64::FCVTSHr:
    case AArch64::FCVTXNv1i64:
    case AArch64::FCVTXNv2f32:
    case AArch64::FCVTZSUWDr:
    case AArch64::FCVTZSUWHr:
    case AArch64::FCVTZSUWSr:
    case AArch64::FCVTZSUXDr:
    case AArch64::FCVTZSUXHr:
    case AArch64::FCVTZSUXSr:
    case AArch64::FCVTZSv1f16:
    case AArch64::FCVTZSv1i32:
    case AArch64::FCVTZSv1i64:
    case AArch64::FCVTZSv2f32:
    case AArch64::FCVTZSv2f64:
    case AArch64::FCVTZSv4f16:
    case AArch64::FCVTZSv4f32:
    case AArch64::FCVTZSv8f16:
    case AArch64::FCVTZUUWDr:
    case AArch64::FCVTZUUWHr:
    case AArch64::FCVTZUUWSr:
    case AArch64::FCVTZUUXDr:
    case AArch64::FCVTZUUXHr:
    case AArch64::FCVTZUUXSr:
    case AArch64::FCVTZUv1f16:
    case AArch64::FCVTZUv1i32:
    case AArch64::FCVTZUv1i64:
    case AArch64::FCVTZUv2f32:
    case AArch64::FCVTZUv2f64:
    case AArch64::FCVTZUv4f16:
    case AArch64::FCVTZUv4f32:
    case AArch64::FCVTZUv8f16:
    case AArch64::FMAXNMPv2i16p:
    case AArch64::FMAXNMPv2i32p:
    case AArch64::FMAXNMPv2i64p:
    case AArch64::FMAXNMVv4i16v:
    case AArch64::FMAXNMVv4i32v:
    case AArch64::FMAXNMVv8i16v:
    case AArch64::FMAXPv2i16p:
    case AArch64::FMAXPv2i32p:
    case AArch64::FMAXPv2i64p:
    case AArch64::FMAXVv4i16v:
    case AArch64::FMAXVv4i32v:
    case AArch64::FMAXVv8i16v:
    case AArch64::FMINNMPv2i16p:
    case AArch64::FMINNMPv2i32p:
    case AArch64::FMINNMPv2i64p:
    case AArch64::FMINNMVv4i16v:
    case AArch64::FMINNMVv4i32v:
    case AArch64::FMINNMVv8i16v:
    case AArch64::FMINPv2i16p:
    case AArch64::FMINPv2i32p:
    case AArch64::FMINPv2i64p:
    case AArch64::FMINVv4i16v:
    case AArch64::FMINVv4i32v:
    case AArch64::FMINVv8i16v:
    case AArch64::FMOVDXHighr:
    case AArch64::FMOVDXr:
    case AArch64::FMOVDr:
    case AArch64::FMOVHWr:
    case AArch64::FMOVHXr:
    case AArch64::FMOVHr:
    case AArch64::FMOVSWr:
    case AArch64::FMOVSr:
    case AArch64::FMOVWHr:
    case AArch64::FMOVWSr:
    case AArch64::FMOVXDHighr:
    case AArch64::FMOVXDr:
    case AArch64::FMOVXHr:
    case AArch64::FNEGDr:
    case AArch64::FNEGHr:
    case AArch64::FNEGSr:
    case AArch64::FNEGv2f32:
    case AArch64::FNEGv2f64:
    case AArch64::FNEGv4f16:
    case AArch64::FNEGv4f32:
    case AArch64::FNEGv8f16:
    case AArch64::FRECPEv1f16:
    case AArch64::FRECPEv1i32:
    case AArch64::FRECPEv1i64:
    case AArch64::FRECPEv2f32:
    case AArch64::FRECPEv2f64:
    case AArch64::FRECPEv4f16:
    case AArch64::FRECPEv4f32:
    case AArch64::FRECPEv8f16:
    case AArch64::FRECPXv1f16:
    case AArch64::FRECPXv1i32:
    case AArch64::FRECPXv1i64:
    case AArch64::FRINTADr:
    case AArch64::FRINTAHr:
    case AArch64::FRINTASr:
    case AArch64::FRINTAv2f32:
    case AArch64::FRINTAv2f64:
    case AArch64::FRINTAv4f16:
    case AArch64::FRINTAv4f32:
    case AArch64::FRINTAv8f16:
    case AArch64::FRINTIDr:
    case AArch64::FRINTIHr:
    case AArch64::FRINTISr:
    case AArch64::FRINTIv2f32:
    case AArch64::FRINTIv2f64:
    case AArch64::FRINTIv4f16:
    case AArch64::FRINTIv4f32:
    case AArch64::FRINTIv8f16:
    case AArch64::FRINTMDr:
    case AArch64::FRINTMHr:
    case AArch64::FRINTMSr:
    case AArch64::FRINTMv2f32:
    case AArch64::FRINTMv2f64:
    case AArch64::FRINTMv4f16:
    case AArch64::FRINTMv4f32:
    case AArch64::FRINTMv8f16:
    case AArch64::FRINTNDr:
    case AArch64::FRINTNHr:
    case AArch64::FRINTNSr:
    case AArch64::FRINTNv2f32:
    case AArch64::FRINTNv2f64:
    case AArch64::FRINTNv4f16:
    case AArch64::FRINTNv4f32:
    case AArch64::FRINTNv8f16:
    case AArch64::FRINTPDr:
    case AArch64::FRINTPHr:
    case AArch64::FRINTPSr:
    case AArch64::FRINTPv2f32:
    case AArch64::FRINTPv2f64:
    case AArch64::FRINTPv4f16:
    case AArch64::FRINTPv4f32:
    case AArch64::FRINTPv8f16:
    case AArch64::FRINTXDr:
    case AArch64::FRINTXHr:
    case AArch64::FRINTXSr:
    case AArch64::FRINTXv2f32:
    case AArch64::FRINTXv2f64:
    case AArch64::FRINTXv4f16:
    case AArch64::FRINTXv4f32:
    case AArch64::FRINTXv8f16:
    case AArch64::FRINTZDr:
    case AArch64::FRINTZHr:
    case AArch64::FRINTZSr:
    case AArch64::FRINTZv2f32:
    case AArch64::FRINTZv2f64:
    case AArch64::FRINTZv4f16:
    case AArch64::FRINTZv4f32:
    case AArch64::FRINTZv8f16:
    case AArch64::FRSQRTEv1f16:
    case AArch64::FRSQRTEv1i32:
    case AArch64::FRSQRTEv1i64:
    case AArch64::FRSQRTEv2f32:
    case AArch64::FRSQRTEv2f64:
    case AArch64::FRSQRTEv4f16:
    case AArch64::FRSQRTEv4f32:
    case AArch64::FRSQRTEv8f16:
    case AArch64::FSQRTDr:
    case AArch64::FSQRTHr:
    case AArch64::FSQRTSr:
    case AArch64::FSQRTv2f32:
    case AArch64::FSQRTv2f64:
    case AArch64::FSQRTv4f16:
    case AArch64::FSQRTv4f32:
    case AArch64::FSQRTv8f16:
    case AArch64::NEGv16i8:
    case AArch64::NEGv1i64:
    case AArch64::NEGv2i32:
    case AArch64::NEGv2i64:
    case AArch64::NEGv4i16:
    case AArch64::NEGv4i32:
    case AArch64::NEGv8i16:
    case AArch64::NEGv8i8:
    case AArch64::NOTv16i8:
    case AArch64::NOTv8i8:
    case AArch64::RBITWr:
    case AArch64::RBITXr:
    case AArch64::RBITv16i8:
    case AArch64::RBITv8i8:
    case AArch64::REV16Wr:
    case AArch64::REV16Xr:
    case AArch64::REV16v16i8:
    case AArch64::REV16v8i8:
    case AArch64::REV32Xr:
    case AArch64::REV32v16i8:
    case AArch64::REV32v4i16:
    case AArch64::REV32v8i16:
    case AArch64::REV32v8i8:
    case AArch64::REV64v16i8:
    case AArch64::REV64v2i32:
    case AArch64::REV64v4i16:
    case AArch64::REV64v4i32:
    case AArch64::REV64v8i16:
    case AArch64::REV64v8i8:
    case AArch64::REVWr:
    case AArch64::REVXr:
    case AArch64::SADDLPv16i8_v8i16:
    case AArch64::SADDLPv2i32_v1i64:
    case AArch64::SADDLPv4i16_v2i32:
    case AArch64::SADDLPv4i32_v2i64:
    case AArch64::SADDLPv8i16_v4i32:
    case AArch64::SADDLPv8i8_v4i16:
    case AArch64::SADDLVv16i8v:
    case AArch64::SADDLVv4i16v:
    case AArch64::SADDLVv4i32v:
    case AArch64::SADDLVv8i16v:
    case AArch64::SADDLVv8i8v:
    case AArch64::SCVTFUWDri:
    case AArch64::SCVTFUWHri:
    case AArch64::SCVTFUWSri:
    case AArch64::SCVTFUXDri:
    case AArch64::SCVTFUXHri:
    case AArch64::SCVTFUXSri:
    case AArch64::SCVTFv1i16:
    case AArch64::SCVTFv1i32:
    case AArch64::SCVTFv1i64:
    case AArch64::SCVTFv2f32:
    case AArch64::SCVTFv2f64:
    case AArch64::SCVTFv4f16:
    case AArch64::SCVTFv4f32:
    case AArch64::SCVTFv8f16:
    case AArch64::SHA1Hrr:
    case AArch64::SHLLv16i8:
    case AArch64::SHLLv2i32:
    case AArch64::SHLLv4i16:
    case AArch64::SHLLv4i32:
    case AArch64::SHLLv8i16:
    case AArch64::SHLLv8i8:
    case AArch64::SMAXVv16i8v:
    case AArch64::SMAXVv4i16v:
    case AArch64::SMAXVv4i32v:
    case AArch64::SMAXVv8i16v:
    case AArch64::SMAXVv8i8v:
    case AArch64::SMINVv16i8v:
    case AArch64::SMINVv4i16v:
    case AArch64::SMINVv4i32v:
    case AArch64::SMINVv8i16v:
    case AArch64::SMINVv8i8v:
    case AArch64::SQABSv16i8:
    case AArch64::SQABSv1i16:
    case AArch64::SQABSv1i32:
    case AArch64::SQABSv1i64:
    case AArch64::SQABSv1i8:
    case AArch64::SQABSv2i32:
    case AArch64::SQABSv2i64:
    case AArch64::SQABSv4i16:
    case AArch64::SQABSv4i32:
    case AArch64::SQABSv8i16:
    case AArch64::SQABSv8i8:
    case AArch64::SQNEGv16i8:
    case AArch64::SQNEGv1i16:
    case AArch64::SQNEGv1i32:
    case AArch64::SQNEGv1i64:
    case AArch64::SQNEGv1i8:
    case AArch64::SQNEGv2i32:
    case AArch64::SQNEGv2i64:
    case AArch64::SQNEGv4i16:
    case AArch64::SQNEGv4i32:
    case AArch64::SQNEGv8i16:
    case AArch64::SQNEGv8i8:
    case AArch64::SQXTNv1i16:
    case AArch64::SQXTNv1i32:
    case AArch64::SQXTNv1i8:
    case AArch64::SQXTNv2i32:
    case AArch64::SQXTNv4i16:
    case AArch64::SQXTNv8i8:
    case AArch64::SQXTUNv1i16:
    case AArch64::SQXTUNv1i32:
    case AArch64::SQXTUNv1i8:
    case AArch64::SQXTUNv2i32:
    case AArch64::SQXTUNv4i16:
    case AArch64::SQXTUNv8i8:
    case AArch64::UADDLPv16i8_v8i16:
    case AArch64::UADDLPv2i32_v1i64:
    case AArch64::UADDLPv4i16_v2i32:
    case AArch64::UADDLPv4i32_v2i64:
    case AArch64::UADDLPv8i16_v4i32:
    case AArch64::UADDLPv8i8_v4i16:
    case AArch64::UADDLVv16i8v:
    case AArch64::UADDLVv4i16v:
    case AArch64::UADDLVv4i32v:
    case AArch64::UADDLVv8i16v:
    case AArch64::UADDLVv8i8v:
    case AArch64::UCVTFUWDri:
    case AArch64::UCVTFUWHri:
    case AArch64::UCVTFUWSri:
    case AArch64::UCVTFUXDri:
    case AArch64::UCVTFUXHri:
    case AArch64::UCVTFUXSri:
    case AArch64::UCVTFv1i16:
    case AArch64::UCVTFv1i32:
    case AArch64::UCVTFv1i64:
    case AArch64::UCVTFv2f32:
    case AArch64::UCVTFv2f64:
    case AArch64::UCVTFv4f16:
    case AArch64::UCVTFv4f32:
    case AArch64::UCVTFv8f16:
    case AArch64::UMAXVv16i8v:
    case AArch64::UMAXVv4i16v:
    case AArch64::UMAXVv4i32v:
    case AArch64::UMAXVv8i16v:
    case AArch64::UMAXVv8i8v:
    case AArch64::UMINVv16i8v:
    case AArch64::UMINVv4i16v:
    case AArch64::UMINVv4i32v:
    case AArch64::UMINVv8i16v:
    case AArch64::UMINVv8i8v:
    case AArch64::UQXTNv1i16:
    case AArch64::UQXTNv1i32:
    case AArch64::UQXTNv1i8:
    case AArch64::UQXTNv2i32:
    case AArch64::UQXTNv4i16:
    case AArch64::UQXTNv8i8:
    case AArch64::URECPEv2i32:
    case AArch64::URECPEv4i32:
    case AArch64::URSQRTEv2i32:
    case AArch64::URSQRTEv4i32:
    case AArch64::XTNv2i32:
    case AArch64::XTNv4i16:
    case AArch64::XTNv8i8: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
    case AArch64::FMULXv1i16_indexed:
    case AArch64::FMULXv4i16_indexed:
    case AArch64::FMULXv8i16_indexed:
    case AArch64::FMULv1i16_indexed:
    case AArch64::FMULv4i16_indexed:
    case AArch64::FMULv8i16_indexed:
    case AArch64::MULv4i16_indexed:
    case AArch64::MULv8i16_indexed:
    case AArch64::SMULLv4i16_indexed:
    case AArch64::SMULLv8i16_indexed:
    case AArch64::SQDMULHv1i16_indexed:
    case AArch64::SQDMULHv4i16_indexed:
    case AArch64::SQDMULHv8i16_indexed:
    case AArch64::SQDMULLv1i32_indexed:
    case AArch64::SQDMULLv4i16_indexed:
    case AArch64::SQDMULLv8i16_indexed:
    case AArch64::SQRDMULHv1i16_indexed:
    case AArch64::SQRDMULHv4i16_indexed:
    case AArch64::SQRDMULHv8i16_indexed:
    case AArch64::UMULLv4i16_indexed:
    case AArch64::UMULLv8i16_indexed: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 16;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 20;
      Value |= (op & UINT64_C(4)) << 9;
      break;
    }
    case AArch64::ADCSWr:
    case AArch64::ADCSXr:
    case AArch64::ADCWr:
    case AArch64::ADCXr:
    case AArch64::ADDHNv2i64_v2i32:
    case AArch64::ADDHNv4i32_v4i16:
    case AArch64::ADDHNv8i16_v8i8:
    case AArch64::ADDPv16i8:
    case AArch64::ADDPv2i32:
    case AArch64::ADDPv2i64:
    case AArch64::ADDPv4i16:
    case AArch64::ADDPv4i32:
    case AArch64::ADDPv8i16:
    case AArch64::ADDPv8i8:
    case AArch64::ADDv16i8:
    case AArch64::ADDv1i64:
    case AArch64::ADDv2i32:
    case AArch64::ADDv2i64:
    case AArch64::ADDv4i16:
    case AArch64::ADDv4i32:
    case AArch64::ADDv8i16:
    case AArch64::ADDv8i8:
    case AArch64::ANDv16i8:
    case AArch64::ANDv8i8:
    case AArch64::ASRVWr:
    case AArch64::ASRVXr:
    case AArch64::BICv16i8:
    case AArch64::BICv8i8:
    case AArch64::BIFv16i8:
    case AArch64::BIFv8i8:
    case AArch64::CMEQv16i8:
    case AArch64::CMEQv1i64:
    case AArch64::CMEQv2i32:
    case AArch64::CMEQv2i64:
    case AArch64::CMEQv4i16:
    case AArch64::CMEQv4i32:
    case AArch64::CMEQv8i16:
    case AArch64::CMEQv8i8:
    case AArch64::CMGEv16i8:
    case AArch64::CMGEv1i64:
    case AArch64::CMGEv2i32:
    case AArch64::CMGEv2i64:
    case AArch64::CMGEv4i16:
    case AArch64::CMGEv4i32:
    case AArch64::CMGEv8i16:
    case AArch64::CMGEv8i8:
    case AArch64::CMGTv16i8:
    case AArch64::CMGTv1i64:
    case AArch64::CMGTv2i32:
    case AArch64::CMGTv2i64:
    case AArch64::CMGTv4i16:
    case AArch64::CMGTv4i32:
    case AArch64::CMGTv8i16:
    case AArch64::CMGTv8i8:
    case AArch64::CMHIv16i8:
    case AArch64::CMHIv1i64:
    case AArch64::CMHIv2i32:
    case AArch64::CMHIv2i64:
    case AArch64::CMHIv4i16:
    case AArch64::CMHIv4i32:
    case AArch64::CMHIv8i16:
    case AArch64::CMHIv8i8:
    case AArch64::CMHSv16i8:
    case AArch64::CMHSv1i64:
    case AArch64::CMHSv2i32:
    case AArch64::CMHSv2i64:
    case AArch64::CMHSv4i16:
    case AArch64::CMHSv4i32:
    case AArch64::CMHSv8i16:
    case AArch64::CMHSv8i8:
    case AArch64::CMTSTv16i8:
    case AArch64::CMTSTv1i64:
    case AArch64::CMTSTv2i32:
    case AArch64::CMTSTv2i64:
    case AArch64::CMTSTv4i16:
    case AArch64::CMTSTv4i32:
    case AArch64::CMTSTv8i16:
    case AArch64::CMTSTv8i8:
    case AArch64::CRC32Brr:
    case AArch64::CRC32CBrr:
    case AArch64::CRC32CHrr:
    case AArch64::CRC32CWrr:
    case AArch64::CRC32CXrr:
    case AArch64::CRC32Hrr:
    case AArch64::CRC32Wrr:
    case AArch64::CRC32Xrr:
    case AArch64::EORv16i8:
    case AArch64::EORv8i8:
    case AArch64::FABD16:
    case AArch64::FABD32:
    case AArch64::FABD64:
    case AArch64::FABDv2f32:
    case AArch64::FABDv2f64:
    case AArch64::FABDv4f16:
    case AArch64::FABDv4f32:
    case AArch64::FABDv8f16:
    case AArch64::FACGE16:
    case AArch64::FACGE32:
    case AArch64::FACGE64:
    case AArch64::FACGEv2f32:
    case AArch64::FACGEv2f64:
    case AArch64::FACGEv4f16:
    case AArch64::FACGEv4f32:
    case AArch64::FACGEv8f16:
    case AArch64::FACGT16:
    case AArch64::FACGT32:
    case AArch64::FACGT64:
    case AArch64::FACGTv2f32:
    case AArch64::FACGTv2f64:
    case AArch64::FACGTv4f16:
    case AArch64::FACGTv4f32:
    case AArch64::FACGTv8f16:
    case AArch64::FADDDrr:
    case AArch64::FADDHrr:
    case AArch64::FADDPv2f32:
    case AArch64::FADDPv2f64:
    case AArch64::FADDPv4f16:
    case AArch64::FADDPv4f32:
    case AArch64::FADDPv8f16:
    case AArch64::FADDSrr:
    case AArch64::FADDv2f32:
    case AArch64::FADDv2f64:
    case AArch64::FADDv4f16:
    case AArch64::FADDv4f32:
    case AArch64::FADDv8f16:
    case AArch64::FCMEQ16:
    case AArch64::FCMEQ32:
    case AArch64::FCMEQ64:
    case AArch64::FCMEQv2f32:
    case AArch64::FCMEQv2f64:
    case AArch64::FCMEQv4f16:
    case AArch64::FCMEQv4f32:
    case AArch64::FCMEQv8f16:
    case AArch64::FCMGE16:
    case AArch64::FCMGE32:
    case AArch64::FCMGE64:
    case AArch64::FCMGEv2f32:
    case AArch64::FCMGEv2f64:
    case AArch64::FCMGEv4f16:
    case AArch64::FCMGEv4f32:
    case AArch64::FCMGEv8f16:
    case AArch64::FCMGT16:
    case AArch64::FCMGT32:
    case AArch64::FCMGT64:
    case AArch64::FCMGTv2f32:
    case AArch64::FCMGTv2f64:
    case AArch64::FCMGTv4f16:
    case AArch64::FCMGTv4f32:
    case AArch64::FCMGTv8f16:
    case AArch64::FDIVDrr:
    case AArch64::FDIVHrr:
    case AArch64::FDIVSrr:
    case AArch64::FDIVv2f32:
    case AArch64::FDIVv2f64:
    case AArch64::FDIVv4f16:
    case AArch64::FDIVv4f32:
    case AArch64::FDIVv8f16:
    case AArch64::FMAXDrr:
    case AArch64::FMAXHrr:
    case AArch64::FMAXNMDrr:
    case AArch64::FMAXNMHrr:
    case AArch64::FMAXNMPv2f32:
    case AArch64::FMAXNMPv2f64:
    case AArch64::FMAXNMPv4f16:
    case AArch64::FMAXNMPv4f32:
    case AArch64::FMAXNMPv8f16:
    case AArch64::FMAXNMSrr:
    case AArch64::FMAXNMv2f32:
    case AArch64::FMAXNMv2f64:
    case AArch64::FMAXNMv4f16:
    case AArch64::FMAXNMv4f32:
    case AArch64::FMAXNMv8f16:
    case AArch64::FMAXPv2f32:
    case AArch64::FMAXPv2f64:
    case AArch64::FMAXPv4f16:
    case AArch64::FMAXPv4f32:
    case AArch64::FMAXPv8f16:
    case AArch64::FMAXSrr:
    case AArch64::FMAXv2f32:
    case AArch64::FMAXv2f64:
    case AArch64::FMAXv4f16:
    case AArch64::FMAXv4f32:
    case AArch64::FMAXv8f16:
    case AArch64::FMINDrr:
    case AArch64::FMINHrr:
    case AArch64::FMINNMDrr:
    case AArch64::FMINNMHrr:
    case AArch64::FMINNMPv2f32:
    case AArch64::FMINNMPv2f64:
    case AArch64::FMINNMPv4f16:
    case AArch64::FMINNMPv4f32:
    case AArch64::FMINNMPv8f16:
    case AArch64::FMINNMSrr:
    case AArch64::FMINNMv2f32:
    case AArch64::FMINNMv2f64:
    case AArch64::FMINNMv4f16:
    case AArch64::FMINNMv4f32:
    case AArch64::FMINNMv8f16:
    case AArch64::FMINPv2f32:
    case AArch64::FMINPv2f64:
    case AArch64::FMINPv4f16:
    case AArch64::FMINPv4f32:
    case AArch64::FMINPv8f16:
    case AArch64::FMINSrr:
    case AArch64::FMINv2f32:
    case AArch64::FMINv2f64:
    case AArch64::FMINv4f16:
    case AArch64::FMINv4f32:
    case AArch64::FMINv8f16:
    case AArch64::FMULDrr:
    case AArch64::FMULHrr:
    case AArch64::FMULSrr:
    case AArch64::FMULX16:
    case AArch64::FMULX32:
    case AArch64::FMULX64:
    case AArch64::FMULXv2f32:
    case AArch64::FMULXv2f64:
    case AArch64::FMULXv4f16:
    case AArch64::FMULXv4f32:
    case AArch64::FMULXv8f16:
    case AArch64::FMULv2f32:
    case AArch64::FMULv2f64:
    case AArch64::FMULv4f16:
    case AArch64::FMULv4f32:
    case AArch64::FMULv8f16:
    case AArch64::FNMULDrr:
    case AArch64::FNMULHrr:
    case AArch64::FNMULSrr:
    case AArch64::FRECPS16:
    case AArch64::FRECPS32:
    case AArch64::FRECPS64:
    case AArch64::FRECPSv2f32:
    case AArch64::FRECPSv2f64:
    case AArch64::FRECPSv4f16:
    case AArch64::FRECPSv4f32:
    case AArch64::FRECPSv8f16:
    case AArch64::FRSQRTS16:
    case AArch64::FRSQRTS32:
    case AArch64::FRSQRTS64:
    case AArch64::FRSQRTSv2f32:
    case AArch64::FRSQRTSv2f64:
    case AArch64::FRSQRTSv4f16:
    case AArch64::FRSQRTSv4f32:
    case AArch64::FRSQRTSv8f16:
    case AArch64::FSUBDrr:
    case AArch64::FSUBHrr:
    case AArch64::FSUBSrr:
    case AArch64::FSUBv2f32:
    case AArch64::FSUBv2f64:
    case AArch64::FSUBv4f16:
    case AArch64::FSUBv4f32:
    case AArch64::FSUBv8f16:
    case AArch64::LSLVWr:
    case AArch64::LSLVXr:
    case AArch64::LSRVWr:
    case AArch64::LSRVXr:
    case AArch64::MULv16i8:
    case AArch64::MULv2i32:
    case AArch64::MULv4i16:
    case AArch64::MULv4i32:
    case AArch64::MULv8i16:
    case AArch64::MULv8i8:
    case AArch64::ORNv16i8:
    case AArch64::ORNv8i8:
    case AArch64::ORRv16i8:
    case AArch64::ORRv8i8:
    case AArch64::PMULLv16i8:
    case AArch64::PMULLv1i64:
    case AArch64::PMULLv2i64:
    case AArch64::PMULLv8i8:
    case AArch64::PMULv16i8:
    case AArch64::PMULv8i8:
    case AArch64::RADDHNv2i64_v2i32:
    case AArch64::RADDHNv4i32_v4i16:
    case AArch64::RADDHNv8i16_v8i8:
    case AArch64::RORVWr:
    case AArch64::RORVXr:
    case AArch64::RSUBHNv2i64_v2i32:
    case AArch64::RSUBHNv4i32_v4i16:
    case AArch64::RSUBHNv8i16_v8i8:
    case AArch64::SABDLv16i8_v8i16:
    case AArch64::SABDLv2i32_v2i64:
    case AArch64::SABDLv4i16_v4i32:
    case AArch64::SABDLv4i32_v2i64:
    case AArch64::SABDLv8i16_v4i32:
    case AArch64::SABDLv8i8_v8i16:
    case AArch64::SABDv16i8:
    case AArch64::SABDv2i32:
    case AArch64::SABDv4i16:
    case AArch64::SABDv4i32:
    case AArch64::SABDv8i16:
    case AArch64::SABDv8i8:
    case AArch64::SADDLv16i8_v8i16:
    case AArch64::SADDLv2i32_v2i64:
    case AArch64::SADDLv4i16_v4i32:
    case AArch64::SADDLv4i32_v2i64:
    case AArch64::SADDLv8i16_v4i32:
    case AArch64::SADDLv8i8_v8i16:
    case AArch64::SADDWv16i8_v8i16:
    case AArch64::SADDWv2i32_v2i64:
    case AArch64::SADDWv4i16_v4i32:
    case AArch64::SADDWv4i32_v2i64:
    case AArch64::SADDWv8i16_v4i32:
    case AArch64::SADDWv8i8_v8i16:
    case AArch64::SBCSWr:
    case AArch64::SBCSXr:
    case AArch64::SBCWr:
    case AArch64::SBCXr:
    case AArch64::SDIVWr:
    case AArch64::SDIVXr:
    case AArch64::SHADDv16i8:
    case AArch64::SHADDv2i32:
    case AArch64::SHADDv4i16:
    case AArch64::SHADDv4i32:
    case AArch64::SHADDv8i16:
    case AArch64::SHADDv8i8:
    case AArch64::SHSUBv16i8:
    case AArch64::SHSUBv2i32:
    case AArch64::SHSUBv4i16:
    case AArch64::SHSUBv4i32:
    case AArch64::SHSUBv8i16:
    case AArch64::SHSUBv8i8:
    case AArch64::SMAXPv16i8:
    case AArch64::SMAXPv2i32:
    case AArch64::SMAXPv4i16:
    case AArch64::SMAXPv4i32:
    case AArch64::SMAXPv8i16:
    case AArch64::SMAXPv8i8:
    case AArch64::SMAXv16i8:
    case AArch64::SMAXv2i32:
    case AArch64::SMAXv4i16:
    case AArch64::SMAXv4i32:
    case AArch64::SMAXv8i16:
    case AArch64::SMAXv8i8:
    case AArch64::SMINPv16i8:
    case AArch64::SMINPv2i32:
    case AArch64::SMINPv4i16:
    case AArch64::SMINPv4i32:
    case AArch64::SMINPv8i16:
    case AArch64::SMINPv8i8:
    case AArch64::SMINv16i8:
    case AArch64::SMINv2i32:
    case AArch64::SMINv4i16:
    case AArch64::SMINv4i32:
    case AArch64::SMINv8i16:
    case AArch64::SMINv8i8:
    case AArch64::SMULLv16i8_v8i16:
    case AArch64::SMULLv2i32_v2i64:
    case AArch64::SMULLv4i16_v4i32:
    case AArch64::SMULLv4i32_v2i64:
    case AArch64::SMULLv8i16_v4i32:
    case AArch64::SMULLv8i8_v8i16:
    case AArch64::SQADDv16i8:
    case AArch64::SQADDv1i16:
    case AArch64::SQADDv1i32:
    case AArch64::SQADDv1i64:
    case AArch64::SQADDv1i8:
    case AArch64::SQADDv2i32:
    case AArch64::SQADDv2i64:
    case AArch64::SQADDv4i16:
    case AArch64::SQADDv4i32:
    case AArch64::SQADDv8i16:
    case AArch64::SQADDv8i8:
    case AArch64::SQDMULHv1i16:
    case AArch64::SQDMULHv1i32:
    case AArch64::SQDMULHv2i32:
    case AArch64::SQDMULHv4i16:
    case AArch64::SQDMULHv4i32:
    case AArch64::SQDMULHv8i16:
    case AArch64::SQDMULLi16:
    case AArch64::SQDMULLi32:
    case AArch64::SQDMULLv2i32_v2i64:
    case AArch64::SQDMULLv4i16_v4i32:
    case AArch64::SQDMULLv4i32_v2i64:
    case AArch64::SQDMULLv8i16_v4i32:
    case AArch64::SQRDMULHv1i16:
    case AArch64::SQRDMULHv1i32:
    case AArch64::SQRDMULHv2i32:
    case AArch64::SQRDMULHv4i16:
    case AArch64::SQRDMULHv4i32:
    case AArch64::SQRDMULHv8i16:
    case AArch64::SQRSHLv16i8:
    case AArch64::SQRSHLv1i16:
    case AArch64::SQRSHLv1i32:
    case AArch64::SQRSHLv1i64:
    case AArch64::SQRSHLv1i8:
    case AArch64::SQRSHLv2i32:
    case AArch64::SQRSHLv2i64:
    case AArch64::SQRSHLv4i16:
    case AArch64::SQRSHLv4i32:
    case AArch64::SQRSHLv8i16:
    case AArch64::SQRSHLv8i8:
    case AArch64::SQSHLv16i8:
    case AArch64::SQSHLv1i16:
    case AArch64::SQSHLv1i32:
    case AArch64::SQSHLv1i64:
    case AArch64::SQSHLv1i8:
    case AArch64::SQSHLv2i32:
    case AArch64::SQSHLv2i64:
    case AArch64::SQSHLv4i16:
    case AArch64::SQSHLv4i32:
    case AArch64::SQSHLv8i16:
    case AArch64::SQSHLv8i8:
    case AArch64::SQSUBv16i8:
    case AArch64::SQSUBv1i16:
    case AArch64::SQSUBv1i32:
    case AArch64::SQSUBv1i64:
    case AArch64::SQSUBv1i8:
    case AArch64::SQSUBv2i32:
    case AArch64::SQSUBv2i64:
    case AArch64::SQSUBv4i16:
    case AArch64::SQSUBv4i32:
    case AArch64::SQSUBv8i16:
    case AArch64::SQSUBv8i8:
    case AArch64::SRHADDv16i8:
    case AArch64::SRHADDv2i32:
    case AArch64::SRHADDv4i16:
    case AArch64::SRHADDv4i32:
    case AArch64::SRHADDv8i16:
    case AArch64::SRHADDv8i8:
    case AArch64::SRSHLv16i8:
    case AArch64::SRSHLv1i64:
    case AArch64::SRSHLv2i32:
    case AArch64::SRSHLv2i64:
    case AArch64::SRSHLv4i16:
    case AArch64::SRSHLv4i32:
    case AArch64::SRSHLv8i16:
    case AArch64::SRSHLv8i8:
    case AArch64::SSHLv16i8:
    case AArch64::SSHLv1i64:
    case AArch64::SSHLv2i32:
    case AArch64::SSHLv2i64:
    case AArch64::SSHLv4i16:
    case AArch64::SSHLv4i32:
    case AArch64::SSHLv8i16:
    case AArch64::SSHLv8i8:
    case AArch64::SSUBLv16i8_v8i16:
    case AArch64::SSUBLv2i32_v2i64:
    case AArch64::SSUBLv4i16_v4i32:
    case AArch64::SSUBLv4i32_v2i64:
    case AArch64::SSUBLv8i16_v4i32:
    case AArch64::SSUBLv8i8_v8i16:
    case AArch64::SSUBWv16i8_v8i16:
    case AArch64::SSUBWv2i32_v2i64:
    case AArch64::SSUBWv4i16_v4i32:
    case AArch64::SSUBWv4i32_v2i64:
    case AArch64::SSUBWv8i16_v4i32:
    case AArch64::SSUBWv8i8_v8i16:
    case AArch64::SUBHNv2i64_v2i32:
    case AArch64::SUBHNv4i32_v4i16:
    case AArch64::SUBHNv8i16_v8i8:
    case AArch64::SUBv16i8:
    case AArch64::SUBv1i64:
    case AArch64::SUBv2i32:
    case AArch64::SUBv2i64:
    case AArch64::SUBv4i16:
    case AArch64::SUBv4i32:
    case AArch64::SUBv8i16:
    case AArch64::SUBv8i8:
    case AArch64::TRN1v16i8:
    case AArch64::TRN1v2i32:
    case AArch64::TRN1v2i64:
    case AArch64::TRN1v4i16:
    case AArch64::TRN1v4i32:
    case AArch64::TRN1v8i16:
    case AArch64::TRN1v8i8:
    case AArch64::TRN2v16i8:
    case AArch64::TRN2v2i32:
    case AArch64::TRN2v2i64:
    case AArch64::TRN2v4i16:
    case AArch64::TRN2v4i32:
    case AArch64::TRN2v8i16:
    case AArch64::TRN2v8i8:
    case AArch64::UABDLv16i8_v8i16:
    case AArch64::UABDLv2i32_v2i64:
    case AArch64::UABDLv4i16_v4i32:
    case AArch64::UABDLv4i32_v2i64:
    case AArch64::UABDLv8i16_v4i32:
    case AArch64::UABDLv8i8_v8i16:
    case AArch64::UABDv16i8:
    case AArch64::UABDv2i32:
    case AArch64::UABDv4i16:
    case AArch64::UABDv4i32:
    case AArch64::UABDv8i16:
    case AArch64::UABDv8i8:
    case AArch64::UADDLv16i8_v8i16:
    case AArch64::UADDLv2i32_v2i64:
    case AArch64::UADDLv4i16_v4i32:
    case AArch64::UADDLv4i32_v2i64:
    case AArch64::UADDLv8i16_v4i32:
    case AArch64::UADDLv8i8_v8i16:
    case AArch64::UADDWv16i8_v8i16:
    case AArch64::UADDWv2i32_v2i64:
    case AArch64::UADDWv4i16_v4i32:
    case AArch64::UADDWv4i32_v2i64:
    case AArch64::UADDWv8i16_v4i32:
    case AArch64::UADDWv8i8_v8i16:
    case AArch64::UDIVWr:
    case AArch64::UDIVXr:
    case AArch64::UHADDv16i8:
    case AArch64::UHADDv2i32:
    case AArch64::UHADDv4i16:
    case AArch64::UHADDv4i32:
    case AArch64::UHADDv8i16:
    case AArch64::UHADDv8i8:
    case AArch64::UHSUBv16i8:
    case AArch64::UHSUBv2i32:
    case AArch64::UHSUBv4i16:
    case AArch64::UHSUBv4i32:
    case AArch64::UHSUBv8i16:
    case AArch64::UHSUBv8i8:
    case AArch64::UMAXPv16i8:
    case AArch64::UMAXPv2i32:
    case AArch64::UMAXPv4i16:
    case AArch64::UMAXPv4i32:
    case AArch64::UMAXPv8i16:
    case AArch64::UMAXPv8i8:
    case AArch64::UMAXv16i8:
    case AArch64::UMAXv2i32:
    case AArch64::UMAXv4i16:
    case AArch64::UMAXv4i32:
    case AArch64::UMAXv8i16:
    case AArch64::UMAXv8i8:
    case AArch64::UMINPv16i8:
    case AArch64::UMINPv2i32:
    case AArch64::UMINPv4i16:
    case AArch64::UMINPv4i32:
    case AArch64::UMINPv8i16:
    case AArch64::UMINPv8i8:
    case AArch64::UMINv16i8:
    case AArch64::UMINv2i32:
    case AArch64::UMINv4i16:
    case AArch64::UMINv4i32:
    case AArch64::UMINv8i16:
    case AArch64::UMINv8i8:
    case AArch64::UMULLv16i8_v8i16:
    case AArch64::UMULLv2i32_v2i64:
    case AArch64::UMULLv4i16_v4i32:
    case AArch64::UMULLv4i32_v2i64:
    case AArch64::UMULLv8i16_v4i32:
    case AArch64::UMULLv8i8_v8i16:
    case AArch64::UQADDv16i8:
    case AArch64::UQADDv1i16:
    case AArch64::UQADDv1i32:
    case AArch64::UQADDv1i64:
    case AArch64::UQADDv1i8:
    case AArch64::UQADDv2i32:
    case AArch64::UQADDv2i64:
    case AArch64::UQADDv4i16:
    case AArch64::UQADDv4i32:
    case AArch64::UQADDv8i16:
    case AArch64::UQADDv8i8:
    case AArch64::UQRSHLv16i8:
    case AArch64::UQRSHLv1i16:
    case AArch64::UQRSHLv1i32:
    case AArch64::UQRSHLv1i64:
    case AArch64::UQRSHLv1i8:
    case AArch64::UQRSHLv2i32:
    case AArch64::UQRSHLv2i64:
    case AArch64::UQRSHLv4i16:
    case AArch64::UQRSHLv4i32:
    case AArch64::UQRSHLv8i16:
    case AArch64::UQRSHLv8i8:
    case AArch64::UQSHLv16i8:
    case AArch64::UQSHLv1i16:
    case AArch64::UQSHLv1i32:
    case AArch64::UQSHLv1i64:
    case AArch64::UQSHLv1i8:
    case AArch64::UQSHLv2i32:
    case AArch64::UQSHLv2i64:
    case AArch64::UQSHLv4i16:
    case AArch64::UQSHLv4i32:
    case AArch64::UQSHLv8i16:
    case AArch64::UQSHLv8i8:
    case AArch64::UQSUBv16i8:
    case AArch64::UQSUBv1i16:
    case AArch64::UQSUBv1i32:
    case AArch64::UQSUBv1i64:
    case AArch64::UQSUBv1i8:
    case AArch64::UQSUBv2i32:
    case AArch64::UQSUBv2i64:
    case AArch64::UQSUBv4i16:
    case AArch64::UQSUBv4i32:
    case AArch64::UQSUBv8i16:
    case AArch64::UQSUBv8i8:
    case AArch64::URHADDv16i8:
    case AArch64::URHADDv2i32:
    case AArch64::URHADDv4i16:
    case AArch64::URHADDv4i32:
    case AArch64::URHADDv8i16:
    case AArch64::URHADDv8i8:
    case AArch64::URSHLv16i8:
    case AArch64::URSHLv1i64:
    case AArch64::URSHLv2i32:
    case AArch64::URSHLv2i64:
    case AArch64::URSHLv4i16:
    case AArch64::URSHLv4i32:
    case AArch64::URSHLv8i16:
    case AArch64::URSHLv8i8:
    case AArch64::USHLv16i8:
    case AArch64::USHLv1i64:
    case AArch64::USHLv2i32:
    case AArch64::USHLv2i64:
    case AArch64::USHLv4i16:
    case AArch64::USHLv4i32:
    case AArch64::USHLv8i16:
    case AArch64::USHLv8i8:
    case AArch64::USUBLv16i8_v8i16:
    case AArch64::USUBLv2i32_v2i64:
    case AArch64::USUBLv4i16_v4i32:
    case AArch64::USUBLv4i32_v2i64:
    case AArch64::USUBLv8i16_v4i32:
    case AArch64::USUBLv8i8_v8i16:
    case AArch64::USUBWv16i8_v8i16:
    case AArch64::USUBWv2i32_v2i64:
    case AArch64::USUBWv4i16_v4i32:
    case AArch64::USUBWv4i32_v2i64:
    case AArch64::USUBWv8i16_v4i32:
    case AArch64::USUBWv8i8_v8i16:
    case AArch64::UZP1v16i8:
    case AArch64::UZP1v2i32:
    case AArch64::UZP1v2i64:
    case AArch64::UZP1v4i16:
    case AArch64::UZP1v4i32:
    case AArch64::UZP1v8i16:
    case AArch64::UZP1v8i8:
    case AArch64::UZP2v16i8:
    case AArch64::UZP2v2i32:
    case AArch64::UZP2v2i64:
    case AArch64::UZP2v4i16:
    case AArch64::UZP2v4i32:
    case AArch64::UZP2v8i16:
    case AArch64::UZP2v8i8:
    case AArch64::ZIP1v16i8:
    case AArch64::ZIP1v2i32:
    case AArch64::ZIP1v2i64:
    case AArch64::ZIP1v4i16:
    case AArch64::ZIP1v4i32:
    case AArch64::ZIP1v8i16:
    case AArch64::ZIP1v8i8:
    case AArch64::ZIP2v16i8:
    case AArch64::ZIP2v2i32:
    case AArch64::ZIP2v2i64:
    case AArch64::ZIP2v4i16:
    case AArch64::ZIP2v4i32:
    case AArch64::ZIP2v8i16:
    case AArch64::ZIP2v8i8: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::FMADDDrrr:
    case AArch64::FMADDHrrr:
    case AArch64::FMADDSrrr:
    case AArch64::FMSUBDrrr:
    case AArch64::FMSUBHrrr:
    case AArch64::FMSUBSrrr:
    case AArch64::FNMADDDrrr:
    case AArch64::FNMADDHrrr:
    case AArch64::FNMADDSrrr:
    case AArch64::FNMSUBDrrr:
    case AArch64::FNMSUBHrrr:
    case AArch64::FNMSUBSrrr:
    case AArch64::MADDWrrr:
    case AArch64::MADDXrrr:
    case AArch64::MSUBWrrr:
    case AArch64::MSUBXrrr:
    case AArch64::SMADDLrrr:
    case AArch64::SMSUBLrrr:
    case AArch64::UMADDLrrr:
    case AArch64::UMSUBLrrr: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      // op: Ra
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 10;
      break;
    }
    case AArch64::CSELWr:
    case AArch64::CSELXr:
    case AArch64::CSINCWr:
    case AArch64::CSINCXr:
    case AArch64::CSINVWr:
    case AArch64::CSINVXr:
    case AArch64::CSNEGWr:
    case AArch64::CSNEGXr:
    case AArch64::FCSELDrrr:
    case AArch64::FCSELHrrr:
    case AArch64::FCSELSrrr: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      // op: cond
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case AArch64::ADDSXrx64:
    case AArch64::ADDXrx64:
    case AArch64::SUBSXrx64:
    case AArch64::SUBXrx64: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      // op: ext
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(32)) << 10;
      Value |= (op & UINT64_C(7)) << 10;
      break;
    }
    case AArch64::ADDSWrx:
    case AArch64::ADDSXrx:
    case AArch64::ADDWrx:
    case AArch64::ADDXrx:
    case AArch64::SUBSWrx:
    case AArch64::SUBSXrx:
    case AArch64::SUBWrx:
    case AArch64::SUBXrx: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      // op: ext
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(63)) << 10;
      break;
    }
    case AArch64::FMULXv1i64_indexed:
    case AArch64::FMULXv2i64_indexed:
    case AArch64::FMULv1i64_indexed:
    case AArch64::FMULv2i64_indexed: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 11;
      break;
    }
    case AArch64::FMULXv1i32_indexed:
    case AArch64::FMULXv2i32_indexed:
    case AArch64::FMULXv4i32_indexed:
    case AArch64::FMULv1i32_indexed:
    case AArch64::FMULv2i32_indexed:
    case AArch64::FMULv4i32_indexed:
    case AArch64::MULv2i32_indexed:
    case AArch64::MULv4i32_indexed:
    case AArch64::SMULLv2i32_indexed:
    case AArch64::SMULLv4i32_indexed:
    case AArch64::SQDMULHv1i32_indexed:
    case AArch64::SQDMULHv2i32_indexed:
    case AArch64::SQDMULHv4i32_indexed:
    case AArch64::SQDMULLv1i64_indexed:
    case AArch64::SQDMULLv2i32_indexed:
    case AArch64::SQDMULLv4i32_indexed:
    case AArch64::SQRDMULHv1i32_indexed:
    case AArch64::SQRDMULHv2i32_indexed:
    case AArch64::SQRDMULHv4i32_indexed:
    case AArch64::UMULLv2i32_indexed:
    case AArch64::UMULLv4i32_indexed: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 21;
      Value |= (op & UINT64_C(2)) << 10;
      break;
    }
    case AArch64::EXTv16i8: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      // op: imm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 11;
      break;
    }
    case AArch64::EXTRWrri: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      // op: imm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 10;
      break;
    }
    case AArch64::EXTRXrri: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      // op: imm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(63)) << 10;
      break;
    }
    case AArch64::EXTv8i8: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      // op: imm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 11;
      break;
    }
    case AArch64::SMULHrr:
    case AArch64::UMULHrr: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      Value = fixMulHigh(MI, Value, STI);
      break;
    }
    case AArch64::DUPv2i64lane:
    case AArch64::UMOVvi64: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 20;
      break;
    }
    case AArch64::DUPv16i8lane:
    case AArch64::DUPv8i8lane:
    case AArch64::SMOVvi8to32:
    case AArch64::SMOVvi8to64:
    case AArch64::UMOVvi8: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 17;
      break;
    }
    case AArch64::DUPv2i32lane:
    case AArch64::DUPv4i32lane:
    case AArch64::SMOVvi32to64:
    case AArch64::UMOVvi32: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 19;
      break;
    }
    case AArch64::DUPv4i16lane:
    case AArch64::DUPv8i16lane:
    case AArch64::SMOVvi16to32:
    case AArch64::SMOVvi16to64:
    case AArch64::UMOVvi16: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 18;
      break;
    }
    case AArch64::ADDSWri:
    case AArch64::ADDSXri:
    case AArch64::ADDWri:
    case AArch64::ADDXri:
    case AArch64::SUBSWri:
    case AArch64::SUBSXri:
    case AArch64::SUBWri:
    case AArch64::SUBXri: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getAddSubImmOpValue(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(16383)) << 10;
      break;
    }
    case AArch64::ANDSWri:
    case AArch64::ANDWri:
    case AArch64::EORWri:
    case AArch64::ORRWri: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(4095)) << 10;
      break;
    }
    case AArch64::ANDSXri:
    case AArch64::ANDXri:
    case AArch64::EORXri:
    case AArch64::ORRXri: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(8191)) << 10;
      break;
    }
    case AArch64::SHLv4i16_shift:
    case AArch64::SHLv8i16_shift:
    case AArch64::SQSHLUh:
    case AArch64::SQSHLUv4i16_shift:
    case AArch64::SQSHLUv8i16_shift:
    case AArch64::SQSHLh:
    case AArch64::SQSHLv4i16_shift:
    case AArch64::SQSHLv8i16_shift:
    case AArch64::SSHLLv4i16_shift:
    case AArch64::SSHLLv8i16_shift:
    case AArch64::UQSHLh:
    case AArch64::UQSHLv4i16_shift:
    case AArch64::UQSHLv8i16_shift:
    case AArch64::USHLLv4i16_shift:
    case AArch64::USHLLv8i16_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftL16OpValue(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case AArch64::SHLv2i32_shift:
    case AArch64::SHLv4i32_shift:
    case AArch64::SQSHLUs:
    case AArch64::SQSHLUv2i32_shift:
    case AArch64::SQSHLUv4i32_shift:
    case AArch64::SQSHLs:
    case AArch64::SQSHLv2i32_shift:
    case AArch64::SQSHLv4i32_shift:
    case AArch64::SSHLLv2i32_shift:
    case AArch64::SSHLLv4i32_shift:
    case AArch64::UQSHLs:
    case AArch64::UQSHLv2i32_shift:
    case AArch64::UQSHLv4i32_shift:
    case AArch64::USHLLv2i32_shift:
    case AArch64::USHLLv4i32_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftL32OpValue(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::SHLd:
    case AArch64::SHLv2i64_shift:
    case AArch64::SQSHLUd:
    case AArch64::SQSHLUv2i64_shift:
    case AArch64::SQSHLd:
    case AArch64::SQSHLv2i64_shift:
    case AArch64::UQSHLd:
    case AArch64::UQSHLv2i64_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftL64OpValue(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(63)) << 16;
      break;
    }
    case AArch64::SHLv16i8_shift:
    case AArch64::SHLv8i8_shift:
    case AArch64::SQSHLUb:
    case AArch64::SQSHLUv16i8_shift:
    case AArch64::SQSHLUv8i8_shift:
    case AArch64::SQSHLb:
    case AArch64::SQSHLv16i8_shift:
    case AArch64::SQSHLv8i8_shift:
    case AArch64::SSHLLv16i8_shift:
    case AArch64::SSHLLv8i8_shift:
    case AArch64::UQSHLb:
    case AArch64::UQSHLv16i8_shift:
    case AArch64::UQSHLv8i8_shift:
    case AArch64::USHLLv16i8_shift:
    case AArch64::USHLLv8i8_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftL8OpValue(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(7)) << 16;
      break;
    }
    case AArch64::FCVTZSh:
    case AArch64::FCVTZSv4i16_shift:
    case AArch64::FCVTZSv8i16_shift:
    case AArch64::FCVTZUh:
    case AArch64::FCVTZUv4i16_shift:
    case AArch64::FCVTZUv8i16_shift:
    case AArch64::SCVTFh:
    case AArch64::SCVTFv4i16_shift:
    case AArch64::SCVTFv8i16_shift:
    case AArch64::SQRSHRNh:
    case AArch64::SQRSHRUNh:
    case AArch64::SQSHRNh:
    case AArch64::SQSHRUNh:
    case AArch64::SRSHRv4i16_shift:
    case AArch64::SRSHRv8i16_shift:
    case AArch64::SSHRv4i16_shift:
    case AArch64::SSHRv8i16_shift:
    case AArch64::UCVTFh:
    case AArch64::UCVTFv4i16_shift:
    case AArch64::UCVTFv8i16_shift:
    case AArch64::UQRSHRNh:
    case AArch64::UQSHRNh:
    case AArch64::URSHRv4i16_shift:
    case AArch64::URSHRv8i16_shift:
    case AArch64::USHRv4i16_shift:
    case AArch64::USHRv8i16_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR16OpValue(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case AArch64::RSHRNv8i8_shift:
    case AArch64::SHRNv8i8_shift:
    case AArch64::SQRSHRNv8i8_shift:
    case AArch64::SQRSHRUNv8i8_shift:
    case AArch64::SQSHRNv8i8_shift:
    case AArch64::SQSHRUNv8i8_shift:
    case AArch64::UQRSHRNv8i8_shift:
    case AArch64::UQSHRNv8i8_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR16OpValue(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(7)) << 16;
      break;
    }
    case AArch64::RSHRNv4i16_shift:
    case AArch64::SHRNv4i16_shift:
    case AArch64::SQRSHRNv4i16_shift:
    case AArch64::SQRSHRUNv4i16_shift:
    case AArch64::SQSHRNv4i16_shift:
    case AArch64::SQSHRUNv4i16_shift:
    case AArch64::UQRSHRNv4i16_shift:
    case AArch64::UQSHRNv4i16_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR32OpValue(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case AArch64::FCVTZSs:
    case AArch64::FCVTZSv2i32_shift:
    case AArch64::FCVTZSv4i32_shift:
    case AArch64::FCVTZUs:
    case AArch64::FCVTZUv2i32_shift:
    case AArch64::FCVTZUv4i32_shift:
    case AArch64::SCVTFs:
    case AArch64::SCVTFv2i32_shift:
    case AArch64::SCVTFv4i32_shift:
    case AArch64::SQRSHRNs:
    case AArch64::SQRSHRUNs:
    case AArch64::SQSHRNs:
    case AArch64::SQSHRUNs:
    case AArch64::SRSHRv2i32_shift:
    case AArch64::SRSHRv4i32_shift:
    case AArch64::SSHRv2i32_shift:
    case AArch64::SSHRv4i32_shift:
    case AArch64::UCVTFs:
    case AArch64::UCVTFv2i32_shift:
    case AArch64::UCVTFv4i32_shift:
    case AArch64::UQRSHRNs:
    case AArch64::UQSHRNs:
    case AArch64::URSHRv2i32_shift:
    case AArch64::URSHRv4i32_shift:
    case AArch64::USHRv2i32_shift:
    case AArch64::USHRv4i32_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR32OpValue(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::RSHRNv2i32_shift:
    case AArch64::SHRNv2i32_shift:
    case AArch64::SQRSHRNv2i32_shift:
    case AArch64::SQRSHRUNv2i32_shift:
    case AArch64::SQSHRNv2i32_shift:
    case AArch64::SQSHRUNv2i32_shift:
    case AArch64::UQRSHRNv2i32_shift:
    case AArch64::UQSHRNv2i32_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR64OpValue(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::FCVTZSd:
    case AArch64::FCVTZSv2i64_shift:
    case AArch64::FCVTZUd:
    case AArch64::FCVTZUv2i64_shift:
    case AArch64::SCVTFd:
    case AArch64::SCVTFv2i64_shift:
    case AArch64::SRSHRd:
    case AArch64::SRSHRv2i64_shift:
    case AArch64::SSHRd:
    case AArch64::SSHRv2i64_shift:
    case AArch64::UCVTFd:
    case AArch64::UCVTFv2i64_shift:
    case AArch64::URSHRd:
    case AArch64::URSHRv2i64_shift:
    case AArch64::USHRd:
    case AArch64::USHRv2i64_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR64OpValue(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(63)) << 16;
      break;
    }
    case AArch64::SQRSHRNb:
    case AArch64::SQRSHRUNb:
    case AArch64::SQSHRNb:
    case AArch64::SQSHRUNb:
    case AArch64::SRSHRv16i8_shift:
    case AArch64::SRSHRv8i8_shift:
    case AArch64::SSHRv16i8_shift:
    case AArch64::SSHRv8i8_shift:
    case AArch64::UQRSHRNb:
    case AArch64::UQSHRNb:
    case AArch64::URSHRv16i8_shift:
    case AArch64::URSHRv8i8_shift:
    case AArch64::USHRv16i8_shift:
    case AArch64::USHRv8i8_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR8OpValue(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(7)) << 16;
      break;
    }
    case AArch64::SBFMWri:
    case AArch64::UBFMWri: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: immr
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      // op: imms
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 10;
      break;
    }
    case AArch64::SBFMXri:
    case AArch64::UBFMXri: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: immr
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(63)) << 16;
      // op: imms
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(63)) << 10;
      break;
    }
    case AArch64::FCVTZSSWDri:
    case AArch64::FCVTZSSWHri:
    case AArch64::FCVTZSSWSri:
    case AArch64::FCVTZUSWDri:
    case AArch64::FCVTZUSWHri:
    case AArch64::FCVTZUSWSri:
    case AArch64::SCVTFSWDri:
    case AArch64::SCVTFSWHri:
    case AArch64::SCVTFSWSri:
    case AArch64::UCVTFSWDri:
    case AArch64::UCVTFSWHri:
    case AArch64::UCVTFSWSri: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: scale
      op = getFixedPointScaleOpValue(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(31)) << 10;
      break;
    }
    case AArch64::FCVTZSSXDri:
    case AArch64::FCVTZSSXHri:
    case AArch64::FCVTZSSXSri:
    case AArch64::FCVTZUSXDri:
    case AArch64::FCVTZUSXHri:
    case AArch64::FCVTZUSXSri:
    case AArch64::SCVTFSXDri:
    case AArch64::SCVTFSXHri:
    case AArch64::SCVTFSXSri:
    case AArch64::UCVTFSXDri:
    case AArch64::UCVTFSXHri:
    case AArch64::UCVTFSXSri: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: scale
      op = getFixedPointScaleOpValue(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(63)) << 10;
      break;
    }
    case AArch64::BFMWri: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: immr
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      // op: imms
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 10;
      break;
    }
    case AArch64::BFMXri: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: immr
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(63)) << 16;
      // op: imms
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(63)) << 10;
      break;
    }
    case AArch64::FMOVDi:
    case AArch64::FMOVHi:
    case AArch64::FMOVSi: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: imm
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(255)) << 13;
      break;
    }
    case AArch64::MOVNWi:
    case AArch64::MOVNXi: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: imm
      op = getMoveWideImmOpValue(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 5;
      // op: shift
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(48)) << 17;
      break;
    }
    case AArch64::MOVZWi:
    case AArch64::MOVZXi: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: imm
      op = getMoveWideImmOpValue(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 5;
      // op: shift
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(48)) << 17;
      Value = fixMOVZ(MI, Value, STI);
      break;
    }
    case AArch64::MOVKWi:
    case AArch64::MOVKXi: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: imm
      op = getMoveWideImmOpValue(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 5;
      // op: shift
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(48)) << 17;
      break;
    }
    case AArch64::FMOVv2f32_ns:
    case AArch64::FMOVv2f64_ns:
    case AArch64::FMOVv4f16_ns:
    case AArch64::FMOVv4f32_ns:
    case AArch64::FMOVv8f16_ns:
    case AArch64::MOVID:
    case AArch64::MOVIv16b_ns:
    case AArch64::MOVIv2d_ns:
    case AArch64::MOVIv8b_ns: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: imm8
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(224)) << 11;
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
    case AArch64::MOVIv2s_msl:
    case AArch64::MOVIv4s_msl:
    case AArch64::MVNIv2s_msl:
    case AArch64::MVNIv4s_msl: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: imm8
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(224)) << 11;
      Value |= (op & UINT64_C(31)) << 5;
      // op: shift
      op = getMoveVecShifterOpValue(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(1)) << 12;
      break;
    }
    case AArch64::MOVIv4i16:
    case AArch64::MOVIv8i16:
    case AArch64::MVNIv4i16:
    case AArch64::MVNIv8i16: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: imm8
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(224)) << 11;
      Value |= (op & UINT64_C(31)) << 5;
      // op: shift
      op = getVecShifterOpValue(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(1)) << 13;
      break;
    }
    case AArch64::MOVIv2i32:
    case AArch64::MOVIv4i32:
    case AArch64::MVNIv2i32:
    case AArch64::MVNIv4i32: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: imm8
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(224)) << 11;
      Value |= (op & UINT64_C(31)) << 5;
      // op: shift
      op = getVecShifterOpValue(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(3)) << 13;
      break;
    }
    case AArch64::AESDrr:
    case AArch64::AESErr:
    case AArch64::FCVTNv4i32:
    case AArch64::FCVTNv8i16:
    case AArch64::FCVTXNv4f32:
    case AArch64::SADALPv16i8_v8i16:
    case AArch64::SADALPv2i32_v1i64:
    case AArch64::SADALPv4i16_v2i32:
    case AArch64::SADALPv4i32_v2i64:
    case AArch64::SADALPv8i16_v4i32:
    case AArch64::SADALPv8i8_v4i16:
    case AArch64::SHA1SU1rr:
    case AArch64::SHA256SU0rr:
    case AArch64::SQXTNv16i8:
    case AArch64::SQXTNv4i32:
    case AArch64::SQXTNv8i16:
    case AArch64::SQXTUNv16i8:
    case AArch64::SQXTUNv4i32:
    case AArch64::SQXTUNv8i16:
    case AArch64::SUQADDv16i8:
    case AArch64::SUQADDv1i16:
    case AArch64::SUQADDv1i32:
    case AArch64::SUQADDv1i64:
    case AArch64::SUQADDv1i8:
    case AArch64::SUQADDv2i32:
    case AArch64::SUQADDv2i64:
    case AArch64::SUQADDv4i16:
    case AArch64::SUQADDv4i32:
    case AArch64::SUQADDv8i16:
    case AArch64::SUQADDv8i8:
    case AArch64::UADALPv16i8_v8i16:
    case AArch64::UADALPv2i32_v1i64:
    case AArch64::UADALPv4i16_v2i32:
    case AArch64::UADALPv4i32_v2i64:
    case AArch64::UADALPv8i16_v4i32:
    case AArch64::UADALPv8i8_v4i16:
    case AArch64::UQXTNv16i8:
    case AArch64::UQXTNv4i32:
    case AArch64::UQXTNv8i16:
    case AArch64::USQADDv16i8:
    case AArch64::USQADDv1i16:
    case AArch64::USQADDv1i32:
    case AArch64::USQADDv1i64:
    case AArch64::USQADDv1i8:
    case AArch64::USQADDv2i32:
    case AArch64::USQADDv2i64:
    case AArch64::USQADDv4i16:
    case AArch64::USQADDv4i32:
    case AArch64::USQADDv8i16:
    case AArch64::USQADDv8i8:
    case AArch64::XTNv16i8:
    case AArch64::XTNv4i32:
    case AArch64::XTNv8i16: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
    case AArch64::FMLAv1i16_indexed:
    case AArch64::FMLAv4i16_indexed:
    case AArch64::FMLAv8i16_indexed:
    case AArch64::FMLSv1i16_indexed:
    case AArch64::FMLSv4i16_indexed:
    case AArch64::FMLSv8i16_indexed:
    case AArch64::MLAv4i16_indexed:
    case AArch64::MLAv8i16_indexed:
    case AArch64::MLSv4i16_indexed:
    case AArch64::MLSv8i16_indexed:
    case AArch64::SMLALv4i16_indexed:
    case AArch64::SMLALv8i16_indexed:
    case AArch64::SMLSLv4i16_indexed:
    case AArch64::SMLSLv8i16_indexed:
    case AArch64::SQDMLALv1i32_indexed:
    case AArch64::SQDMLALv4i16_indexed:
    case AArch64::SQDMLALv8i16_indexed:
    case AArch64::SQDMLSLv1i32_indexed:
    case AArch64::SQDMLSLv4i16_indexed:
    case AArch64::SQDMLSLv8i16_indexed:
    case AArch64::SQRDMLAHi16_indexed:
    case AArch64::SQRDMLAHv4i16_indexed:
    case AArch64::SQRDMLAHv8i16_indexed:
    case AArch64::SQRDMLSHi16_indexed:
    case AArch64::SQRDMLSHv4i16_indexed:
    case AArch64::SQRDMLSHv8i16_indexed:
    case AArch64::UMLALv4i16_indexed:
    case AArch64::UMLALv8i16_indexed:
    case AArch64::UMLSLv4i16_indexed:
    case AArch64::UMLSLv8i16_indexed: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 16;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 20;
      Value |= (op & UINT64_C(4)) << 9;
      break;
    }
    case AArch64::ADDHNv2i64_v4i32:
    case AArch64::ADDHNv4i32_v8i16:
    case AArch64::ADDHNv8i16_v16i8:
    case AArch64::BITv16i8:
    case AArch64::BITv8i8:
    case AArch64::BSLv16i8:
    case AArch64::BSLv8i8:
    case AArch64::FMLAv2f32:
    case AArch64::FMLAv2f64:
    case AArch64::FMLAv4f16:
    case AArch64::FMLAv4f32:
    case AArch64::FMLAv8f16:
    case AArch64::FMLSv2f32:
    case AArch64::FMLSv2f64:
    case AArch64::FMLSv4f16:
    case AArch64::FMLSv4f32:
    case AArch64::FMLSv8f16:
    case AArch64::MLAv16i8:
    case AArch64::MLAv2i32:
    case AArch64::MLAv4i16:
    case AArch64::MLAv4i32:
    case AArch64::MLAv8i16:
    case AArch64::MLAv8i8:
    case AArch64::MLSv16i8:
    case AArch64::MLSv2i32:
    case AArch64::MLSv4i16:
    case AArch64::MLSv4i32:
    case AArch64::MLSv8i16:
    case AArch64::MLSv8i8:
    case AArch64::RADDHNv2i64_v4i32:
    case AArch64::RADDHNv4i32_v8i16:
    case AArch64::RADDHNv8i16_v16i8:
    case AArch64::RSUBHNv2i64_v4i32:
    case AArch64::RSUBHNv4i32_v8i16:
    case AArch64::RSUBHNv8i16_v16i8:
    case AArch64::SABALv16i8_v8i16:
    case AArch64::SABALv2i32_v2i64:
    case AArch64::SABALv4i16_v4i32:
    case AArch64::SABALv4i32_v2i64:
    case AArch64::SABALv8i16_v4i32:
    case AArch64::SABALv8i8_v8i16:
    case AArch64::SABAv16i8:
    case AArch64::SABAv2i32:
    case AArch64::SABAv4i16:
    case AArch64::SABAv4i32:
    case AArch64::SABAv8i16:
    case AArch64::SABAv8i8:
    case AArch64::SHA1Crrr:
    case AArch64::SHA1Mrrr:
    case AArch64::SHA1Prrr:
    case AArch64::SHA1SU0rrr:
    case AArch64::SHA256H2rrr:
    case AArch64::SHA256Hrrr:
    case AArch64::SHA256SU1rrr:
    case AArch64::SMLALv16i8_v8i16:
    case AArch64::SMLALv2i32_v2i64:
    case AArch64::SMLALv4i16_v4i32:
    case AArch64::SMLALv4i32_v2i64:
    case AArch64::SMLALv8i16_v4i32:
    case AArch64::SMLALv8i8_v8i16:
    case AArch64::SMLSLv16i8_v8i16:
    case AArch64::SMLSLv2i32_v2i64:
    case AArch64::SMLSLv4i16_v4i32:
    case AArch64::SMLSLv4i32_v2i64:
    case AArch64::SMLSLv8i16_v4i32:
    case AArch64::SMLSLv8i8_v8i16:
    case AArch64::SQDMLALi16:
    case AArch64::SQDMLALi32:
    case AArch64::SQDMLALv2i32_v2i64:
    case AArch64::SQDMLALv4i16_v4i32:
    case AArch64::SQDMLALv4i32_v2i64:
    case AArch64::SQDMLALv8i16_v4i32:
    case AArch64::SQDMLSLi16:
    case AArch64::SQDMLSLi32:
    case AArch64::SQDMLSLv2i32_v2i64:
    case AArch64::SQDMLSLv4i16_v4i32:
    case AArch64::SQDMLSLv4i32_v2i64:
    case AArch64::SQDMLSLv8i16_v4i32:
    case AArch64::SQRDMLAHv1i16:
    case AArch64::SQRDMLAHv1i32:
    case AArch64::SQRDMLAHv2i32:
    case AArch64::SQRDMLAHv4i16:
    case AArch64::SQRDMLAHv4i32:
    case AArch64::SQRDMLAHv8i16:
    case AArch64::SQRDMLSHv1i16:
    case AArch64::SQRDMLSHv1i32:
    case AArch64::SQRDMLSHv2i32:
    case AArch64::SQRDMLSHv4i16:
    case AArch64::SQRDMLSHv4i32:
    case AArch64::SQRDMLSHv8i16:
    case AArch64::SUBHNv2i64_v4i32:
    case AArch64::SUBHNv4i32_v8i16:
    case AArch64::SUBHNv8i16_v16i8:
    case AArch64::UABALv16i8_v8i16:
    case AArch64::UABALv2i32_v2i64:
    case AArch64::UABALv4i16_v4i32:
    case AArch64::UABALv4i32_v2i64:
    case AArch64::UABALv8i16_v4i32:
    case AArch64::UABALv8i8_v8i16:
    case AArch64::UABAv16i8:
    case AArch64::UABAv2i32:
    case AArch64::UABAv4i16:
    case AArch64::UABAv4i32:
    case AArch64::UABAv8i16:
    case AArch64::UABAv8i8:
    case AArch64::UMLALv16i8_v8i16:
    case AArch64::UMLALv2i32_v2i64:
    case AArch64::UMLALv4i16_v4i32:
    case AArch64::UMLALv4i32_v2i64:
    case AArch64::UMLALv8i16_v4i32:
    case AArch64::UMLALv8i8_v8i16:
    case AArch64::UMLSLv16i8_v8i16:
    case AArch64::UMLSLv2i32_v2i64:
    case AArch64::UMLSLv4i16_v4i32:
    case AArch64::UMLSLv4i32_v2i64:
    case AArch64::UMLSLv8i16_v4i32:
    case AArch64::UMLSLv8i8_v8i16: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::FMLAv1i64_indexed:
    case AArch64::FMLAv2i64_indexed:
    case AArch64::FMLSv1i64_indexed:
    case AArch64::FMLSv2i64_indexed: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 11;
      break;
    }
    case AArch64::FMLAv1i32_indexed:
    case AArch64::FMLAv2i32_indexed:
    case AArch64::FMLAv4i32_indexed:
    case AArch64::FMLSv1i32_indexed:
    case AArch64::FMLSv2i32_indexed:
    case AArch64::FMLSv4i32_indexed:
    case AArch64::MLAv2i32_indexed:
    case AArch64::MLAv4i32_indexed:
    case AArch64::MLSv2i32_indexed:
    case AArch64::MLSv4i32_indexed:
    case AArch64::SMLALv2i32_indexed:
    case AArch64::SMLALv4i32_indexed:
    case AArch64::SMLSLv2i32_indexed:
    case AArch64::SMLSLv4i32_indexed:
    case AArch64::SQDMLALv1i64_indexed:
    case AArch64::SQDMLALv2i32_indexed:
    case AArch64::SQDMLALv4i32_indexed:
    case AArch64::SQDMLSLv1i64_indexed:
    case AArch64::SQDMLSLv2i32_indexed:
    case AArch64::SQDMLSLv4i32_indexed:
    case AArch64::SQRDMLAHi32_indexed:
    case AArch64::SQRDMLAHv2i32_indexed:
    case AArch64::SQRDMLAHv4i32_indexed:
    case AArch64::SQRDMLSHi32_indexed:
    case AArch64::SQRDMLSHv2i32_indexed:
    case AArch64::SQRDMLSHv4i32_indexed:
    case AArch64::UMLALv2i32_indexed:
    case AArch64::UMLALv4i32_indexed:
    case AArch64::UMLSLv2i32_indexed:
    case AArch64::UMLSLv4i32_indexed: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 21;
      Value |= (op & UINT64_C(2)) << 10;
      break;
    }
    case AArch64::SLIv4i16_shift:
    case AArch64::SLIv8i16_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftL16OpValue(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case AArch64::SLIv2i32_shift:
    case AArch64::SLIv4i32_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftL32OpValue(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::SLId:
    case AArch64::SLIv2i64_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftL64OpValue(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(63)) << 16;
      break;
    }
    case AArch64::SLIv16i8_shift:
    case AArch64::SLIv8i8_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftL8OpValue(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(7)) << 16;
      break;
    }
    case AArch64::SRIv4i16_shift:
    case AArch64::SRIv8i16_shift:
    case AArch64::SRSRAv4i16_shift:
    case AArch64::SRSRAv8i16_shift:
    case AArch64::SSRAv4i16_shift:
    case AArch64::SSRAv8i16_shift:
    case AArch64::URSRAv4i16_shift:
    case AArch64::URSRAv8i16_shift:
    case AArch64::USRAv4i16_shift:
    case AArch64::USRAv8i16_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR16OpValue(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case AArch64::RSHRNv16i8_shift:
    case AArch64::SHRNv16i8_shift:
    case AArch64::SQRSHRNv16i8_shift:
    case AArch64::SQRSHRUNv16i8_shift:
    case AArch64::SQSHRNv16i8_shift:
    case AArch64::SQSHRUNv16i8_shift:
    case AArch64::UQRSHRNv16i8_shift:
    case AArch64::UQSHRNv16i8_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR16OpValue(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(7)) << 16;
      break;
    }
    case AArch64::RSHRNv8i16_shift:
    case AArch64::SHRNv8i16_shift:
    case AArch64::SQRSHRNv8i16_shift:
    case AArch64::SQRSHRUNv8i16_shift:
    case AArch64::SQSHRNv8i16_shift:
    case AArch64::SQSHRUNv8i16_shift:
    case AArch64::UQRSHRNv8i16_shift:
    case AArch64::UQSHRNv8i16_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR32OpValue(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case AArch64::SRIv2i32_shift:
    case AArch64::SRIv4i32_shift:
    case AArch64::SRSRAv2i32_shift:
    case AArch64::SRSRAv4i32_shift:
    case AArch64::SSRAv2i32_shift:
    case AArch64::SSRAv4i32_shift:
    case AArch64::URSRAv2i32_shift:
    case AArch64::URSRAv4i32_shift:
    case AArch64::USRAv2i32_shift:
    case AArch64::USRAv4i32_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR32OpValue(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::RSHRNv4i32_shift:
    case AArch64::SHRNv4i32_shift:
    case AArch64::SQRSHRNv4i32_shift:
    case AArch64::SQRSHRUNv4i32_shift:
    case AArch64::SQSHRNv4i32_shift:
    case AArch64::SQSHRUNv4i32_shift:
    case AArch64::UQRSHRNv4i32_shift:
    case AArch64::UQSHRNv4i32_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR64OpValue(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::SRId:
    case AArch64::SRIv2i64_shift:
    case AArch64::SRSRAd:
    case AArch64::SRSRAv2i64_shift:
    case AArch64::SSRAd:
    case AArch64::SSRAv2i64_shift:
    case AArch64::URSRAd:
    case AArch64::URSRAv2i64_shift:
    case AArch64::USRAd:
    case AArch64::USRAv2i64_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR64OpValue(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(63)) << 16;
      break;
    }
    case AArch64::SRIv16i8_shift:
    case AArch64::SRIv8i8_shift:
    case AArch64::SRSRAv16i8_shift:
    case AArch64::SRSRAv8i8_shift:
    case AArch64::SSRAv16i8_shift:
    case AArch64::SSRAv8i8_shift:
    case AArch64::URSRAv16i8_shift:
    case AArch64::URSRAv8i8_shift:
    case AArch64::USRAv16i8_shift:
    case AArch64::USRAv8i8_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR8OpValue(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(7)) << 16;
      break;
    }
    case AArch64::INSvi64gpr: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 20;
      break;
    }
    case AArch64::INSvi64lane: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 20;
      // op: idx2
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 14;
      break;
    }
    case AArch64::INSvi8gpr: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 17;
      break;
    }
    case AArch64::INSvi8lane: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 17;
      // op: idx2
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 11;
      break;
    }
    case AArch64::INSvi32gpr: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 19;
      break;
    }
    case AArch64::INSvi32lane: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 19;
      // op: idx2
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 13;
      break;
    }
    case AArch64::INSvi16gpr: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 18;
      break;
    }
    case AArch64::INSvi16lane: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 18;
      // op: idx2
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 12;
      break;
    }
    case AArch64::BICv4i16:
    case AArch64::BICv8i16:
    case AArch64::ORRv4i16:
    case AArch64::ORRv8i16: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: imm8
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(224)) << 11;
      Value |= (op & UINT64_C(31)) << 5;
      // op: shift
      op = getVecShifterOpValue(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(1)) << 13;
      break;
    }
    case AArch64::BICv2i32:
    case AArch64::BICv4i32:
    case AArch64::ORRv2i32:
    case AArch64::ORRv4i32: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: imm8
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(224)) << 11;
      Value |= (op & UINT64_C(31)) << 5;
      // op: shift
      op = getVecShifterOpValue(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(3)) << 13;
      break;
    }
    case AArch64::FCMPDrr:
    case AArch64::FCMPEDrr:
    case AArch64::FCMPEHrr:
    case AArch64::FCMPESrr:
    case AArch64::FCMPHrr:
    case AArch64::FCMPSrr: {
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
    case AArch64::BLR:
    case AArch64::BR:
    case AArch64::RET: {
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
    case AArch64::CCMNWr:
    case AArch64::CCMNXr:
    case AArch64::CCMPWr:
    case AArch64::CCMPXr:
    case AArch64::FCCMPDrr:
    case AArch64::FCCMPEDrr:
    case AArch64::FCCMPEHrr:
    case AArch64::FCCMPESrr:
    case AArch64::FCCMPHrr:
    case AArch64::FCCMPSrr: {
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      // op: nzcv
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(15);
      // op: cond
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case AArch64::CCMNWi:
    case AArch64::CCMNXi:
    case AArch64::CCMPWi:
    case AArch64::CCMPXi: {
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      // op: nzcv
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(15);
      // op: cond
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case AArch64::FCMPDri:
    case AArch64::FCMPEDri:
    case AArch64::FCMPEHri:
    case AArch64::FCMPESri:
    case AArch64::FCMPHri:
    case AArch64::FCMPSri: {
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      Value = fixOneOperandFPComparison(MI, Value, STI);
      break;
    }
    case AArch64::LDADDALb:
    case AArch64::LDADDALd:
    case AArch64::LDADDALh:
    case AArch64::LDADDALs:
    case AArch64::LDADDAb:
    case AArch64::LDADDAd:
    case AArch64::LDADDAh:
    case AArch64::LDADDAs:
    case AArch64::LDADDLb:
    case AArch64::LDADDLd:
    case AArch64::LDADDLh:
    case AArch64::LDADDLs:
    case AArch64::LDADDb:
    case AArch64::LDADDd:
    case AArch64::LDADDh:
    case AArch64::LDADDs:
    case AArch64::LDCLRALb:
    case AArch64::LDCLRALd:
    case AArch64::LDCLRALh:
    case AArch64::LDCLRALs:
    case AArch64::LDCLRAb:
    case AArch64::LDCLRAd:
    case AArch64::LDCLRAh:
    case AArch64::LDCLRAs:
    case AArch64::LDCLRLb:
    case AArch64::LDCLRLd:
    case AArch64::LDCLRLh:
    case AArch64::LDCLRLs:
    case AArch64::LDCLRb:
    case AArch64::LDCLRd:
    case AArch64::LDCLRh:
    case AArch64::LDCLRs:
    case AArch64::LDEORALb:
    case AArch64::LDEORALd:
    case AArch64::LDEORALh:
    case AArch64::LDEORALs:
    case AArch64::LDEORAb:
    case AArch64::LDEORAd:
    case AArch64::LDEORAh:
    case AArch64::LDEORAs:
    case AArch64::LDEORLb:
    case AArch64::LDEORLd:
    case AArch64::LDEORLh:
    case AArch64::LDEORLs:
    case AArch64::LDEORb:
    case AArch64::LDEORd:
    case AArch64::LDEORh:
    case AArch64::LDEORs:
    case AArch64::LDSETALb:
    case AArch64::LDSETALd:
    case AArch64::LDSETALh:
    case AArch64::LDSETALs:
    case AArch64::LDSETAb:
    case AArch64::LDSETAd:
    case AArch64::LDSETAh:
    case AArch64::LDSETAs:
    case AArch64::LDSETLb:
    case AArch64::LDSETLd:
    case AArch64::LDSETLh:
    case AArch64::LDSETLs:
    case AArch64::LDSETb:
    case AArch64::LDSETd:
    case AArch64::LDSETh:
    case AArch64::LDSETs:
    case AArch64::LDSMAXALb:
    case AArch64::LDSMAXALd:
    case AArch64::LDSMAXALh:
    case AArch64::LDSMAXALs:
    case AArch64::LDSMAXAb:
    case AArch64::LDSMAXAd:
    case AArch64::LDSMAXAh:
    case AArch64::LDSMAXAs:
    case AArch64::LDSMAXLb:
    case AArch64::LDSMAXLd:
    case AArch64::LDSMAXLh:
    case AArch64::LDSMAXLs:
    case AArch64::LDSMAXb:
    case AArch64::LDSMAXd:
    case AArch64::LDSMAXh:
    case AArch64::LDSMAXs:
    case AArch64::LDSMINALb:
    case AArch64::LDSMINALd:
    case AArch64::LDSMINALh:
    case AArch64::LDSMINALs:
    case AArch64::LDSMINAb:
    case AArch64::LDSMINAd:
    case AArch64::LDSMINAh:
    case AArch64::LDSMINAs:
    case AArch64::LDSMINLb:
    case AArch64::LDSMINLd:
    case AArch64::LDSMINLh:
    case AArch64::LDSMINLs:
    case AArch64::LDSMINb:
    case AArch64::LDSMINd:
    case AArch64::LDSMINh:
    case AArch64::LDSMINs:
    case AArch64::LDUMAXALb:
    case AArch64::LDUMAXALd:
    case AArch64::LDUMAXALh:
    case AArch64::LDUMAXALs:
    case AArch64::LDUMAXAb:
    case AArch64::LDUMAXAd:
    case AArch64::LDUMAXAh:
    case AArch64::LDUMAXAs:
    case AArch64::LDUMAXLb:
    case AArch64::LDUMAXLd:
    case AArch64::LDUMAXLh:
    case AArch64::LDUMAXLs:
    case AArch64::LDUMAXb:
    case AArch64::LDUMAXd:
    case AArch64::LDUMAXh:
    case AArch64::LDUMAXs:
    case AArch64::LDUMINALb:
    case AArch64::LDUMINALd:
    case AArch64::LDUMINALh:
    case AArch64::LDUMINALs:
    case AArch64::LDUMINAb:
    case AArch64::LDUMINAd:
    case AArch64::LDUMINAh:
    case AArch64::LDUMINAs:
    case AArch64::LDUMINLb:
    case AArch64::LDUMINLd:
    case AArch64::LDUMINLh:
    case AArch64::LDUMINLs:
    case AArch64::LDUMINb:
    case AArch64::LDUMINd:
    case AArch64::LDUMINh:
    case AArch64::LDUMINs:
    case AArch64::SWPALb:
    case AArch64::SWPALd:
    case AArch64::SWPALh:
    case AArch64::SWPALs:
    case AArch64::SWPAb:
    case AArch64::SWPAd:
    case AArch64::SWPAh:
    case AArch64::SWPAs:
    case AArch64::SWPLb:
    case AArch64::SWPLd:
    case AArch64::SWPLh:
    case AArch64::SWPLs:
    case AArch64::SWPb:
    case AArch64::SWPd:
    case AArch64::SWPh:
    case AArch64::SWPs: {
      // op: Rs
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      break;
    }
    case AArch64::CASALb:
    case AArch64::CASALd:
    case AArch64::CASALh:
    case AArch64::CASALs:
    case AArch64::CASAb:
    case AArch64::CASAd:
    case AArch64::CASAh:
    case AArch64::CASAs:
    case AArch64::CASLb:
    case AArch64::CASLd:
    case AArch64::CASLh:
    case AArch64::CASLs:
    case AArch64::CASPALd:
    case AArch64::CASPALs:
    case AArch64::CASPAd:
    case AArch64::CASPAs:
    case AArch64::CASPLd:
    case AArch64::CASPLs:
    case AArch64::CASPd:
    case AArch64::CASPs:
    case AArch64::CASb:
    case AArch64::CASd:
    case AArch64::CASh:
    case AArch64::CASs: {
      // op: Rs
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(31);
      break;
    }
    case AArch64::LDRBBroW:
    case AArch64::LDRBBroX:
    case AArch64::LDRBroW:
    case AArch64::LDRBroX:
    case AArch64::LDRDroW:
    case AArch64::LDRDroX:
    case AArch64::LDRHHroW:
    case AArch64::LDRHHroX:
    case AArch64::LDRHroW:
    case AArch64::LDRHroX:
    case AArch64::LDRQroW:
    case AArch64::LDRQroX:
    case AArch64::LDRSBWroW:
    case AArch64::LDRSBWroX:
    case AArch64::LDRSBXroW:
    case AArch64::LDRSBXroX:
    case AArch64::LDRSHWroW:
    case AArch64::LDRSHWroX:
    case AArch64::LDRSHXroW:
    case AArch64::LDRSHXroX:
    case AArch64::LDRSWroW:
    case AArch64::LDRSWroX:
    case AArch64::LDRSroW:
    case AArch64::LDRSroX:
    case AArch64::LDRWroW:
    case AArch64::LDRWroX:
    case AArch64::LDRXroW:
    case AArch64::LDRXroX:
    case AArch64::PRFMroW:
    case AArch64::PRFMroX:
    case AArch64::STRBBroW:
    case AArch64::STRBBroX:
    case AArch64::STRBroW:
    case AArch64::STRBroX:
    case AArch64::STRDroW:
    case AArch64::STRDroX:
    case AArch64::STRHHroW:
    case AArch64::STRHHroX:
    case AArch64::STRHroW:
    case AArch64::STRHroX:
    case AArch64::STRQroW:
    case AArch64::STRQroX:
    case AArch64::STRSroW:
    case AArch64::STRSroX:
    case AArch64::STRWroW:
    case AArch64::STRWroX:
    case AArch64::STRXroW:
    case AArch64::STRXroX: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      // op: extend
      op = getMemExtendOpValue(MI, 3, Fixups, STI);
      Value |= (op & UINT64_C(2)) << 14;
      Value |= (op & UINT64_C(1)) << 12;
      break;
    }
    case AArch64::LDRQui:
    case AArch64::STRQui: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: offset
      op = getLdStUImm12OpValue<AArch64::fixup_aarch64_ldst_imm12_scale16>(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(4095)) << 10;
      break;
    }
    case AArch64::LDRBBui:
    case AArch64::LDRBui:
    case AArch64::LDRSBWui:
    case AArch64::LDRSBXui:
    case AArch64::STRBBui:
    case AArch64::STRBui: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: offset
      op = getLdStUImm12OpValue<AArch64::fixup_aarch64_ldst_imm12_scale1>(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(4095)) << 10;
      break;
    }
    case AArch64::LDRHHui:
    case AArch64::LDRHui:
    case AArch64::LDRSHWui:
    case AArch64::LDRSHXui:
    case AArch64::STRHHui:
    case AArch64::STRHui: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: offset
      op = getLdStUImm12OpValue<AArch64::fixup_aarch64_ldst_imm12_scale2>(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(4095)) << 10;
      break;
    }
    case AArch64::LDRSWui:
    case AArch64::LDRSui:
    case AArch64::LDRWui:
    case AArch64::STRSui:
    case AArch64::STRWui: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: offset
      op = getLdStUImm12OpValue<AArch64::fixup_aarch64_ldst_imm12_scale4>(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(4095)) << 10;
      break;
    }
    case AArch64::LDRDui:
    case AArch64::LDRXui:
    case AArch64::PRFMui:
    case AArch64::STRDui:
    case AArch64::STRXui: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: offset
      op = getLdStUImm12OpValue<AArch64::fixup_aarch64_ldst_imm12_scale8>(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(4095)) << 10;
      break;
    }
    case AArch64::LDTRBi:
    case AArch64::LDTRHi:
    case AArch64::LDTRSBWi:
    case AArch64::LDTRSBXi:
    case AArch64::LDTRSHWi:
    case AArch64::LDTRSHXi:
    case AArch64::LDTRSWi:
    case AArch64::LDTRWi:
    case AArch64::LDTRXi:
    case AArch64::LDURBBi:
    case AArch64::LDURBi:
    case AArch64::LDURDi:
    case AArch64::LDURHHi:
    case AArch64::LDURHi:
    case AArch64::LDURQi:
    case AArch64::LDURSBWi:
    case AArch64::LDURSBXi:
    case AArch64::LDURSHWi:
    case AArch64::LDURSHXi:
    case AArch64::LDURSWi:
    case AArch64::LDURSi:
    case AArch64::LDURWi:
    case AArch64::LDURXi:
    case AArch64::PRFUMi:
    case AArch64::STTRBi:
    case AArch64::STTRHi:
    case AArch64::STTRWi:
    case AArch64::STTRXi:
    case AArch64::STURBBi:
    case AArch64::STURBi:
    case AArch64::STURDi:
    case AArch64::STURHHi:
    case AArch64::STURHi:
    case AArch64::STURQi:
    case AArch64::STURSi:
    case AArch64::STURWi:
    case AArch64::STURXi: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 12;
      break;
    }
    case AArch64::LDARB:
    case AArch64::LDARH:
    case AArch64::LDARW:
    case AArch64::LDARX:
    case AArch64::LDAXRB:
    case AArch64::LDAXRH:
    case AArch64::LDAXRW:
    case AArch64::LDAXRX:
    case AArch64::LDLARB:
    case AArch64::LDLARH:
    case AArch64::LDLARW:
    case AArch64::LDLARX:
    case AArch64::LDXRB:
    case AArch64::LDXRH:
    case AArch64::LDXRW:
    case AArch64::LDXRX:
    case AArch64::STLLRB:
    case AArch64::STLLRH:
    case AArch64::STLLRW:
    case AArch64::STLLRX:
    case AArch64::STLRB:
    case AArch64::STLRH:
    case AArch64::STLRW:
    case AArch64::STLRX: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      Value = fixLoadStoreExclusive<0,0>(MI, Value, STI);
      break;
    }
    case AArch64::LDNPDi:
    case AArch64::LDNPQi:
    case AArch64::LDNPSi:
    case AArch64::LDNPWi:
    case AArch64::LDNPXi:
    case AArch64::LDPDi:
    case AArch64::LDPQi:
    case AArch64::LDPSWi:
    case AArch64::LDPSi:
    case AArch64::LDPWi:
    case AArch64::LDPXi:
    case AArch64::STNPDi:
    case AArch64::STNPQi:
    case AArch64::STNPSi:
    case AArch64::STNPWi:
    case AArch64::STNPXi:
    case AArch64::STPDi:
    case AArch64::STPQi:
    case AArch64::STPSi:
    case AArch64::STPWi:
    case AArch64::STPXi: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rt2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 10;
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 15;
      break;
    }
    case AArch64::LDAXPW:
    case AArch64::LDAXPX:
    case AArch64::LDXPW:
    case AArch64::LDXPX: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rt2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 10;
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      Value = fixLoadStoreExclusive<0,1>(MI, Value, STI);
      break;
    }
    case AArch64::TBNZW:
    case AArch64::TBNZX:
    case AArch64::TBZW:
    case AArch64::TBZX: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: bit_off
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 19;
      // op: target
      op = getTestBranchTargetOpValue(MI, 2, Fixups, STI);
      Value |= (op & UINT64_C(16383)) << 5;
      break;
    }
    case AArch64::LDRDl:
    case AArch64::LDRQl:
    case AArch64::LDRSWl:
    case AArch64::LDRSl:
    case AArch64::LDRWl:
    case AArch64::LDRXl:
    case AArch64::PRFMl: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: label
      op = getLoadLiteralOpValue(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(524287)) << 5;
      break;
    }
    case AArch64::SYSLxt: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: op1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 16;
      // op: Cn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      // op: Cm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 8;
      // op: op2
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 5;
      break;
    }
    case AArch64::MRS: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: systemreg
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 5;
      break;
    }
    case AArch64::CBNZW:
    case AArch64::CBNZX:
    case AArch64::CBZW:
    case AArch64::CBZX: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: target
      op = getCondBranchTargetOpValue(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(524287)) << 5;
      break;
    }
    case AArch64::LDRBBpost:
    case AArch64::LDRBBpre:
    case AArch64::LDRBpost:
    case AArch64::LDRBpre:
    case AArch64::LDRDpost:
    case AArch64::LDRDpre:
    case AArch64::LDRHHpost:
    case AArch64::LDRHHpre:
    case AArch64::LDRHpost:
    case AArch64::LDRHpre:
    case AArch64::LDRQpost:
    case AArch64::LDRQpre:
    case AArch64::LDRSBWpost:
    case AArch64::LDRSBWpre:
    case AArch64::LDRSBXpost:
    case AArch64::LDRSBXpre:
    case AArch64::LDRSHWpost:
    case AArch64::LDRSHWpre:
    case AArch64::LDRSHXpost:
    case AArch64::LDRSHXpre:
    case AArch64::LDRSWpost:
    case AArch64::LDRSWpre:
    case AArch64::LDRSpost:
    case AArch64::LDRSpre:
    case AArch64::LDRWpost:
    case AArch64::LDRWpre:
    case AArch64::LDRXpost:
    case AArch64::LDRXpre:
    case AArch64::STRBBpost:
    case AArch64::STRBBpre:
    case AArch64::STRBpost:
    case AArch64::STRBpre:
    case AArch64::STRDpost:
    case AArch64::STRDpre:
    case AArch64::STRHHpost:
    case AArch64::STRHHpre:
    case AArch64::STRHpost:
    case AArch64::STRHpre:
    case AArch64::STRQpost:
    case AArch64::STRQpre:
    case AArch64::STRSpost:
    case AArch64::STRSpre:
    case AArch64::STRWpost:
    case AArch64::STRWpre:
    case AArch64::STRXpost:
    case AArch64::STRXpre: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(511)) << 12;
      break;
    }
    case AArch64::LDPDpost:
    case AArch64::LDPDpre:
    case AArch64::LDPQpost:
    case AArch64::LDPQpre:
    case AArch64::LDPSWpost:
    case AArch64::LDPSWpre:
    case AArch64::LDPSpost:
    case AArch64::LDPSpre:
    case AArch64::LDPWpost:
    case AArch64::LDPWpre:
    case AArch64::LDPXpost:
    case AArch64::LDPXpre:
    case AArch64::STPDpost:
    case AArch64::STPDpre:
    case AArch64::STPQpost:
    case AArch64::STPQpre:
    case AArch64::STPSpost:
    case AArch64::STPSpre:
    case AArch64::STPWpost:
    case AArch64::STPWpre:
    case AArch64::STPXpost:
    case AArch64::STPXpre: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rt2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 10;
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 15;
      break;
    }
    case AArch64::MSR: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: systemreg
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 5;
      break;
    }
    case AArch64::SYSxt: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: op1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 16;
      // op: Cn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 12;
      // op: Cm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 8;
      // op: op2
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 5;
      break;
    }
    case AArch64::TBLv16i8Four:
    case AArch64::TBLv16i8One:
    case AArch64::TBLv16i8Three:
    case AArch64::TBLv16i8Two:
    case AArch64::TBLv8i8Four:
    case AArch64::TBLv8i8One:
    case AArch64::TBLv8i8Three:
    case AArch64::TBLv8i8Two: {
      // op: Vd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Vn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Vm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::TBXv16i8Four:
    case AArch64::TBXv16i8One:
    case AArch64::TBXv16i8Three:
    case AArch64::TBXv16i8Two:
    case AArch64::TBXv8i8Four:
    case AArch64::TBXv8i8One:
    case AArch64::TBXv8i8Three:
    case AArch64::TBXv8i8Two: {
      // op: Vd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Vn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Vm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::LD1Fourv16b:
    case AArch64::LD1Fourv1d:
    case AArch64::LD1Fourv2d:
    case AArch64::LD1Fourv2s:
    case AArch64::LD1Fourv4h:
    case AArch64::LD1Fourv4s:
    case AArch64::LD1Fourv8b:
    case AArch64::LD1Fourv8h:
    case AArch64::LD1Onev16b:
    case AArch64::LD1Onev1d:
    case AArch64::LD1Onev2d:
    case AArch64::LD1Onev2s:
    case AArch64::LD1Onev4h:
    case AArch64::LD1Onev4s:
    case AArch64::LD1Onev8b:
    case AArch64::LD1Onev8h:
    case AArch64::LD1Rv16b:
    case AArch64::LD1Rv1d:
    case AArch64::LD1Rv2d:
    case AArch64::LD1Rv2s:
    case AArch64::LD1Rv4h:
    case AArch64::LD1Rv4s:
    case AArch64::LD1Rv8b:
    case AArch64::LD1Rv8h:
    case AArch64::LD1Threev16b:
    case AArch64::LD1Threev1d:
    case AArch64::LD1Threev2d:
    case AArch64::LD1Threev2s:
    case AArch64::LD1Threev4h:
    case AArch64::LD1Threev4s:
    case AArch64::LD1Threev8b:
    case AArch64::LD1Threev8h:
    case AArch64::LD1Twov16b:
    case AArch64::LD1Twov1d:
    case AArch64::LD1Twov2d:
    case AArch64::LD1Twov2s:
    case AArch64::LD1Twov4h:
    case AArch64::LD1Twov4s:
    case AArch64::LD1Twov8b:
    case AArch64::LD1Twov8h:
    case AArch64::LD2Rv16b:
    case AArch64::LD2Rv1d:
    case AArch64::LD2Rv2d:
    case AArch64::LD2Rv2s:
    case AArch64::LD2Rv4h:
    case AArch64::LD2Rv4s:
    case AArch64::LD2Rv8b:
    case AArch64::LD2Rv8h:
    case AArch64::LD2Twov16b:
    case AArch64::LD2Twov2d:
    case AArch64::LD2Twov2s:
    case AArch64::LD2Twov4h:
    case AArch64::LD2Twov4s:
    case AArch64::LD2Twov8b:
    case AArch64::LD2Twov8h:
    case AArch64::LD3Rv16b:
    case AArch64::LD3Rv1d:
    case AArch64::LD3Rv2d:
    case AArch64::LD3Rv2s:
    case AArch64::LD3Rv4h:
    case AArch64::LD3Rv4s:
    case AArch64::LD3Rv8b:
    case AArch64::LD3Rv8h:
    case AArch64::LD3Threev16b:
    case AArch64::LD3Threev2d:
    case AArch64::LD3Threev2s:
    case AArch64::LD3Threev4h:
    case AArch64::LD3Threev4s:
    case AArch64::LD3Threev8b:
    case AArch64::LD3Threev8h:
    case AArch64::LD4Fourv16b:
    case AArch64::LD4Fourv2d:
    case AArch64::LD4Fourv2s:
    case AArch64::LD4Fourv4h:
    case AArch64::LD4Fourv4s:
    case AArch64::LD4Fourv8b:
    case AArch64::LD4Fourv8h:
    case AArch64::LD4Rv16b:
    case AArch64::LD4Rv1d:
    case AArch64::LD4Rv2d:
    case AArch64::LD4Rv2s:
    case AArch64::LD4Rv4h:
    case AArch64::LD4Rv4s:
    case AArch64::LD4Rv8b:
    case AArch64::LD4Rv8h:
    case AArch64::ST1Fourv16b:
    case AArch64::ST1Fourv1d:
    case AArch64::ST1Fourv2d:
    case AArch64::ST1Fourv2s:
    case AArch64::ST1Fourv4h:
    case AArch64::ST1Fourv4s:
    case AArch64::ST1Fourv8b:
    case AArch64::ST1Fourv8h:
    case AArch64::ST1Onev16b:
    case AArch64::ST1Onev1d:
    case AArch64::ST1Onev2d:
    case AArch64::ST1Onev2s:
    case AArch64::ST1Onev4h:
    case AArch64::ST1Onev4s:
    case AArch64::ST1Onev8b:
    case AArch64::ST1Onev8h:
    case AArch64::ST1Threev16b:
    case AArch64::ST1Threev1d:
    case AArch64::ST1Threev2d:
    case AArch64::ST1Threev2s:
    case AArch64::ST1Threev4h:
    case AArch64::ST1Threev4s:
    case AArch64::ST1Threev8b:
    case AArch64::ST1Threev8h:
    case AArch64::ST1Twov16b:
    case AArch64::ST1Twov1d:
    case AArch64::ST1Twov2d:
    case AArch64::ST1Twov2s:
    case AArch64::ST1Twov4h:
    case AArch64::ST1Twov4s:
    case AArch64::ST1Twov8b:
    case AArch64::ST1Twov8h:
    case AArch64::ST2Twov16b:
    case AArch64::ST2Twov2d:
    case AArch64::ST2Twov2s:
    case AArch64::ST2Twov4h:
    case AArch64::ST2Twov4s:
    case AArch64::ST2Twov8b:
    case AArch64::ST2Twov8h:
    case AArch64::ST3Threev16b:
    case AArch64::ST3Threev2d:
    case AArch64::ST3Threev2s:
    case AArch64::ST3Threev4h:
    case AArch64::ST3Threev4s:
    case AArch64::ST3Threev8b:
    case AArch64::ST3Threev8h:
    case AArch64::ST4Fourv16b:
    case AArch64::ST4Fourv2d:
    case AArch64::ST4Fourv2s:
    case AArch64::ST4Fourv4h:
    case AArch64::ST4Fourv4s:
    case AArch64::ST4Fourv8b:
    case AArch64::ST4Fourv8h: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
    case AArch64::ST1i64:
    case AArch64::ST2i64:
    case AArch64::ST3i64:
    case AArch64::ST4i64: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 30;
      break;
    }
    case AArch64::ST1i32:
    case AArch64::ST2i32:
    case AArch64::ST3i32:
    case AArch64::ST4i32: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(2)) << 29;
      Value |= (op & UINT64_C(1)) << 12;
      break;
    }
    case AArch64::ST1i16:
    case AArch64::ST2i16:
    case AArch64::ST3i16:
    case AArch64::ST4i16: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(4)) << 28;
      Value |= (op & UINT64_C(3)) << 11;
      break;
    }
    case AArch64::ST1i8:
    case AArch64::ST2i8:
    case AArch64::ST3i8:
    case AArch64::ST4i8: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(8)) << 27;
      Value |= (op & UINT64_C(7)) << 10;
      break;
    }
    case AArch64::LD1Fourv16b_POST:
    case AArch64::LD1Fourv1d_POST:
    case AArch64::LD1Fourv2d_POST:
    case AArch64::LD1Fourv2s_POST:
    case AArch64::LD1Fourv4h_POST:
    case AArch64::LD1Fourv4s_POST:
    case AArch64::LD1Fourv8b_POST:
    case AArch64::LD1Fourv8h_POST:
    case AArch64::LD1Onev16b_POST:
    case AArch64::LD1Onev1d_POST:
    case AArch64::LD1Onev2d_POST:
    case AArch64::LD1Onev2s_POST:
    case AArch64::LD1Onev4h_POST:
    case AArch64::LD1Onev4s_POST:
    case AArch64::LD1Onev8b_POST:
    case AArch64::LD1Onev8h_POST:
    case AArch64::LD1Rv16b_POST:
    case AArch64::LD1Rv1d_POST:
    case AArch64::LD1Rv2d_POST:
    case AArch64::LD1Rv2s_POST:
    case AArch64::LD1Rv4h_POST:
    case AArch64::LD1Rv4s_POST:
    case AArch64::LD1Rv8b_POST:
    case AArch64::LD1Rv8h_POST:
    case AArch64::LD1Threev16b_POST:
    case AArch64::LD1Threev1d_POST:
    case AArch64::LD1Threev2d_POST:
    case AArch64::LD1Threev2s_POST:
    case AArch64::LD1Threev4h_POST:
    case AArch64::LD1Threev4s_POST:
    case AArch64::LD1Threev8b_POST:
    case AArch64::LD1Threev8h_POST:
    case AArch64::LD1Twov16b_POST:
    case AArch64::LD1Twov1d_POST:
    case AArch64::LD1Twov2d_POST:
    case AArch64::LD1Twov2s_POST:
    case AArch64::LD1Twov4h_POST:
    case AArch64::LD1Twov4s_POST:
    case AArch64::LD1Twov8b_POST:
    case AArch64::LD1Twov8h_POST:
    case AArch64::LD2Rv16b_POST:
    case AArch64::LD2Rv1d_POST:
    case AArch64::LD2Rv2d_POST:
    case AArch64::LD2Rv2s_POST:
    case AArch64::LD2Rv4h_POST:
    case AArch64::LD2Rv4s_POST:
    case AArch64::LD2Rv8b_POST:
    case AArch64::LD2Rv8h_POST:
    case AArch64::LD2Twov16b_POST:
    case AArch64::LD2Twov2d_POST:
    case AArch64::LD2Twov2s_POST:
    case AArch64::LD2Twov4h_POST:
    case AArch64::LD2Twov4s_POST:
    case AArch64::LD2Twov8b_POST:
    case AArch64::LD2Twov8h_POST:
    case AArch64::LD3Rv16b_POST:
    case AArch64::LD3Rv1d_POST:
    case AArch64::LD3Rv2d_POST:
    case AArch64::LD3Rv2s_POST:
    case AArch64::LD3Rv4h_POST:
    case AArch64::LD3Rv4s_POST:
    case AArch64::LD3Rv8b_POST:
    case AArch64::LD3Rv8h_POST:
    case AArch64::LD3Threev16b_POST:
    case AArch64::LD3Threev2d_POST:
    case AArch64::LD3Threev2s_POST:
    case AArch64::LD3Threev4h_POST:
    case AArch64::LD3Threev4s_POST:
    case AArch64::LD3Threev8b_POST:
    case AArch64::LD3Threev8h_POST:
    case AArch64::LD4Fourv16b_POST:
    case AArch64::LD4Fourv2d_POST:
    case AArch64::LD4Fourv2s_POST:
    case AArch64::LD4Fourv4h_POST:
    case AArch64::LD4Fourv4s_POST:
    case AArch64::LD4Fourv8b_POST:
    case AArch64::LD4Fourv8h_POST:
    case AArch64::LD4Rv16b_POST:
    case AArch64::LD4Rv1d_POST:
    case AArch64::LD4Rv2d_POST:
    case AArch64::LD4Rv2s_POST:
    case AArch64::LD4Rv4h_POST:
    case AArch64::LD4Rv4s_POST:
    case AArch64::LD4Rv8b_POST:
    case AArch64::LD4Rv8h_POST:
    case AArch64::ST1Fourv16b_POST:
    case AArch64::ST1Fourv1d_POST:
    case AArch64::ST1Fourv2d_POST:
    case AArch64::ST1Fourv2s_POST:
    case AArch64::ST1Fourv4h_POST:
    case AArch64::ST1Fourv4s_POST:
    case AArch64::ST1Fourv8b_POST:
    case AArch64::ST1Fourv8h_POST:
    case AArch64::ST1Onev16b_POST:
    case AArch64::ST1Onev1d_POST:
    case AArch64::ST1Onev2d_POST:
    case AArch64::ST1Onev2s_POST:
    case AArch64::ST1Onev4h_POST:
    case AArch64::ST1Onev4s_POST:
    case AArch64::ST1Onev8b_POST:
    case AArch64::ST1Onev8h_POST:
    case AArch64::ST1Threev16b_POST:
    case AArch64::ST1Threev1d_POST:
    case AArch64::ST1Threev2d_POST:
    case AArch64::ST1Threev2s_POST:
    case AArch64::ST1Threev4h_POST:
    case AArch64::ST1Threev4s_POST:
    case AArch64::ST1Threev8b_POST:
    case AArch64::ST1Threev8h_POST:
    case AArch64::ST1Twov16b_POST:
    case AArch64::ST1Twov1d_POST:
    case AArch64::ST1Twov2d_POST:
    case AArch64::ST1Twov2s_POST:
    case AArch64::ST1Twov4h_POST:
    case AArch64::ST1Twov4s_POST:
    case AArch64::ST1Twov8b_POST:
    case AArch64::ST1Twov8h_POST:
    case AArch64::ST2Twov16b_POST:
    case AArch64::ST2Twov2d_POST:
    case AArch64::ST2Twov2s_POST:
    case AArch64::ST2Twov4h_POST:
    case AArch64::ST2Twov4s_POST:
    case AArch64::ST2Twov8b_POST:
    case AArch64::ST2Twov8h_POST:
    case AArch64::ST3Threev16b_POST:
    case AArch64::ST3Threev2d_POST:
    case AArch64::ST3Threev2s_POST:
    case AArch64::ST3Threev4h_POST:
    case AArch64::ST3Threev4s_POST:
    case AArch64::ST3Threev8b_POST:
    case AArch64::ST3Threev8h_POST:
    case AArch64::ST4Fourv16b_POST:
    case AArch64::ST4Fourv2d_POST:
    case AArch64::ST4Fourv2s_POST:
    case AArch64::ST4Fourv4h_POST:
    case AArch64::ST4Fourv4s_POST:
    case AArch64::ST4Fourv8b_POST:
    case AArch64::ST4Fourv8h_POST: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Xm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::LD1i64:
    case AArch64::LD2i64:
    case AArch64::LD3i64:
    case AArch64::LD4i64: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 30;
      break;
    }
    case AArch64::ST1i64_POST:
    case AArch64::ST2i64_POST:
    case AArch64::ST3i64_POST:
    case AArch64::ST4i64_POST: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 30;
      // op: Xm
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::LD1i32:
    case AArch64::LD2i32:
    case AArch64::LD3i32:
    case AArch64::LD4i32: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(2)) << 29;
      Value |= (op & UINT64_C(1)) << 12;
      break;
    }
    case AArch64::ST1i32_POST:
    case AArch64::ST2i32_POST:
    case AArch64::ST3i32_POST:
    case AArch64::ST4i32_POST: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(2)) << 29;
      Value |= (op & UINT64_C(1)) << 12;
      // op: Xm
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::LD1i16:
    case AArch64::LD2i16:
    case AArch64::LD3i16:
    case AArch64::LD4i16: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(4)) << 28;
      Value |= (op & UINT64_C(3)) << 11;
      break;
    }
    case AArch64::ST1i16_POST:
    case AArch64::ST2i16_POST:
    case AArch64::ST3i16_POST:
    case AArch64::ST4i16_POST: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(4)) << 28;
      Value |= (op & UINT64_C(3)) << 11;
      // op: Xm
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::LD1i8:
    case AArch64::LD2i8:
    case AArch64::LD3i8:
    case AArch64::LD4i8: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(8)) << 27;
      Value |= (op & UINT64_C(7)) << 10;
      break;
    }
    case AArch64::ST1i8_POST:
    case AArch64::ST2i8_POST:
    case AArch64::ST3i8_POST:
    case AArch64::ST4i8_POST: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(8)) << 27;
      Value |= (op & UINT64_C(7)) << 10;
      // op: Xm
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::LD1i64_POST:
    case AArch64::LD2i64_POST:
    case AArch64::LD3i64_POST:
    case AArch64::LD4i64_POST: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 30;
      // op: Xm
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::LD1i32_POST:
    case AArch64::LD2i32_POST:
    case AArch64::LD3i32_POST:
    case AArch64::LD4i32_POST: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(2)) << 29;
      Value |= (op & UINT64_C(1)) << 12;
      // op: Xm
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::LD1i16_POST:
    case AArch64::LD2i16_POST:
    case AArch64::LD3i16_POST:
    case AArch64::LD4i16_POST: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(4)) << 28;
      Value |= (op & UINT64_C(3)) << 11;
      // op: Xm
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::LD1i8_POST:
    case AArch64::LD2i8_POST:
    case AArch64::LD3i8_POST:
    case AArch64::LD4i8_POST: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(8)) << 27;
      Value |= (op & UINT64_C(7)) << 10;
      // op: Xm
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::STLXRB:
    case AArch64::STLXRH:
    case AArch64::STLXRW:
    case AArch64::STLXRX:
    case AArch64::STXRB:
    case AArch64::STXRH:
    case AArch64::STXRW:
    case AArch64::STXRX: {
      // op: Ws
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      Value = fixLoadStoreExclusive<1,0>(MI, Value, STI);
      break;
    }
    case AArch64::STLXPW:
    case AArch64::STLXPX:
    case AArch64::STXPW:
    case AArch64::STXPX: {
      // op: Ws
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: Rt2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 10;
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
    case AArch64::ADR:
    case AArch64::ADRP: {
      // op: Xd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: label
      op = getAdrLabelOpValue(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(3)) << 29;
      Value |= (op & UINT64_C(2097148)) << 3;
      break;
    }
    case AArch64::B:
    case AArch64::BL: {
      // op: addr
      op = getBranchTargetOpValue(MI, 0, Fixups, STI);
      Value |= op & UINT64_C(67108863);
      break;
    }
    case AArch64::Bcc: {
      // op: cond
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(15);
      // op: target
      op = getCondBranchTargetOpValue(MI, 1, Fixups, STI);
      Value |= (op & UINT64_C(524287)) << 5;
      break;
    }
    case AArch64::CPYi64: {
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: src
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 20;
      break;
    }
    case AArch64::CPYi8: {
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: src
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 17;
      break;
    }
    case AArch64::CPYi32: {
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: src
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(3)) << 19;
      break;
    }
    case AArch64::CPYi16: {
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: src
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(7)) << 18;
      break;
    }
    case AArch64::ADDSWrs:
    case AArch64::ADDSXrs:
    case AArch64::ADDWrs:
    case AArch64::ADDXrs:
    case AArch64::ANDSWrs:
    case AArch64::ANDSXrs:
    case AArch64::ANDWrs:
    case AArch64::ANDXrs:
    case AArch64::BICSWrs:
    case AArch64::BICSXrs:
    case AArch64::BICWrs:
    case AArch64::BICXrs:
    case AArch64::EONWrs:
    case AArch64::EONXrs:
    case AArch64::EORWrs:
    case AArch64::EORXrs:
    case AArch64::ORNWrs:
    case AArch64::ORNXrs:
    case AArch64::ORRWrs:
    case AArch64::ORRXrs:
    case AArch64::SUBSWrs:
    case AArch64::SUBSXrs:
    case AArch64::SUBWrs:
    case AArch64::SUBXrs: {
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= op & UINT64_C(31);
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 5;
      // op: src2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups, STI);
      Value |= (op & UINT64_C(31)) << 16;
      // op: shift
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups, STI);
      Value |= (op & UINT64_C(192)) << 16;
      Value |= (op & UINT64_C(63)) << 10;
      break;
    }
    case AArch64::HINT: {
      // op: imm
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(127)) << 5;
      break;
    }
    case AArch64::BRK:
    case AArch64::DCPS1:
    case AArch64::DCPS2:
    case AArch64::DCPS3:
    case AArch64::HLT:
    case AArch64::HVC:
    case AArch64::SMC:
    case AArch64::SVC: {
      // op: imm
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(65535)) << 5;
      break;
    }
    case AArch64::MSRpstateImm1: {
      // op: pstatefield
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(56)) << 13;
      Value |= (op & UINT64_C(7)) << 5;
      // op: imm
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(1)) << 8;
      break;
    }
    case AArch64::MSRpstateImm4: {
      // op: pstatefield
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups, STI);
      Value |= (op & UINT64_C(56)) << 13;
      Value |= (op & UINT64_C(7)) << 5;
      // op: imm
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups, STI);
      Value |= (op & UINT64_C(15)) << 8;
      break;
    }
  default:
    std::string msg;
    raw_string_ostream Msg(msg);
    Msg << "Not supported instr: " << MI;
    report_fatal_error(Msg.str());
  }
  return Value;
}

#ifdef ENABLE_INSTR_PREDICATE_VERIFIER
#undef ENABLE_INSTR_PREDICATE_VERIFIER
#include <sstream>

// Flags for subtarget features that participate in instruction matching.
enum SubtargetFeatureFlag : uint16_t {
  Feature_HasV8_1a = (1ULL << 9),
  Feature_HasV8_2a = (1ULL << 10),
  Feature_HasFPARMv8 = (1ULL << 2),
  Feature_HasNEON = (1ULL << 5),
  Feature_HasCrypto = (1ULL << 1),
  Feature_HasCRC = (1ULL << 0),
  Feature_HasLSE = (1ULL << 4),
  Feature_HasRAS = (1ULL << 6),
  Feature_HasRDM = (1ULL << 7),
  Feature_HasFullFP16 = (1ULL << 3),
  Feature_HasSPE = (1ULL << 8),
  Feature_None = 0
};

#ifndef NDEBUG
static const char *SubtargetFeatureNames[] = {
  "Feature_HasCRC",
  "Feature_HasCrypto",
  "Feature_HasFPARMv8",
  "Feature_HasFullFP16",
  "Feature_HasLSE",
  "Feature_HasNEON",
  "Feature_HasRAS",
  "Feature_HasRDM",
  "Feature_HasSPE",
  "Feature_HasV8_1a",
  "Feature_HasV8_2a",
  nullptr
};

#endif // NDEBUG
uint64_t AArch64MCCodeEmitter::
computeAvailableFeatures(const FeatureBitset& FB) const {
  uint64_t Features = 0;
  if ((FB[AArch64::HasV8_1aOps]))
    Features |= Feature_HasV8_1a;
  if ((FB[AArch64::HasV8_2aOps]))
    Features |= Feature_HasV8_2a;
  if ((FB[AArch64::FeatureFPARMv8]))
    Features |= Feature_HasFPARMv8;
  if ((FB[AArch64::FeatureNEON]))
    Features |= Feature_HasNEON;
  if ((FB[AArch64::FeatureCrypto]))
    Features |= Feature_HasCrypto;
  if ((FB[AArch64::FeatureCRC]))
    Features |= Feature_HasCRC;
  if ((FB[AArch64::FeatureLSE]))
    Features |= Feature_HasLSE;
  if ((FB[AArch64::FeatureRAS]))
    Features |= Feature_HasRAS;
  if ((FB[AArch64::FeatureRDM]))
    Features |= Feature_HasRDM;
  if ((FB[AArch64::FeatureFullFP16]))
    Features |= Feature_HasFullFP16;
  if ((FB[AArch64::FeatureSPE]))
    Features |= Feature_HasSPE;
  return Features;
}

void AArch64MCCodeEmitter::verifyInstructionPredicates(
    const MCInst &Inst, uint64_t AvailableFeatures) const {
#ifndef NDEBUG
  static uint64_t RequiredFeatures[] = {
    0, // PHI = 0
    0, // INLINEASM = 1
    0, // CFI_INSTRUCTION = 2
    0, // EH_LABEL = 3
    0, // GC_LABEL = 4
    0, // KILL = 5
    0, // EXTRACT_SUBREG = 6
    0, // INSERT_SUBREG = 7
    0, // IMPLICIT_DEF = 8
    0, // SUBREG_TO_REG = 9
    0, // COPY_TO_REGCLASS = 10
    0, // DBG_VALUE = 11
    0, // REG_SEQUENCE = 12
    0, // COPY = 13
    0, // BUNDLE = 14
    0, // LIFETIME_START = 15
    0, // LIFETIME_END = 16
    0, // STACKMAP = 17
    0, // FENTRY_CALL = 18
    0, // PATCHPOINT = 19
    0, // LOAD_STACK_GUARD = 20
    0, // STATEPOINT = 21
    0, // LOCAL_ESCAPE = 22
    0, // FAULTING_OP = 23
    0, // PATCHABLE_OP = 24
    0, // PATCHABLE_FUNCTION_ENTER = 25
    0, // PATCHABLE_RET = 26
    0, // PATCHABLE_FUNCTION_EXIT = 27
    0, // PATCHABLE_TAIL_CALL = 28
    0, // G_ADD = 29
    0, // G_SUB = 30
    0, // G_MUL = 31
    0, // G_SDIV = 32
    0, // G_UDIV = 33
    0, // G_SREM = 34
    0, // G_UREM = 35
    0, // G_AND = 36
    0, // G_OR = 37
    0, // G_XOR = 38
    0, // G_FRAME_INDEX = 39
    0, // G_GLOBAL_VALUE = 40
    0, // G_EXTRACT = 41
    0, // G_UNMERGE_VALUES = 42
    0, // G_INSERT = 43
    0, // G_SEQUENCE = 44
    0, // G_MERGE_VALUES = 45
    0, // G_PTRTOINT = 46
    0, // G_INTTOPTR = 47
    0, // G_BITCAST = 48
    0, // G_LOAD = 49
    0, // G_STORE = 50
    0, // G_BRCOND = 51
    0, // G_BRINDIRECT = 52
    0, // G_INTRINSIC = 53
    0, // G_INTRINSIC_W_SIDE_EFFECTS = 54
    0, // G_ANYEXT = 55
    0, // G_TRUNC = 56
    0, // G_CONSTANT = 57
    0, // G_FCONSTANT = 58
    0, // G_VASTART = 59
    0, // G_VAARG = 60
    0, // G_SEXT = 61
    0, // G_ZEXT = 62
    0, // G_SHL = 63
    0, // G_LSHR = 64
    0, // G_ASHR = 65
    0, // G_ICMP = 66
    0, // G_FCMP = 67
    0, // G_SELECT = 68
    0, // G_UADDE = 69
    0, // G_USUBE = 70
    0, // G_SADDO = 71
    0, // G_SSUBO = 72
    0, // G_UMULO = 73
    0, // G_SMULO = 74
    0, // G_UMULH = 75
    0, // G_SMULH = 76
    0, // G_FADD = 77
    0, // G_FSUB = 78
    0, // G_FMUL = 79
    0, // G_FDIV = 80
    0, // G_FREM = 81
    0, // G_FPOW = 82
    0, // G_FNEG = 83
    0, // G_FPEXT = 84
    0, // G_FPTRUNC = 85
    0, // G_FPTOSI = 86
    0, // G_FPTOUI = 87
    0, // G_SITOFP = 88
    0, // G_UITOFP = 89
    0, // G_GEP = 90
    0, // G_PTR_MASK = 91
    0, // G_BR = 92
    0, // G_INSERT_VECTOR_ELT = 93
    0, // G_EXTRACT_VECTOR_ELT = 94
    Feature_HasNEON | 0, // ABSv16i8 = 95
    Feature_HasNEON | 0, // ABSv1i64 = 96
    Feature_HasNEON | 0, // ABSv2i32 = 97
    Feature_HasNEON | 0, // ABSv2i64 = 98
    Feature_HasNEON | 0, // ABSv4i16 = 99
    Feature_HasNEON | 0, // ABSv4i32 = 100
    Feature_HasNEON | 0, // ABSv8i16 = 101
    Feature_HasNEON | 0, // ABSv8i8 = 102
    0, // ADCSWr = 103
    0, // ADCSXr = 104
    0, // ADCWr = 105
    0, // ADCXr = 106
    Feature_HasNEON | 0, // ADDHNv2i64_v2i32 = 107
    Feature_HasNEON | 0, // ADDHNv2i64_v4i32 = 108
    Feature_HasNEON | 0, // ADDHNv4i32_v4i16 = 109
    Feature_HasNEON | 0, // ADDHNv4i32_v8i16 = 110
    Feature_HasNEON | 0, // ADDHNv8i16_v16i8 = 111
    Feature_HasNEON | 0, // ADDHNv8i16_v8i8 = 112
    Feature_HasNEON | 0, // ADDPv16i8 = 113
    Feature_HasNEON | 0, // ADDPv2i32 = 114
    Feature_HasNEON | 0, // ADDPv2i64 = 115
    Feature_HasNEON | 0, // ADDPv2i64p = 116
    Feature_HasNEON | 0, // ADDPv4i16 = 117
    Feature_HasNEON | 0, // ADDPv4i32 = 118
    Feature_HasNEON | 0, // ADDPv8i16 = 119
    Feature_HasNEON | 0, // ADDPv8i8 = 120
    0, // ADDSWri = 121
    0, // ADDSWrr = 122
    0, // ADDSWrs = 123
    0, // ADDSWrx = 124
    0, // ADDSXri = 125
    0, // ADDSXrr = 126
    0, // ADDSXrs = 127
    0, // ADDSXrx = 128
    0, // ADDSXrx64 = 129
    Feature_HasNEON | 0, // ADDVv16i8v = 130
    Feature_HasNEON | 0, // ADDVv4i16v = 131
    Feature_HasNEON | 0, // ADDVv4i32v = 132
    Feature_HasNEON | 0, // ADDVv8i16v = 133
    Feature_HasNEON | 0, // ADDVv8i8v = 134
    0, // ADDWri = 135
    0, // ADDWrr = 136
    0, // ADDWrs = 137
    0, // ADDWrx = 138
    0, // ADDXri = 139
    0, // ADDXrr = 140
    0, // ADDXrs = 141
    0, // ADDXrx = 142
    0, // ADDXrx64 = 143
    Feature_HasNEON | 0, // ADDv16i8 = 144
    Feature_HasNEON | 0, // ADDv1i64 = 145
    Feature_HasNEON | 0, // ADDv2i32 = 146
    Feature_HasNEON | 0, // ADDv2i64 = 147
    Feature_HasNEON | 0, // ADDv4i16 = 148
    Feature_HasNEON | 0, // ADDv4i32 = 149
    Feature_HasNEON | 0, // ADDv8i16 = 150
    Feature_HasNEON | 0, // ADDv8i8 = 151
    0, // ADJCALLSTACKDOWN = 152
    0, // ADJCALLSTACKUP = 153
    0, // ADR = 154
    0, // ADRP = 155
    Feature_HasCrypto | 0, // AESDrr = 156
    Feature_HasCrypto | 0, // AESErr = 157
    Feature_HasCrypto | 0, // AESIMCrr = 158
    Feature_HasCrypto | 0, // AESMCrr = 159
    0, // ANDSWri = 160
    0, // ANDSWrr = 161
    0, // ANDSWrs = 162
    0, // ANDSXri = 163
    0, // ANDSXrr = 164
    0, // ANDSXrs = 165
    0, // ANDWri = 166
    0, // ANDWrr = 167
    0, // ANDWrs = 168
    0, // ANDXri = 169
    0, // ANDXrr = 170
    0, // ANDXrs = 171
    Feature_HasNEON | 0, // ANDv16i8 = 172
    Feature_HasNEON | 0, // ANDv8i8 = 173
    0, // ASRVWr = 174
    0, // ASRVXr = 175
    0, // B = 176
    0, // BFMWri = 177
    0, // BFMXri = 178
    0, // BICSWrr = 179
    0, // BICSWrs = 180
    0, // BICSXrr = 181
    0, // BICSXrs = 182
    0, // BICWrr = 183
    0, // BICWrs = 184
    0, // BICXrr = 185
    0, // BICXrs = 186
    Feature_HasNEON | 0, // BICv16i8 = 187
    Feature_HasNEON | 0, // BICv2i32 = 188
    Feature_HasNEON | 0, // BICv4i16 = 189
    Feature_HasNEON | 0, // BICv4i32 = 190
    Feature_HasNEON | 0, // BICv8i16 = 191
    Feature_HasNEON | 0, // BICv8i8 = 192
    Feature_HasNEON | 0, // BIFv16i8 = 193
    Feature_HasNEON | 0, // BIFv8i8 = 194
    Feature_HasNEON | 0, // BITv16i8 = 195
    Feature_HasNEON | 0, // BITv8i8 = 196
    0, // BL = 197
    0, // BLR = 198
    0, // BR = 199
    0, // BRK = 200
    Feature_HasNEON | 0, // BSLv16i8 = 201
    Feature_HasNEON | 0, // BSLv8i8 = 202
    0, // Bcc = 203
    Feature_HasLSE | 0, // CASALb = 204
    Feature_HasLSE | 0, // CASALd = 205
    Feature_HasLSE | 0, // CASALh = 206
    Feature_HasLSE | 0, // CASALs = 207
    Feature_HasLSE | 0, // CASAb = 208
    Feature_HasLSE | 0, // CASAd = 209
    Feature_HasLSE | 0, // CASAh = 210
    Feature_HasLSE | 0, // CASAs = 211
    Feature_HasLSE | 0, // CASLb = 212
    Feature_HasLSE | 0, // CASLd = 213
    Feature_HasLSE | 0, // CASLh = 214
    Feature_HasLSE | 0, // CASLs = 215
    Feature_HasLSE | 0, // CASPALd = 216
    Feature_HasLSE | 0, // CASPALs = 217
    Feature_HasLSE | 0, // CASPAd = 218
    Feature_HasLSE | 0, // CASPAs = 219
    Feature_HasLSE | 0, // CASPLd = 220
    Feature_HasLSE | 0, // CASPLs = 221
    Feature_HasLSE | 0, // CASPd = 222
    Feature_HasLSE | 0, // CASPs = 223
    Feature_HasLSE | 0, // CASb = 224
    Feature_HasLSE | 0, // CASd = 225
    Feature_HasLSE | 0, // CASh = 226
    Feature_HasLSE | 0, // CASs = 227
    0, // CBNZW = 228
    0, // CBNZX = 229
    0, // CBZW = 230
    0, // CBZX = 231
    0, // CCMNWi = 232
    0, // CCMNWr = 233
    0, // CCMNXi = 234
    0, // CCMNXr = 235
    0, // CCMPWi = 236
    0, // CCMPWr = 237
    0, // CCMPXi = 238
    0, // CCMPXr = 239
    0, // CLREX = 240
    0, // CLSWr = 241
    0, // CLSXr = 242
    Feature_HasNEON | 0, // CLSv16i8 = 243
    Feature_HasNEON | 0, // CLSv2i32 = 244
    Feature_HasNEON | 0, // CLSv4i16 = 245
    Feature_HasNEON | 0, // CLSv4i32 = 246
    Feature_HasNEON | 0, // CLSv8i16 = 247
    Feature_HasNEON | 0, // CLSv8i8 = 248
    0, // CLZWr = 249
    0, // CLZXr = 250
    Feature_HasNEON | 0, // CLZv16i8 = 251
    Feature_HasNEON | 0, // CLZv2i32 = 252
    Feature_HasNEON | 0, // CLZv4i16 = 253
    Feature_HasNEON | 0, // CLZv4i32 = 254
    Feature_HasNEON | 0, // CLZv8i16 = 255
    Feature_HasNEON | 0, // CLZv8i8 = 256
    Feature_HasNEON | 0, // CMEQv16i8 = 257
    Feature_HasNEON | 0, // CMEQv16i8rz = 258
    Feature_HasNEON | 0, // CMEQv1i64 = 259
    Feature_HasNEON | 0, // CMEQv1i64rz = 260
    Feature_HasNEON | 0, // CMEQv2i32 = 261
    Feature_HasNEON | 0, // CMEQv2i32rz = 262
    Feature_HasNEON | 0, // CMEQv2i64 = 263
    Feature_HasNEON | 0, // CMEQv2i64rz = 264
    Feature_HasNEON | 0, // CMEQv4i16 = 265
    Feature_HasNEON | 0, // CMEQv4i16rz = 266
    Feature_HasNEON | 0, // CMEQv4i32 = 267
    Feature_HasNEON | 0, // CMEQv4i32rz = 268
    Feature_HasNEON | 0, // CMEQv8i16 = 269
    Feature_HasNEON | 0, // CMEQv8i16rz = 270
    Feature_HasNEON | 0, // CMEQv8i8 = 271
    Feature_HasNEON | 0, // CMEQv8i8rz = 272
    Feature_HasNEON | 0, // CMGEv16i8 = 273
    Feature_HasNEON | 0, // CMGEv16i8rz = 274
    Feature_HasNEON | 0, // CMGEv1i64 = 275
    Feature_HasNEON | 0, // CMGEv1i64rz = 276
    Feature_HasNEON | 0, // CMGEv2i32 = 277
    Feature_HasNEON | 0, // CMGEv2i32rz = 278
    Feature_HasNEON | 0, // CMGEv2i64 = 279
    Feature_HasNEON | 0, // CMGEv2i64rz = 280
    Feature_HasNEON | 0, // CMGEv4i16 = 281
    Feature_HasNEON | 0, // CMGEv4i16rz = 282
    Feature_HasNEON | 0, // CMGEv4i32 = 283
    Feature_HasNEON | 0, // CMGEv4i32rz = 284
    Feature_HasNEON | 0, // CMGEv8i16 = 285
    Feature_HasNEON | 0, // CMGEv8i16rz = 286
    Feature_HasNEON | 0, // CMGEv8i8 = 287
    Feature_HasNEON | 0, // CMGEv8i8rz = 288
    Feature_HasNEON | 0, // CMGTv16i8 = 289
    Feature_HasNEON | 0, // CMGTv16i8rz = 290
    Feature_HasNEON | 0, // CMGTv1i64 = 291
    Feature_HasNEON | 0, // CMGTv1i64rz = 292
    Feature_HasNEON | 0, // CMGTv2i32 = 293
    Feature_HasNEON | 0, // CMGTv2i32rz = 294
    Feature_HasNEON | 0, // CMGTv2i64 = 295
    Feature_HasNEON | 0, // CMGTv2i64rz = 296
    Feature_HasNEON | 0, // CMGTv4i16 = 297
    Feature_HasNEON | 0, // CMGTv4i16rz = 298
    Feature_HasNEON | 0, // CMGTv4i32 = 299
    Feature_HasNEON | 0, // CMGTv4i32rz = 300
    Feature_HasNEON | 0, // CMGTv8i16 = 301
    Feature_HasNEON | 0, // CMGTv8i16rz = 302
    Feature_HasNEON | 0, // CMGTv8i8 = 303
    Feature_HasNEON | 0, // CMGTv8i8rz = 304
    Feature_HasNEON | 0, // CMHIv16i8 = 305
    Feature_HasNEON | 0, // CMHIv1i64 = 306
    Feature_HasNEON | 0, // CMHIv2i32 = 307
    Feature_HasNEON | 0, // CMHIv2i64 = 308
    Feature_HasNEON | 0, // CMHIv4i16 = 309
    Feature_HasNEON | 0, // CMHIv4i32 = 310
    Feature_HasNEON | 0, // CMHIv8i16 = 311
    Feature_HasNEON | 0, // CMHIv8i8 = 312
    Feature_HasNEON | 0, // CMHSv16i8 = 313
    Feature_HasNEON | 0, // CMHSv1i64 = 314
    Feature_HasNEON | 0, // CMHSv2i32 = 315
    Feature_HasNEON | 0, // CMHSv2i64 = 316
    Feature_HasNEON | 0, // CMHSv4i16 = 317
    Feature_HasNEON | 0, // CMHSv4i32 = 318
    Feature_HasNEON | 0, // CMHSv8i16 = 319
    Feature_HasNEON | 0, // CMHSv8i8 = 320
    Feature_HasNEON | 0, // CMLEv16i8rz = 321
    Feature_HasNEON | 0, // CMLEv1i64rz = 322
    Feature_HasNEON | 0, // CMLEv2i32rz = 323
    Feature_HasNEON | 0, // CMLEv2i64rz = 324
    Feature_HasNEON | 0, // CMLEv4i16rz = 325
    Feature_HasNEON | 0, // CMLEv4i32rz = 326
    Feature_HasNEON | 0, // CMLEv8i16rz = 327
    Feature_HasNEON | 0, // CMLEv8i8rz = 328
    Feature_HasNEON | 0, // CMLTv16i8rz = 329
    Feature_HasNEON | 0, // CMLTv1i64rz = 330
    Feature_HasNEON | 0, // CMLTv2i32rz = 331
    Feature_HasNEON | 0, // CMLTv2i64rz = 332
    Feature_HasNEON | 0, // CMLTv4i16rz = 333
    Feature_HasNEON | 0, // CMLTv4i32rz = 334
    Feature_HasNEON | 0, // CMLTv8i16rz = 335
    Feature_HasNEON | 0, // CMLTv8i8rz = 336
    0, // CMP_SWAP_128 = 337
    0, // CMP_SWAP_16 = 338
    0, // CMP_SWAP_32 = 339
    0, // CMP_SWAP_64 = 340
    0, // CMP_SWAP_8 = 341
    Feature_HasNEON | 0, // CMTSTv16i8 = 342
    Feature_HasNEON | 0, // CMTSTv1i64 = 343
    Feature_HasNEON | 0, // CMTSTv2i32 = 344
    Feature_HasNEON | 0, // CMTSTv2i64 = 345
    Feature_HasNEON | 0, // CMTSTv4i16 = 346
    Feature_HasNEON | 0, // CMTSTv4i32 = 347
    Feature_HasNEON | 0, // CMTSTv8i16 = 348
    Feature_HasNEON | 0, // CMTSTv8i8 = 349
    Feature_HasNEON | 0, // CNTv16i8 = 350
    Feature_HasNEON | 0, // CNTv8i8 = 351
    Feature_HasNEON | 0, // CPYi16 = 352
    Feature_HasNEON | 0, // CPYi32 = 353
    Feature_HasNEON | 0, // CPYi64 = 354
    Feature_HasNEON | 0, // CPYi8 = 355
    Feature_HasCRC | 0, // CRC32Brr = 356
    Feature_HasCRC | 0, // CRC32CBrr = 357
    Feature_HasCRC | 0, // CRC32CHrr = 358
    Feature_HasCRC | 0, // CRC32CWrr = 359
    Feature_HasCRC | 0, // CRC32CXrr = 360
    Feature_HasCRC | 0, // CRC32Hrr = 361
    Feature_HasCRC | 0, // CRC32Wrr = 362
    Feature_HasCRC | 0, // CRC32Xrr = 363
    0, // CSELWr = 364
    0, // CSELXr = 365
    0, // CSINCWr = 366
    0, // CSINCXr = 367
    0, // CSINVWr = 368
    0, // CSINVXr = 369
    0, // CSNEGWr = 370
    0, // CSNEGXr = 371
    0, // DCPS1 = 372
    0, // DCPS2 = 373
    0, // DCPS3 = 374
    0, // DMB = 375
    0, // DRPS = 376
    0, // DSB = 377
    Feature_HasNEON | 0, // DUPv16i8gpr = 378
    Feature_HasNEON | 0, // DUPv16i8lane = 379
    Feature_HasNEON | 0, // DUPv2i32gpr = 380
    Feature_HasNEON | 0, // DUPv2i32lane = 381
    Feature_HasNEON | 0, // DUPv2i64gpr = 382
    Feature_HasNEON | 0, // DUPv2i64lane = 383
    Feature_HasNEON | 0, // DUPv4i16gpr = 384
    Feature_HasNEON | 0, // DUPv4i16lane = 385
    Feature_HasNEON | 0, // DUPv4i32gpr = 386
    Feature_HasNEON | 0, // DUPv4i32lane = 387
    Feature_HasNEON | 0, // DUPv8i16gpr = 388
    Feature_HasNEON | 0, // DUPv8i16lane = 389
    Feature_HasNEON | 0, // DUPv8i8gpr = 390
    Feature_HasNEON | 0, // DUPv8i8lane = 391
    0, // EONWrr = 392
    0, // EONWrs = 393
    0, // EONXrr = 394
    0, // EONXrs = 395
    0, // EORWri = 396
    0, // EORWrr = 397
    0, // EORWrs = 398
    0, // EORXri = 399
    0, // EORXrr = 400
    0, // EORXrs = 401
    Feature_HasNEON | 0, // EORv16i8 = 402
    Feature_HasNEON | 0, // EORv8i8 = 403
    0, // ERET = 404
    0, // EXTRWrri = 405
    0, // EXTRXrri = 406
    Feature_HasNEON | 0, // EXTv16i8 = 407
    Feature_HasNEON | 0, // EXTv8i8 = 408
    0, // F128CSEL = 409
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FABD16 = 410
    Feature_HasNEON | 0, // FABD32 = 411
    Feature_HasNEON | 0, // FABD64 = 412
    Feature_HasNEON | 0, // FABDv2f32 = 413
    Feature_HasNEON | 0, // FABDv2f64 = 414
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FABDv4f16 = 415
    Feature_HasNEON | 0, // FABDv4f32 = 416
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FABDv8f16 = 417
    Feature_HasFPARMv8 | 0, // FABSDr = 418
    Feature_HasFullFP16 | 0, // FABSHr = 419
    Feature_HasFPARMv8 | 0, // FABSSr = 420
    Feature_HasNEON | 0, // FABSv2f32 = 421
    Feature_HasNEON | 0, // FABSv2f64 = 422
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FABSv4f16 = 423
    Feature_HasNEON | 0, // FABSv4f32 = 424
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FABSv8f16 = 425
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FACGE16 = 426
    Feature_HasNEON | 0, // FACGE32 = 427
    Feature_HasNEON | 0, // FACGE64 = 428
    Feature_HasNEON | 0, // FACGEv2f32 = 429
    Feature_HasNEON | 0, // FACGEv2f64 = 430
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FACGEv4f16 = 431
    Feature_HasNEON | 0, // FACGEv4f32 = 432
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FACGEv8f16 = 433
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FACGT16 = 434
    Feature_HasNEON | 0, // FACGT32 = 435
    Feature_HasNEON | 0, // FACGT64 = 436
    Feature_HasNEON | 0, // FACGTv2f32 = 437
    Feature_HasNEON | 0, // FACGTv2f64 = 438
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FACGTv4f16 = 439
    Feature_HasNEON | 0, // FACGTv4f32 = 440
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FACGTv8f16 = 441
    Feature_HasFPARMv8 | 0, // FADDDrr = 442
    Feature_HasFullFP16 | 0, // FADDHrr = 443
    Feature_HasNEON | 0, // FADDPv2f32 = 444
    Feature_HasNEON | 0, // FADDPv2f64 = 445
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FADDPv2i16p = 446
    Feature_HasNEON | 0, // FADDPv2i32p = 447
    Feature_HasNEON | 0, // FADDPv2i64p = 448
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FADDPv4f16 = 449
    Feature_HasNEON | 0, // FADDPv4f32 = 450
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FADDPv8f16 = 451
    Feature_HasFPARMv8 | 0, // FADDSrr = 452
    Feature_HasNEON | 0, // FADDv2f32 = 453
    Feature_HasNEON | 0, // FADDv2f64 = 454
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FADDv4f16 = 455
    Feature_HasNEON | 0, // FADDv4f32 = 456
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FADDv8f16 = 457
    Feature_HasFPARMv8 | 0, // FCCMPDrr = 458
    Feature_HasFPARMv8 | 0, // FCCMPEDrr = 459
    Feature_HasFullFP16 | 0, // FCCMPEHrr = 460
    Feature_HasFPARMv8 | 0, // FCCMPESrr = 461
    Feature_HasFullFP16 | 0, // FCCMPHrr = 462
    Feature_HasFPARMv8 | 0, // FCCMPSrr = 463
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCMEQ16 = 464
    Feature_HasNEON | 0, // FCMEQ32 = 465
    Feature_HasNEON | 0, // FCMEQ64 = 466
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCMEQv1i16rz = 467
    Feature_HasNEON | 0, // FCMEQv1i32rz = 468
    Feature_HasNEON | 0, // FCMEQv1i64rz = 469
    Feature_HasNEON | 0, // FCMEQv2f32 = 470
    Feature_HasNEON | 0, // FCMEQv2f64 = 471
    Feature_HasNEON | 0, // FCMEQv2i32rz = 472
    Feature_HasNEON | 0, // FCMEQv2i64rz = 473
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCMEQv4f16 = 474
    Feature_HasNEON | 0, // FCMEQv4f32 = 475
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCMEQv4i16rz = 476
    Feature_HasNEON | 0, // FCMEQv4i32rz = 477
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCMEQv8f16 = 478
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCMEQv8i16rz = 479
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCMGE16 = 480
    Feature_HasNEON | 0, // FCMGE32 = 481
    Feature_HasNEON | 0, // FCMGE64 = 482
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCMGEv1i16rz = 483
    Feature_HasNEON | 0, // FCMGEv1i32rz = 484
    Feature_HasNEON | 0, // FCMGEv1i64rz = 485
    Feature_HasNEON | 0, // FCMGEv2f32 = 486
    Feature_HasNEON | 0, // FCMGEv2f64 = 487
    Feature_HasNEON | 0, // FCMGEv2i32rz = 488
    Feature_HasNEON | 0, // FCMGEv2i64rz = 489
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCMGEv4f16 = 490
    Feature_HasNEON | 0, // FCMGEv4f32 = 491
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCMGEv4i16rz = 492
    Feature_HasNEON | 0, // FCMGEv4i32rz = 493
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCMGEv8f16 = 494
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCMGEv8i16rz = 495
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCMGT16 = 496
    Feature_HasNEON | 0, // FCMGT32 = 497
    Feature_HasNEON | 0, // FCMGT64 = 498
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCMGTv1i16rz = 499
    Feature_HasNEON | 0, // FCMGTv1i32rz = 500
    Feature_HasNEON | 0, // FCMGTv1i64rz = 501
    Feature_HasNEON | 0, // FCMGTv2f32 = 502
    Feature_HasNEON | 0, // FCMGTv2f64 = 503
    Feature_HasNEON | 0, // FCMGTv2i32rz = 504
    Feature_HasNEON | 0, // FCMGTv2i64rz = 505
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCMGTv4f16 = 506
    Feature_HasNEON | 0, // FCMGTv4f32 = 507
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCMGTv4i16rz = 508
    Feature_HasNEON | 0, // FCMGTv4i32rz = 509
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCMGTv8f16 = 510
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCMGTv8i16rz = 511
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCMLEv1i16rz = 512
    Feature_HasNEON | 0, // FCMLEv1i32rz = 513
    Feature_HasNEON | 0, // FCMLEv1i64rz = 514
    Feature_HasNEON | 0, // FCMLEv2i32rz = 515
    Feature_HasNEON | 0, // FCMLEv2i64rz = 516
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCMLEv4i16rz = 517
    Feature_HasNEON | 0, // FCMLEv4i32rz = 518
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCMLEv8i16rz = 519
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCMLTv1i16rz = 520
    Feature_HasNEON | 0, // FCMLTv1i32rz = 521
    Feature_HasNEON | 0, // FCMLTv1i64rz = 522
    Feature_HasNEON | 0, // FCMLTv2i32rz = 523
    Feature_HasNEON | 0, // FCMLTv2i64rz = 524
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCMLTv4i16rz = 525
    Feature_HasNEON | 0, // FCMLTv4i32rz = 526
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCMLTv8i16rz = 527
    Feature_HasFPARMv8 | 0, // FCMPDri = 528
    Feature_HasFPARMv8 | 0, // FCMPDrr = 529
    Feature_HasFPARMv8 | 0, // FCMPEDri = 530
    Feature_HasFPARMv8 | 0, // FCMPEDrr = 531
    Feature_HasFullFP16 | 0, // FCMPEHri = 532
    Feature_HasFullFP16 | 0, // FCMPEHrr = 533
    Feature_HasFPARMv8 | 0, // FCMPESri = 534
    Feature_HasFPARMv8 | 0, // FCMPESrr = 535
    Feature_HasFullFP16 | 0, // FCMPHri = 536
    Feature_HasFullFP16 | 0, // FCMPHrr = 537
    Feature_HasFPARMv8 | 0, // FCMPSri = 538
    Feature_HasFPARMv8 | 0, // FCMPSrr = 539
    Feature_HasFPARMv8 | 0, // FCSELDrrr = 540
    Feature_HasFullFP16 | 0, // FCSELHrrr = 541
    Feature_HasFPARMv8 | 0, // FCSELSrrr = 542
    Feature_HasFPARMv8 | 0, // FCVTASUWDr = 543
    Feature_HasFullFP16 | 0, // FCVTASUWHr = 544
    Feature_HasFPARMv8 | 0, // FCVTASUWSr = 545
    Feature_HasFPARMv8 | 0, // FCVTASUXDr = 546
    Feature_HasFullFP16 | 0, // FCVTASUXHr = 547
    Feature_HasFPARMv8 | 0, // FCVTASUXSr = 548
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTASv1f16 = 549
    Feature_HasNEON | 0, // FCVTASv1i32 = 550
    Feature_HasNEON | 0, // FCVTASv1i64 = 551
    Feature_HasNEON | 0, // FCVTASv2f32 = 552
    Feature_HasNEON | 0, // FCVTASv2f64 = 553
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTASv4f16 = 554
    Feature_HasNEON | 0, // FCVTASv4f32 = 555
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTASv8f16 = 556
    Feature_HasFPARMv8 | 0, // FCVTAUUWDr = 557
    Feature_HasFullFP16 | 0, // FCVTAUUWHr = 558
    Feature_HasFPARMv8 | 0, // FCVTAUUWSr = 559
    Feature_HasFPARMv8 | 0, // FCVTAUUXDr = 560
    Feature_HasFullFP16 | 0, // FCVTAUUXHr = 561
    Feature_HasFPARMv8 | 0, // FCVTAUUXSr = 562
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTAUv1f16 = 563
    Feature_HasNEON | 0, // FCVTAUv1i32 = 564
    Feature_HasNEON | 0, // FCVTAUv1i64 = 565
    Feature_HasNEON | 0, // FCVTAUv2f32 = 566
    Feature_HasNEON | 0, // FCVTAUv2f64 = 567
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTAUv4f16 = 568
    Feature_HasNEON | 0, // FCVTAUv4f32 = 569
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTAUv8f16 = 570
    Feature_HasFPARMv8 | 0, // FCVTDHr = 571
    Feature_HasFPARMv8 | 0, // FCVTDSr = 572
    Feature_HasFPARMv8 | 0, // FCVTHDr = 573
    Feature_HasFPARMv8 | 0, // FCVTHSr = 574
    Feature_HasNEON | 0, // FCVTLv2i32 = 575
    Feature_HasNEON | 0, // FCVTLv4i16 = 576
    Feature_HasNEON | 0, // FCVTLv4i32 = 577
    Feature_HasNEON | 0, // FCVTLv8i16 = 578
    Feature_HasFPARMv8 | 0, // FCVTMSUWDr = 579
    Feature_HasFullFP16 | 0, // FCVTMSUWHr = 580
    Feature_HasFPARMv8 | 0, // FCVTMSUWSr = 581
    Feature_HasFPARMv8 | 0, // FCVTMSUXDr = 582
    Feature_HasFullFP16 | 0, // FCVTMSUXHr = 583
    Feature_HasFPARMv8 | 0, // FCVTMSUXSr = 584
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTMSv1f16 = 585
    Feature_HasNEON | 0, // FCVTMSv1i32 = 586
    Feature_HasNEON | 0, // FCVTMSv1i64 = 587
    Feature_HasNEON | 0, // FCVTMSv2f32 = 588
    Feature_HasNEON | 0, // FCVTMSv2f64 = 589
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTMSv4f16 = 590
    Feature_HasNEON | 0, // FCVTMSv4f32 = 591
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTMSv8f16 = 592
    Feature_HasFPARMv8 | 0, // FCVTMUUWDr = 593
    Feature_HasFullFP16 | 0, // FCVTMUUWHr = 594
    Feature_HasFPARMv8 | 0, // FCVTMUUWSr = 595
    Feature_HasFPARMv8 | 0, // FCVTMUUXDr = 596
    Feature_HasFullFP16 | 0, // FCVTMUUXHr = 597
    Feature_HasFPARMv8 | 0, // FCVTMUUXSr = 598
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTMUv1f16 = 599
    Feature_HasNEON | 0, // FCVTMUv1i32 = 600
    Feature_HasNEON | 0, // FCVTMUv1i64 = 601
    Feature_HasNEON | 0, // FCVTMUv2f32 = 602
    Feature_HasNEON | 0, // FCVTMUv2f64 = 603
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTMUv4f16 = 604
    Feature_HasNEON | 0, // FCVTMUv4f32 = 605
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTMUv8f16 = 606
    Feature_HasFPARMv8 | 0, // FCVTNSUWDr = 607
    Feature_HasFullFP16 | 0, // FCVTNSUWHr = 608
    Feature_HasFPARMv8 | 0, // FCVTNSUWSr = 609
    Feature_HasFPARMv8 | 0, // FCVTNSUXDr = 610
    Feature_HasFullFP16 | 0, // FCVTNSUXHr = 611
    Feature_HasFPARMv8 | 0, // FCVTNSUXSr = 612
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTNSv1f16 = 613
    Feature_HasNEON | 0, // FCVTNSv1i32 = 614
    Feature_HasNEON | 0, // FCVTNSv1i64 = 615
    Feature_HasNEON | 0, // FCVTNSv2f32 = 616
    Feature_HasNEON | 0, // FCVTNSv2f64 = 617
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTNSv4f16 = 618
    Feature_HasNEON | 0, // FCVTNSv4f32 = 619
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTNSv8f16 = 620
    Feature_HasFPARMv8 | 0, // FCVTNUUWDr = 621
    Feature_HasFullFP16 | 0, // FCVTNUUWHr = 622
    Feature_HasFPARMv8 | 0, // FCVTNUUWSr = 623
    Feature_HasFPARMv8 | 0, // FCVTNUUXDr = 624
    Feature_HasFullFP16 | 0, // FCVTNUUXHr = 625
    Feature_HasFPARMv8 | 0, // FCVTNUUXSr = 626
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTNUv1f16 = 627
    Feature_HasNEON | 0, // FCVTNUv1i32 = 628
    Feature_HasNEON | 0, // FCVTNUv1i64 = 629
    Feature_HasNEON | 0, // FCVTNUv2f32 = 630
    Feature_HasNEON | 0, // FCVTNUv2f64 = 631
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTNUv4f16 = 632
    Feature_HasNEON | 0, // FCVTNUv4f32 = 633
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTNUv8f16 = 634
    Feature_HasNEON | 0, // FCVTNv2i32 = 635
    Feature_HasNEON | 0, // FCVTNv4i16 = 636
    Feature_HasNEON | 0, // FCVTNv4i32 = 637
    Feature_HasNEON | 0, // FCVTNv8i16 = 638
    Feature_HasFPARMv8 | 0, // FCVTPSUWDr = 639
    Feature_HasFullFP16 | 0, // FCVTPSUWHr = 640
    Feature_HasFPARMv8 | 0, // FCVTPSUWSr = 641
    Feature_HasFPARMv8 | 0, // FCVTPSUXDr = 642
    Feature_HasFullFP16 | 0, // FCVTPSUXHr = 643
    Feature_HasFPARMv8 | 0, // FCVTPSUXSr = 644
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTPSv1f16 = 645
    Feature_HasNEON | 0, // FCVTPSv1i32 = 646
    Feature_HasNEON | 0, // FCVTPSv1i64 = 647
    Feature_HasNEON | 0, // FCVTPSv2f32 = 648
    Feature_HasNEON | 0, // FCVTPSv2f64 = 649
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTPSv4f16 = 650
    Feature_HasNEON | 0, // FCVTPSv4f32 = 651
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTPSv8f16 = 652
    Feature_HasFPARMv8 | 0, // FCVTPUUWDr = 653
    Feature_HasFullFP16 | 0, // FCVTPUUWHr = 654
    Feature_HasFPARMv8 | 0, // FCVTPUUWSr = 655
    Feature_HasFPARMv8 | 0, // FCVTPUUXDr = 656
    Feature_HasFullFP16 | 0, // FCVTPUUXHr = 657
    Feature_HasFPARMv8 | 0, // FCVTPUUXSr = 658
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTPUv1f16 = 659
    Feature_HasNEON | 0, // FCVTPUv1i32 = 660
    Feature_HasNEON | 0, // FCVTPUv1i64 = 661
    Feature_HasNEON | 0, // FCVTPUv2f32 = 662
    Feature_HasNEON | 0, // FCVTPUv2f64 = 663
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTPUv4f16 = 664
    Feature_HasNEON | 0, // FCVTPUv4f32 = 665
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTPUv8f16 = 666
    Feature_HasFPARMv8 | 0, // FCVTSDr = 667
    Feature_HasFPARMv8 | 0, // FCVTSHr = 668
    Feature_HasNEON | 0, // FCVTXNv1i64 = 669
    Feature_HasNEON | 0, // FCVTXNv2f32 = 670
    Feature_HasNEON | 0, // FCVTXNv4f32 = 671
    Feature_HasFPARMv8 | 0, // FCVTZSSWDri = 672
    Feature_HasFullFP16 | 0, // FCVTZSSWHri = 673
    Feature_HasFPARMv8 | 0, // FCVTZSSWSri = 674
    Feature_HasFPARMv8 | 0, // FCVTZSSXDri = 675
    Feature_HasFullFP16 | 0, // FCVTZSSXHri = 676
    Feature_HasFPARMv8 | 0, // FCVTZSSXSri = 677
    Feature_HasFPARMv8 | 0, // FCVTZSUWDr = 678
    Feature_HasFullFP16 | 0, // FCVTZSUWHr = 679
    Feature_HasFPARMv8 | 0, // FCVTZSUWSr = 680
    Feature_HasFPARMv8 | 0, // FCVTZSUXDr = 681
    Feature_HasFullFP16 | 0, // FCVTZSUXHr = 682
    Feature_HasFPARMv8 | 0, // FCVTZSUXSr = 683
    Feature_HasNEON | 0, // FCVTZSd = 684
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTZSh = 685
    Feature_HasNEON | 0, // FCVTZSs = 686
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTZSv1f16 = 687
    Feature_HasNEON | 0, // FCVTZSv1i32 = 688
    Feature_HasNEON | 0, // FCVTZSv1i64 = 689
    Feature_HasNEON | 0, // FCVTZSv2f32 = 690
    Feature_HasNEON | 0, // FCVTZSv2f64 = 691
    Feature_HasNEON | 0, // FCVTZSv2i32_shift = 692
    Feature_HasNEON | 0, // FCVTZSv2i64_shift = 693
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTZSv4f16 = 694
    Feature_HasNEON | 0, // FCVTZSv4f32 = 695
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTZSv4i16_shift = 696
    Feature_HasNEON | 0, // FCVTZSv4i32_shift = 697
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTZSv8f16 = 698
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTZSv8i16_shift = 699
    Feature_HasFPARMv8 | 0, // FCVTZUSWDri = 700
    Feature_HasFullFP16 | 0, // FCVTZUSWHri = 701
    Feature_HasFPARMv8 | 0, // FCVTZUSWSri = 702
    Feature_HasFPARMv8 | 0, // FCVTZUSXDri = 703
    Feature_HasFullFP16 | 0, // FCVTZUSXHri = 704
    Feature_HasFPARMv8 | 0, // FCVTZUSXSri = 705
    Feature_HasFPARMv8 | 0, // FCVTZUUWDr = 706
    Feature_HasFullFP16 | 0, // FCVTZUUWHr = 707
    Feature_HasFPARMv8 | 0, // FCVTZUUWSr = 708
    Feature_HasFPARMv8 | 0, // FCVTZUUXDr = 709
    Feature_HasFullFP16 | 0, // FCVTZUUXHr = 710
    Feature_HasFPARMv8 | 0, // FCVTZUUXSr = 711
    Feature_HasNEON | 0, // FCVTZUd = 712
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTZUh = 713
    Feature_HasNEON | 0, // FCVTZUs = 714
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTZUv1f16 = 715
    Feature_HasNEON | 0, // FCVTZUv1i32 = 716
    Feature_HasNEON | 0, // FCVTZUv1i64 = 717
    Feature_HasNEON | 0, // FCVTZUv2f32 = 718
    Feature_HasNEON | 0, // FCVTZUv2f64 = 719
    Feature_HasNEON | 0, // FCVTZUv2i32_shift = 720
    Feature_HasNEON | 0, // FCVTZUv2i64_shift = 721
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTZUv4f16 = 722
    Feature_HasNEON | 0, // FCVTZUv4f32 = 723
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTZUv4i16_shift = 724
    Feature_HasNEON | 0, // FCVTZUv4i32_shift = 725
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTZUv8f16 = 726
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FCVTZUv8i16_shift = 727
    Feature_HasFPARMv8 | 0, // FDIVDrr = 728
    Feature_HasFullFP16 | 0, // FDIVHrr = 729
    Feature_HasFPARMv8 | 0, // FDIVSrr = 730
    Feature_HasNEON | 0, // FDIVv2f32 = 731
    Feature_HasNEON | 0, // FDIVv2f64 = 732
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FDIVv4f16 = 733
    Feature_HasNEON | 0, // FDIVv4f32 = 734
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FDIVv8f16 = 735
    Feature_HasFPARMv8 | 0, // FMADDDrrr = 736
    Feature_HasFullFP16 | 0, // FMADDHrrr = 737
    Feature_HasFPARMv8 | 0, // FMADDSrrr = 738
    Feature_HasFPARMv8 | 0, // FMAXDrr = 739
    Feature_HasFullFP16 | 0, // FMAXHrr = 740
    Feature_HasFPARMv8 | 0, // FMAXNMDrr = 741
    Feature_HasFullFP16 | 0, // FMAXNMHrr = 742
    Feature_HasNEON | 0, // FMAXNMPv2f32 = 743
    Feature_HasNEON | 0, // FMAXNMPv2f64 = 744
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMAXNMPv2i16p = 745
    Feature_HasNEON | 0, // FMAXNMPv2i32p = 746
    Feature_HasNEON | 0, // FMAXNMPv2i64p = 747
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMAXNMPv4f16 = 748
    Feature_HasNEON | 0, // FMAXNMPv4f32 = 749
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMAXNMPv8f16 = 750
    Feature_HasFPARMv8 | 0, // FMAXNMSrr = 751
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMAXNMVv4i16v = 752
    Feature_HasNEON | 0, // FMAXNMVv4i32v = 753
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMAXNMVv8i16v = 754
    Feature_HasNEON | 0, // FMAXNMv2f32 = 755
    Feature_HasNEON | 0, // FMAXNMv2f64 = 756
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMAXNMv4f16 = 757
    Feature_HasNEON | 0, // FMAXNMv4f32 = 758
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMAXNMv8f16 = 759
    Feature_HasNEON | 0, // FMAXPv2f32 = 760
    Feature_HasNEON | 0, // FMAXPv2f64 = 761
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMAXPv2i16p = 762
    Feature_HasNEON | 0, // FMAXPv2i32p = 763
    Feature_HasNEON | 0, // FMAXPv2i64p = 764
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMAXPv4f16 = 765
    Feature_HasNEON | 0, // FMAXPv4f32 = 766
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMAXPv8f16 = 767
    Feature_HasFPARMv8 | 0, // FMAXSrr = 768
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMAXVv4i16v = 769
    Feature_HasNEON | 0, // FMAXVv4i32v = 770
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMAXVv8i16v = 771
    Feature_HasNEON | 0, // FMAXv2f32 = 772
    Feature_HasNEON | 0, // FMAXv2f64 = 773
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMAXv4f16 = 774
    Feature_HasNEON | 0, // FMAXv4f32 = 775
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMAXv8f16 = 776
    Feature_HasFPARMv8 | 0, // FMINDrr = 777
    Feature_HasFullFP16 | 0, // FMINHrr = 778
    Feature_HasFPARMv8 | 0, // FMINNMDrr = 779
    Feature_HasFullFP16 | 0, // FMINNMHrr = 780
    Feature_HasNEON | 0, // FMINNMPv2f32 = 781
    Feature_HasNEON | 0, // FMINNMPv2f64 = 782
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMINNMPv2i16p = 783
    Feature_HasNEON | 0, // FMINNMPv2i32p = 784
    Feature_HasNEON | 0, // FMINNMPv2i64p = 785
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMINNMPv4f16 = 786
    Feature_HasNEON | 0, // FMINNMPv4f32 = 787
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMINNMPv8f16 = 788
    Feature_HasFPARMv8 | 0, // FMINNMSrr = 789
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMINNMVv4i16v = 790
    Feature_HasNEON | 0, // FMINNMVv4i32v = 791
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMINNMVv8i16v = 792
    Feature_HasNEON | 0, // FMINNMv2f32 = 793
    Feature_HasNEON | 0, // FMINNMv2f64 = 794
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMINNMv4f16 = 795
    Feature_HasNEON | 0, // FMINNMv4f32 = 796
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMINNMv8f16 = 797
    Feature_HasNEON | 0, // FMINPv2f32 = 798
    Feature_HasNEON | 0, // FMINPv2f64 = 799
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMINPv2i16p = 800
    Feature_HasNEON | 0, // FMINPv2i32p = 801
    Feature_HasNEON | 0, // FMINPv2i64p = 802
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMINPv4f16 = 803
    Feature_HasNEON | 0, // FMINPv4f32 = 804
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMINPv8f16 = 805
    Feature_HasFPARMv8 | 0, // FMINSrr = 806
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMINVv4i16v = 807
    Feature_HasNEON | 0, // FMINVv4i32v = 808
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMINVv8i16v = 809
    Feature_HasNEON | 0, // FMINv2f32 = 810
    Feature_HasNEON | 0, // FMINv2f64 = 811
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMINv4f16 = 812
    Feature_HasNEON | 0, // FMINv4f32 = 813
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMINv8f16 = 814
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMLAv1i16_indexed = 815
    Feature_HasNEON | 0, // FMLAv1i32_indexed = 816
    Feature_HasNEON | 0, // FMLAv1i64_indexed = 817
    Feature_HasNEON | 0, // FMLAv2f32 = 818
    Feature_HasNEON | 0, // FMLAv2f64 = 819
    Feature_HasNEON | 0, // FMLAv2i32_indexed = 820
    Feature_HasNEON | 0, // FMLAv2i64_indexed = 821
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMLAv4f16 = 822
    Feature_HasNEON | 0, // FMLAv4f32 = 823
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMLAv4i16_indexed = 824
    Feature_HasNEON | 0, // FMLAv4i32_indexed = 825
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMLAv8f16 = 826
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMLAv8i16_indexed = 827
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMLSv1i16_indexed = 828
    Feature_HasNEON | 0, // FMLSv1i32_indexed = 829
    Feature_HasNEON | 0, // FMLSv1i64_indexed = 830
    Feature_HasNEON | 0, // FMLSv2f32 = 831
    Feature_HasNEON | 0, // FMLSv2f64 = 832
    Feature_HasNEON | 0, // FMLSv2i32_indexed = 833
    Feature_HasNEON | 0, // FMLSv2i64_indexed = 834
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMLSv4f16 = 835
    Feature_HasNEON | 0, // FMLSv4f32 = 836
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMLSv4i16_indexed = 837
    Feature_HasNEON | 0, // FMLSv4i32_indexed = 838
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMLSv8f16 = 839
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMLSv8i16_indexed = 840
    0, // FMOVD0 = 841
    Feature_HasFPARMv8 | 0, // FMOVDXHighr = 842
    Feature_HasFPARMv8 | 0, // FMOVDXr = 843
    Feature_HasFPARMv8 | 0, // FMOVDi = 844
    Feature_HasFPARMv8 | 0, // FMOVDr = 845
    Feature_HasFullFP16 | 0, // FMOVHWr = 846
    Feature_HasFullFP16 | 0, // FMOVHXr = 847
    Feature_HasFullFP16 | 0, // FMOVHi = 848
    Feature_HasFullFP16 | 0, // FMOVHr = 849
    0, // FMOVS0 = 850
    Feature_HasFPARMv8 | 0, // FMOVSWr = 851
    Feature_HasFPARMv8 | 0, // FMOVSi = 852
    Feature_HasFPARMv8 | 0, // FMOVSr = 853
    Feature_HasFullFP16 | 0, // FMOVWHr = 854
    Feature_HasFPARMv8 | 0, // FMOVWSr = 855
    Feature_HasFPARMv8 | 0, // FMOVXDHighr = 856
    Feature_HasFPARMv8 | 0, // FMOVXDr = 857
    Feature_HasFullFP16 | 0, // FMOVXHr = 858
    Feature_HasNEON | 0, // FMOVv2f32_ns = 859
    Feature_HasNEON | 0, // FMOVv2f64_ns = 860
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMOVv4f16_ns = 861
    Feature_HasNEON | 0, // FMOVv4f32_ns = 862
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMOVv8f16_ns = 863
    Feature_HasFPARMv8 | 0, // FMSUBDrrr = 864
    Feature_HasFullFP16 | 0, // FMSUBHrrr = 865
    Feature_HasFPARMv8 | 0, // FMSUBSrrr = 866
    Feature_HasFPARMv8 | 0, // FMULDrr = 867
    Feature_HasFullFP16 | 0, // FMULHrr = 868
    Feature_HasFPARMv8 | 0, // FMULSrr = 869
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMULX16 = 870
    Feature_HasNEON | 0, // FMULX32 = 871
    Feature_HasNEON | 0, // FMULX64 = 872
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMULXv1i16_indexed = 873
    Feature_HasNEON | 0, // FMULXv1i32_indexed = 874
    Feature_HasNEON | 0, // FMULXv1i64_indexed = 875
    Feature_HasNEON | 0, // FMULXv2f32 = 876
    Feature_HasNEON | 0, // FMULXv2f64 = 877
    Feature_HasNEON | 0, // FMULXv2i32_indexed = 878
    Feature_HasNEON | 0, // FMULXv2i64_indexed = 879
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMULXv4f16 = 880
    Feature_HasNEON | 0, // FMULXv4f32 = 881
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMULXv4i16_indexed = 882
    Feature_HasNEON | 0, // FMULXv4i32_indexed = 883
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMULXv8f16 = 884
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMULXv8i16_indexed = 885
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMULv1i16_indexed = 886
    Feature_HasNEON | 0, // FMULv1i32_indexed = 887
    Feature_HasNEON | 0, // FMULv1i64_indexed = 888
    Feature_HasNEON | 0, // FMULv2f32 = 889
    Feature_HasNEON | 0, // FMULv2f64 = 890
    Feature_HasNEON | 0, // FMULv2i32_indexed = 891
    Feature_HasNEON | 0, // FMULv2i64_indexed = 892
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMULv4f16 = 893
    Feature_HasNEON | 0, // FMULv4f32 = 894
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMULv4i16_indexed = 895
    Feature_HasNEON | 0, // FMULv4i32_indexed = 896
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMULv8f16 = 897
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FMULv8i16_indexed = 898
    Feature_HasFPARMv8 | 0, // FNEGDr = 899
    Feature_HasFullFP16 | 0, // FNEGHr = 900
    Feature_HasFPARMv8 | 0, // FNEGSr = 901
    Feature_HasNEON | 0, // FNEGv2f32 = 902
    Feature_HasNEON | 0, // FNEGv2f64 = 903
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FNEGv4f16 = 904
    Feature_HasNEON | 0, // FNEGv4f32 = 905
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FNEGv8f16 = 906
    Feature_HasFPARMv8 | 0, // FNMADDDrrr = 907
    Feature_HasFullFP16 | 0, // FNMADDHrrr = 908
    Feature_HasFPARMv8 | 0, // FNMADDSrrr = 909
    Feature_HasFPARMv8 | 0, // FNMSUBDrrr = 910
    Feature_HasFullFP16 | 0, // FNMSUBHrrr = 911
    Feature_HasFPARMv8 | 0, // FNMSUBSrrr = 912
    Feature_HasFPARMv8 | 0, // FNMULDrr = 913
    Feature_HasFullFP16 | 0, // FNMULHrr = 914
    Feature_HasFPARMv8 | 0, // FNMULSrr = 915
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRECPEv1f16 = 916
    Feature_HasNEON | 0, // FRECPEv1i32 = 917
    Feature_HasNEON | 0, // FRECPEv1i64 = 918
    Feature_HasNEON | 0, // FRECPEv2f32 = 919
    Feature_HasNEON | 0, // FRECPEv2f64 = 920
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRECPEv4f16 = 921
    Feature_HasNEON | 0, // FRECPEv4f32 = 922
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRECPEv8f16 = 923
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRECPS16 = 924
    Feature_HasNEON | 0, // FRECPS32 = 925
    Feature_HasNEON | 0, // FRECPS64 = 926
    Feature_HasNEON | 0, // FRECPSv2f32 = 927
    Feature_HasNEON | 0, // FRECPSv2f64 = 928
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRECPSv4f16 = 929
    Feature_HasNEON | 0, // FRECPSv4f32 = 930
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRECPSv8f16 = 931
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRECPXv1f16 = 932
    Feature_HasNEON | 0, // FRECPXv1i32 = 933
    Feature_HasNEON | 0, // FRECPXv1i64 = 934
    Feature_HasFPARMv8 | 0, // FRINTADr = 935
    Feature_HasFullFP16 | 0, // FRINTAHr = 936
    Feature_HasFPARMv8 | 0, // FRINTASr = 937
    Feature_HasNEON | 0, // FRINTAv2f32 = 938
    Feature_HasNEON | 0, // FRINTAv2f64 = 939
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRINTAv4f16 = 940
    Feature_HasNEON | 0, // FRINTAv4f32 = 941
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRINTAv8f16 = 942
    Feature_HasFPARMv8 | 0, // FRINTIDr = 943
    Feature_HasFullFP16 | 0, // FRINTIHr = 944
    Feature_HasFPARMv8 | 0, // FRINTISr = 945
    Feature_HasNEON | 0, // FRINTIv2f32 = 946
    Feature_HasNEON | 0, // FRINTIv2f64 = 947
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRINTIv4f16 = 948
    Feature_HasNEON | 0, // FRINTIv4f32 = 949
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRINTIv8f16 = 950
    Feature_HasFPARMv8 | 0, // FRINTMDr = 951
    Feature_HasFullFP16 | 0, // FRINTMHr = 952
    Feature_HasFPARMv8 | 0, // FRINTMSr = 953
    Feature_HasNEON | 0, // FRINTMv2f32 = 954
    Feature_HasNEON | 0, // FRINTMv2f64 = 955
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRINTMv4f16 = 956
    Feature_HasNEON | 0, // FRINTMv4f32 = 957
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRINTMv8f16 = 958
    Feature_HasFPARMv8 | 0, // FRINTNDr = 959
    Feature_HasFullFP16 | 0, // FRINTNHr = 960
    Feature_HasFPARMv8 | 0, // FRINTNSr = 961
    Feature_HasNEON | 0, // FRINTNv2f32 = 962
    Feature_HasNEON | 0, // FRINTNv2f64 = 963
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRINTNv4f16 = 964
    Feature_HasNEON | 0, // FRINTNv4f32 = 965
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRINTNv8f16 = 966
    Feature_HasFPARMv8 | 0, // FRINTPDr = 967
    Feature_HasFullFP16 | 0, // FRINTPHr = 968
    Feature_HasFPARMv8 | 0, // FRINTPSr = 969
    Feature_HasNEON | 0, // FRINTPv2f32 = 970
    Feature_HasNEON | 0, // FRINTPv2f64 = 971
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRINTPv4f16 = 972
    Feature_HasNEON | 0, // FRINTPv4f32 = 973
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRINTPv8f16 = 974
    Feature_HasFPARMv8 | 0, // FRINTXDr = 975
    Feature_HasFullFP16 | 0, // FRINTXHr = 976
    Feature_HasFPARMv8 | 0, // FRINTXSr = 977
    Feature_HasNEON | 0, // FRINTXv2f32 = 978
    Feature_HasNEON | 0, // FRINTXv2f64 = 979
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRINTXv4f16 = 980
    Feature_HasNEON | 0, // FRINTXv4f32 = 981
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRINTXv8f16 = 982
    Feature_HasFPARMv8 | 0, // FRINTZDr = 983
    Feature_HasFullFP16 | 0, // FRINTZHr = 984
    Feature_HasFPARMv8 | 0, // FRINTZSr = 985
    Feature_HasNEON | 0, // FRINTZv2f32 = 986
    Feature_HasNEON | 0, // FRINTZv2f64 = 987
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRINTZv4f16 = 988
    Feature_HasNEON | 0, // FRINTZv4f32 = 989
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRINTZv8f16 = 990
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRSQRTEv1f16 = 991
    Feature_HasNEON | 0, // FRSQRTEv1i32 = 992
    Feature_HasNEON | 0, // FRSQRTEv1i64 = 993
    Feature_HasNEON | 0, // FRSQRTEv2f32 = 994
    Feature_HasNEON | 0, // FRSQRTEv2f64 = 995
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRSQRTEv4f16 = 996
    Feature_HasNEON | 0, // FRSQRTEv4f32 = 997
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRSQRTEv8f16 = 998
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRSQRTS16 = 999
    Feature_HasNEON | 0, // FRSQRTS32 = 1000
    Feature_HasNEON | 0, // FRSQRTS64 = 1001
    Feature_HasNEON | 0, // FRSQRTSv2f32 = 1002
    Feature_HasNEON | 0, // FRSQRTSv2f64 = 1003
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRSQRTSv4f16 = 1004
    Feature_HasNEON | 0, // FRSQRTSv4f32 = 1005
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FRSQRTSv8f16 = 1006
    Feature_HasFPARMv8 | 0, // FSQRTDr = 1007
    Feature_HasFullFP16 | 0, // FSQRTHr = 1008
    Feature_HasFPARMv8 | 0, // FSQRTSr = 1009
    Feature_HasNEON | 0, // FSQRTv2f32 = 1010
    Feature_HasNEON | 0, // FSQRTv2f64 = 1011
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FSQRTv4f16 = 1012
    Feature_HasNEON | 0, // FSQRTv4f32 = 1013
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FSQRTv8f16 = 1014
    Feature_HasFPARMv8 | 0, // FSUBDrr = 1015
    Feature_HasFullFP16 | 0, // FSUBHrr = 1016
    Feature_HasFPARMv8 | 0, // FSUBSrr = 1017
    Feature_HasNEON | 0, // FSUBv2f32 = 1018
    Feature_HasNEON | 0, // FSUBv2f64 = 1019
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FSUBv4f16 = 1020
    Feature_HasNEON | 0, // FSUBv4f32 = 1021
    Feature_HasNEON | Feature_HasFullFP16 | 0, // FSUBv8f16 = 1022
    0, // HINT = 1023
    0, // HLT = 1024
    0, // HVC = 1025
    Feature_HasNEON | 0, // INSvi16gpr = 1026
    Feature_HasNEON | 0, // INSvi16lane = 1027
    Feature_HasNEON | 0, // INSvi32gpr = 1028
    Feature_HasNEON | 0, // INSvi32lane = 1029
    Feature_HasNEON | 0, // INSvi64gpr = 1030
    Feature_HasNEON | 0, // INSvi64lane = 1031
    Feature_HasNEON | 0, // INSvi8gpr = 1032
    Feature_HasNEON | 0, // INSvi8lane = 1033
    0, // ISB = 1034
    Feature_HasNEON | 0, // LD1Fourv16b = 1035
    Feature_HasNEON | 0, // LD1Fourv16b_POST = 1036
    Feature_HasNEON | 0, // LD1Fourv1d = 1037
    Feature_HasNEON | 0, // LD1Fourv1d_POST = 1038
    Feature_HasNEON | 0, // LD1Fourv2d = 1039
    Feature_HasNEON | 0, // LD1Fourv2d_POST = 1040
    Feature_HasNEON | 0, // LD1Fourv2s = 1041
    Feature_HasNEON | 0, // LD1Fourv2s_POST = 1042
    Feature_HasNEON | 0, // LD1Fourv4h = 1043
    Feature_HasNEON | 0, // LD1Fourv4h_POST = 1044
    Feature_HasNEON | 0, // LD1Fourv4s = 1045
    Feature_HasNEON | 0, // LD1Fourv4s_POST = 1046
    Feature_HasNEON | 0, // LD1Fourv8b = 1047
    Feature_HasNEON | 0, // LD1Fourv8b_POST = 1048
    Feature_HasNEON | 0, // LD1Fourv8h = 1049
    Feature_HasNEON | 0, // LD1Fourv8h_POST = 1050
    Feature_HasNEON | 0, // LD1Onev16b = 1051
    Feature_HasNEON | 0, // LD1Onev16b_POST = 1052
    Feature_HasNEON | 0, // LD1Onev1d = 1053
    Feature_HasNEON | 0, // LD1Onev1d_POST = 1054
    Feature_HasNEON | 0, // LD1Onev2d = 1055
    Feature_HasNEON | 0, // LD1Onev2d_POST = 1056
    Feature_HasNEON | 0, // LD1Onev2s = 1057
    Feature_HasNEON | 0, // LD1Onev2s_POST = 1058
    Feature_HasNEON | 0, // LD1Onev4h = 1059
    Feature_HasNEON | 0, // LD1Onev4h_POST = 1060
    Feature_HasNEON | 0, // LD1Onev4s = 1061
    Feature_HasNEON | 0, // LD1Onev4s_POST = 1062
    Feature_HasNEON | 0, // LD1Onev8b = 1063
    Feature_HasNEON | 0, // LD1Onev8b_POST = 1064
    Feature_HasNEON | 0, // LD1Onev8h = 1065
    Feature_HasNEON | 0, // LD1Onev8h_POST = 1066
    Feature_HasNEON | 0, // LD1Rv16b = 1067
    Feature_HasNEON | 0, // LD1Rv16b_POST = 1068
    Feature_HasNEON | 0, // LD1Rv1d = 1069
    Feature_HasNEON | 0, // LD1Rv1d_POST = 1070
    Feature_HasNEON | 0, // LD1Rv2d = 1071
    Feature_HasNEON | 0, // LD1Rv2d_POST = 1072
    Feature_HasNEON | 0, // LD1Rv2s = 1073
    Feature_HasNEON | 0, // LD1Rv2s_POST = 1074
    Feature_HasNEON | 0, // LD1Rv4h = 1075
    Feature_HasNEON | 0, // LD1Rv4h_POST = 1076
    Feature_HasNEON | 0, // LD1Rv4s = 1077
    Feature_HasNEON | 0, // LD1Rv4s_POST = 1078
    Feature_HasNEON | 0, // LD1Rv8b = 1079
    Feature_HasNEON | 0, // LD1Rv8b_POST = 1080
    Feature_HasNEON | 0, // LD1Rv8h = 1081
    Feature_HasNEON | 0, // LD1Rv8h_POST = 1082
    Feature_HasNEON | 0, // LD1Threev16b = 1083
    Feature_HasNEON | 0, // LD1Threev16b_POST = 1084
    Feature_HasNEON | 0, // LD1Threev1d = 1085
    Feature_HasNEON | 0, // LD1Threev1d_POST = 1086
    Feature_HasNEON | 0, // LD1Threev2d = 1087
    Feature_HasNEON | 0, // LD1Threev2d_POST = 1088
    Feature_HasNEON | 0, // LD1Threev2s = 1089
    Feature_HasNEON | 0, // LD1Threev2s_POST = 1090
    Feature_HasNEON | 0, // LD1Threev4h = 1091
    Feature_HasNEON | 0, // LD1Threev4h_POST = 1092
    Feature_HasNEON | 0, // LD1Threev4s = 1093
    Feature_HasNEON | 0, // LD1Threev4s_POST = 1094
    Feature_HasNEON | 0, // LD1Threev8b = 1095
    Feature_HasNEON | 0, // LD1Threev8b_POST = 1096
    Feature_HasNEON | 0, // LD1Threev8h = 1097
    Feature_HasNEON | 0, // LD1Threev8h_POST = 1098
    Feature_HasNEON | 0, // LD1Twov16b = 1099
    Feature_HasNEON | 0, // LD1Twov16b_POST = 1100
    Feature_HasNEON | 0, // LD1Twov1d = 1101
    Feature_HasNEON | 0, // LD1Twov1d_POST = 1102
    Feature_HasNEON | 0, // LD1Twov2d = 1103
    Feature_HasNEON | 0, // LD1Twov2d_POST = 1104
    Feature_HasNEON | 0, // LD1Twov2s = 1105
    Feature_HasNEON | 0, // LD1Twov2s_POST = 1106
    Feature_HasNEON | 0, // LD1Twov4h = 1107
    Feature_HasNEON | 0, // LD1Twov4h_POST = 1108
    Feature_HasNEON | 0, // LD1Twov4s = 1109
    Feature_HasNEON | 0, // LD1Twov4s_POST = 1110
    Feature_HasNEON | 0, // LD1Twov8b = 1111
    Feature_HasNEON | 0, // LD1Twov8b_POST = 1112
    Feature_HasNEON | 0, // LD1Twov8h = 1113
    Feature_HasNEON | 0, // LD1Twov8h_POST = 1114
    Feature_HasNEON | 0, // LD1i16 = 1115
    Feature_HasNEON | 0, // LD1i16_POST = 1116
    Feature_HasNEON | 0, // LD1i32 = 1117
    Feature_HasNEON | 0, // LD1i32_POST = 1118
    Feature_HasNEON | 0, // LD1i64 = 1119
    Feature_HasNEON | 0, // LD1i64_POST = 1120
    Feature_HasNEON | 0, // LD1i8 = 1121
    Feature_HasNEON | 0, // LD1i8_POST = 1122
    Feature_HasNEON | 0, // LD2Rv16b = 1123
    Feature_HasNEON | 0, // LD2Rv16b_POST = 1124
    Feature_HasNEON | 0, // LD2Rv1d = 1125
    Feature_HasNEON | 0, // LD2Rv1d_POST = 1126
    Feature_HasNEON | 0, // LD2Rv2d = 1127
    Feature_HasNEON | 0, // LD2Rv2d_POST = 1128
    Feature_HasNEON | 0, // LD2Rv2s = 1129
    Feature_HasNEON | 0, // LD2Rv2s_POST = 1130
    Feature_HasNEON | 0, // LD2Rv4h = 1131
    Feature_HasNEON | 0, // LD2Rv4h_POST = 1132
    Feature_HasNEON | 0, // LD2Rv4s = 1133
    Feature_HasNEON | 0, // LD2Rv4s_POST = 1134
    Feature_HasNEON | 0, // LD2Rv8b = 1135
    Feature_HasNEON | 0, // LD2Rv8b_POST = 1136
    Feature_HasNEON | 0, // LD2Rv8h = 1137
    Feature_HasNEON | 0, // LD2Rv8h_POST = 1138
    Feature_HasNEON | 0, // LD2Twov16b = 1139
    Feature_HasNEON | 0, // LD2Twov16b_POST = 1140
    Feature_HasNEON | 0, // LD2Twov2d = 1141
    Feature_HasNEON | 0, // LD2Twov2d_POST = 1142
    Feature_HasNEON | 0, // LD2Twov2s = 1143
    Feature_HasNEON | 0, // LD2Twov2s_POST = 1144
    Feature_HasNEON | 0, // LD2Twov4h = 1145
    Feature_HasNEON | 0, // LD2Twov4h_POST = 1146
    Feature_HasNEON | 0, // LD2Twov4s = 1147
    Feature_HasNEON | 0, // LD2Twov4s_POST = 1148
    Feature_HasNEON | 0, // LD2Twov8b = 1149
    Feature_HasNEON | 0, // LD2Twov8b_POST = 1150
    Feature_HasNEON | 0, // LD2Twov8h = 1151
    Feature_HasNEON | 0, // LD2Twov8h_POST = 1152
    Feature_HasNEON | 0, // LD2i16 = 1153
    Feature_HasNEON | 0, // LD2i16_POST = 1154
    Feature_HasNEON | 0, // LD2i32 = 1155
    Feature_HasNEON | 0, // LD2i32_POST = 1156
    Feature_HasNEON | 0, // LD2i64 = 1157
    Feature_HasNEON | 0, // LD2i64_POST = 1158
    Feature_HasNEON | 0, // LD2i8 = 1159
    Feature_HasNEON | 0, // LD2i8_POST = 1160
    Feature_HasNEON | 0, // LD3Rv16b = 1161
    Feature_HasNEON | 0, // LD3Rv16b_POST = 1162
    Feature_HasNEON | 0, // LD3Rv1d = 1163
    Feature_HasNEON | 0, // LD3Rv1d_POST = 1164
    Feature_HasNEON | 0, // LD3Rv2d = 1165
    Feature_HasNEON | 0, // LD3Rv2d_POST = 1166
    Feature_HasNEON | 0, // LD3Rv2s = 1167
    Feature_HasNEON | 0, // LD3Rv2s_POST = 1168
    Feature_HasNEON | 0, // LD3Rv4h = 1169
    Feature_HasNEON | 0, // LD3Rv4h_POST = 1170
    Feature_HasNEON | 0, // LD3Rv4s = 1171
    Feature_HasNEON | 0, // LD3Rv4s_POST = 1172
    Feature_HasNEON | 0, // LD3Rv8b = 1173
    Feature_HasNEON | 0, // LD3Rv8b_POST = 1174
    Feature_HasNEON | 0, // LD3Rv8h = 1175
    Feature_HasNEON | 0, // LD3Rv8h_POST = 1176
    Feature_HasNEON | 0, // LD3Threev16b = 1177
    Feature_HasNEON | 0, // LD3Threev16b_POST = 1178
    Feature_HasNEON | 0, // LD3Threev2d = 1179
    Feature_HasNEON | 0, // LD3Threev2d_POST = 1180
    Feature_HasNEON | 0, // LD3Threev2s = 1181
    Feature_HasNEON | 0, // LD3Threev2s_POST = 1182
    Feature_HasNEON | 0, // LD3Threev4h = 1183
    Feature_HasNEON | 0, // LD3Threev4h_POST = 1184
    Feature_HasNEON | 0, // LD3Threev4s = 1185
    Feature_HasNEON | 0, // LD3Threev4s_POST = 1186
    Feature_HasNEON | 0, // LD3Threev8b = 1187
    Feature_HasNEON | 0, // LD3Threev8b_POST = 1188
    Feature_HasNEON | 0, // LD3Threev8h = 1189
    Feature_HasNEON | 0, // LD3Threev8h_POST = 1190
    Feature_HasNEON | 0, // LD3i16 = 1191
    Feature_HasNEON | 0, // LD3i16_POST = 1192
    Feature_HasNEON | 0, // LD3i32 = 1193
    Feature_HasNEON | 0, // LD3i32_POST = 1194
    Feature_HasNEON | 0, // LD3i64 = 1195
    Feature_HasNEON | 0, // LD3i64_POST = 1196
    Feature_HasNEON | 0, // LD3i8 = 1197
    Feature_HasNEON | 0, // LD3i8_POST = 1198
    Feature_HasNEON | 0, // LD4Fourv16b = 1199
    Feature_HasNEON | 0, // LD4Fourv16b_POST = 1200
    Feature_HasNEON | 0, // LD4Fourv2d = 1201
    Feature_HasNEON | 0, // LD4Fourv2d_POST = 1202
    Feature_HasNEON | 0, // LD4Fourv2s = 1203
    Feature_HasNEON | 0, // LD4Fourv2s_POST = 1204
    Feature_HasNEON | 0, // LD4Fourv4h = 1205
    Feature_HasNEON | 0, // LD4Fourv4h_POST = 1206
    Feature_HasNEON | 0, // LD4Fourv4s = 1207
    Feature_HasNEON | 0, // LD4Fourv4s_POST = 1208
    Feature_HasNEON | 0, // LD4Fourv8b = 1209
    Feature_HasNEON | 0, // LD4Fourv8b_POST = 1210
    Feature_HasNEON | 0, // LD4Fourv8h = 1211
    Feature_HasNEON | 0, // LD4Fourv8h_POST = 1212
    Feature_HasNEON | 0, // LD4Rv16b = 1213
    Feature_HasNEON | 0, // LD4Rv16b_POST = 1214
    Feature_HasNEON | 0, // LD4Rv1d = 1215
    Feature_HasNEON | 0, // LD4Rv1d_POST = 1216
    Feature_HasNEON | 0, // LD4Rv2d = 1217
    Feature_HasNEON | 0, // LD4Rv2d_POST = 1218
    Feature_HasNEON | 0, // LD4Rv2s = 1219
    Feature_HasNEON | 0, // LD4Rv2s_POST = 1220
    Feature_HasNEON | 0, // LD4Rv4h = 1221
    Feature_HasNEON | 0, // LD4Rv4h_POST = 1222
    Feature_HasNEON | 0, // LD4Rv4s = 1223
    Feature_HasNEON | 0, // LD4Rv4s_POST = 1224
    Feature_HasNEON | 0, // LD4Rv8b = 1225
    Feature_HasNEON | 0, // LD4Rv8b_POST = 1226
    Feature_HasNEON | 0, // LD4Rv8h = 1227
    Feature_HasNEON | 0, // LD4Rv8h_POST = 1228
    Feature_HasNEON | 0, // LD4i16 = 1229
    Feature_HasNEON | 0, // LD4i16_POST = 1230
    Feature_HasNEON | 0, // LD4i32 = 1231
    Feature_HasNEON | 0, // LD4i32_POST = 1232
    Feature_HasNEON | 0, // LD4i64 = 1233
    Feature_HasNEON | 0, // LD4i64_POST = 1234
    Feature_HasNEON | 0, // LD4i8 = 1235
    Feature_HasNEON | 0, // LD4i8_POST = 1236
    Feature_HasLSE | 0, // LDADDALb = 1237
    Feature_HasLSE | 0, // LDADDALd = 1238
    Feature_HasLSE | 0, // LDADDALh = 1239
    Feature_HasLSE | 0, // LDADDALs = 1240
    Feature_HasLSE | 0, // LDADDAb = 1241
    Feature_HasLSE | 0, // LDADDAd = 1242
    Feature_HasLSE | 0, // LDADDAh = 1243
    Feature_HasLSE | 0, // LDADDAs = 1244
    Feature_HasLSE | 0, // LDADDLb = 1245
    Feature_HasLSE | 0, // LDADDLd = 1246
    Feature_HasLSE | 0, // LDADDLh = 1247
    Feature_HasLSE | 0, // LDADDLs = 1248
    Feature_HasLSE | 0, // LDADDb = 1249
    Feature_HasLSE | 0, // LDADDd = 1250
    Feature_HasLSE | 0, // LDADDh = 1251
    Feature_HasLSE | 0, // LDADDs = 1252
    0, // LDARB = 1253
    0, // LDARH = 1254
    0, // LDARW = 1255
    0, // LDARX = 1256
    0, // LDAXPW = 1257
    0, // LDAXPX = 1258
    0, // LDAXRB = 1259
    0, // LDAXRH = 1260
    0, // LDAXRW = 1261
    0, // LDAXRX = 1262
    Feature_HasLSE | 0, // LDCLRALb = 1263
    Feature_HasLSE | 0, // LDCLRALd = 1264
    Feature_HasLSE | 0, // LDCLRALh = 1265
    Feature_HasLSE | 0, // LDCLRALs = 1266
    Feature_HasLSE | 0, // LDCLRAb = 1267
    Feature_HasLSE | 0, // LDCLRAd = 1268
    Feature_HasLSE | 0, // LDCLRAh = 1269
    Feature_HasLSE | 0, // LDCLRAs = 1270
    Feature_HasLSE | 0, // LDCLRLb = 1271
    Feature_HasLSE | 0, // LDCLRLd = 1272
    Feature_HasLSE | 0, // LDCLRLh = 1273
    Feature_HasLSE | 0, // LDCLRLs = 1274
    Feature_HasLSE | 0, // LDCLRb = 1275
    Feature_HasLSE | 0, // LDCLRd = 1276
    Feature_HasLSE | 0, // LDCLRh = 1277
    Feature_HasLSE | 0, // LDCLRs = 1278
    Feature_HasLSE | 0, // LDEORALb = 1279
    Feature_HasLSE | 0, // LDEORALd = 1280
    Feature_HasLSE | 0, // LDEORALh = 1281
    Feature_HasLSE | 0, // LDEORALs = 1282
    Feature_HasLSE | 0, // LDEORAb = 1283
    Feature_HasLSE | 0, // LDEORAd = 1284
    Feature_HasLSE | 0, // LDEORAh = 1285
    Feature_HasLSE | 0, // LDEORAs = 1286
    Feature_HasLSE | 0, // LDEORLb = 1287
    Feature_HasLSE | 0, // LDEORLd = 1288
    Feature_HasLSE | 0, // LDEORLh = 1289
    Feature_HasLSE | 0, // LDEORLs = 1290
    Feature_HasLSE | 0, // LDEORb = 1291
    Feature_HasLSE | 0, // LDEORd = 1292
    Feature_HasLSE | 0, // LDEORh = 1293
    Feature_HasLSE | 0, // LDEORs = 1294
    Feature_HasV8_1a | 0, // LDLARB = 1295
    Feature_HasV8_1a | 0, // LDLARH = 1296
    Feature_HasV8_1a | 0, // LDLARW = 1297
    Feature_HasV8_1a | 0, // LDLARX = 1298
    0, // LDNPDi = 1299
    0, // LDNPQi = 1300
    0, // LDNPSi = 1301
    0, // LDNPWi = 1302
    0, // LDNPXi = 1303
    0, // LDPDi = 1304
    0, // LDPDpost = 1305
    0, // LDPDpre = 1306
    0, // LDPQi = 1307
    0, // LDPQpost = 1308
    0, // LDPQpre = 1309
    0, // LDPSWi = 1310
    0, // LDPSWpost = 1311
    0, // LDPSWpre = 1312
    0, // LDPSi = 1313
    0, // LDPSpost = 1314
    0, // LDPSpre = 1315
    0, // LDPWi = 1316
    0, // LDPWpost = 1317
    0, // LDPWpre = 1318
    0, // LDPXi = 1319
    0, // LDPXpost = 1320
    0, // LDPXpre = 1321
    0, // LDRBBpost = 1322
    0, // LDRBBpre = 1323
    0, // LDRBBroW = 1324
    0, // LDRBBroX = 1325
    0, // LDRBBui = 1326
    0, // LDRBpost = 1327
    0, // LDRBpre = 1328
    0, // LDRBroW = 1329
    0, // LDRBroX = 1330
    0, // LDRBui = 1331
    0, // LDRDl = 1332
    0, // LDRDpost = 1333
    0, // LDRDpre = 1334
    0, // LDRDroW = 1335
    0, // LDRDroX = 1336
    0, // LDRDui = 1337
    0, // LDRHHpost = 1338
    0, // LDRHHpre = 1339
    0, // LDRHHroW = 1340
    0, // LDRHHroX = 1341
    0, // LDRHHui = 1342
    0, // LDRHpost = 1343
    0, // LDRHpre = 1344
    0, // LDRHroW = 1345
    0, // LDRHroX = 1346
    0, // LDRHui = 1347
    0, // LDRQl = 1348
    0, // LDRQpost = 1349
    0, // LDRQpre = 1350
    0, // LDRQroW = 1351
    0, // LDRQroX = 1352
    0, // LDRQui = 1353
    0, // LDRSBWpost = 1354
    0, // LDRSBWpre = 1355
    0, // LDRSBWroW = 1356
    0, // LDRSBWroX = 1357
    0, // LDRSBWui = 1358
    0, // LDRSBXpost = 1359
    0, // LDRSBXpre = 1360
    0, // LDRSBXroW = 1361
    0, // LDRSBXroX = 1362
    0, // LDRSBXui = 1363
    0, // LDRSHWpost = 1364
    0, // LDRSHWpre = 1365
    0, // LDRSHWroW = 1366
    0, // LDRSHWroX = 1367
    0, // LDRSHWui = 1368
    0, // LDRSHXpost = 1369
    0, // LDRSHXpre = 1370
    0, // LDRSHXroW = 1371
    0, // LDRSHXroX = 1372
    0, // LDRSHXui = 1373
    0, // LDRSWl = 1374
    0, // LDRSWpost = 1375
    0, // LDRSWpre = 1376
    0, // LDRSWroW = 1377
    0, // LDRSWroX = 1378
    0, // LDRSWui = 1379
    0, // LDRSl = 1380
    0, // LDRSpost = 1381
    0, // LDRSpre = 1382
    0, // LDRSroW = 1383
    0, // LDRSroX = 1384
    0, // LDRSui = 1385
    0, // LDRWl = 1386
    0, // LDRWpost = 1387
    0, // LDRWpre = 1388
    0, // LDRWroW = 1389
    0, // LDRWroX = 1390
    0, // LDRWui = 1391
    0, // LDRXl = 1392
    0, // LDRXpost = 1393
    0, // LDRXpre = 1394
    0, // LDRXroW = 1395
    0, // LDRXroX = 1396
    0, // LDRXui = 1397
    Feature_HasLSE | 0, // LDSETALb = 1398
    Feature_HasLSE | 0, // LDSETALd = 1399
    Feature_HasLSE | 0, // LDSETALh = 1400
    Feature_HasLSE | 0, // LDSETALs = 1401
    Feature_HasLSE | 0, // LDSETAb = 1402
    Feature_HasLSE | 0, // LDSETAd = 1403
    Feature_HasLSE | 0, // LDSETAh = 1404
    Feature_HasLSE | 0, // LDSETAs = 1405
    Feature_HasLSE | 0, // LDSETLb = 1406
    Feature_HasLSE | 0, // LDSETLd = 1407
    Feature_HasLSE | 0, // LDSETLh = 1408
    Feature_HasLSE | 0, // LDSETLs = 1409
    Feature_HasLSE | 0, // LDSETb = 1410
    Feature_HasLSE | 0, // LDSETd = 1411
    Feature_HasLSE | 0, // LDSETh = 1412
    Feature_HasLSE | 0, // LDSETs = 1413
    Feature_HasLSE | 0, // LDSMAXALb = 1414
    Feature_HasLSE | 0, // LDSMAXALd = 1415
    Feature_HasLSE | 0, // LDSMAXALh = 1416
    Feature_HasLSE | 0, // LDSMAXALs = 1417
    Feature_HasLSE | 0, // LDSMAXAb = 1418
    Feature_HasLSE | 0, // LDSMAXAd = 1419
    Feature_HasLSE | 0, // LDSMAXAh = 1420
    Feature_HasLSE | 0, // LDSMAXAs = 1421
    Feature_HasLSE | 0, // LDSMAXLb = 1422
    Feature_HasLSE | 0, // LDSMAXLd = 1423
    Feature_HasLSE | 0, // LDSMAXLh = 1424
    Feature_HasLSE | 0, // LDSMAXLs = 1425
    Feature_HasLSE | 0, // LDSMAXb = 1426
    Feature_HasLSE | 0, // LDSMAXd = 1427
    Feature_HasLSE | 0, // LDSMAXh = 1428
    Feature_HasLSE | 0, // LDSMAXs = 1429
    Feature_HasLSE | 0, // LDSMINALb = 1430
    Feature_HasLSE | 0, // LDSMINALd = 1431
    Feature_HasLSE | 0, // LDSMINALh = 1432
    Feature_HasLSE | 0, // LDSMINALs = 1433
    Feature_HasLSE | 0, // LDSMINAb = 1434
    Feature_HasLSE | 0, // LDSMINAd = 1435
    Feature_HasLSE | 0, // LDSMINAh = 1436
    Feature_HasLSE | 0, // LDSMINAs = 1437
    Feature_HasLSE | 0, // LDSMINLb = 1438
    Feature_HasLSE | 0, // LDSMINLd = 1439
    Feature_HasLSE | 0, // LDSMINLh = 1440
    Feature_HasLSE | 0, // LDSMINLs = 1441
    Feature_HasLSE | 0, // LDSMINb = 1442
    Feature_HasLSE | 0, // LDSMINd = 1443
    Feature_HasLSE | 0, // LDSMINh = 1444
    Feature_HasLSE | 0, // LDSMINs = 1445
    0, // LDTRBi = 1446
    0, // LDTRHi = 1447
    0, // LDTRSBWi = 1448
    0, // LDTRSBXi = 1449
    0, // LDTRSHWi = 1450
    0, // LDTRSHXi = 1451
    0, // LDTRSWi = 1452
    0, // LDTRWi = 1453
    0, // LDTRXi = 1454
    Feature_HasLSE | 0, // LDUMAXALb = 1455
    Feature_HasLSE | 0, // LDUMAXALd = 1456
    Feature_HasLSE | 0, // LDUMAXALh = 1457
    Feature_HasLSE | 0, // LDUMAXALs = 1458
    Feature_HasLSE | 0, // LDUMAXAb = 1459
    Feature_HasLSE | 0, // LDUMAXAd = 1460
    Feature_HasLSE | 0, // LDUMAXAh = 1461
    Feature_HasLSE | 0, // LDUMAXAs = 1462
    Feature_HasLSE | 0, // LDUMAXLb = 1463
    Feature_HasLSE | 0, // LDUMAXLd = 1464
    Feature_HasLSE | 0, // LDUMAXLh = 1465
    Feature_HasLSE | 0, // LDUMAXLs = 1466
    Feature_HasLSE | 0, // LDUMAXb = 1467
    Feature_HasLSE | 0, // LDUMAXd = 1468
    Feature_HasLSE | 0, // LDUMAXh = 1469
    Feature_HasLSE | 0, // LDUMAXs = 1470
    Feature_HasLSE | 0, // LDUMINALb = 1471
    Feature_HasLSE | 0, // LDUMINALd = 1472
    Feature_HasLSE | 0, // LDUMINALh = 1473
    Feature_HasLSE | 0, // LDUMINALs = 1474
    Feature_HasLSE | 0, // LDUMINAb = 1475
    Feature_HasLSE | 0, // LDUMINAd = 1476
    Feature_HasLSE | 0, // LDUMINAh = 1477
    Feature_HasLSE | 0, // LDUMINAs = 1478
    Feature_HasLSE | 0, // LDUMINLb = 1479
    Feature_HasLSE | 0, // LDUMINLd = 1480
    Feature_HasLSE | 0, // LDUMINLh = 1481
    Feature_HasLSE | 0, // LDUMINLs = 1482
    Feature_HasLSE | 0, // LDUMINb = 1483
    Feature_HasLSE | 0, // LDUMINd = 1484
    Feature_HasLSE | 0, // LDUMINh = 1485
    Feature_HasLSE | 0, // LDUMINs = 1486
    0, // LDURBBi = 1487
    0, // LDURBi = 1488
    0, // LDURDi = 1489
    0, // LDURHHi = 1490
    0, // LDURHi = 1491
    0, // LDURQi = 1492
    0, // LDURSBWi = 1493
    0, // LDURSBXi = 1494
    0, // LDURSHWi = 1495
    0, // LDURSHXi = 1496
    0, // LDURSWi = 1497
    0, // LDURSi = 1498
    0, // LDURWi = 1499
    0, // LDURXi = 1500
    0, // LDXPW = 1501
    0, // LDXPX = 1502
    0, // LDXRB = 1503
    0, // LDXRH = 1504
    0, // LDXRW = 1505
    0, // LDXRX = 1506
    0, // LOADgot = 1507
    0, // LSLVWr = 1508
    0, // LSLVXr = 1509
    0, // LSRVWr = 1510
    0, // LSRVXr = 1511
    0, // MADDWrrr = 1512
    0, // MADDXrrr = 1513
    Feature_HasNEON | 0, // MLAv16i8 = 1514
    Feature_HasNEON | 0, // MLAv2i32 = 1515
    Feature_HasNEON | 0, // MLAv2i32_indexed = 1516
    Feature_HasNEON | 0, // MLAv4i16 = 1517
    Feature_HasNEON | 0, // MLAv4i16_indexed = 1518
    Feature_HasNEON | 0, // MLAv4i32 = 1519
    Feature_HasNEON | 0, // MLAv4i32_indexed = 1520
    Feature_HasNEON | 0, // MLAv8i16 = 1521
    Feature_HasNEON | 0, // MLAv8i16_indexed = 1522
    Feature_HasNEON | 0, // MLAv8i8 = 1523
    Feature_HasNEON | 0, // MLSv16i8 = 1524
    Feature_HasNEON | 0, // MLSv2i32 = 1525
    Feature_HasNEON | 0, // MLSv2i32_indexed = 1526
    Feature_HasNEON | 0, // MLSv4i16 = 1527
    Feature_HasNEON | 0, // MLSv4i16_indexed = 1528
    Feature_HasNEON | 0, // MLSv4i32 = 1529
    Feature_HasNEON | 0, // MLSv4i32_indexed = 1530
    Feature_HasNEON | 0, // MLSv8i16 = 1531
    Feature_HasNEON | 0, // MLSv8i16_indexed = 1532
    Feature_HasNEON | 0, // MLSv8i8 = 1533
    Feature_HasNEON | 0, // MOVID = 1534
    Feature_HasNEON | 0, // MOVIv16b_ns = 1535
    Feature_HasNEON | 0, // MOVIv2d_ns = 1536
    Feature_HasNEON | 0, // MOVIv2i32 = 1537
    Feature_HasNEON | 0, // MOVIv2s_msl = 1538
    Feature_HasNEON | 0, // MOVIv4i16 = 1539
    Feature_HasNEON | 0, // MOVIv4i32 = 1540
    Feature_HasNEON | 0, // MOVIv4s_msl = 1541
    Feature_HasNEON | 0, // MOVIv8b_ns = 1542
    Feature_HasNEON | 0, // MOVIv8i16 = 1543
    0, // MOVKWi = 1544
    0, // MOVKXi = 1545
    0, // MOVNWi = 1546
    0, // MOVNXi = 1547
    0, // MOVZWi = 1548
    0, // MOVZXi = 1549
    0, // MOVaddr = 1550
    0, // MOVaddrBA = 1551
    0, // MOVaddrCP = 1552
    0, // MOVaddrEXT = 1553
    0, // MOVaddrJT = 1554
    0, // MOVaddrTLS = 1555
    0, // MOVi32imm = 1556
    0, // MOVi64imm = 1557
    0, // MRS = 1558
    0, // MSR = 1559
    0, // MSRpstateImm1 = 1560
    0, // MSRpstateImm4 = 1561
    0, // MSUBWrrr = 1562
    0, // MSUBXrrr = 1563
    Feature_HasNEON | 0, // MULv16i8 = 1564
    Feature_HasNEON | 0, // MULv2i32 = 1565
    Feature_HasNEON | 0, // MULv2i32_indexed = 1566
    Feature_HasNEON | 0, // MULv4i16 = 1567
    Feature_HasNEON | 0, // MULv4i16_indexed = 1568
    Feature_HasNEON | 0, // MULv4i32 = 1569
    Feature_HasNEON | 0, // MULv4i32_indexed = 1570
    Feature_HasNEON | 0, // MULv8i16 = 1571
    Feature_HasNEON | 0, // MULv8i16_indexed = 1572
    Feature_HasNEON | 0, // MULv8i8 = 1573
    Feature_HasNEON | 0, // MVNIv2i32 = 1574
    Feature_HasNEON | 0, // MVNIv2s_msl = 1575
    Feature_HasNEON | 0, // MVNIv4i16 = 1576
    Feature_HasNEON | 0, // MVNIv4i32 = 1577
    Feature_HasNEON | 0, // MVNIv4s_msl = 1578
    Feature_HasNEON | 0, // MVNIv8i16 = 1579
    Feature_HasNEON | 0, // NEGv16i8 = 1580
    Feature_HasNEON | 0, // NEGv1i64 = 1581
    Feature_HasNEON | 0, // NEGv2i32 = 1582
    Feature_HasNEON | 0, // NEGv2i64 = 1583
    Feature_HasNEON | 0, // NEGv4i16 = 1584
    Feature_HasNEON | 0, // NEGv4i32 = 1585
    Feature_HasNEON | 0, // NEGv8i16 = 1586
    Feature_HasNEON | 0, // NEGv8i8 = 1587
    Feature_HasNEON | 0, // NOTv16i8 = 1588
    Feature_HasNEON | 0, // NOTv8i8 = 1589
    0, // ORNWrr = 1590
    0, // ORNWrs = 1591
    0, // ORNXrr = 1592
    0, // ORNXrs = 1593
    Feature_HasNEON | 0, // ORNv16i8 = 1594
    Feature_HasNEON | 0, // ORNv8i8 = 1595
    0, // ORRWri = 1596
    0, // ORRWrr = 1597
    0, // ORRWrs = 1598
    0, // ORRXri = 1599
    0, // ORRXrr = 1600
    0, // ORRXrs = 1601
    Feature_HasNEON | 0, // ORRv16i8 = 1602
    Feature_HasNEON | 0, // ORRv2i32 = 1603
    Feature_HasNEON | 0, // ORRv4i16 = 1604
    Feature_HasNEON | 0, // ORRv4i32 = 1605
    Feature_HasNEON | 0, // ORRv8i16 = 1606
    Feature_HasNEON | 0, // ORRv8i8 = 1607
    Feature_HasNEON | 0, // PMULLv16i8 = 1608
    Feature_HasCrypto | 0, // PMULLv1i64 = 1609
    Feature_HasCrypto | 0, // PMULLv2i64 = 1610
    Feature_HasNEON | 0, // PMULLv8i8 = 1611
    Feature_HasNEON | 0, // PMULv16i8 = 1612
    Feature_HasNEON | 0, // PMULv8i8 = 1613
    0, // PRFMl = 1614
    0, // PRFMroW = 1615
    0, // PRFMroX = 1616
    0, // PRFMui = 1617
    0, // PRFUMi = 1618
    Feature_HasNEON | 0, // RADDHNv2i64_v2i32 = 1619
    Feature_HasNEON | 0, // RADDHNv2i64_v4i32 = 1620
    Feature_HasNEON | 0, // RADDHNv4i32_v4i16 = 1621
    Feature_HasNEON | 0, // RADDHNv4i32_v8i16 = 1622
    Feature_HasNEON | 0, // RADDHNv8i16_v16i8 = 1623
    Feature_HasNEON | 0, // RADDHNv8i16_v8i8 = 1624
    0, // RBITWr = 1625
    0, // RBITXr = 1626
    Feature_HasNEON | 0, // RBITv16i8 = 1627
    Feature_HasNEON | 0, // RBITv8i8 = 1628
    0, // RET = 1629
    0, // RET_ReallyLR = 1630
    0, // REV16Wr = 1631
    0, // REV16Xr = 1632
    Feature_HasNEON | 0, // REV16v16i8 = 1633
    Feature_HasNEON | 0, // REV16v8i8 = 1634
    0, // REV32Xr = 1635
    Feature_HasNEON | 0, // REV32v16i8 = 1636
    Feature_HasNEON | 0, // REV32v4i16 = 1637
    Feature_HasNEON | 0, // REV32v8i16 = 1638
    Feature_HasNEON | 0, // REV32v8i8 = 1639
    Feature_HasNEON | 0, // REV64v16i8 = 1640
    Feature_HasNEON | 0, // REV64v2i32 = 1641
    Feature_HasNEON | 0, // REV64v4i16 = 1642
    Feature_HasNEON | 0, // REV64v4i32 = 1643
    Feature_HasNEON | 0, // REV64v8i16 = 1644
    Feature_HasNEON | 0, // REV64v8i8 = 1645
    0, // REVWr = 1646
    0, // REVXr = 1647
    0, // RORVWr = 1648
    0, // RORVXr = 1649
    Feature_HasNEON | 0, // RSHRNv16i8_shift = 1650
    Feature_HasNEON | 0, // RSHRNv2i32_shift = 1651
    Feature_HasNEON | 0, // RSHRNv4i16_shift = 1652
    Feature_HasNEON | 0, // RSHRNv4i32_shift = 1653
    Feature_HasNEON | 0, // RSHRNv8i16_shift = 1654
    Feature_HasNEON | 0, // RSHRNv8i8_shift = 1655
    Feature_HasNEON | 0, // RSUBHNv2i64_v2i32 = 1656
    Feature_HasNEON | 0, // RSUBHNv2i64_v4i32 = 1657
    Feature_HasNEON | 0, // RSUBHNv4i32_v4i16 = 1658
    Feature_HasNEON | 0, // RSUBHNv4i32_v8i16 = 1659
    Feature_HasNEON | 0, // RSUBHNv8i16_v16i8 = 1660
    Feature_HasNEON | 0, // RSUBHNv8i16_v8i8 = 1661
    Feature_HasNEON | 0, // SABALv16i8_v8i16 = 1662
    Feature_HasNEON | 0, // SABALv2i32_v2i64 = 1663
    Feature_HasNEON | 0, // SABALv4i16_v4i32 = 1664
    Feature_HasNEON | 0, // SABALv4i32_v2i64 = 1665
    Feature_HasNEON | 0, // SABALv8i16_v4i32 = 1666
    Feature_HasNEON | 0, // SABALv8i8_v8i16 = 1667
    Feature_HasNEON | 0, // SABAv16i8 = 1668
    Feature_HasNEON | 0, // SABAv2i32 = 1669
    Feature_HasNEON | 0, // SABAv4i16 = 1670
    Feature_HasNEON | 0, // SABAv4i32 = 1671
    Feature_HasNEON | 0, // SABAv8i16 = 1672
    Feature_HasNEON | 0, // SABAv8i8 = 1673
    Feature_HasNEON | 0, // SABDLv16i8_v8i16 = 1674
    Feature_HasNEON | 0, // SABDLv2i32_v2i64 = 1675
    Feature_HasNEON | 0, // SABDLv4i16_v4i32 = 1676
    Feature_HasNEON | 0, // SABDLv4i32_v2i64 = 1677
    Feature_HasNEON | 0, // SABDLv8i16_v4i32 = 1678
    Feature_HasNEON | 0, // SABDLv8i8_v8i16 = 1679
    Feature_HasNEON | 0, // SABDv16i8 = 1680
    Feature_HasNEON | 0, // SABDv2i32 = 1681
    Feature_HasNEON | 0, // SABDv4i16 = 1682
    Feature_HasNEON | 0, // SABDv4i32 = 1683
    Feature_HasNEON | 0, // SABDv8i16 = 1684
    Feature_HasNEON | 0, // SABDv8i8 = 1685
    Feature_HasNEON | 0, // SADALPv16i8_v8i16 = 1686
    Feature_HasNEON | 0, // SADALPv2i32_v1i64 = 1687
    Feature_HasNEON | 0, // SADALPv4i16_v2i32 = 1688
    Feature_HasNEON | 0, // SADALPv4i32_v2i64 = 1689
    Feature_HasNEON | 0, // SADALPv8i16_v4i32 = 1690
    Feature_HasNEON | 0, // SADALPv8i8_v4i16 = 1691
    Feature_HasNEON | 0, // SADDLPv16i8_v8i16 = 1692
    Feature_HasNEON | 0, // SADDLPv2i32_v1i64 = 1693
    Feature_HasNEON | 0, // SADDLPv4i16_v2i32 = 1694
    Feature_HasNEON | 0, // SADDLPv4i32_v2i64 = 1695
    Feature_HasNEON | 0, // SADDLPv8i16_v4i32 = 1696
    Feature_HasNEON | 0, // SADDLPv8i8_v4i16 = 1697
    Feature_HasNEON | 0, // SADDLVv16i8v = 1698
    Feature_HasNEON | 0, // SADDLVv4i16v = 1699
    Feature_HasNEON | 0, // SADDLVv4i32v = 1700
    Feature_HasNEON | 0, // SADDLVv8i16v = 1701
    Feature_HasNEON | 0, // SADDLVv8i8v = 1702
    Feature_HasNEON | 0, // SADDLv16i8_v8i16 = 1703
    Feature_HasNEON | 0, // SADDLv2i32_v2i64 = 1704
    Feature_HasNEON | 0, // SADDLv4i16_v4i32 = 1705
    Feature_HasNEON | 0, // SADDLv4i32_v2i64 = 1706
    Feature_HasNEON | 0, // SADDLv8i16_v4i32 = 1707
    Feature_HasNEON | 0, // SADDLv8i8_v8i16 = 1708
    Feature_HasNEON | 0, // SADDWv16i8_v8i16 = 1709
    Feature_HasNEON | 0, // SADDWv2i32_v2i64 = 1710
    Feature_HasNEON | 0, // SADDWv4i16_v4i32 = 1711
    Feature_HasNEON | 0, // SADDWv4i32_v2i64 = 1712
    Feature_HasNEON | 0, // SADDWv8i16_v4i32 = 1713
    Feature_HasNEON | 0, // SADDWv8i8_v8i16 = 1714
    0, // SBCSWr = 1715
    0, // SBCSXr = 1716
    0, // SBCWr = 1717
    0, // SBCXr = 1718
    0, // SBFMWri = 1719
    0, // SBFMXri = 1720
    Feature_HasFPARMv8 | 0, // SCVTFSWDri = 1721
    Feature_HasFullFP16 | 0, // SCVTFSWHri = 1722
    Feature_HasFPARMv8 | 0, // SCVTFSWSri = 1723
    Feature_HasFPARMv8 | 0, // SCVTFSXDri = 1724
    Feature_HasFullFP16 | 0, // SCVTFSXHri = 1725
    Feature_HasFPARMv8 | 0, // SCVTFSXSri = 1726
    Feature_HasFPARMv8 | 0, // SCVTFUWDri = 1727
    Feature_HasFullFP16 | 0, // SCVTFUWHri = 1728
    Feature_HasFPARMv8 | 0, // SCVTFUWSri = 1729
    Feature_HasFPARMv8 | 0, // SCVTFUXDri = 1730
    Feature_HasFullFP16 | 0, // SCVTFUXHri = 1731
    Feature_HasFPARMv8 | 0, // SCVTFUXSri = 1732
    Feature_HasNEON | 0, // SCVTFd = 1733
    Feature_HasNEON | Feature_HasFullFP16 | 0, // SCVTFh = 1734
    Feature_HasNEON | 0, // SCVTFs = 1735
    Feature_HasNEON | Feature_HasFullFP16 | 0, // SCVTFv1i16 = 1736
    Feature_HasNEON | 0, // SCVTFv1i32 = 1737
    Feature_HasNEON | 0, // SCVTFv1i64 = 1738
    Feature_HasNEON | 0, // SCVTFv2f32 = 1739
    Feature_HasNEON | 0, // SCVTFv2f64 = 1740
    Feature_HasNEON | 0, // SCVTFv2i32_shift = 1741
    Feature_HasNEON | 0, // SCVTFv2i64_shift = 1742
    Feature_HasNEON | Feature_HasFullFP16 | 0, // SCVTFv4f16 = 1743
    Feature_HasNEON | 0, // SCVTFv4f32 = 1744
    Feature_HasNEON | Feature_HasFullFP16 | 0, // SCVTFv4i16_shift = 1745
    Feature_HasNEON | 0, // SCVTFv4i32_shift = 1746
    Feature_HasNEON | Feature_HasFullFP16 | 0, // SCVTFv8f16 = 1747
    Feature_HasNEON | Feature_HasFullFP16 | 0, // SCVTFv8i16_shift = 1748
    0, // SDIVWr = 1749
    0, // SDIVXr = 1750
    Feature_HasCrypto | 0, // SHA1Crrr = 1751
    Feature_HasCrypto | 0, // SHA1Hrr = 1752
    Feature_HasCrypto | 0, // SHA1Mrrr = 1753
    Feature_HasCrypto | 0, // SHA1Prrr = 1754
    Feature_HasCrypto | 0, // SHA1SU0rrr = 1755
    Feature_HasCrypto | 0, // SHA1SU1rr = 1756
    Feature_HasCrypto | 0, // SHA256H2rrr = 1757
    Feature_HasCrypto | 0, // SHA256Hrrr = 1758
    Feature_HasCrypto | 0, // SHA256SU0rr = 1759
    Feature_HasCrypto | 0, // SHA256SU1rrr = 1760
    Feature_HasNEON | 0, // SHADDv16i8 = 1761
    Feature_HasNEON | 0, // SHADDv2i32 = 1762
    Feature_HasNEON | 0, // SHADDv4i16 = 1763
    Feature_HasNEON | 0, // SHADDv4i32 = 1764
    Feature_HasNEON | 0, // SHADDv8i16 = 1765
    Feature_HasNEON | 0, // SHADDv8i8 = 1766
    Feature_HasNEON | 0, // SHLLv16i8 = 1767
    Feature_HasNEON | 0, // SHLLv2i32 = 1768
    Feature_HasNEON | 0, // SHLLv4i16 = 1769
    Feature_HasNEON | 0, // SHLLv4i32 = 1770
    Feature_HasNEON | 0, // SHLLv8i16 = 1771
    Feature_HasNEON | 0, // SHLLv8i8 = 1772
    Feature_HasNEON | 0, // SHLd = 1773
    Feature_HasNEON | 0, // SHLv16i8_shift = 1774
    Feature_HasNEON | 0, // SHLv2i32_shift = 1775
    Feature_HasNEON | 0, // SHLv2i64_shift = 1776
    Feature_HasNEON | 0, // SHLv4i16_shift = 1777
    Feature_HasNEON | 0, // SHLv4i32_shift = 1778
    Feature_HasNEON | 0, // SHLv8i16_shift = 1779
    Feature_HasNEON | 0, // SHLv8i8_shift = 1780
    Feature_HasNEON | 0, // SHRNv16i8_shift = 1781
    Feature_HasNEON | 0, // SHRNv2i32_shift = 1782
    Feature_HasNEON | 0, // SHRNv4i16_shift = 1783
    Feature_HasNEON | 0, // SHRNv4i32_shift = 1784
    Feature_HasNEON | 0, // SHRNv8i16_shift = 1785
    Feature_HasNEON | 0, // SHRNv8i8_shift = 1786
    Feature_HasNEON | 0, // SHSUBv16i8 = 1787
    Feature_HasNEON | 0, // SHSUBv2i32 = 1788
    Feature_HasNEON | 0, // SHSUBv4i16 = 1789
    Feature_HasNEON | 0, // SHSUBv4i32 = 1790
    Feature_HasNEON | 0, // SHSUBv8i16 = 1791
    Feature_HasNEON | 0, // SHSUBv8i8 = 1792
    Feature_HasNEON | 0, // SLId = 1793
    Feature_HasNEON | 0, // SLIv16i8_shift = 1794
    Feature_HasNEON | 0, // SLIv2i32_shift = 1795
    Feature_HasNEON | 0, // SLIv2i64_shift = 1796
    Feature_HasNEON | 0, // SLIv4i16_shift = 1797
    Feature_HasNEON | 0, // SLIv4i32_shift = 1798
    Feature_HasNEON | 0, // SLIv8i16_shift = 1799
    Feature_HasNEON | 0, // SLIv8i8_shift = 1800
    0, // SMADDLrrr = 1801
    Feature_HasNEON | 0, // SMAXPv16i8 = 1802
    Feature_HasNEON | 0, // SMAXPv2i32 = 1803
    Feature_HasNEON | 0, // SMAXPv4i16 = 1804
    Feature_HasNEON | 0, // SMAXPv4i32 = 1805
    Feature_HasNEON | 0, // SMAXPv8i16 = 1806
    Feature_HasNEON | 0, // SMAXPv8i8 = 1807
    Feature_HasNEON | 0, // SMAXVv16i8v = 1808
    Feature_HasNEON | 0, // SMAXVv4i16v = 1809
    Feature_HasNEON | 0, // SMAXVv4i32v = 1810
    Feature_HasNEON | 0, // SMAXVv8i16v = 1811
    Feature_HasNEON | 0, // SMAXVv8i8v = 1812
    Feature_HasNEON | 0, // SMAXv16i8 = 1813
    Feature_HasNEON | 0, // SMAXv2i32 = 1814
    Feature_HasNEON | 0, // SMAXv4i16 = 1815
    Feature_HasNEON | 0, // SMAXv4i32 = 1816
    Feature_HasNEON | 0, // SMAXv8i16 = 1817
    Feature_HasNEON | 0, // SMAXv8i8 = 1818
    0, // SMC = 1819
    Feature_HasNEON | 0, // SMINPv16i8 = 1820
    Feature_HasNEON | 0, // SMINPv2i32 = 1821
    Feature_HasNEON | 0, // SMINPv4i16 = 1822
    Feature_HasNEON | 0, // SMINPv4i32 = 1823
    Feature_HasNEON | 0, // SMINPv8i16 = 1824
    Feature_HasNEON | 0, // SMINPv8i8 = 1825
    Feature_HasNEON | 0, // SMINVv16i8v = 1826
    Feature_HasNEON | 0, // SMINVv4i16v = 1827
    Feature_HasNEON | 0, // SMINVv4i32v = 1828
    Feature_HasNEON | 0, // SMINVv8i16v = 1829
    Feature_HasNEON | 0, // SMINVv8i8v = 1830
    Feature_HasNEON | 0, // SMINv16i8 = 1831
    Feature_HasNEON | 0, // SMINv2i32 = 1832
    Feature_HasNEON | 0, // SMINv4i16 = 1833
    Feature_HasNEON | 0, // SMINv4i32 = 1834
    Feature_HasNEON | 0, // SMINv8i16 = 1835
    Feature_HasNEON | 0, // SMINv8i8 = 1836
    Feature_HasNEON | 0, // SMLALv16i8_v8i16 = 1837
    Feature_HasNEON | 0, // SMLALv2i32_indexed = 1838
    Feature_HasNEON | 0, // SMLALv2i32_v2i64 = 1839
    Feature_HasNEON | 0, // SMLALv4i16_indexed = 1840
    Feature_HasNEON | 0, // SMLALv4i16_v4i32 = 1841
    Feature_HasNEON | 0, // SMLALv4i32_indexed = 1842
    Feature_HasNEON | 0, // SMLALv4i32_v2i64 = 1843
    Feature_HasNEON | 0, // SMLALv8i16_indexed = 1844
    Feature_HasNEON | 0, // SMLALv8i16_v4i32 = 1845
    Feature_HasNEON | 0, // SMLALv8i8_v8i16 = 1846
    Feature_HasNEON | 0, // SMLSLv16i8_v8i16 = 1847
    Feature_HasNEON | 0, // SMLSLv2i32_indexed = 1848
    Feature_HasNEON | 0, // SMLSLv2i32_v2i64 = 1849
    Feature_HasNEON | 0, // SMLSLv4i16_indexed = 1850
    Feature_HasNEON | 0, // SMLSLv4i16_v4i32 = 1851
    Feature_HasNEON | 0, // SMLSLv4i32_indexed = 1852
    Feature_HasNEON | 0, // SMLSLv4i32_v2i64 = 1853
    Feature_HasNEON | 0, // SMLSLv8i16_indexed = 1854
    Feature_HasNEON | 0, // SMLSLv8i16_v4i32 = 1855
    Feature_HasNEON | 0, // SMLSLv8i8_v8i16 = 1856
    Feature_HasNEON | 0, // SMOVvi16to32 = 1857
    Feature_HasNEON | 0, // SMOVvi16to64 = 1858
    Feature_HasNEON | 0, // SMOVvi32to64 = 1859
    Feature_HasNEON | 0, // SMOVvi8to32 = 1860
    Feature_HasNEON | 0, // SMOVvi8to64 = 1861
    0, // SMSUBLrrr = 1862
    0, // SMULHrr = 1863
    Feature_HasNEON | 0, // SMULLv16i8_v8i16 = 1864
    Feature_HasNEON | 0, // SMULLv2i32_indexed = 1865
    Feature_HasNEON | 0, // SMULLv2i32_v2i64 = 1866
    Feature_HasNEON | 0, // SMULLv4i16_indexed = 1867
    Feature_HasNEON | 0, // SMULLv4i16_v4i32 = 1868
    Feature_HasNEON | 0, // SMULLv4i32_indexed = 1869
    Feature_HasNEON | 0, // SMULLv4i32_v2i64 = 1870
    Feature_HasNEON | 0, // SMULLv8i16_indexed = 1871
    Feature_HasNEON | 0, // SMULLv8i16_v4i32 = 1872
    Feature_HasNEON | 0, // SMULLv8i8_v8i16 = 1873
    Feature_HasNEON | 0, // SQABSv16i8 = 1874
    Feature_HasNEON | 0, // SQABSv1i16 = 1875
    Feature_HasNEON | 0, // SQABSv1i32 = 1876
    Feature_HasNEON | 0, // SQABSv1i64 = 1877
    Feature_HasNEON | 0, // SQABSv1i8 = 1878
    Feature_HasNEON | 0, // SQABSv2i32 = 1879
    Feature_HasNEON | 0, // SQABSv2i64 = 1880
    Feature_HasNEON | 0, // SQABSv4i16 = 1881
    Feature_HasNEON | 0, // SQABSv4i32 = 1882
    Feature_HasNEON | 0, // SQABSv8i16 = 1883
    Feature_HasNEON | 0, // SQABSv8i8 = 1884
    Feature_HasNEON | 0, // SQADDv16i8 = 1885
    Feature_HasNEON | 0, // SQADDv1i16 = 1886
    Feature_HasNEON | 0, // SQADDv1i32 = 1887
    Feature_HasNEON | 0, // SQADDv1i64 = 1888
    Feature_HasNEON | 0, // SQADDv1i8 = 1889
    Feature_HasNEON | 0, // SQADDv2i32 = 1890
    Feature_HasNEON | 0, // SQADDv2i64 = 1891
    Feature_HasNEON | 0, // SQADDv4i16 = 1892
    Feature_HasNEON | 0, // SQADDv4i32 = 1893
    Feature_HasNEON | 0, // SQADDv8i16 = 1894
    Feature_HasNEON | 0, // SQADDv8i8 = 1895
    Feature_HasNEON | 0, // SQDMLALi16 = 1896
    Feature_HasNEON | 0, // SQDMLALi32 = 1897
    Feature_HasNEON | 0, // SQDMLALv1i32_indexed = 1898
    Feature_HasNEON | 0, // SQDMLALv1i64_indexed = 1899
    Feature_HasNEON | 0, // SQDMLALv2i32_indexed = 1900
    Feature_HasNEON | 0, // SQDMLALv2i32_v2i64 = 1901
    Feature_HasNEON | 0, // SQDMLALv4i16_indexed = 1902
    Feature_HasNEON | 0, // SQDMLALv4i16_v4i32 = 1903
    Feature_HasNEON | 0, // SQDMLALv4i32_indexed = 1904
    Feature_HasNEON | 0, // SQDMLALv4i32_v2i64 = 1905
    Feature_HasNEON | 0, // SQDMLALv8i16_indexed = 1906
    Feature_HasNEON | 0, // SQDMLALv8i16_v4i32 = 1907
    Feature_HasNEON | 0, // SQDMLSLi16 = 1908
    Feature_HasNEON | 0, // SQDMLSLi32 = 1909
    Feature_HasNEON | 0, // SQDMLSLv1i32_indexed = 1910
    Feature_HasNEON | 0, // SQDMLSLv1i64_indexed = 1911
    Feature_HasNEON | 0, // SQDMLSLv2i32_indexed = 1912
    Feature_HasNEON | 0, // SQDMLSLv2i32_v2i64 = 1913
    Feature_HasNEON | 0, // SQDMLSLv4i16_indexed = 1914
    Feature_HasNEON | 0, // SQDMLSLv4i16_v4i32 = 1915
    Feature_HasNEON | 0, // SQDMLSLv4i32_indexed = 1916
    Feature_HasNEON | 0, // SQDMLSLv4i32_v2i64 = 1917
    Feature_HasNEON | 0, // SQDMLSLv8i16_indexed = 1918
    Feature_HasNEON | 0, // SQDMLSLv8i16_v4i32 = 1919
    Feature_HasNEON | 0, // SQDMULHv1i16 = 1920
    Feature_HasNEON | 0, // SQDMULHv1i16_indexed = 1921
    Feature_HasNEON | 0, // SQDMULHv1i32 = 1922
    Feature_HasNEON | 0, // SQDMULHv1i32_indexed = 1923
    Feature_HasNEON | 0, // SQDMULHv2i32 = 1924
    Feature_HasNEON | 0, // SQDMULHv2i32_indexed = 1925
    Feature_HasNEON | 0, // SQDMULHv4i16 = 1926
    Feature_HasNEON | 0, // SQDMULHv4i16_indexed = 1927
    Feature_HasNEON | 0, // SQDMULHv4i32 = 1928
    Feature_HasNEON | 0, // SQDMULHv4i32_indexed = 1929
    Feature_HasNEON | 0, // SQDMULHv8i16 = 1930
    Feature_HasNEON | 0, // SQDMULHv8i16_indexed = 1931
    Feature_HasNEON | 0, // SQDMULLi16 = 1932
    Feature_HasNEON | 0, // SQDMULLi32 = 1933
    Feature_HasNEON | 0, // SQDMULLv1i32_indexed = 1934
    Feature_HasNEON | 0, // SQDMULLv1i64_indexed = 1935
    Feature_HasNEON | 0, // SQDMULLv2i32_indexed = 1936
    Feature_HasNEON | 0, // SQDMULLv2i32_v2i64 = 1937
    Feature_HasNEON | 0, // SQDMULLv4i16_indexed = 1938
    Feature_HasNEON | 0, // SQDMULLv4i16_v4i32 = 1939
    Feature_HasNEON | 0, // SQDMULLv4i32_indexed = 1940
    Feature_HasNEON | 0, // SQDMULLv4i32_v2i64 = 1941
    Feature_HasNEON | 0, // SQDMULLv8i16_indexed = 1942
    Feature_HasNEON | 0, // SQDMULLv8i16_v4i32 = 1943
    Feature_HasNEON | 0, // SQNEGv16i8 = 1944
    Feature_HasNEON | 0, // SQNEGv1i16 = 1945
    Feature_HasNEON | 0, // SQNEGv1i32 = 1946
    Feature_HasNEON | 0, // SQNEGv1i64 = 1947
    Feature_HasNEON | 0, // SQNEGv1i8 = 1948
    Feature_HasNEON | 0, // SQNEGv2i32 = 1949
    Feature_HasNEON | 0, // SQNEGv2i64 = 1950
    Feature_HasNEON | 0, // SQNEGv4i16 = 1951
    Feature_HasNEON | 0, // SQNEGv4i32 = 1952
    Feature_HasNEON | 0, // SQNEGv8i16 = 1953
    Feature_HasNEON | 0, // SQNEGv8i8 = 1954
    Feature_HasNEON | Feature_HasRDM | 0, // SQRDMLAHi16_indexed = 1955
    Feature_HasNEON | Feature_HasRDM | 0, // SQRDMLAHi32_indexed = 1956
    Feature_HasRDM | 0, // SQRDMLAHv1i16 = 1957
    Feature_HasRDM | 0, // SQRDMLAHv1i32 = 1958
    Feature_HasNEON | Feature_HasRDM | 0, // SQRDMLAHv2i32 = 1959
    Feature_HasNEON | Feature_HasRDM | 0, // SQRDMLAHv2i32_indexed = 1960
    Feature_HasNEON | Feature_HasRDM | 0, // SQRDMLAHv4i16 = 1961
    Feature_HasNEON | Feature_HasRDM | 0, // SQRDMLAHv4i16_indexed = 1962
    Feature_HasNEON | Feature_HasRDM | 0, // SQRDMLAHv4i32 = 1963
    Feature_HasNEON | Feature_HasRDM | 0, // SQRDMLAHv4i32_indexed = 1964
    Feature_HasNEON | Feature_HasRDM | 0, // SQRDMLAHv8i16 = 1965
    Feature_HasNEON | Feature_HasRDM | 0, // SQRDMLAHv8i16_indexed = 1966
    Feature_HasNEON | Feature_HasRDM | 0, // SQRDMLSHi16_indexed = 1967
    Feature_HasNEON | Feature_HasRDM | 0, // SQRDMLSHi32_indexed = 1968
    Feature_HasRDM | 0, // SQRDMLSHv1i16 = 1969
    Feature_HasRDM | 0, // SQRDMLSHv1i32 = 1970
    Feature_HasNEON | Feature_HasRDM | 0, // SQRDMLSHv2i32 = 1971
    Feature_HasNEON | Feature_HasRDM | 0, // SQRDMLSHv2i32_indexed = 1972
    Feature_HasNEON | Feature_HasRDM | 0, // SQRDMLSHv4i16 = 1973
    Feature_HasNEON | Feature_HasRDM | 0, // SQRDMLSHv4i16_indexed = 1974
    Feature_HasNEON | Feature_HasRDM | 0, // SQRDMLSHv4i32 = 1975
    Feature_HasNEON | Feature_HasRDM | 0, // SQRDMLSHv4i32_indexed = 1976
    Feature_HasNEON | Feature_HasRDM | 0, // SQRDMLSHv8i16 = 1977
    Feature_HasNEON | Feature_HasRDM | 0, // SQRDMLSHv8i16_indexed = 1978
    Feature_HasNEON | 0, // SQRDMULHv1i16 = 1979
    Feature_HasNEON | 0, // SQRDMULHv1i16_indexed = 1980
    Feature_HasNEON | 0, // SQRDMULHv1i32 = 1981
    Feature_HasNEON | 0, // SQRDMULHv1i32_indexed = 1982
    Feature_HasNEON | 0, // SQRDMULHv2i32 = 1983
    Feature_HasNEON | 0, // SQRDMULHv2i32_indexed = 1984
    Feature_HasNEON | 0, // SQRDMULHv4i16 = 1985
    Feature_HasNEON | 0, // SQRDMULHv4i16_indexed = 1986
    Feature_HasNEON | 0, // SQRDMULHv4i32 = 1987
    Feature_HasNEON | 0, // SQRDMULHv4i32_indexed = 1988
    Feature_HasNEON | 0, // SQRDMULHv8i16 = 1989
    Feature_HasNEON | 0, // SQRDMULHv8i16_indexed = 1990
    Feature_HasNEON | 0, // SQRSHLv16i8 = 1991
    Feature_HasNEON | 0, // SQRSHLv1i16 = 1992
    Feature_HasNEON | 0, // SQRSHLv1i32 = 1993
    Feature_HasNEON | 0, // SQRSHLv1i64 = 1994
    Feature_HasNEON | 0, // SQRSHLv1i8 = 1995
    Feature_HasNEON | 0, // SQRSHLv2i32 = 1996
    Feature_HasNEON | 0, // SQRSHLv2i64 = 1997
    Feature_HasNEON | 0, // SQRSHLv4i16 = 1998
    Feature_HasNEON | 0, // SQRSHLv4i32 = 1999
    Feature_HasNEON | 0, // SQRSHLv8i16 = 2000
    Feature_HasNEON | 0, // SQRSHLv8i8 = 2001
    Feature_HasNEON | 0, // SQRSHRNb = 2002
    Feature_HasNEON | 0, // SQRSHRNh = 2003
    Feature_HasNEON | 0, // SQRSHRNs = 2004
    Feature_HasNEON | 0, // SQRSHRNv16i8_shift = 2005
    Feature_HasNEON | 0, // SQRSHRNv2i32_shift = 2006
    Feature_HasNEON | 0, // SQRSHRNv4i16_shift = 2007
    Feature_HasNEON | 0, // SQRSHRNv4i32_shift = 2008
    Feature_HasNEON | 0, // SQRSHRNv8i16_shift = 2009
    Feature_HasNEON | 0, // SQRSHRNv8i8_shift = 2010
    Feature_HasNEON | 0, // SQRSHRUNb = 2011
    Feature_HasNEON | 0, // SQRSHRUNh = 2012
    Feature_HasNEON | 0, // SQRSHRUNs = 2013
    Feature_HasNEON | 0, // SQRSHRUNv16i8_shift = 2014
    Feature_HasNEON | 0, // SQRSHRUNv2i32_shift = 2015
    Feature_HasNEON | 0, // SQRSHRUNv4i16_shift = 2016
    Feature_HasNEON | 0, // SQRSHRUNv4i32_shift = 2017
    Feature_HasNEON | 0, // SQRSHRUNv8i16_shift = 2018
    Feature_HasNEON | 0, // SQRSHRUNv8i8_shift = 2019
    Feature_HasNEON | 0, // SQSHLUb = 2020
    Feature_HasNEON | 0, // SQSHLUd = 2021
    Feature_HasNEON | 0, // SQSHLUh = 2022
    Feature_HasNEON | 0, // SQSHLUs = 2023
    Feature_HasNEON | 0, // SQSHLUv16i8_shift = 2024
    Feature_HasNEON | 0, // SQSHLUv2i32_shift = 2025
    Feature_HasNEON | 0, // SQSHLUv2i64_shift = 2026
    Feature_HasNEON | 0, // SQSHLUv4i16_shift = 2027
    Feature_HasNEON | 0, // SQSHLUv4i32_shift = 2028
    Feature_HasNEON | 0, // SQSHLUv8i16_shift = 2029
    Feature_HasNEON | 0, // SQSHLUv8i8_shift = 2030
    Feature_HasNEON | 0, // SQSHLb = 2031
    Feature_HasNEON | 0, // SQSHLd = 2032
    Feature_HasNEON | 0, // SQSHLh = 2033
    Feature_HasNEON | 0, // SQSHLs = 2034
    Feature_HasNEON | 0, // SQSHLv16i8 = 2035
    Feature_HasNEON | 0, // SQSHLv16i8_shift = 2036
    Feature_HasNEON | 0, // SQSHLv1i16 = 2037
    Feature_HasNEON | 0, // SQSHLv1i32 = 2038
    Feature_HasNEON | 0, // SQSHLv1i64 = 2039
    Feature_HasNEON | 0, // SQSHLv1i8 = 2040
    Feature_HasNEON | 0, // SQSHLv2i32 = 2041
    Feature_HasNEON | 0, // SQSHLv2i32_shift = 2042
    Feature_HasNEON | 0, // SQSHLv2i64 = 2043
    Feature_HasNEON | 0, // SQSHLv2i64_shift = 2044
    Feature_HasNEON | 0, // SQSHLv4i16 = 2045
    Feature_HasNEON | 0, // SQSHLv4i16_shift = 2046
    Feature_HasNEON | 0, // SQSHLv4i32 = 2047
    Feature_HasNEON | 0, // SQSHLv4i32_shift = 2048
    Feature_HasNEON | 0, // SQSHLv8i16 = 2049
    Feature_HasNEON | 0, // SQSHLv8i16_shift = 2050
    Feature_HasNEON | 0, // SQSHLv8i8 = 2051
    Feature_HasNEON | 0, // SQSHLv8i8_shift = 2052
    Feature_HasNEON | 0, // SQSHRNb = 2053
    Feature_HasNEON | 0, // SQSHRNh = 2054
    Feature_HasNEON | 0, // SQSHRNs = 2055
    Feature_HasNEON | 0, // SQSHRNv16i8_shift = 2056
    Feature_HasNEON | 0, // SQSHRNv2i32_shift = 2057
    Feature_HasNEON | 0, // SQSHRNv4i16_shift = 2058
    Feature_HasNEON | 0, // SQSHRNv4i32_shift = 2059
    Feature_HasNEON | 0, // SQSHRNv8i16_shift = 2060
    Feature_HasNEON | 0, // SQSHRNv8i8_shift = 2061
    Feature_HasNEON | 0, // SQSHRUNb = 2062
    Feature_HasNEON | 0, // SQSHRUNh = 2063
    Feature_HasNEON | 0, // SQSHRUNs = 2064
    Feature_HasNEON | 0, // SQSHRUNv16i8_shift = 2065
    Feature_HasNEON | 0, // SQSHRUNv2i32_shift = 2066
    Feature_HasNEON | 0, // SQSHRUNv4i16_shift = 2067
    Feature_HasNEON | 0, // SQSHRUNv4i32_shift = 2068
    Feature_HasNEON | 0, // SQSHRUNv8i16_shift = 2069
    Feature_HasNEON | 0, // SQSHRUNv8i8_shift = 2070
    Feature_HasNEON | 0, // SQSUBv16i8 = 2071
    Feature_HasNEON | 0, // SQSUBv1i16 = 2072
    Feature_HasNEON | 0, // SQSUBv1i32 = 2073
    Feature_HasNEON | 0, // SQSUBv1i64 = 2074
    Feature_HasNEON | 0, // SQSUBv1i8 = 2075
    Feature_HasNEON | 0, // SQSUBv2i32 = 2076
    Feature_HasNEON | 0, // SQSUBv2i64 = 2077
    Feature_HasNEON | 0, // SQSUBv4i16 = 2078
    Feature_HasNEON | 0, // SQSUBv4i32 = 2079
    Feature_HasNEON | 0, // SQSUBv8i16 = 2080
    Feature_HasNEON | 0, // SQSUBv8i8 = 2081
    Feature_HasNEON | 0, // SQXTNv16i8 = 2082
    Feature_HasNEON | 0, // SQXTNv1i16 = 2083
    Feature_HasNEON | 0, // SQXTNv1i32 = 2084
    Feature_HasNEON | 0, // SQXTNv1i8 = 2085
    Feature_HasNEON | 0, // SQXTNv2i32 = 2086
    Feature_HasNEON | 0, // SQXTNv4i16 = 2087
    Feature_HasNEON | 0, // SQXTNv4i32 = 2088
    Feature_HasNEON | 0, // SQXTNv8i16 = 2089
    Feature_HasNEON | 0, // SQXTNv8i8 = 2090
    Feature_HasNEON | 0, // SQXTUNv16i8 = 2091
    Feature_HasNEON | 0, // SQXTUNv1i16 = 2092
    Feature_HasNEON | 0, // SQXTUNv1i32 = 2093
    Feature_HasNEON | 0, // SQXTUNv1i8 = 2094
    Feature_HasNEON | 0, // SQXTUNv2i32 = 2095
    Feature_HasNEON | 0, // SQXTUNv4i16 = 2096
    Feature_HasNEON | 0, // SQXTUNv4i32 = 2097
    Feature_HasNEON | 0, // SQXTUNv8i16 = 2098
    Feature_HasNEON | 0, // SQXTUNv8i8 = 2099
    Feature_HasNEON | 0, // SRHADDv16i8 = 2100
    Feature_HasNEON | 0, // SRHADDv2i32 = 2101
    Feature_HasNEON | 0, // SRHADDv4i16 = 2102
    Feature_HasNEON | 0, // SRHADDv4i32 = 2103
    Feature_HasNEON | 0, // SRHADDv8i16 = 2104
    Feature_HasNEON | 0, // SRHADDv8i8 = 2105
    Feature_HasNEON | 0, // SRId = 2106
    Feature_HasNEON | 0, // SRIv16i8_shift = 2107
    Feature_HasNEON | 0, // SRIv2i32_shift = 2108
    Feature_HasNEON | 0, // SRIv2i64_shift = 2109
    Feature_HasNEON | 0, // SRIv4i16_shift = 2110
    Feature_HasNEON | 0, // SRIv4i32_shift = 2111
    Feature_HasNEON | 0, // SRIv8i16_shift = 2112
    Feature_HasNEON | 0, // SRIv8i8_shift = 2113
    Feature_HasNEON | 0, // SRSHLv16i8 = 2114
    Feature_HasNEON | 0, // SRSHLv1i64 = 2115
    Feature_HasNEON | 0, // SRSHLv2i32 = 2116
    Feature_HasNEON | 0, // SRSHLv2i64 = 2117
    Feature_HasNEON | 0, // SRSHLv4i16 = 2118
    Feature_HasNEON | 0, // SRSHLv4i32 = 2119
    Feature_HasNEON | 0, // SRSHLv8i16 = 2120
    Feature_HasNEON | 0, // SRSHLv8i8 = 2121
    Feature_HasNEON | 0, // SRSHRd = 2122
    Feature_HasNEON | 0, // SRSHRv16i8_shift = 2123
    Feature_HasNEON | 0, // SRSHRv2i32_shift = 2124
    Feature_HasNEON | 0, // SRSHRv2i64_shift = 2125
    Feature_HasNEON | 0, // SRSHRv4i16_shift = 2126
    Feature_HasNEON | 0, // SRSHRv4i32_shift = 2127
    Feature_HasNEON | 0, // SRSHRv8i16_shift = 2128
    Feature_HasNEON | 0, // SRSHRv8i8_shift = 2129
    Feature_HasNEON | 0, // SRSRAd = 2130
    Feature_HasNEON | 0, // SRSRAv16i8_shift = 2131
    Feature_HasNEON | 0, // SRSRAv2i32_shift = 2132
    Feature_HasNEON | 0, // SRSRAv2i64_shift = 2133
    Feature_HasNEON | 0, // SRSRAv4i16_shift = 2134
    Feature_HasNEON | 0, // SRSRAv4i32_shift = 2135
    Feature_HasNEON | 0, // SRSRAv8i16_shift = 2136
    Feature_HasNEON | 0, // SRSRAv8i8_shift = 2137
    Feature_HasNEON | 0, // SSHLLv16i8_shift = 2138
    Feature_HasNEON | 0, // SSHLLv2i32_shift = 2139
    Feature_HasNEON | 0, // SSHLLv4i16_shift = 2140
    Feature_HasNEON | 0, // SSHLLv4i32_shift = 2141
    Feature_HasNEON | 0, // SSHLLv8i16_shift = 2142
    Feature_HasNEON | 0, // SSHLLv8i8_shift = 2143
    Feature_HasNEON | 0, // SSHLv16i8 = 2144
    Feature_HasNEON | 0, // SSHLv1i64 = 2145
    Feature_HasNEON | 0, // SSHLv2i32 = 2146
    Feature_HasNEON | 0, // SSHLv2i64 = 2147
    Feature_HasNEON | 0, // SSHLv4i16 = 2148
    Feature_HasNEON | 0, // SSHLv4i32 = 2149
    Feature_HasNEON | 0, // SSHLv8i16 = 2150
    Feature_HasNEON | 0, // SSHLv8i8 = 2151
    Feature_HasNEON | 0, // SSHRd = 2152
    Feature_HasNEON | 0, // SSHRv16i8_shift = 2153
    Feature_HasNEON | 0, // SSHRv2i32_shift = 2154
    Feature_HasNEON | 0, // SSHRv2i64_shift = 2155
    Feature_HasNEON | 0, // SSHRv4i16_shift = 2156
    Feature_HasNEON | 0, // SSHRv4i32_shift = 2157
    Feature_HasNEON | 0, // SSHRv8i16_shift = 2158
    Feature_HasNEON | 0, // SSHRv8i8_shift = 2159
    Feature_HasNEON | 0, // SSRAd = 2160
    Feature_HasNEON | 0, // SSRAv16i8_shift = 2161
    Feature_HasNEON | 0, // SSRAv2i32_shift = 2162
    Feature_HasNEON | 0, // SSRAv2i64_shift = 2163
    Feature_HasNEON | 0, // SSRAv4i16_shift = 2164
    Feature_HasNEON | 0, // SSRAv4i32_shift = 2165
    Feature_HasNEON | 0, // SSRAv8i16_shift = 2166
    Feature_HasNEON | 0, // SSRAv8i8_shift = 2167
    Feature_HasNEON | 0, // SSUBLv16i8_v8i16 = 2168
    Feature_HasNEON | 0, // SSUBLv2i32_v2i64 = 2169
    Feature_HasNEON | 0, // SSUBLv4i16_v4i32 = 2170
    Feature_HasNEON | 0, // SSUBLv4i32_v2i64 = 2171
    Feature_HasNEON | 0, // SSUBLv8i16_v4i32 = 2172
    Feature_HasNEON | 0, // SSUBLv8i8_v8i16 = 2173
    Feature_HasNEON | 0, // SSUBWv16i8_v8i16 = 2174
    Feature_HasNEON | 0, // SSUBWv2i32_v2i64 = 2175
    Feature_HasNEON | 0, // SSUBWv4i16_v4i32 = 2176
    Feature_HasNEON | 0, // SSUBWv4i32_v2i64 = 2177
    Feature_HasNEON | 0, // SSUBWv8i16_v4i32 = 2178
    Feature_HasNEON | 0, // SSUBWv8i8_v8i16 = 2179
    Feature_HasNEON | 0, // ST1Fourv16b = 2180
    Feature_HasNEON | 0, // ST1Fourv16b_POST = 2181
    Feature_HasNEON | 0, // ST1Fourv1d = 2182
    Feature_HasNEON | 0, // ST1Fourv1d_POST = 2183
    Feature_HasNEON | 0, // ST1Fourv2d = 2184
    Feature_HasNEON | 0, // ST1Fourv2d_POST = 2185
    Feature_HasNEON | 0, // ST1Fourv2s = 2186
    Feature_HasNEON | 0, // ST1Fourv2s_POST = 2187
    Feature_HasNEON | 0, // ST1Fourv4h = 2188
    Feature_HasNEON | 0, // ST1Fourv4h_POST = 2189
    Feature_HasNEON | 0, // ST1Fourv4s = 2190
    Feature_HasNEON | 0, // ST1Fourv4s_POST = 2191
    Feature_HasNEON | 0, // ST1Fourv8b = 2192
    Feature_HasNEON | 0, // ST1Fourv8b_POST = 2193
    Feature_HasNEON | 0, // ST1Fourv8h = 2194
    Feature_HasNEON | 0, // ST1Fourv8h_POST = 2195
    Feature_HasNEON | 0, // ST1Onev16b = 2196
    Feature_HasNEON | 0, // ST1Onev16b_POST = 2197
    Feature_HasNEON | 0, // ST1Onev1d = 2198
    Feature_HasNEON | 0, // ST1Onev1d_POST = 2199
    Feature_HasNEON | 0, // ST1Onev2d = 2200
    Feature_HasNEON | 0, // ST1Onev2d_POST = 2201
    Feature_HasNEON | 0, // ST1Onev2s = 2202
    Feature_HasNEON | 0, // ST1Onev2s_POST = 2203
    Feature_HasNEON | 0, // ST1Onev4h = 2204
    Feature_HasNEON | 0, // ST1Onev4h_POST = 2205
    Feature_HasNEON | 0, // ST1Onev4s = 2206
    Feature_HasNEON | 0, // ST1Onev4s_POST = 2207
    Feature_HasNEON | 0, // ST1Onev8b = 2208
    Feature_HasNEON | 0, // ST1Onev8b_POST = 2209
    Feature_HasNEON | 0, // ST1Onev8h = 2210
    Feature_HasNEON | 0, // ST1Onev8h_POST = 2211
    Feature_HasNEON | 0, // ST1Threev16b = 2212
    Feature_HasNEON | 0, // ST1Threev16b_POST = 2213
    Feature_HasNEON | 0, // ST1Threev1d = 2214
    Feature_HasNEON | 0, // ST1Threev1d_POST = 2215
    Feature_HasNEON | 0, // ST1Threev2d = 2216
    Feature_HasNEON | 0, // ST1Threev2d_POST = 2217
    Feature_HasNEON | 0, // ST1Threev2s = 2218
    Feature_HasNEON | 0, // ST1Threev2s_POST = 2219
    Feature_HasNEON | 0, // ST1Threev4h = 2220
    Feature_HasNEON | 0, // ST1Threev4h_POST = 2221
    Feature_HasNEON | 0, // ST1Threev4s = 2222
    Feature_HasNEON | 0, // ST1Threev4s_POST = 2223
    Feature_HasNEON | 0, // ST1Threev8b = 2224
    Feature_HasNEON | 0, // ST1Threev8b_POST = 2225
    Feature_HasNEON | 0, // ST1Threev8h = 2226
    Feature_HasNEON | 0, // ST1Threev8h_POST = 2227
    Feature_HasNEON | 0, // ST1Twov16b = 2228
    Feature_HasNEON | 0, // ST1Twov16b_POST = 2229
    Feature_HasNEON | 0, // ST1Twov1d = 2230
    Feature_HasNEON | 0, // ST1Twov1d_POST = 2231
    Feature_HasNEON | 0, // ST1Twov2d = 2232
    Feature_HasNEON | 0, // ST1Twov2d_POST = 2233
    Feature_HasNEON | 0, // ST1Twov2s = 2234
    Feature_HasNEON | 0, // ST1Twov2s_POST = 2235
    Feature_HasNEON | 0, // ST1Twov4h = 2236
    Feature_HasNEON | 0, // ST1Twov4h_POST = 2237
    Feature_HasNEON | 0, // ST1Twov4s = 2238
    Feature_HasNEON | 0, // ST1Twov4s_POST = 2239
    Feature_HasNEON | 0, // ST1Twov8b = 2240
    Feature_HasNEON | 0, // ST1Twov8b_POST = 2241
    Feature_HasNEON | 0, // ST1Twov8h = 2242
    Feature_HasNEON | 0, // ST1Twov8h_POST = 2243
    Feature_HasNEON | 0, // ST1i16 = 2244
    Feature_HasNEON | 0, // ST1i16_POST = 2245
    Feature_HasNEON | 0, // ST1i32 = 2246
    Feature_HasNEON | 0, // ST1i32_POST = 2247
    Feature_HasNEON | 0, // ST1i64 = 2248
    Feature_HasNEON | 0, // ST1i64_POST = 2249
    Feature_HasNEON | 0, // ST1i8 = 2250
    Feature_HasNEON | 0, // ST1i8_POST = 2251
    Feature_HasNEON | 0, // ST2Twov16b = 2252
    Feature_HasNEON | 0, // ST2Twov16b_POST = 2253
    Feature_HasNEON | 0, // ST2Twov2d = 2254
    Feature_HasNEON | 0, // ST2Twov2d_POST = 2255
    Feature_HasNEON | 0, // ST2Twov2s = 2256
    Feature_HasNEON | 0, // ST2Twov2s_POST = 2257
    Feature_HasNEON | 0, // ST2Twov4h = 2258
    Feature_HasNEON | 0, // ST2Twov4h_POST = 2259
    Feature_HasNEON | 0, // ST2Twov4s = 2260
    Feature_HasNEON | 0, // ST2Twov4s_POST = 2261
    Feature_HasNEON | 0, // ST2Twov8b = 2262
    Feature_HasNEON | 0, // ST2Twov8b_POST = 2263
    Feature_HasNEON | 0, // ST2Twov8h = 2264
    Feature_HasNEON | 0, // ST2Twov8h_POST = 2265
    Feature_HasNEON | 0, // ST2i16 = 2266
    Feature_HasNEON | 0, // ST2i16_POST = 2267
    Feature_HasNEON | 0, // ST2i32 = 2268
    Feature_HasNEON | 0, // ST2i32_POST = 2269
    Feature_HasNEON | 0, // ST2i64 = 2270
    Feature_HasNEON | 0, // ST2i64_POST = 2271
    Feature_HasNEON | 0, // ST2i8 = 2272
    Feature_HasNEON | 0, // ST2i8_POST = 2273
    Feature_HasNEON | 0, // ST3Threev16b = 2274
    Feature_HasNEON | 0, // ST3Threev16b_POST = 2275
    Feature_HasNEON | 0, // ST3Threev2d = 2276
    Feature_HasNEON | 0, // ST3Threev2d_POST = 2277
    Feature_HasNEON | 0, // ST3Threev2s = 2278
    Feature_HasNEON | 0, // ST3Threev2s_POST = 2279
    Feature_HasNEON | 0, // ST3Threev4h = 2280
    Feature_HasNEON | 0, // ST3Threev4h_POST = 2281
    Feature_HasNEON | 0, // ST3Threev4s = 2282
    Feature_HasNEON | 0, // ST3Threev4s_POST = 2283
    Feature_HasNEON | 0, // ST3Threev8b = 2284
    Feature_HasNEON | 0, // ST3Threev8b_POST = 2285
    Feature_HasNEON | 0, // ST3Threev8h = 2286
    Feature_HasNEON | 0, // ST3Threev8h_POST = 2287
    Feature_HasNEON | 0, // ST3i16 = 2288
    Feature_HasNEON | 0, // ST3i16_POST = 2289
    Feature_HasNEON | 0, // ST3i32 = 2290
    Feature_HasNEON | 0, // ST3i32_POST = 2291
    Feature_HasNEON | 0, // ST3i64 = 2292
    Feature_HasNEON | 0, // ST3i64_POST = 2293
    Feature_HasNEON | 0, // ST3i8 = 2294
    Feature_HasNEON | 0, // ST3i8_POST = 2295
    Feature_HasNEON | 0, // ST4Fourv16b = 2296
    Feature_HasNEON | 0, // ST4Fourv16b_POST = 2297
    Feature_HasNEON | 0, // ST4Fourv2d = 2298
    Feature_HasNEON | 0, // ST4Fourv2d_POST = 2299
    Feature_HasNEON | 0, // ST4Fourv2s = 2300
    Feature_HasNEON | 0, // ST4Fourv2s_POST = 2301
    Feature_HasNEON | 0, // ST4Fourv4h = 2302
    Feature_HasNEON | 0, // ST4Fourv4h_POST = 2303
    Feature_HasNEON | 0, // ST4Fourv4s = 2304
    Feature_HasNEON | 0, // ST4Fourv4s_POST = 2305
    Feature_HasNEON | 0, // ST4Fourv8b = 2306
    Feature_HasNEON | 0, // ST4Fourv8b_POST = 2307
    Feature_HasNEON | 0, // ST4Fourv8h = 2308
    Feature_HasNEON | 0, // ST4Fourv8h_POST = 2309
    Feature_HasNEON | 0, // ST4i16 = 2310
    Feature_HasNEON | 0, // ST4i16_POST = 2311
    Feature_HasNEON | 0, // ST4i32 = 2312
    Feature_HasNEON | 0, // ST4i32_POST = 2313
    Feature_HasNEON | 0, // ST4i64 = 2314
    Feature_HasNEON | 0, // ST4i64_POST = 2315
    Feature_HasNEON | 0, // ST4i8 = 2316
    Feature_HasNEON | 0, // ST4i8_POST = 2317
    Feature_HasV8_1a | 0, // STLLRB = 2318
    Feature_HasV8_1a | 0, // STLLRH = 2319
    Feature_HasV8_1a | 0, // STLLRW = 2320
    Feature_HasV8_1a | 0, // STLLRX = 2321
    0, // STLRB = 2322
    0, // STLRH = 2323
    0, // STLRW = 2324
    0, // STLRX = 2325
    0, // STLXPW = 2326
    0, // STLXPX = 2327
    0, // STLXRB = 2328
    0, // STLXRH = 2329
    0, // STLXRW = 2330
    0, // STLXRX = 2331
    0, // STNPDi = 2332
    0, // STNPQi = 2333
    0, // STNPSi = 2334
    0, // STNPWi = 2335
    0, // STNPXi = 2336
    0, // STPDi = 2337
    0, // STPDpost = 2338
    0, // STPDpre = 2339
    0, // STPQi = 2340
    0, // STPQpost = 2341
    0, // STPQpre = 2342
    0, // STPSi = 2343
    0, // STPSpost = 2344
    0, // STPSpre = 2345
    0, // STPWi = 2346
    0, // STPWpost = 2347
    0, // STPWpre = 2348
    0, // STPXi = 2349
    0, // STPXpost = 2350
    0, // STPXpre = 2351
    0, // STRBBpost = 2352
    0, // STRBBpre = 2353
    0, // STRBBroW = 2354
    0, // STRBBroX = 2355
    0, // STRBBui = 2356
    0, // STRBpost = 2357
    0, // STRBpre = 2358
    0, // STRBroW = 2359
    0, // STRBroX = 2360
    0, // STRBui = 2361
    0, // STRDpost = 2362
    0, // STRDpre = 2363
    0, // STRDroW = 2364
    0, // STRDroX = 2365
    0, // STRDui = 2366
    0, // STRHHpost = 2367
    0, // STRHHpre = 2368
    0, // STRHHroW = 2369
    0, // STRHHroX = 2370
    0, // STRHHui = 2371
    0, // STRHpost = 2372
    0, // STRHpre = 2373
    0, // STRHroW = 2374
    0, // STRHroX = 2375
    0, // STRHui = 2376
    0, // STRQpost = 2377
    0, // STRQpre = 2378
    0, // STRQroW = 2379
    0, // STRQroX = 2380
    0, // STRQui = 2381
    0, // STRSpost = 2382
    0, // STRSpre = 2383
    0, // STRSroW = 2384
    0, // STRSroX = 2385
    0, // STRSui = 2386
    0, // STRWpost = 2387
    0, // STRWpre = 2388
    0, // STRWroW = 2389
    0, // STRWroX = 2390
    0, // STRWui = 2391
    0, // STRXpost = 2392
    0, // STRXpre = 2393
    0, // STRXroW = 2394
    0, // STRXroX = 2395
    0, // STRXui = 2396
    0, // STTRBi = 2397
    0, // STTRHi = 2398
    0, // STTRWi = 2399
    0, // STTRXi = 2400
    0, // STURBBi = 2401
    0, // STURBi = 2402
    0, // STURDi = 2403
    0, // STURHHi = 2404
    0, // STURHi = 2405
    0, // STURQi = 2406
    0, // STURSi = 2407
    0, // STURWi = 2408
    0, // STURXi = 2409
    0, // STXPW = 2410
    0, // STXPX = 2411
    0, // STXRB = 2412
    0, // STXRH = 2413
    0, // STXRW = 2414
    0, // STXRX = 2415
    Feature_HasNEON | 0, // SUBHNv2i64_v2i32 = 2416
    Feature_HasNEON | 0, // SUBHNv2i64_v4i32 = 2417
    Feature_HasNEON | 0, // SUBHNv4i32_v4i16 = 2418
    Feature_HasNEON | 0, // SUBHNv4i32_v8i16 = 2419
    Feature_HasNEON | 0, // SUBHNv8i16_v16i8 = 2420
    Feature_HasNEON | 0, // SUBHNv8i16_v8i8 = 2421
    0, // SUBSWri = 2422
    0, // SUBSWrr = 2423
    0, // SUBSWrs = 2424
    0, // SUBSWrx = 2425
    0, // SUBSXri = 2426
    0, // SUBSXrr = 2427
    0, // SUBSXrs = 2428
    0, // SUBSXrx = 2429
    0, // SUBSXrx64 = 2430
    0, // SUBWri = 2431
    0, // SUBWrr = 2432
    0, // SUBWrs = 2433
    0, // SUBWrx = 2434
    0, // SUBXri = 2435
    0, // SUBXrr = 2436
    0, // SUBXrs = 2437
    0, // SUBXrx = 2438
    0, // SUBXrx64 = 2439
    Feature_HasNEON | 0, // SUBv16i8 = 2440
    Feature_HasNEON | 0, // SUBv1i64 = 2441
    Feature_HasNEON | 0, // SUBv2i32 = 2442
    Feature_HasNEON | 0, // SUBv2i64 = 2443
    Feature_HasNEON | 0, // SUBv4i16 = 2444
    Feature_HasNEON | 0, // SUBv4i32 = 2445
    Feature_HasNEON | 0, // SUBv8i16 = 2446
    Feature_HasNEON | 0, // SUBv8i8 = 2447
    Feature_HasNEON | 0, // SUQADDv16i8 = 2448
    Feature_HasNEON | 0, // SUQADDv1i16 = 2449
    Feature_HasNEON | 0, // SUQADDv1i32 = 2450
    Feature_HasNEON | 0, // SUQADDv1i64 = 2451
    Feature_HasNEON | 0, // SUQADDv1i8 = 2452
    Feature_HasNEON | 0, // SUQADDv2i32 = 2453
    Feature_HasNEON | 0, // SUQADDv2i64 = 2454
    Feature_HasNEON | 0, // SUQADDv4i16 = 2455
    Feature_HasNEON | 0, // SUQADDv4i32 = 2456
    Feature_HasNEON | 0, // SUQADDv8i16 = 2457
    Feature_HasNEON | 0, // SUQADDv8i8 = 2458
    0, // SVC = 2459
    Feature_HasLSE | 0, // SWPALb = 2460
    Feature_HasLSE | 0, // SWPALd = 2461
    Feature_HasLSE | 0, // SWPALh = 2462
    Feature_HasLSE | 0, // SWPALs = 2463
    Feature_HasLSE | 0, // SWPAb = 2464
    Feature_HasLSE | 0, // SWPAd = 2465
    Feature_HasLSE | 0, // SWPAh = 2466
    Feature_HasLSE | 0, // SWPAs = 2467
    Feature_HasLSE | 0, // SWPLb = 2468
    Feature_HasLSE | 0, // SWPLd = 2469
    Feature_HasLSE | 0, // SWPLh = 2470
    Feature_HasLSE | 0, // SWPLs = 2471
    Feature_HasLSE | 0, // SWPb = 2472
    Feature_HasLSE | 0, // SWPd = 2473
    Feature_HasLSE | 0, // SWPh = 2474
    Feature_HasLSE | 0, // SWPs = 2475
    0, // SYSLxt = 2476
    0, // SYSxt = 2477
    Feature_HasNEON | 0, // TBLv16i8Four = 2478
    Feature_HasNEON | 0, // TBLv16i8One = 2479
    Feature_HasNEON | 0, // TBLv16i8Three = 2480
    Feature_HasNEON | 0, // TBLv16i8Two = 2481
    Feature_HasNEON | 0, // TBLv8i8Four = 2482
    Feature_HasNEON | 0, // TBLv8i8One = 2483
    Feature_HasNEON | 0, // TBLv8i8Three = 2484
    Feature_HasNEON | 0, // TBLv8i8Two = 2485
    0, // TBNZW = 2486
    0, // TBNZX = 2487
    Feature_HasNEON | 0, // TBXv16i8Four = 2488
    Feature_HasNEON | 0, // TBXv16i8One = 2489
    Feature_HasNEON | 0, // TBXv16i8Three = 2490
    Feature_HasNEON | 0, // TBXv16i8Two = 2491
    Feature_HasNEON | 0, // TBXv8i8Four = 2492
    Feature_HasNEON | 0, // TBXv8i8One = 2493
    Feature_HasNEON | 0, // TBXv8i8Three = 2494
    Feature_HasNEON | 0, // TBXv8i8Two = 2495
    0, // TBZW = 2496
    0, // TBZX = 2497
    0, // TCRETURNdi = 2498
    0, // TCRETURNri = 2499
    0, // TLSDESCCALL = 2500
    0, // TLSDESC_CALLSEQ = 2501
    Feature_HasNEON | 0, // TRN1v16i8 = 2502
    Feature_HasNEON | 0, // TRN1v2i32 = 2503
    Feature_HasNEON | 0, // TRN1v2i64 = 2504
    Feature_HasNEON | 0, // TRN1v4i16 = 2505
    Feature_HasNEON | 0, // TRN1v4i32 = 2506
    Feature_HasNEON | 0, // TRN1v8i16 = 2507
    Feature_HasNEON | 0, // TRN1v8i8 = 2508
    Feature_HasNEON | 0, // TRN2v16i8 = 2509
    Feature_HasNEON | 0, // TRN2v2i32 = 2510
    Feature_HasNEON | 0, // TRN2v2i64 = 2511
    Feature_HasNEON | 0, // TRN2v4i16 = 2512
    Feature_HasNEON | 0, // TRN2v4i32 = 2513
    Feature_HasNEON | 0, // TRN2v8i16 = 2514
    Feature_HasNEON | 0, // TRN2v8i8 = 2515
    Feature_HasNEON | 0, // UABALv16i8_v8i16 = 2516
    Feature_HasNEON | 0, // UABALv2i32_v2i64 = 2517
    Feature_HasNEON | 0, // UABALv4i16_v4i32 = 2518
    Feature_HasNEON | 0, // UABALv4i32_v2i64 = 2519
    Feature_HasNEON | 0, // UABALv8i16_v4i32 = 2520
    Feature_HasNEON | 0, // UABALv8i8_v8i16 = 2521
    Feature_HasNEON | 0, // UABAv16i8 = 2522
    Feature_HasNEON | 0, // UABAv2i32 = 2523
    Feature_HasNEON | 0, // UABAv4i16 = 2524
    Feature_HasNEON | 0, // UABAv4i32 = 2525
    Feature_HasNEON | 0, // UABAv8i16 = 2526
    Feature_HasNEON | 0, // UABAv8i8 = 2527
    Feature_HasNEON | 0, // UABDLv16i8_v8i16 = 2528
    Feature_HasNEON | 0, // UABDLv2i32_v2i64 = 2529
    Feature_HasNEON | 0, // UABDLv4i16_v4i32 = 2530
    Feature_HasNEON | 0, // UABDLv4i32_v2i64 = 2531
    Feature_HasNEON | 0, // UABDLv8i16_v4i32 = 2532
    Feature_HasNEON | 0, // UABDLv8i8_v8i16 = 2533
    Feature_HasNEON | 0, // UABDv16i8 = 2534
    Feature_HasNEON | 0, // UABDv2i32 = 2535
    Feature_HasNEON | 0, // UABDv4i16 = 2536
    Feature_HasNEON | 0, // UABDv4i32 = 2537
    Feature_HasNEON | 0, // UABDv8i16 = 2538
    Feature_HasNEON | 0, // UABDv8i8 = 2539
    Feature_HasNEON | 0, // UADALPv16i8_v8i16 = 2540
    Feature_HasNEON | 0, // UADALPv2i32_v1i64 = 2541
    Feature_HasNEON | 0, // UADALPv4i16_v2i32 = 2542
    Feature_HasNEON | 0, // UADALPv4i32_v2i64 = 2543
    Feature_HasNEON | 0, // UADALPv8i16_v4i32 = 2544
    Feature_HasNEON | 0, // UADALPv8i8_v4i16 = 2545
    Feature_HasNEON | 0, // UADDLPv16i8_v8i16 = 2546
    Feature_HasNEON | 0, // UADDLPv2i32_v1i64 = 2547
    Feature_HasNEON | 0, // UADDLPv4i16_v2i32 = 2548
    Feature_HasNEON | 0, // UADDLPv4i32_v2i64 = 2549
    Feature_HasNEON | 0, // UADDLPv8i16_v4i32 = 2550
    Feature_HasNEON | 0, // UADDLPv8i8_v4i16 = 2551
    Feature_HasNEON | 0, // UADDLVv16i8v = 2552
    Feature_HasNEON | 0, // UADDLVv4i16v = 2553
    Feature_HasNEON | 0, // UADDLVv4i32v = 2554
    Feature_HasNEON | 0, // UADDLVv8i16v = 2555
    Feature_HasNEON | 0, // UADDLVv8i8v = 2556
    Feature_HasNEON | 0, // UADDLv16i8_v8i16 = 2557
    Feature_HasNEON | 0, // UADDLv2i32_v2i64 = 2558
    Feature_HasNEON | 0, // UADDLv4i16_v4i32 = 2559
    Feature_HasNEON | 0, // UADDLv4i32_v2i64 = 2560
    Feature_HasNEON | 0, // UADDLv8i16_v4i32 = 2561
    Feature_HasNEON | 0, // UADDLv8i8_v8i16 = 2562
    Feature_HasNEON | 0, // UADDWv16i8_v8i16 = 2563
    Feature_HasNEON | 0, // UADDWv2i32_v2i64 = 2564
    Feature_HasNEON | 0, // UADDWv4i16_v4i32 = 2565
    Feature_HasNEON | 0, // UADDWv4i32_v2i64 = 2566
    Feature_HasNEON | 0, // UADDWv8i16_v4i32 = 2567
    Feature_HasNEON | 0, // UADDWv8i8_v8i16 = 2568
    0, // UBFMWri = 2569
    0, // UBFMXri = 2570
    Feature_HasFPARMv8 | 0, // UCVTFSWDri = 2571
    Feature_HasFullFP16 | 0, // UCVTFSWHri = 2572
    Feature_HasFPARMv8 | 0, // UCVTFSWSri = 2573
    Feature_HasFPARMv8 | 0, // UCVTFSXDri = 2574
    Feature_HasFullFP16 | 0, // UCVTFSXHri = 2575
    Feature_HasFPARMv8 | 0, // UCVTFSXSri = 2576
    Feature_HasFPARMv8 | 0, // UCVTFUWDri = 2577
    Feature_HasFullFP16 | 0, // UCVTFUWHri = 2578
    Feature_HasFPARMv8 | 0, // UCVTFUWSri = 2579
    Feature_HasFPARMv8 | 0, // UCVTFUXDri = 2580
    Feature_HasFullFP16 | 0, // UCVTFUXHri = 2581
    Feature_HasFPARMv8 | 0, // UCVTFUXSri = 2582
    Feature_HasNEON | 0, // UCVTFd = 2583
    Feature_HasNEON | Feature_HasFullFP16 | 0, // UCVTFh = 2584
    Feature_HasNEON | 0, // UCVTFs = 2585
    Feature_HasNEON | Feature_HasFullFP16 | 0, // UCVTFv1i16 = 2586
    Feature_HasNEON | 0, // UCVTFv1i32 = 2587
    Feature_HasNEON | 0, // UCVTFv1i64 = 2588
    Feature_HasNEON | 0, // UCVTFv2f32 = 2589
    Feature_HasNEON | 0, // UCVTFv2f64 = 2590
    Feature_HasNEON | 0, // UCVTFv2i32_shift = 2591
    Feature_HasNEON | 0, // UCVTFv2i64_shift = 2592
    Feature_HasNEON | Feature_HasFullFP16 | 0, // UCVTFv4f16 = 2593
    Feature_HasNEON | 0, // UCVTFv4f32 = 2594
    Feature_HasNEON | Feature_HasFullFP16 | 0, // UCVTFv4i16_shift = 2595
    Feature_HasNEON | 0, // UCVTFv4i32_shift = 2596
    Feature_HasNEON | Feature_HasFullFP16 | 0, // UCVTFv8f16 = 2597
    Feature_HasNEON | Feature_HasFullFP16 | 0, // UCVTFv8i16_shift = 2598
    0, // UDIVWr = 2599
    0, // UDIVXr = 2600
    Feature_HasNEON | 0, // UHADDv16i8 = 2601
    Feature_HasNEON | 0, // UHADDv2i32 = 2602
    Feature_HasNEON | 0, // UHADDv4i16 = 2603
    Feature_HasNEON | 0, // UHADDv4i32 = 2604
    Feature_HasNEON | 0, // UHADDv8i16 = 2605
    Feature_HasNEON | 0, // UHADDv8i8 = 2606
    Feature_HasNEON | 0, // UHSUBv16i8 = 2607
    Feature_HasNEON | 0, // UHSUBv2i32 = 2608
    Feature_HasNEON | 0, // UHSUBv4i16 = 2609
    Feature_HasNEON | 0, // UHSUBv4i32 = 2610
    Feature_HasNEON | 0, // UHSUBv8i16 = 2611
    Feature_HasNEON | 0, // UHSUBv8i8 = 2612
    0, // UMADDLrrr = 2613
    Feature_HasNEON | 0, // UMAXPv16i8 = 2614
    Feature_HasNEON | 0, // UMAXPv2i32 = 2615
    Feature_HasNEON | 0, // UMAXPv4i16 = 2616
    Feature_HasNEON | 0, // UMAXPv4i32 = 2617
    Feature_HasNEON | 0, // UMAXPv8i16 = 2618
    Feature_HasNEON | 0, // UMAXPv8i8 = 2619
    Feature_HasNEON | 0, // UMAXVv16i8v = 2620
    Feature_HasNEON | 0, // UMAXVv4i16v = 2621
    Feature_HasNEON | 0, // UMAXVv4i32v = 2622
    Feature_HasNEON | 0, // UMAXVv8i16v = 2623
    Feature_HasNEON | 0, // UMAXVv8i8v = 2624
    Feature_HasNEON | 0, // UMAXv16i8 = 2625
    Feature_HasNEON | 0, // UMAXv2i32 = 2626
    Feature_HasNEON | 0, // UMAXv4i16 = 2627
    Feature_HasNEON | 0, // UMAXv4i32 = 2628
    Feature_HasNEON | 0, // UMAXv8i16 = 2629
    Feature_HasNEON | 0, // UMAXv8i8 = 2630
    Feature_HasNEON | 0, // UMINPv16i8 = 2631
    Feature_HasNEON | 0, // UMINPv2i32 = 2632
    Feature_HasNEON | 0, // UMINPv4i16 = 2633
    Feature_HasNEON | 0, // UMINPv4i32 = 2634
    Feature_HasNEON | 0, // UMINPv8i16 = 2635
    Feature_HasNEON | 0, // UMINPv8i8 = 2636
    Feature_HasNEON | 0, // UMINVv16i8v = 2637
    Feature_HasNEON | 0, // UMINVv4i16v = 2638
    Feature_HasNEON | 0, // UMINVv4i32v = 2639
    Feature_HasNEON | 0, // UMINVv8i16v = 2640
    Feature_HasNEON | 0, // UMINVv8i8v = 2641
    Feature_HasNEON | 0, // UMINv16i8 = 2642
    Feature_HasNEON | 0, // UMINv2i32 = 2643
    Feature_HasNEON | 0, // UMINv4i16 = 2644
    Feature_HasNEON | 0, // UMINv4i32 = 2645
    Feature_HasNEON | 0, // UMINv8i16 = 2646
    Feature_HasNEON | 0, // UMINv8i8 = 2647
    Feature_HasNEON | 0, // UMLALv16i8_v8i16 = 2648
    Feature_HasNEON | 0, // UMLALv2i32_indexed = 2649
    Feature_HasNEON | 0, // UMLALv2i32_v2i64 = 2650
    Feature_HasNEON | 0, // UMLALv4i16_indexed = 2651
    Feature_HasNEON | 0, // UMLALv4i16_v4i32 = 2652
    Feature_HasNEON | 0, // UMLALv4i32_indexed = 2653
    Feature_HasNEON | 0, // UMLALv4i32_v2i64 = 2654
    Feature_HasNEON | 0, // UMLALv8i16_indexed = 2655
    Feature_HasNEON | 0, // UMLALv8i16_v4i32 = 2656
    Feature_HasNEON | 0, // UMLALv8i8_v8i16 = 2657
    Feature_HasNEON | 0, // UMLSLv16i8_v8i16 = 2658
    Feature_HasNEON | 0, // UMLSLv2i32_indexed = 2659
    Feature_HasNEON | 0, // UMLSLv2i32_v2i64 = 2660
    Feature_HasNEON | 0, // UMLSLv4i16_indexed = 2661
    Feature_HasNEON | 0, // UMLSLv4i16_v4i32 = 2662
    Feature_HasNEON | 0, // UMLSLv4i32_indexed = 2663
    Feature_HasNEON | 0, // UMLSLv4i32_v2i64 = 2664
    Feature_HasNEON | 0, // UMLSLv8i16_indexed = 2665
    Feature_HasNEON | 0, // UMLSLv8i16_v4i32 = 2666
    Feature_HasNEON | 0, // UMLSLv8i8_v8i16 = 2667
    Feature_HasNEON | 0, // UMOVvi16 = 2668
    Feature_HasNEON | 0, // UMOVvi32 = 2669
    Feature_HasNEON | 0, // UMOVvi64 = 2670
    Feature_HasNEON | 0, // UMOVvi8 = 2671
    0, // UMSUBLrrr = 2672
    0, // UMULHrr = 2673
    Feature_HasNEON | 0, // UMULLv16i8_v8i16 = 2674
    Feature_HasNEON | 0, // UMULLv2i32_indexed = 2675
    Feature_HasNEON | 0, // UMULLv2i32_v2i64 = 2676
    Feature_HasNEON | 0, // UMULLv4i16_indexed = 2677
    Feature_HasNEON | 0, // UMULLv4i16_v4i32 = 2678
    Feature_HasNEON | 0, // UMULLv4i32_indexed = 2679
    Feature_HasNEON | 0, // UMULLv4i32_v2i64 = 2680
    Feature_HasNEON | 0, // UMULLv8i16_indexed = 2681
    Feature_HasNEON | 0, // UMULLv8i16_v4i32 = 2682
    Feature_HasNEON | 0, // UMULLv8i8_v8i16 = 2683
    Feature_HasNEON | 0, // UQADDv16i8 = 2684
    Feature_HasNEON | 0, // UQADDv1i16 = 2685
    Feature_HasNEON | 0, // UQADDv1i32 = 2686
    Feature_HasNEON | 0, // UQADDv1i64 = 2687
    Feature_HasNEON | 0, // UQADDv1i8 = 2688
    Feature_HasNEON | 0, // UQADDv2i32 = 2689
    Feature_HasNEON | 0, // UQADDv2i64 = 2690
    Feature_HasNEON | 0, // UQADDv4i16 = 2691
    Feature_HasNEON | 0, // UQADDv4i32 = 2692
    Feature_HasNEON | 0, // UQADDv8i16 = 2693
    Feature_HasNEON | 0, // UQADDv8i8 = 2694
    Feature_HasNEON | 0, // UQRSHLv16i8 = 2695
    Feature_HasNEON | 0, // UQRSHLv1i16 = 2696
    Feature_HasNEON | 0, // UQRSHLv1i32 = 2697
    Feature_HasNEON | 0, // UQRSHLv1i64 = 2698
    Feature_HasNEON | 0, // UQRSHLv1i8 = 2699
    Feature_HasNEON | 0, // UQRSHLv2i32 = 2700
    Feature_HasNEON | 0, // UQRSHLv2i64 = 2701
    Feature_HasNEON | 0, // UQRSHLv4i16 = 2702
    Feature_HasNEON | 0, // UQRSHLv4i32 = 2703
    Feature_HasNEON | 0, // UQRSHLv8i16 = 2704
    Feature_HasNEON | 0, // UQRSHLv8i8 = 2705
    Feature_HasNEON | 0, // UQRSHRNb = 2706
    Feature_HasNEON | 0, // UQRSHRNh = 2707
    Feature_HasNEON | 0, // UQRSHRNs = 2708
    Feature_HasNEON | 0, // UQRSHRNv16i8_shift = 2709
    Feature_HasNEON | 0, // UQRSHRNv2i32_shift = 2710
    Feature_HasNEON | 0, // UQRSHRNv4i16_shift = 2711
    Feature_HasNEON | 0, // UQRSHRNv4i32_shift = 2712
    Feature_HasNEON | 0, // UQRSHRNv8i16_shift = 2713
    Feature_HasNEON | 0, // UQRSHRNv8i8_shift = 2714
    Feature_HasNEON | 0, // UQSHLb = 2715
    Feature_HasNEON | 0, // UQSHLd = 2716
    Feature_HasNEON | 0, // UQSHLh = 2717
    Feature_HasNEON | 0, // UQSHLs = 2718
    Feature_HasNEON | 0, // UQSHLv16i8 = 2719
    Feature_HasNEON | 0, // UQSHLv16i8_shift = 2720
    Feature_HasNEON | 0, // UQSHLv1i16 = 2721
    Feature_HasNEON | 0, // UQSHLv1i32 = 2722
    Feature_HasNEON | 0, // UQSHLv1i64 = 2723
    Feature_HasNEON | 0, // UQSHLv1i8 = 2724
    Feature_HasNEON | 0, // UQSHLv2i32 = 2725
    Feature_HasNEON | 0, // UQSHLv2i32_shift = 2726
    Feature_HasNEON | 0, // UQSHLv2i64 = 2727
    Feature_HasNEON | 0, // UQSHLv2i64_shift = 2728
    Feature_HasNEON | 0, // UQSHLv4i16 = 2729
    Feature_HasNEON | 0, // UQSHLv4i16_shift = 2730
    Feature_HasNEON | 0, // UQSHLv4i32 = 2731
    Feature_HasNEON | 0, // UQSHLv4i32_shift = 2732
    Feature_HasNEON | 0, // UQSHLv8i16 = 2733
    Feature_HasNEON | 0, // UQSHLv8i16_shift = 2734
    Feature_HasNEON | 0, // UQSHLv8i8 = 2735
    Feature_HasNEON | 0, // UQSHLv8i8_shift = 2736
    Feature_HasNEON | 0, // UQSHRNb = 2737
    Feature_HasNEON | 0, // UQSHRNh = 2738
    Feature_HasNEON | 0, // UQSHRNs = 2739
    Feature_HasNEON | 0, // UQSHRNv16i8_shift = 2740
    Feature_HasNEON | 0, // UQSHRNv2i32_shift = 2741
    Feature_HasNEON | 0, // UQSHRNv4i16_shift = 2742
    Feature_HasNEON | 0, // UQSHRNv4i32_shift = 2743
    Feature_HasNEON | 0, // UQSHRNv8i16_shift = 2744
    Feature_HasNEON | 0, // UQSHRNv8i8_shift = 2745
    Feature_HasNEON | 0, // UQSUBv16i8 = 2746
    Feature_HasNEON | 0, // UQSUBv1i16 = 2747
    Feature_HasNEON | 0, // UQSUBv1i32 = 2748
    Feature_HasNEON | 0, // UQSUBv1i64 = 2749
    Feature_HasNEON | 0, // UQSUBv1i8 = 2750
    Feature_HasNEON | 0, // UQSUBv2i32 = 2751
    Feature_HasNEON | 0, // UQSUBv2i64 = 2752
    Feature_HasNEON | 0, // UQSUBv4i16 = 2753
    Feature_HasNEON | 0, // UQSUBv4i32 = 2754
    Feature_HasNEON | 0, // UQSUBv8i16 = 2755
    Feature_HasNEON | 0, // UQSUBv8i8 = 2756
    Feature_HasNEON | 0, // UQXTNv16i8 = 2757
    Feature_HasNEON | 0, // UQXTNv1i16 = 2758
    Feature_HasNEON | 0, // UQXTNv1i32 = 2759
    Feature_HasNEON | 0, // UQXTNv1i8 = 2760
    Feature_HasNEON | 0, // UQXTNv2i32 = 2761
    Feature_HasNEON | 0, // UQXTNv4i16 = 2762
    Feature_HasNEON | 0, // UQXTNv4i32 = 2763
    Feature_HasNEON | 0, // UQXTNv8i16 = 2764
    Feature_HasNEON | 0, // UQXTNv8i8 = 2765
    Feature_HasNEON | 0, // URECPEv2i32 = 2766
    Feature_HasNEON | 0, // URECPEv4i32 = 2767
    Feature_HasNEON | 0, // URHADDv16i8 = 2768
    Feature_HasNEON | 0, // URHADDv2i32 = 2769
    Feature_HasNEON | 0, // URHADDv4i16 = 2770
    Feature_HasNEON | 0, // URHADDv4i32 = 2771
    Feature_HasNEON | 0, // URHADDv8i16 = 2772
    Feature_HasNEON | 0, // URHADDv8i8 = 2773
    Feature_HasNEON | 0, // URSHLv16i8 = 2774
    Feature_HasNEON | 0, // URSHLv1i64 = 2775
    Feature_HasNEON | 0, // URSHLv2i32 = 2776
    Feature_HasNEON | 0, // URSHLv2i64 = 2777
    Feature_HasNEON | 0, // URSHLv4i16 = 2778
    Feature_HasNEON | 0, // URSHLv4i32 = 2779
    Feature_HasNEON | 0, // URSHLv8i16 = 2780
    Feature_HasNEON | 0, // URSHLv8i8 = 2781
    Feature_HasNEON | 0, // URSHRd = 2782
    Feature_HasNEON | 0, // URSHRv16i8_shift = 2783
    Feature_HasNEON | 0, // URSHRv2i32_shift = 2784
    Feature_HasNEON | 0, // URSHRv2i64_shift = 2785
    Feature_HasNEON | 0, // URSHRv4i16_shift = 2786
    Feature_HasNEON | 0, // URSHRv4i32_shift = 2787
    Feature_HasNEON | 0, // URSHRv8i16_shift = 2788
    Feature_HasNEON | 0, // URSHRv8i8_shift = 2789
    Feature_HasNEON | 0, // URSQRTEv2i32 = 2790
    Feature_HasNEON | 0, // URSQRTEv4i32 = 2791
    Feature_HasNEON | 0, // URSRAd = 2792
    Feature_HasNEON | 0, // URSRAv16i8_shift = 2793
    Feature_HasNEON | 0, // URSRAv2i32_shift = 2794
    Feature_HasNEON | 0, // URSRAv2i64_shift = 2795
    Feature_HasNEON | 0, // URSRAv4i16_shift = 2796
    Feature_HasNEON | 0, // URSRAv4i32_shift = 2797
    Feature_HasNEON | 0, // URSRAv8i16_shift = 2798
    Feature_HasNEON | 0, // URSRAv8i8_shift = 2799
    Feature_HasNEON | 0, // USHLLv16i8_shift = 2800
    Feature_HasNEON | 0, // USHLLv2i32_shift = 2801
    Feature_HasNEON | 0, // USHLLv4i16_shift = 2802
    Feature_HasNEON | 0, // USHLLv4i32_shift = 2803
    Feature_HasNEON | 0, // USHLLv8i16_shift = 2804
    Feature_HasNEON | 0, // USHLLv8i8_shift = 2805
    Feature_HasNEON | 0, // USHLv16i8 = 2806
    Feature_HasNEON | 0, // USHLv1i64 = 2807
    Feature_HasNEON | 0, // USHLv2i32 = 2808
    Feature_HasNEON | 0, // USHLv2i64 = 2809
    Feature_HasNEON | 0, // USHLv4i16 = 2810
    Feature_HasNEON | 0, // USHLv4i32 = 2811
    Feature_HasNEON | 0, // USHLv8i16 = 2812
    Feature_HasNEON | 0, // USHLv8i8 = 2813
    Feature_HasNEON | 0, // USHRd = 2814
    Feature_HasNEON | 0, // USHRv16i8_shift = 2815
    Feature_HasNEON | 0, // USHRv2i32_shift = 2816
    Feature_HasNEON | 0, // USHRv2i64_shift = 2817
    Feature_HasNEON | 0, // USHRv4i16_shift = 2818
    Feature_HasNEON | 0, // USHRv4i32_shift = 2819
    Feature_HasNEON | 0, // USHRv8i16_shift = 2820
    Feature_HasNEON | 0, // USHRv8i8_shift = 2821
    Feature_HasNEON | 0, // USQADDv16i8 = 2822
    Feature_HasNEON | 0, // USQADDv1i16 = 2823
    Feature_HasNEON | 0, // USQADDv1i32 = 2824
    Feature_HasNEON | 0, // USQADDv1i64 = 2825
    Feature_HasNEON | 0, // USQADDv1i8 = 2826
    Feature_HasNEON | 0, // USQADDv2i32 = 2827
    Feature_HasNEON | 0, // USQADDv2i64 = 2828
    Feature_HasNEON | 0, // USQADDv4i16 = 2829
    Feature_HasNEON | 0, // USQADDv4i32 = 2830
    Feature_HasNEON | 0, // USQADDv8i16 = 2831
    Feature_HasNEON | 0, // USQADDv8i8 = 2832
    Feature_HasNEON | 0, // USRAd = 2833
    Feature_HasNEON | 0, // USRAv16i8_shift = 2834
    Feature_HasNEON | 0, // USRAv2i32_shift = 2835
    Feature_HasNEON | 0, // USRAv2i64_shift = 2836
    Feature_HasNEON | 0, // USRAv4i16_shift = 2837
    Feature_HasNEON | 0, // USRAv4i32_shift = 2838
    Feature_HasNEON | 0, // USRAv8i16_shift = 2839
    Feature_HasNEON | 0, // USRAv8i8_shift = 2840
    Feature_HasNEON | 0, // USUBLv16i8_v8i16 = 2841
    Feature_HasNEON | 0, // USUBLv2i32_v2i64 = 2842
    Feature_HasNEON | 0, // USUBLv4i16_v4i32 = 2843
    Feature_HasNEON | 0, // USUBLv4i32_v2i64 = 2844
    Feature_HasNEON | 0, // USUBLv8i16_v4i32 = 2845
    Feature_HasNEON | 0, // USUBLv8i8_v8i16 = 2846
    Feature_HasNEON | 0, // USUBWv16i8_v8i16 = 2847
    Feature_HasNEON | 0, // USUBWv2i32_v2i64 = 2848
    Feature_HasNEON | 0, // USUBWv4i16_v4i32 = 2849
    Feature_HasNEON | 0, // USUBWv4i32_v2i64 = 2850
    Feature_HasNEON | 0, // USUBWv8i16_v4i32 = 2851
    Feature_HasNEON | 0, // USUBWv8i8_v8i16 = 2852
    Feature_HasNEON | 0, // UZP1v16i8 = 2853
    Feature_HasNEON | 0, // UZP1v2i32 = 2854
    Feature_HasNEON | 0, // UZP1v2i64 = 2855
    Feature_HasNEON | 0, // UZP1v4i16 = 2856
    Feature_HasNEON | 0, // UZP1v4i32 = 2857
    Feature_HasNEON | 0, // UZP1v8i16 = 2858
    Feature_HasNEON | 0, // UZP1v8i8 = 2859
    Feature_HasNEON | 0, // UZP2v16i8 = 2860
    Feature_HasNEON | 0, // UZP2v2i32 = 2861
    Feature_HasNEON | 0, // UZP2v2i64 = 2862
    Feature_HasNEON | 0, // UZP2v4i16 = 2863
    Feature_HasNEON | 0, // UZP2v4i32 = 2864
    Feature_HasNEON | 0, // UZP2v8i16 = 2865
    Feature_HasNEON | 0, // UZP2v8i8 = 2866
    Feature_HasNEON | 0, // XTNv16i8 = 2867
    Feature_HasNEON | 0, // XTNv2i32 = 2868
    Feature_HasNEON | 0, // XTNv4i16 = 2869
    Feature_HasNEON | 0, // XTNv4i32 = 2870
    Feature_HasNEON | 0, // XTNv8i16 = 2871
    Feature_HasNEON | 0, // XTNv8i8 = 2872
    Feature_HasNEON | 0, // ZIP1v16i8 = 2873
    Feature_HasNEON | 0, // ZIP1v2i32 = 2874
    Feature_HasNEON | 0, // ZIP1v2i64 = 2875
    Feature_HasNEON | 0, // ZIP1v4i16 = 2876
    Feature_HasNEON | 0, // ZIP1v4i32 = 2877
    Feature_HasNEON | 0, // ZIP1v8i16 = 2878
    Feature_HasNEON | 0, // ZIP1v8i8 = 2879
    Feature_HasNEON | 0, // ZIP2v16i8 = 2880
    Feature_HasNEON | 0, // ZIP2v2i32 = 2881
    Feature_HasNEON | 0, // ZIP2v2i64 = 2882
    Feature_HasNEON | 0, // ZIP2v4i16 = 2883
    Feature_HasNEON | 0, // ZIP2v4i32 = 2884
    Feature_HasNEON | 0, // ZIP2v8i16 = 2885
    Feature_HasNEON | 0, // ZIP2v8i8 = 2886
  };

  assert(Inst.getOpcode() < 2887);
  uint64_t MissingFeatures =
      (AvailableFeatures & RequiredFeatures[Inst.getOpcode()]) ^
      RequiredFeatures[Inst.getOpcode()];
  if (MissingFeatures) {
    std::ostringstream Msg;
    Msg << "Attempting to emit " << MCII.getName(Inst.getOpcode()).str()
        << " instruction but the ";
    for (unsigned i = 0; i < 8 * sizeof(MissingFeatures); ++i)
      if (MissingFeatures & (1ULL << i))
        Msg << SubtargetFeatureNames[i] << " ";
    Msg << "predicate(s) are not met";
    report_fatal_error(Msg.str());
  }
#else
// Silence unused variable warning on targets that don't use MCII for other purposes (e.g. BPF).
(void)MCII;
#endif // NDEBUG
}
#endif
