/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void PPCInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ '#', 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'u', 'p', 9, 0,
  /* 16 */ 'x', 'v', 'c', 'm', 'p', 'n', 'e', 'd', 'p', 32, 32, 0,
  /* 28 */ 'x', 'v', 'c', 'm', 'p', 'n', 'e', 's', 'p', 32, 32, 0,
  /* 40 */ 'b', 'd', 'z', 'l', 'a', '+', 32, 0,
  /* 48 */ 'b', 'd', 'n', 'z', 'l', 'a', '+', 32, 0,
  /* 57 */ 'b', 'd', 'z', 'a', '+', 32, 0,
  /* 64 */ 'b', 'd', 'n', 'z', 'a', '+', 32, 0,
  /* 72 */ 'b', 'd', 'z', 'l', '+', 32, 0,
  /* 79 */ 'b', 'd', 'n', 'z', 'l', '+', 32, 0,
  /* 87 */ 'b', 'd', 'z', '+', 32, 0,
  /* 93 */ 'b', 'd', 'n', 'z', '+', 32, 0,
  /* 100 */ 'b', 'c', 'l', 32, '2', '0', ',', 32, '3', '1', ',', 32, 0,
  /* 113 */ 'b', 'c', 't', 'r', 'l', 10, 9, 'l', 'd', 32, '2', ',', 32, 0,
  /* 127 */ 'b', 'c', 32, '1', '2', ',', 32, 0,
  /* 135 */ 'b', 'c', 'l', 32, '1', '2', ',', 32, 0,
  /* 144 */ 'b', 'c', 'l', 'r', 'l', 32, '1', '2', ',', 32, 0,
  /* 155 */ 'b', 'c', 'c', 't', 'r', 'l', 32, '1', '2', ',', 32, 0,
  /* 167 */ 'b', 'c', 'l', 'r', 32, '1', '2', ',', 32, 0,
  /* 177 */ 'b', 'c', 'c', 't', 'r', 32, '1', '2', ',', 32, 0,
  /* 188 */ 'b', 'c', 32, '4', ',', 32, 0,
  /* 195 */ 'b', 'c', 'l', 32, '4', ',', 32, 0,
  /* 203 */ 'b', 'c', 'l', 'r', 'l', 32, '4', ',', 32, 0,
  /* 213 */ 'b', 'c', 'c', 't', 'r', 'l', 32, '4', ',', 32, 0,
  /* 224 */ 'b', 'c', 'l', 'r', 32, '4', ',', 32, 0,
  /* 233 */ 'b', 'c', 'c', 't', 'r', 32, '4', ',', 32, 0,
  /* 243 */ 'm', 't', 's', 'p', 'r', 32, '2', '5', '6', ',', 32, 0,
  /* 255 */ 'b', 'd', 'z', 'l', 'a', '-', 32, 0,
  /* 263 */ 'b', 'd', 'n', 'z', 'l', 'a', '-', 32, 0,
  /* 272 */ 'b', 'd', 'z', 'a', '-', 32, 0,
  /* 279 */ 'b', 'd', 'n', 'z', 'a', '-', 32, 0,
  /* 287 */ 'b', 'd', 'z', 'l', '-', 32, 0,
  /* 294 */ 'b', 'd', 'n', 'z', 'l', '-', 32, 0,
  /* 302 */ 'b', 'd', 'z', '-', 32, 0,
  /* 308 */ 'b', 'd', 'n', 'z', '-', 32, 0,
  /* 315 */ 'v', 'c', 'm', 'p', 'n', 'e', 'b', '.', 32, 0,
  /* 325 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', '.', 32, 0,
  /* 336 */ 'e', 'x', 't', 's', 'b', '.', 32, 0,
  /* 344 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', '.', 32, 0,
  /* 355 */ 'f', 's', 'u', 'b', '.', 32, 0,
  /* 362 */ 'f', 'm', 's', 'u', 'b', '.', 32, 0,
  /* 370 */ 'f', 'n', 'm', 's', 'u', 'b', '.', 32, 0,
  /* 379 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', '.', 32, 0,
  /* 390 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'b', '.', 32, 0,
  /* 401 */ 'a', 'd', 'd', 'c', '.', 32, 0,
  /* 408 */ 'a', 'n', 'd', 'c', '.', 32, 0,
  /* 415 */ 't', 'a', 'b', 'o', 'r', 't', 'd', 'c', '.', 32, 0,
  /* 426 */ 's', 'u', 'b', 'f', 'c', '.', 32, 0,
  /* 434 */ 's', 'u', 'b', 'i', 'c', '.', 32, 0,
  /* 442 */ 'a', 'd', 'd', 'i', 'c', '.', 32, 0,
  /* 450 */ 'r', 'l', 'd', 'i', 'c', '.', 32, 0,
  /* 458 */ 'b', 'c', 'd', 't', 'r', 'u', 'n', 'c', '.', 32, 0,
  /* 469 */ 'b', 'c', 'd', 'u', 't', 'r', 'u', 'n', 'c', '.', 32, 0,
  /* 481 */ 'o', 'r', 'c', '.', 32, 0,
  /* 487 */ 't', 'a', 'b', 'o', 'r', 't', 'w', 'c', '.', 32, 0,
  /* 498 */ 's', 'r', 'a', 'd', '.', 32, 0,
  /* 505 */ 'f', 'a', 'd', 'd', '.', 32, 0,
  /* 512 */ 'f', 'm', 'a', 'd', 'd', '.', 32, 0,
  /* 520 */ 'f', 'n', 'm', 'a', 'd', 'd', '.', 32, 0,
  /* 529 */ 'm', 'u', 'l', 'h', 'd', '.', 32, 0,
  /* 537 */ 'f', 'c', 'f', 'i', 'd', '.', 32, 0,
  /* 545 */ 'f', 'c', 't', 'i', 'd', '.', 32, 0,
  /* 553 */ 'm', 'u', 'l', 'l', 'd', '.', 32, 0,
  /* 561 */ 's', 'l', 'd', '.', 32, 0,
  /* 567 */ 'n', 'a', 'n', 'd', '.', 32, 0,
  /* 574 */ 't', 'e', 'n', 'd', '.', 32, 0,
  /* 581 */ 's', 'r', 'd', '.', 32, 0,
  /* 587 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'd', '.', 32, 0,
  /* 598 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'd', '.', 32, 0,
  /* 609 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'd', '.', 32, 0,
  /* 620 */ 'd', 'i', 'v', 'd', '.', 32, 0,
  /* 627 */ 'c', 'n', 't', 'l', 'z', 'd', '.', 32, 0,
  /* 636 */ 'c', 'n', 't', 't', 'z', 'd', '.', 32, 0,
  /* 645 */ 'a', 'd', 'd', 'e', '.', 32, 0,
  /* 652 */ 'd', 'i', 'v', 'd', 'e', '.', 32, 0,
  /* 660 */ 's', 'u', 'b', 'f', 'e', '.', 32, 0,
  /* 668 */ 'a', 'd', 'd', 'm', 'e', '.', 32, 0,
  /* 676 */ 's', 'u', 'b', 'f', 'm', 'e', '.', 32, 0,
  /* 685 */ 'f', 'r', 'e', '.', 32, 0,
  /* 691 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', 32, 0,
  /* 701 */ 'p', 'a', 's', 't', 'e', '.', 32, 0,
  /* 709 */ 'd', 'i', 'v', 'w', 'e', '.', 32, 0,
  /* 717 */ 'a', 'd', 'd', 'z', 'e', '.', 32, 0,
  /* 725 */ 's', 'u', 'b', 'f', 'z', 'e', '.', 32, 0,
  /* 734 */ 's', 'u', 'b', 'f', '.', 32, 0,
  /* 741 */ 'm', 't', 'f', 's', 'f', '.', 32, 0,
  /* 749 */ 'f', 'n', 'e', 'g', '.', 32, 0,
  /* 756 */ 'v', 'c', 'm', 'p', 'n', 'e', 'h', '.', 32, 0,
  /* 766 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', '.', 32, 0,
  /* 777 */ 'e', 'x', 't', 's', 'h', '.', 32, 0,
  /* 785 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', '.', 32, 0,
  /* 796 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', '.', 32, 0,
  /* 807 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'h', '.', 32, 0,
  /* 818 */ 't', 'a', 'b', 'o', 'r', 't', 'd', 'c', 'i', '.', 32, 0,
  /* 830 */ 't', 'a', 'b', 'o', 'r', 't', 'w', 'c', 'i', '.', 32, 0,
  /* 842 */ 's', 'r', 'a', 'd', 'i', '.', 32, 0,
  /* 850 */ 'c', 'l', 'r', 'l', 's', 'l', 'd', 'i', '.', 32, 0,
  /* 861 */ 'e', 'x', 't', 'l', 'd', 'i', '.', 32, 0,
  /* 870 */ 'a', 'n', 'd', 'i', '.', 32, 0,
  /* 877 */ 'c', 'l', 'r', 'r', 'd', 'i', '.', 32, 0,
  /* 886 */ 'i', 'n', 's', 'r', 'd', 'i', '.', 32, 0,
  /* 895 */ 'r', 'o', 't', 'r', 'd', 'i', '.', 32, 0,
  /* 904 */ 'e', 'x', 't', 'r', 'd', 'i', '.', 32, 0,
  /* 913 */ 'm', 't', 'f', 's', 'f', 'i', '.', 32, 0,
  /* 922 */ 'r', 'l', 'd', 'i', 'm', 'i', '.', 32, 0,
  /* 931 */ 'r', 'l', 'w', 'i', 'm', 'i', '.', 32, 0,
  /* 940 */ 's', 'r', 'a', 'w', 'i', '.', 32, 0,
  /* 948 */ 'c', 'l', 'r', 'l', 's', 'l', 'w', 'i', '.', 32, 0,
  /* 959 */ 'i', 'n', 's', 'l', 'w', 'i', '.', 32, 0,
  /* 968 */ 'e', 'x', 't', 'l', 'w', 'i', '.', 32, 0,
  /* 977 */ 'c', 'l', 'r', 'r', 'w', 'i', '.', 32, 0,
  /* 986 */ 'i', 'n', 's', 'r', 'w', 'i', '.', 32, 0,
  /* 995 */ 'r', 'o', 't', 'r', 'w', 'i', '.', 32, 0,
  /* 1004 */ 'e', 'x', 't', 'r', 'w', 'i', '.', 32, 0,
  /* 1013 */ 'r', 'l', 'd', 'c', 'l', '.', 32, 0,
  /* 1021 */ 'r', 'l', 'd', 'i', 'c', 'l', '.', 32, 0,
  /* 1030 */ 'f', 's', 'e', 'l', '.', 32, 0,
  /* 1037 */ 'f', 'm', 'u', 'l', '.', 32, 0,
  /* 1044 */ 't', 'r', 'e', 'c', 'l', 'a', 'i', 'm', '.', 32, 0,
  /* 1055 */ 'f', 'r', 'i', 'm', '.', 32, 0,
  /* 1062 */ 'r', 'l', 'w', 'i', 'n', 'm', '.', 32, 0,
  /* 1071 */ 'r', 'l', 'w', 'n', 'm', '.', 32, 0,
  /* 1079 */ 'b', 'c', 'd', 'c', 'f', 'n', '.', 32, 0,
  /* 1088 */ 'b', 'c', 'd', 'c', 'p', 's', 'g', 'n', '.', 32, 0,
  /* 1099 */ 'f', 'c', 'p', 's', 'g', 'n', '.', 32, 0,
  /* 1108 */ 'b', 'c', 'd', 's', 'e', 't', 's', 'g', 'n', '.', 32, 0,
  /* 1120 */ 't', 'b', 'e', 'g', 'i', 'n', '.', 32, 0,
  /* 1129 */ 'f', 'r', 'i', 'n', '.', 32, 0,
  /* 1136 */ 'b', 'c', 'd', 'c', 't', 'n', '.', 32, 0,
  /* 1145 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 'd', 'p', '.', 32, 0,
  /* 1157 */ 'x', 'v', 'c', 'm', 'p', 'n', 'e', 'd', 'p', '.', 32, 0,
  /* 1169 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 'd', 'p', '.', 32, 0,
  /* 1181 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 'd', 'p', '.', 32, 0,
  /* 1193 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', '.', 32, 0,
  /* 1203 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', '.', 32, 0,
  /* 1214 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', '.', 32, 0,
  /* 1225 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', '.', 32, 0,
  /* 1236 */ 'f', 'r', 'i', 'p', '.', 32, 0,
  /* 1243 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 's', 'p', '.', 32, 0,
  /* 1255 */ 'x', 'v', 'c', 'm', 'p', 'n', 'e', 's', 'p', '.', 32, 0,
  /* 1267 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 's', 'p', '.', 32, 0,
  /* 1279 */ 'f', 'r', 's', 'p', '.', 32, 0,
  /* 1286 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 's', 'p', '.', 32, 0,
  /* 1298 */ 'i', 'c', 'b', 'l', 'q', '.', 32, 0,
  /* 1306 */ 'b', 'c', 'd', 'c', 'f', 's', 'q', '.', 32, 0,
  /* 1316 */ 'b', 'c', 'd', 'c', 't', 's', 'q', '.', 32, 0,
  /* 1326 */ 'r', 'l', 'd', 'c', 'r', '.', 32, 0,
  /* 1334 */ 'r', 'l', 'd', 'i', 'c', 'r', '.', 32, 0,
  /* 1343 */ 'f', 'm', 'r', '.', 32, 0,
  /* 1349 */ 'n', 'o', 'r', '.', 32, 0,
  /* 1355 */ 'x', 'o', 'r', '.', 32, 0,
  /* 1361 */ 'b', 'c', 'd', 's', 'r', '.', 32, 0,
  /* 1369 */ 't', 's', 'r', '.', 32, 0,
  /* 1375 */ 'f', 'a', 'b', 's', '.', 32, 0,
  /* 1382 */ 'f', 'n', 'a', 'b', 's', '.', 32, 0,
  /* 1390 */ 'f', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1398 */ 'f', 'm', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1407 */ 'f', 'n', 'm', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1417 */ 'b', 'c', 'd', 's', '.', 32, 0,
  /* 1424 */ 'f', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1432 */ 'f', 'm', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1441 */ 'f', 'n', 'm', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1451 */ 'f', 'c', 'f', 'i', 'd', 's', '.', 32, 0,
  /* 1460 */ 'f', 'r', 'e', 's', '.', 32, 0,
  /* 1467 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 's', '.', 32, 0,
  /* 1478 */ 'm', 'f', 'f', 's', '.', 32, 0,
  /* 1485 */ 'a', 'n', 'd', 'i', 's', '.', 32, 0,
  /* 1493 */ 'f', 'm', 'u', 'l', 's', '.', 32, 0,
  /* 1501 */ 'f', 's', 'q', 'r', 't', 's', '.', 32, 0,
  /* 1510 */ 'b', 'c', 'd', 'u', 's', '.', 32, 0,
  /* 1518 */ 'f', 'c', 'f', 'i', 'd', 'u', 's', '.', 32, 0,
  /* 1528 */ 'f', 'd', 'i', 'v', 's', '.', 32, 0,
  /* 1536 */ 't', 'a', 'b', 'o', 'r', 't', '.', 32, 0,
  /* 1545 */ 'f', 's', 'q', 'r', 't', '.', 32, 0,
  /* 1553 */ 'm', 'u', 'l', 'h', 'd', 'u', '.', 32, 0,
  /* 1562 */ 'f', 'c', 'f', 'i', 'd', 'u', '.', 32, 0,
  /* 1571 */ 'f', 'c', 't', 'i', 'd', 'u', '.', 32, 0,
  /* 1580 */ 'd', 'i', 'v', 'd', 'u', '.', 32, 0,
  /* 1588 */ 'd', 'i', 'v', 'd', 'e', 'u', '.', 32, 0,
  /* 1597 */ 'd', 'i', 'v', 'w', 'e', 'u', '.', 32, 0,
  /* 1606 */ 'm', 'u', 'l', 'h', 'w', 'u', '.', 32, 0,
  /* 1615 */ 'f', 'c', 't', 'i', 'w', 'u', '.', 32, 0,
  /* 1624 */ 'd', 'i', 'v', 'w', 'u', '.', 32, 0,
  /* 1632 */ 'f', 'd', 'i', 'v', '.', 32, 0,
  /* 1639 */ 'e', 'q', 'v', '.', 32, 0,
  /* 1645 */ 's', 'r', 'a', 'w', '.', 32, 0,
  /* 1652 */ 'v', 'c', 'm', 'p', 'n', 'e', 'w', '.', 32, 0,
  /* 1662 */ 'm', 'u', 'l', 'h', 'w', '.', 32, 0,
  /* 1670 */ 'f', 'c', 't', 'i', 'w', '.', 32, 0,
  /* 1678 */ 'm', 'u', 'l', 'l', 'w', '.', 32, 0,
  /* 1686 */ 's', 'l', 'w', '.', 32, 0,
  /* 1692 */ 's', 'r', 'w', '.', 32, 0,
  /* 1698 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', '.', 32, 0,
  /* 1709 */ 'e', 'x', 't', 's', 'w', '.', 32, 0,
  /* 1717 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', '.', 32, 0,
  /* 1728 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', '.', 32, 0,
  /* 1739 */ 'd', 'i', 'v', 'w', '.', 32, 0,
  /* 1746 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'w', '.', 32, 0,
  /* 1757 */ 'c', 'n', 't', 'l', 'z', 'w', '.', 32, 0,
  /* 1766 */ 'c', 'n', 't', 't', 'z', 'w', '.', 32, 0,
  /* 1775 */ 's', 't', 'b', 'c', 'x', '.', 32, 0,
  /* 1783 */ 's', 't', 'd', 'c', 'x', '.', 32, 0,
  /* 1791 */ 's', 't', 'h', 'c', 'x', '.', 32, 0,
  /* 1799 */ 's', 't', 'w', 'c', 'x', '.', 32, 0,
  /* 1807 */ 't', 'l', 'b', 's', 'x', '.', 32, 0,
  /* 1815 */ 'f', 'c', 't', 'i', 'd', 'z', '.', 32, 0,
  /* 1824 */ 'b', 'c', 'd', 'c', 'f', 'z', '.', 32, 0,
  /* 1833 */ 'f', 'r', 'i', 'z', '.', 32, 0,
  /* 1840 */ 'b', 'c', 'd', 'c', 't', 'z', '.', 32, 0,
  /* 1849 */ 'f', 'c', 't', 'i', 'd', 'u', 'z', '.', 32, 0,
  /* 1859 */ 'f', 'c', 't', 'i', 'w', 'u', 'z', '.', 32, 0,
  /* 1869 */ 'f', 'c', 't', 'i', 'w', 'z', '.', 32, 0,
  /* 1878 */ 'm', 't', 'f', 's', 'b', '0', 32, 0,
  /* 1886 */ 'm', 't', 'f', 's', 'b', '1', 32, 0,
  /* 1894 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 32, 0,
  /* 1916 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 32, 0,
  /* 1938 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', '8', 32, 0,
  /* 1952 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', '8', 32, 0,
  /* 1966 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', '8', 32, 0,
  /* 1980 */ 'U', 'P', 'D', 'A', 'T', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 32, 0,
  /* 1995 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 32, 0,
  /* 2014 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 32, 0,
  /* 2031 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 32, 0,
  /* 2044 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'f', 'a', 'a', 32, 0,
  /* 2057 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'f', 'a', 'a', 32, 0,
  /* 2070 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 'a', 'a', 32, 0,
  /* 2081 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 'a', 'a', 32, 0,
  /* 2092 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'i', 'a', 'a', 32, 0,
  /* 2105 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'i', 'a', 'a', 32, 0,
  /* 2118 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 'a', 'a', 32, 0,
  /* 2129 */ 'e', 'v', 'm', 'h', 'e', 'g', 'u', 'm', 'i', 'a', 'a', 32, 0,
  /* 2142 */ 'e', 'v', 'm', 'h', 'o', 'g', 'u', 'm', 'i', 'a', 'a', 32, 0,
  /* 2155 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 'a', 'a', 32, 0,
  /* 2166 */ 'd', 'c', 'b', 'a', 32, 0,
  /* 2172 */ 'b', 'c', 'a', 32, 0,
  /* 2177 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 'a', 32, 0,
  /* 2188 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'f', 'a', 32, 0,
  /* 2199 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 'a', 32, 0,
  /* 2210 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 'a', 32, 0,
  /* 2220 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 'a', 32, 0,
  /* 2231 */ 'e', 'v', 'm', 'w', 'h', 's', 's', 'f', 'a', 32, 0,
  /* 2242 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 'a', 32, 0,
  /* 2253 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 'a', 32, 0,
  /* 2263 */ 'l', 'h', 'a', 32, 0,
  /* 2268 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 'a', 32, 0,
  /* 2279 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'i', 'a', 32, 0,
  /* 2290 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 'a', 32, 0,
  /* 2301 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 'a', 32, 0,
  /* 2311 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 'a', 32, 0,
  /* 2322 */ 'e', 'v', 'm', 'w', 'h', 'u', 'm', 'i', 'a', 32, 0,
  /* 2333 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 'a', 32, 0,
  /* 2344 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 'a', 32, 0,
  /* 2355 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 'a', 32, 0,
  /* 2365 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 'i', 'a', 32, 0,
  /* 2377 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 'i', 'a', 32, 0,
  /* 2388 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 'i', 'a', 32, 0,
  /* 2400 */ 'q', 'v', 's', 't', 'f', 's', 'x', 'i', 'a', 32, 0,
  /* 2411 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 'i', 'a', 32, 0,
  /* 2424 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 'i', 'a', 32, 0,
  /* 2436 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 'i', 'a', 32, 0,
  /* 2449 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 'i', 'a', 32, 0,
  /* 2461 */ 'b', 'l', 'a', 32, 0,
  /* 2466 */ 'b', 'c', 'l', 'a', 32, 0,
  /* 2472 */ 'b', 'd', 'z', 'l', 'a', 32, 0,
  /* 2479 */ 'b', 'd', 'n', 'z', 'l', 'a', 32, 0,
  /* 2487 */ 'e', 'v', 'm', 'r', 'a', 32, 0,
  /* 2494 */ 'l', 'w', 'a', 32, 0,
  /* 2499 */ 'm', 't', 'v', 's', 'r', 'w', 'a', 32, 0,
  /* 2508 */ 'q', 'v', 'l', 'f', 'i', 'w', 'a', 'x', 'a', 32, 0,
  /* 2519 */ 'q', 'v', 'l', 'f', 'c', 'd', 'x', 'a', 32, 0,
  /* 2529 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 'a', 32, 0,
  /* 2540 */ 'q', 'v', 'l', 'f', 'd', 'x', 'a', 32, 0,
  /* 2549 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 'a', 32, 0,
  /* 2559 */ 'q', 'v', 'l', 'f', 'c', 's', 'x', 'a', 32, 0,
  /* 2569 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 'a', 32, 0,
  /* 2580 */ 'q', 'v', 'l', 'f', 's', 'x', 'a', 32, 0,
  /* 2589 */ 'q', 'v', 's', 't', 'f', 's', 'x', 'a', 32, 0,
  /* 2599 */ 'q', 'v', 'l', 'f', 'c', 'd', 'u', 'x', 'a', 32, 0,
  /* 2610 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 'a', 32, 0,
  /* 2622 */ 'q', 'v', 'l', 'f', 'd', 'u', 'x', 'a', 32, 0,
  /* 2632 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 'a', 32, 0,
  /* 2643 */ 'q', 'v', 'l', 'f', 'c', 's', 'u', 'x', 'a', 32, 0,
  /* 2654 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 'a', 32, 0,
  /* 2666 */ 'q', 'v', 'l', 'f', 's', 'u', 'x', 'a', 32, 0,
  /* 2676 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 'a', 32, 0,
  /* 2687 */ 'q', 'v', 's', 't', 'f', 'i', 'w', 'x', 'a', 32, 0,
  /* 2698 */ 'q', 'v', 'l', 'f', 'i', 'w', 'z', 'x', 'a', 32, 0,
  /* 2709 */ 'b', 'd', 'z', 'a', 32, 0,
  /* 2715 */ 'b', 'd', 'n', 'z', 'a', 32, 0,
  /* 2722 */ 'v', 's', 'r', 'a', 'b', 32, 0,
  /* 2729 */ 'r', 'f', 'e', 'b', 'b', 32, 0,
  /* 2736 */ 'v', 'c', 'l', 'z', 'l', 's', 'b', 'b', 32, 0,
  /* 2746 */ 'v', 'c', 't', 'z', 'l', 's', 'b', 'b', 32, 0,
  /* 2756 */ 'v', 'c', 'm', 'p', 'n', 'e', 'b', 32, 0,
  /* 2765 */ 'v', 'm', 'r', 'g', 'h', 'b', 32, 0,
  /* 2773 */ 'x', 'x', 's', 'p', 'l', 't', 'i', 'b', 32, 0,
  /* 2783 */ 'v', 'm', 'r', 'g', 'l', 'b', 32, 0,
  /* 2791 */ 'v', 'r', 'l', 'b', 32, 0,
  /* 2797 */ 'v', 's', 'l', 'b', 32, 0,
  /* 2803 */ 'v', 'p', 'm', 's', 'u', 'm', 'b', 32, 0,
  /* 2812 */ 'c', 'm', 'p', 'b', 32, 0,
  /* 2818 */ 'c', 'm', 'p', 'e', 'q', 'b', 32, 0,
  /* 2826 */ 'c', 'm', 'p', 'r', 'b', 32, 0,
  /* 2833 */ 'v', 's', 'r', 'b', 32, 0,
  /* 2839 */ 'v', 'm', 'u', 'l', 'e', 's', 'b', 32, 0,
  /* 2848 */ 'v', 'a', 'v', 'g', 's', 'b', 32, 0,
  /* 2856 */ 'v', 'u', 'p', 'k', 'h', 's', 'b', 32, 0,
  /* 2865 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'b', 32, 0,
  /* 2875 */ 'v', 'u', 'p', 'k', 'l', 's', 'b', 32, 0,
  /* 2884 */ 'v', 'm', 'i', 'n', 's', 'b', 32, 0,
  /* 2892 */ 'v', 'm', 'u', 'l', 'o', 's', 'b', 32, 0,
  /* 2901 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', 32, 0,
  /* 2911 */ 'e', 'v', 'e', 'x', 't', 's', 'b', 32, 0,
  /* 2920 */ 'v', 'm', 'a', 'x', 's', 'b', 32, 0,
  /* 2928 */ 'm', 'f', 't', 'b', 32, 0,
  /* 2934 */ 'v', 's', 'p', 'l', 't', 'b', 32, 0,
  /* 2942 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'b', 32, 0,
  /* 2952 */ 'v', 'i', 'n', 's', 'e', 'r', 't', 'b', 32, 0,
  /* 2962 */ 's', 't', 'b', 32, 0,
  /* 2967 */ 'v', 'a', 'b', 's', 'd', 'u', 'b', 32, 0,
  /* 2976 */ 'v', 'm', 'u', 'l', 'e', 'u', 'b', 32, 0,
  /* 2985 */ 'v', 'a', 'v', 'g', 'u', 'b', 32, 0,
  /* 2993 */ 'v', 'm', 'i', 'n', 'u', 'b', 32, 0,
  /* 3001 */ 'v', 'm', 'u', 'l', 'o', 'u', 'b', 32, 0,
  /* 3010 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', 32, 0,
  /* 3020 */ 'q', 'v', 'f', 's', 'u', 'b', 32, 0,
  /* 3028 */ 'q', 'v', 'f', 'm', 's', 'u', 'b', 32, 0,
  /* 3037 */ 'q', 'v', 'f', 'n', 'm', 's', 'u', 'b', 32, 0,
  /* 3047 */ 'v', 'e', 'x', 't', 'r', 'a', 'c', 't', 'u', 'b', 32, 0,
  /* 3059 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', 32, 0,
  /* 3069 */ 'v', 'm', 'a', 'x', 'u', 'b', 32, 0,
  /* 3077 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'b', 32, 0,
  /* 3087 */ 'v', 'c', 'l', 'z', 'b', 32, 0,
  /* 3094 */ 'v', 'c', 't', 'z', 'b', 32, 0,
  /* 3101 */ 'b', 'c', 32, 0,
  /* 3105 */ 'a', 'd', 'd', 'c', 32, 0,
  /* 3111 */ 'x', 'x', 'l', 'a', 'n', 'd', 'c', 32, 0,
  /* 3120 */ 'c', 'r', 'a', 'n', 'd', 'c', 32, 0,
  /* 3128 */ 'e', 'v', 'a', 'n', 'd', 'c', 32, 0,
  /* 3136 */ 's', 'u', 'b', 'f', 'c', 32, 0,
  /* 3143 */ 's', 'u', 'b', 'i', 'c', 32, 0,
  /* 3150 */ 'a', 'd', 'd', 'i', 'c', 32, 0,
  /* 3157 */ 'r', 'l', 'd', 'i', 'c', 32, 0,
  /* 3164 */ 's', 'u', 'b', 'f', 'i', 'c', 32, 0,
  /* 3172 */ 'x', 's', 'r', 'd', 'p', 'i', 'c', 32, 0,
  /* 3181 */ 'x', 'v', 'r', 'd', 'p', 'i', 'c', 32, 0,
  /* 3190 */ 'x', 'v', 'r', 's', 'p', 'i', 'c', 32, 0,
  /* 3199 */ 'i', 'c', 'b', 'l', 'c', 32, 0,
  /* 3206 */ 'b', 'r', 'i', 'n', 'c', 32, 0,
  /* 3213 */ 's', 'y', 'n', 'c', 32, 0,
  /* 3219 */ 'x', 'x', 'l', 'o', 'r', 'c', 32, 0,
  /* 3227 */ 'c', 'r', 'o', 'r', 'c', 32, 0,
  /* 3234 */ 'e', 'v', 'o', 'r', 'c', 32, 0,
  /* 3241 */ 's', 'c', 32, 0,
  /* 3245 */ 'v', 'e', 'x', 't', 's', 'b', '2', 'd', 32, 0,
  /* 3255 */ 'v', 'e', 'x', 't', 's', 'h', '2', 'd', 32, 0,
  /* 3265 */ 'v', 'e', 'x', 't', 's', 'w', '2', 'd', 32, 0,
  /* 3275 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 32, 0,
  /* 3288 */ 'v', 's', 'h', 'a', 's', 'i', 'g', 'm', 'a', 'd', 32, 0,
  /* 3300 */ 'v', 's', 'r', 'a', 'd', 32, 0,
  /* 3307 */ 'v', 'g', 'b', 'b', 'd', 32, 0,
  /* 3314 */ 'v', 'p', 'r', 't', 'y', 'b', 'd', 32, 0,
  /* 3323 */ 'q', 'v', 'f', 'a', 'd', 'd', 32, 0,
  /* 3331 */ 'q', 'v', 'f', 'm', 'a', 'd', 'd', 32, 0,
  /* 3340 */ 'q', 'v', 'f', 'n', 'm', 'a', 'd', 'd', 32, 0,
  /* 3350 */ 'q', 'v', 'f', 'x', 'x', 'c', 'p', 'n', 'm', 'a', 'd', 'd', 32, 0,
  /* 3364 */ 'q', 'v', 'f', 'x', 'x', 'n', 'p', 'm', 'a', 'd', 'd', 32, 0,
  /* 3377 */ 'q', 'v', 'f', 'x', 'm', 'a', 'd', 'd', 32, 0,
  /* 3387 */ 'q', 'v', 'f', 'x', 'x', 'm', 'a', 'd', 'd', 32, 0,
  /* 3398 */ 'e', 'v', 'l', 'd', 'd', 32, 0,
  /* 3405 */ 'm', 't', 'v', 's', 'r', 'd', 'd', 32, 0,
  /* 3414 */ 'e', 'v', 's', 't', 'd', 'd', 32, 0,
  /* 3422 */ 'l', 'f', 'd', 32, 0,
  /* 3427 */ 's', 't', 'f', 'd', 32, 0,
  /* 3433 */ 'v', 'n', 'e', 'g', 'd', 32, 0,
  /* 3440 */ 'm', 'u', 'l', 'h', 'd', 32, 0,
  /* 3447 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 32, 0,
  /* 3456 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 32, 0,
  /* 3465 */ 't', 'l', 'b', 'l', 'd', 32, 0,
  /* 3472 */ 'm', 'u', 'l', 'l', 'd', 32, 0,
  /* 3479 */ 'c', 'm', 'p', 'l', 'd', 32, 0,
  /* 3486 */ 'm', 'f', 'v', 's', 'r', 'l', 'd', 32, 0,
  /* 3495 */ 'v', 'r', 'l', 'd', 32, 0,
  /* 3501 */ 'v', 's', 'l', 'd', 32, 0,
  /* 3507 */ 'v', 'b', 'p', 'e', 'r', 'm', 'd', 32, 0,
  /* 3516 */ 'v', 'p', 'm', 's', 'u', 'm', 'd', 32, 0,
  /* 3525 */ 'x', 'x', 'l', 'a', 'n', 'd', 32, 0,
  /* 3533 */ 'x', 'x', 'l', 'n', 'a', 'n', 'd', 32, 0,
  /* 3542 */ 'c', 'r', 'n', 'a', 'n', 'd', 32, 0,
  /* 3550 */ 'e', 'v', 'n', 'a', 'n', 'd', 32, 0,
  /* 3558 */ 'c', 'r', 'a', 'n', 'd', 32, 0,
  /* 3565 */ 'e', 'v', 'a', 'n', 'd', 32, 0,
  /* 3572 */ 'c', 'm', 'p', 'd', 32, 0,
  /* 3578 */ 'x', 'x', 'b', 'r', 'd', 32, 0,
  /* 3585 */ 'm', 't', 'm', 's', 'r', 'd', 32, 0,
  /* 3593 */ 'm', 'f', 'v', 's', 'r', 'd', 32, 0,
  /* 3601 */ 'm', 't', 'v', 's', 'r', 'd', 32, 0,
  /* 3609 */ 'v', 'm', 'i', 'n', 's', 'd', 32, 0,
  /* 3617 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'd', 32, 0,
  /* 3627 */ 'v', 'm', 'a', 'x', 's', 'd', 32, 0,
  /* 3635 */ 'l', 'x', 's', 'd', 32, 0,
  /* 3641 */ 's', 't', 'x', 's', 'd', 32, 0,
  /* 3648 */ 'v', 'e', 'x', 't', 'r', 'a', 'c', 't', 'd', 32, 0,
  /* 3659 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'd', 32, 0,
  /* 3669 */ 'v', 'i', 'n', 's', 'e', 'r', 't', 'd', 32, 0,
  /* 3679 */ 's', 't', 'd', 32, 0,
  /* 3684 */ 'v', 'm', 'i', 'n', 'u', 'd', 32, 0,
  /* 3692 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'd', 32, 0,
  /* 3702 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'd', 32, 0,
  /* 3712 */ 'v', 'm', 'a', 'x', 'u', 'd', 32, 0,
  /* 3720 */ 'd', 'i', 'v', 'd', 32, 0,
  /* 3726 */ 'v', 'c', 'l', 'z', 'd', 32, 0,
  /* 3733 */ 'c', 'n', 't', 'l', 'z', 'd', 32, 0,
  /* 3741 */ 'v', 'c', 't', 'z', 'd', 32, 0,
  /* 3748 */ 'c', 'n', 't', 't', 'z', 'd', 32, 0,
  /* 3756 */ 'm', 'f', 'b', 'h', 'r', 'b', 'e', 32, 0,
  /* 3765 */ 'a', 'd', 'd', 'e', 32, 0,
  /* 3771 */ 'd', 'i', 'v', 'd', 'e', 32, 0,
  /* 3778 */ 's', 'l', 'b', 'm', 'f', 'e', 'e', 32, 0,
  /* 3787 */ 'w', 'r', 't', 'e', 'e', 32, 0,
  /* 3794 */ 's', 'u', 'b', 'f', 'e', 32, 0,
  /* 3801 */ 'e', 'v', 'l', 'w', 'h', 'e', 32, 0,
  /* 3809 */ 'e', 'v', 's', 't', 'w', 'h', 'e', 32, 0,
  /* 3818 */ 's', 'l', 'b', 'i', 'e', 32, 0,
  /* 3825 */ 't', 'l', 'b', 'i', 'e', 32, 0,
  /* 3832 */ 'a', 'd', 'd', 'm', 'e', 32, 0,
  /* 3839 */ 's', 'u', 'b', 'f', 'm', 'e', 32, 0,
  /* 3847 */ 't', 'l', 'b', 'r', 'e', 32, 0,
  /* 3854 */ 'q', 'v', 'f', 'r', 'e', 32, 0,
  /* 3861 */ 's', 'l', 'b', 'm', 't', 'e', 32, 0,
  /* 3869 */ 'q', 'v', 'f', 'r', 's', 'q', 'r', 't', 'e', 32, 0,
  /* 3880 */ 'p', 'a', 's', 't', 'e', 32, 0,
  /* 3887 */ 't', 'l', 'b', 'w', 'e', 32, 0,
  /* 3894 */ 'd', 'i', 'v', 'w', 'e', 32, 0,
  /* 3901 */ 'e', 'v', 's', 't', 'w', 'w', 'e', 32, 0,
  /* 3910 */ 'a', 'd', 'd', 'z', 'e', 32, 0,
  /* 3917 */ 's', 'u', 'b', 'f', 'z', 'e', 32, 0,
  /* 3925 */ 'd', 'c', 'b', 'f', 32, 0,
  /* 3931 */ 's', 'u', 'b', 'f', 32, 0,
  /* 3937 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 32, 0,
  /* 3947 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'f', 32, 0,
  /* 3957 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 32, 0,
  /* 3967 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 32, 0,
  /* 3976 */ 'm', 'c', 'r', 'f', 32, 0,
  /* 3982 */ 'm', 'f', 'o', 'c', 'r', 'f', 32, 0,
  /* 3990 */ 'm', 't', 'o', 'c', 'r', 'f', 32, 0,
  /* 3998 */ 'm', 't', 'c', 'r', 'f', 32, 0,
  /* 4005 */ 'm', 't', 'f', 's', 'f', 32, 0,
  /* 4012 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 32, 0,
  /* 4022 */ 'e', 'v', 'm', 'w', 'h', 's', 's', 'f', 32, 0,
  /* 4032 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 32, 0,
  /* 4042 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 32, 0,
  /* 4051 */ 's', 'l', 'b', 'i', 'e', 'g', 32, 0,
  /* 4059 */ 'q', 'v', 'f', 'n', 'e', 'g', 32, 0,
  /* 4067 */ 'e', 'v', 'n', 'e', 'g', 32, 0,
  /* 4074 */ 'v', 's', 'r', 'a', 'h', 32, 0,
  /* 4081 */ 'e', 'v', 'l', 'd', 'h', 32, 0,
  /* 4088 */ 'e', 'v', 's', 't', 'd', 'h', 32, 0,
  /* 4096 */ 'v', 'c', 'm', 'p', 'n', 'e', 'h', 32, 0,
  /* 4105 */ 'v', 'm', 'r', 'g', 'h', 'h', 32, 0,
  /* 4113 */ 'v', 'm', 'r', 'g', 'l', 'h', 32, 0,
  /* 4121 */ 'v', 'r', 'l', 'h', 32, 0,
  /* 4127 */ 'v', 's', 'l', 'h', 32, 0,
  /* 4133 */ 'v', 'p', 'm', 's', 'u', 'm', 'h', 32, 0,
  /* 4142 */ 'x', 'x', 'b', 'r', 'h', 32, 0,
  /* 4149 */ 'v', 's', 'r', 'h', 32, 0,
  /* 4155 */ 'v', 'm', 'u', 'l', 'e', 's', 'h', 32, 0,
  /* 4164 */ 'v', 'a', 'v', 'g', 's', 'h', 32, 0,
  /* 4172 */ 'v', 'u', 'p', 'k', 'h', 's', 'h', 32, 0,
  /* 4181 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'h', 32, 0,
  /* 4191 */ 'v', 'u', 'p', 'k', 'l', 's', 'h', 32, 0,
  /* 4200 */ 'v', 'm', 'i', 'n', 's', 'h', 32, 0,
  /* 4208 */ 'v', 'm', 'u', 'l', 'o', 's', 'h', 32, 0,
  /* 4217 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', 32, 0,
  /* 4227 */ 'e', 'v', 'e', 'x', 't', 's', 'h', 32, 0,
  /* 4236 */ 'v', 'm', 'a', 'x', 's', 'h', 32, 0,
  /* 4244 */ 'v', 's', 'p', 'l', 't', 'h', 32, 0,
  /* 4252 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'h', 32, 0,
  /* 4262 */ 'v', 'i', 'n', 's', 'e', 'r', 't', 'h', 32, 0,
  /* 4272 */ 's', 't', 'h', 32, 0,
  /* 4277 */ 'v', 'a', 'b', 's', 'd', 'u', 'h', 32, 0,
  /* 4286 */ 'v', 'm', 'u', 'l', 'e', 'u', 'h', 32, 0,
  /* 4295 */ 'v', 'a', 'v', 'g', 'u', 'h', 32, 0,
  /* 4303 */ 'v', 'm', 'i', 'n', 'u', 'h', 32, 0,
  /* 4311 */ 'v', 'm', 'u', 'l', 'o', 'u', 'h', 32, 0,
  /* 4320 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', 32, 0,
  /* 4330 */ 'v', 'e', 'x', 't', 'r', 'a', 'c', 't', 'u', 'h', 32, 0,
  /* 4342 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', 32, 0,
  /* 4352 */ 'v', 'm', 'a', 'x', 'u', 'h', 32, 0,
  /* 4360 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'h', 32, 0,
  /* 4370 */ 'v', 'c', 'l', 'z', 'h', 32, 0,
  /* 4377 */ 'v', 'c', 't', 'z', 'h', 32, 0,
  /* 4384 */ 'd', 'c', 'b', 'i', 32, 0,
  /* 4390 */ 'i', 'c', 'b', 'i', 32, 0,
  /* 4396 */ 's', 'u', 'b', 'i', 32, 0,
  /* 4402 */ 'd', 'c', 'c', 'c', 'i', 32, 0,
  /* 4409 */ 'i', 'c', 'c', 'c', 'i', 32, 0,
  /* 4416 */ 'q', 'v', 'g', 'p', 'c', 'i', 32, 0,
  /* 4424 */ 's', 'r', 'a', 'd', 'i', 32, 0,
  /* 4431 */ 'a', 'd', 'd', 'i', 32, 0,
  /* 4437 */ 'c', 'm', 'p', 'l', 'd', 'i', 32, 0,
  /* 4445 */ 'c', 'l', 'r', 'l', 's', 'l', 'd', 'i', 32, 0,
  /* 4455 */ 'e', 'x', 't', 'l', 'd', 'i', 32, 0,
  /* 4463 */ 'x', 'x', 'p', 'e', 'r', 'm', 'd', 'i', 32, 0,
  /* 4473 */ 'c', 'm', 'p', 'd', 'i', 32, 0,
  /* 4480 */ 'c', 'l', 'r', 'r', 'd', 'i', 32, 0,
  /* 4488 */ 'i', 'n', 's', 'r', 'd', 'i', 32, 0,
  /* 4496 */ 'r', 'o', 't', 'r', 'd', 'i', 32, 0,
  /* 4504 */ 'e', 'x', 't', 'r', 'd', 'i', 32, 0,
  /* 4512 */ 't', 'd', 'i', 32, 0,
  /* 4517 */ 'w', 'r', 't', 'e', 'e', 'i', 32, 0,
  /* 4525 */ 'm', 't', 'f', 's', 'f', 'i', 32, 0,
  /* 4533 */ 'e', 'v', 's', 'p', 'l', 'a', 't', 'f', 'i', 32, 0,
  /* 4544 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'h', 'i', 32, 0,
  /* 4555 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'l', 'o', 'h', 'i', 32, 0,
  /* 4568 */ 't', 'l', 'b', 'l', 'i', 32, 0,
  /* 4575 */ 'm', 'u', 'l', 'l', 'i', 32, 0,
  /* 4582 */ 'v', 'r', 'l', 'd', 'm', 'i', 32, 0,
  /* 4590 */ 'r', 'l', 'd', 'i', 'm', 'i', 32, 0,
  /* 4598 */ 'r', 'l', 'w', 'i', 'm', 'i', 32, 0,
  /* 4606 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 32, 0,
  /* 4616 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'i', 32, 0,
  /* 4626 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 32, 0,
  /* 4636 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 32, 0,
  /* 4645 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 32, 0,
  /* 4655 */ 'e', 'v', 'm', 'w', 'h', 'u', 'm', 'i', 32, 0,
  /* 4665 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 32, 0,
  /* 4675 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 32, 0,
  /* 4685 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 32, 0,
  /* 4694 */ 'v', 'r', 'l', 'w', 'm', 'i', 32, 0,
  /* 4702 */ 'q', 'v', 'a', 'l', 'i', 'g', 'n', 'i', 32, 0,
  /* 4712 */ 'v', 's', 'l', 'd', 'o', 'i', 32, 0,
  /* 4720 */ 'x', 's', 'r', 'd', 'p', 'i', 32, 0,
  /* 4728 */ 'x', 'v', 'r', 'd', 'p', 'i', 32, 0,
  /* 4736 */ 'x', 's', 'r', 'q', 'p', 'i', 32, 0,
  /* 4744 */ 'x', 'v', 'r', 's', 'p', 'i', 32, 0,
  /* 4752 */ 'x', 'o', 'r', 'i', 32, 0,
  /* 4758 */ 'q', 'v', 'e', 's', 'p', 'l', 'a', 't', 'i', 32, 0,
  /* 4769 */ 'e', 'v', 's', 'p', 'l', 'a', 't', 'i', 32, 0,
  /* 4779 */ 's', 'r', 'a', 'w', 'i', 32, 0,
  /* 4786 */ 'x', 'x', 's', 'l', 'd', 'w', 'i', 32, 0,
  /* 4795 */ 'c', 'm', 'p', 'l', 'w', 'i', 32, 0,
  /* 4803 */ 'e', 'v', 'r', 'l', 'w', 'i', 32, 0,
  /* 4811 */ 'c', 'l', 'r', 'l', 's', 'l', 'w', 'i', 32, 0,
  /* 4821 */ 'i', 'n', 's', 'l', 'w', 'i', 32, 0,
  /* 4829 */ 'e', 'v', 's', 'l', 'w', 'i', 32, 0,
  /* 4837 */ 'e', 'x', 't', 'l', 'w', 'i', 32, 0,
  /* 4845 */ 'c', 'm', 'p', 'w', 'i', 32, 0,
  /* 4852 */ 'c', 'l', 'r', 'r', 'w', 'i', 32, 0,
  /* 4860 */ 'i', 'n', 's', 'r', 'w', 'i', 32, 0,
  /* 4868 */ 'r', 'o', 't', 'r', 'w', 'i', 32, 0,
  /* 4876 */ 'e', 'x', 't', 'r', 'w', 'i', 32, 0,
  /* 4884 */ 'l', 's', 'w', 'i', 32, 0,
  /* 4890 */ 's', 't', 's', 'w', 'i', 32, 0,
  /* 4897 */ 't', 'w', 'i', 32, 0,
  /* 4902 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 'i', 32, 0,
  /* 4913 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 'i', 32, 0,
  /* 4923 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 'i', 32, 0,
  /* 4934 */ 'q', 'v', 's', 't', 'f', 's', 'x', 'i', 32, 0,
  /* 4944 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 'i', 32, 0,
  /* 4956 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 'i', 32, 0,
  /* 4967 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 'i', 32, 0,
  /* 4979 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 'i', 32, 0,
  /* 4990 */ 't', 'c', 'h', 'e', 'c', 'k', 32, 0,
  /* 4998 */ 'q', 'v', 'f', 'l', 'o', 'g', 'i', 'c', 'a', 'l', 32, 0,
  /* 5010 */ 'b', 'l', 32, 0,
  /* 5014 */ 'b', 'c', 'l', 32, 0,
  /* 5019 */ 'r', 'l', 'd', 'c', 'l', 32, 0,
  /* 5026 */ 'r', 'l', 'd', 'i', 'c', 'l', 32, 0,
  /* 5034 */ 't', 'l', 'b', 'i', 'e', 'l', 32, 0,
  /* 5042 */ 'q', 'v', 'f', 's', 'e', 'l', 32, 0,
  /* 5050 */ 'i', 's', 'e', 'l', 32, 0,
  /* 5056 */ 'v', 's', 'e', 'l', 32, 0,
  /* 5062 */ 'x', 'x', 's', 'e', 'l', 32, 0,
  /* 5069 */ 'd', 'c', 'b', 'f', 'l', 32, 0,
  /* 5076 */ 'l', 'x', 'v', 'l', 'l', 32, 0,
  /* 5083 */ 's', 't', 'x', 'v', 'l', 'l', 32, 0,
  /* 5091 */ 'b', 'c', 'l', 'r', 'l', 32, 0,
  /* 5098 */ 'b', 'c', 'c', 't', 'r', 'l', 32, 0,
  /* 5106 */ 'l', 'v', 's', 'l', 32, 0,
  /* 5112 */ 'q', 'v', 'f', 'm', 'u', 'l', 32, 0,
  /* 5120 */ 'q', 'v', 'f', 'x', 'm', 'u', 'l', 32, 0,
  /* 5129 */ 'l', 'x', 'v', 'l', 32, 0,
  /* 5135 */ 's', 't', 'x', 'v', 'l', 32, 0,
  /* 5142 */ 'l', 'v', 'x', 'l', 32, 0,
  /* 5148 */ 's', 't', 'v', 'x', 'l', 32, 0,
  /* 5155 */ 'd', 'c', 'b', 'z', 'l', 32, 0,
  /* 5162 */ 'b', 'd', 'z', 'l', 32, 0,
  /* 5168 */ 'b', 'd', 'n', 'z', 'l', 32, 0,
  /* 5175 */ 'v', 'm', 's', 'u', 'm', 'm', 'b', 'm', 32, 0,
  /* 5185 */ 'v', 's', 'u', 'b', 'u', 'b', 'm', 32, 0,
  /* 5194 */ 'v', 'a', 'd', 'd', 'u', 'b', 'm', 32, 0,
  /* 5203 */ 'v', 'm', 's', 'u', 'm', 'u', 'b', 'm', 32, 0,
  /* 5213 */ 'v', 's', 'u', 'b', 'u', 'd', 'm', 32, 0,
  /* 5222 */ 'v', 'a', 'd', 'd', 'u', 'd', 'm', 32, 0,
  /* 5231 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 'm', 32, 0,
  /* 5241 */ 'v', 's', 'u', 'b', 'u', 'h', 'm', 32, 0,
  /* 5250 */ 'v', 'm', 'l', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 5261 */ 'v', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 5270 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 'm', 32, 0,
  /* 5280 */ 'v', 'r', 'f', 'i', 'm', 32, 0,
  /* 5287 */ 'x', 's', 'r', 'd', 'p', 'i', 'm', 32, 0,
  /* 5296 */ 'x', 'v', 'r', 'd', 'p', 'i', 'm', 32, 0,
  /* 5305 */ 'x', 'v', 'r', 's', 'p', 'i', 'm', 32, 0,
  /* 5314 */ 'q', 'v', 'f', 'r', 'i', 'm', 32, 0,
  /* 5322 */ 'v', 'r', 'l', 'd', 'n', 'm', 32, 0,
  /* 5330 */ 'r', 'l', 'w', 'i', 'n', 'm', 32, 0,
  /* 5338 */ 'v', 'r', 'l', 'w', 'n', 'm', 32, 0,
  /* 5346 */ 'v', 's', 'u', 'b', 'u', 'q', 'm', 32, 0,
  /* 5355 */ 'v', 'a', 'd', 'd', 'u', 'q', 'm', 32, 0,
  /* 5364 */ 'v', 's', 'u', 'b', 'e', 'u', 'q', 'm', 32, 0,
  /* 5374 */ 'v', 'a', 'd', 'd', 'e', 'u', 'q', 'm', 32, 0,
  /* 5384 */ 'q', 'v', 'f', 'p', 'e', 'r', 'm', 32, 0,
  /* 5393 */ 'v', 'p', 'e', 'r', 'm', 32, 0,
  /* 5400 */ 'x', 'x', 'p', 'e', 'r', 'm', 32, 0,
  /* 5408 */ 'v', 'p', 'k', 'u', 'd', 'u', 'm', 32, 0,
  /* 5417 */ 'v', 'p', 'k', 'u', 'h', 'u', 'm', 32, 0,
  /* 5426 */ 'v', 'p', 'k', 'u', 'w', 'u', 'm', 32, 0,
  /* 5435 */ 'v', 's', 'u', 'b', 'u', 'w', 'm', 32, 0,
  /* 5444 */ 'v', 'a', 'd', 'd', 'u', 'w', 'm', 32, 0,
  /* 5453 */ 'v', 'm', 'u', 'l', 'u', 'w', 'm', 32, 0,
  /* 5462 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'f', 'a', 'n', 32, 0,
  /* 5475 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'f', 'a', 'n', 32, 0,
  /* 5488 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 'a', 'n', 32, 0,
  /* 5499 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 'a', 'n', 32, 0,
  /* 5510 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'i', 'a', 'n', 32, 0,
  /* 5523 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'i', 'a', 'n', 32, 0,
  /* 5536 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 'a', 'n', 32, 0,
  /* 5547 */ 'e', 'v', 'm', 'h', 'e', 'g', 'u', 'm', 'i', 'a', 'n', 32, 0,
  /* 5560 */ 'e', 'v', 'm', 'h', 'o', 'g', 'u', 'm', 'i', 'a', 'n', 32, 0,
  /* 5573 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 'a', 'n', 32, 0,
  /* 5584 */ 'q', 'v', 'f', 't', 's', 't', 'n', 'a', 'n', 32, 0,
  /* 5595 */ 'q', 'v', 'f', 'c', 'p', 's', 'g', 'n', 32, 0,
  /* 5605 */ 'v', 'r', 'f', 'i', 'n', 32, 0,
  /* 5612 */ 'q', 'v', 'f', 'r', 'i', 'n', 32, 0,
  /* 5620 */ 'm', 'f', 's', 'r', 'i', 'n', 32, 0,
  /* 5628 */ 'm', 't', 's', 'r', 'i', 'n', 32, 0,
  /* 5636 */ 'x', 's', 'c', 'v', 's', 'p', 'd', 'p', 'n', 32, 0,
  /* 5647 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'p', 'n', 32, 0,
  /* 5658 */ 'e', 'v', 's', 't', 'w', 'h', 'o', 32, 0,
  /* 5667 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'l', 'o', 32, 0,
  /* 5678 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'h', 'i', 'l', 'o', 32, 0,
  /* 5691 */ 'v', 's', 'l', 'o', 32, 0,
  /* 5697 */ 'x', 's', 'c', 'v', 'q', 'p', 'd', 'p', 'o', 32, 0,
  /* 5708 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'q', 'p', 'o', 32, 0,
  /* 5720 */ 'x', 's', 'm', 's', 'u', 'b', 'q', 'p', 'o', 32, 0,
  /* 5731 */ 'x', 's', 's', 'u', 'b', 'q', 'p', 'o', 32, 0,
  /* 5741 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'q', 'p', 'o', 32, 0,
  /* 5753 */ 'x', 's', 'm', 'a', 'd', 'd', 'q', 'p', 'o', 32, 0,
  /* 5764 */ 'x', 's', 'a', 'd', 'd', 'q', 'p', 'o', 32, 0,
  /* 5774 */ 'x', 's', 'm', 'u', 'l', 'q', 'p', 'o', 32, 0,
  /* 5784 */ 'x', 's', 's', 'q', 'r', 't', 'q', 'p', 'o', 32, 0,
  /* 5795 */ 'x', 's', 'd', 'i', 'v', 'q', 'p', 'o', 32, 0,
  /* 5805 */ 'v', 's', 'r', 'o', 32, 0,
  /* 5811 */ 'e', 'v', 's', 't', 'w', 'w', 'o', 32, 0,
  /* 5820 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 5832 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 5844 */ 'x', 's', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 5855 */ 'x', 'v', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 5866 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 5878 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 5890 */ 'x', 's', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 5901 */ 'x', 'v', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 5912 */ 'x', 's', 's', 'u', 'b', 'd', 'p', 32, 0,
  /* 5921 */ 'x', 'v', 's', 'u', 'b', 'd', 'p', 32, 0,
  /* 5930 */ 'x', 's', 't', 's', 't', 'd', 'c', 'd', 'p', 32, 0,
  /* 5941 */ 'x', 'v', 't', 's', 't', 'd', 'c', 'd', 'p', 32, 0,
  /* 5952 */ 'x', 's', 'm', 'i', 'n', 'c', 'd', 'p', 32, 0,
  /* 5962 */ 'x', 's', 'm', 'a', 'x', 'c', 'd', 'p', 32, 0,
  /* 5972 */ 'x', 's', 'a', 'd', 'd', 'd', 'p', 32, 0,
  /* 5981 */ 'x', 'v', 'a', 'd', 'd', 'd', 'p', 32, 0,
  /* 5990 */ 'x', 's', 'c', 'v', 's', 'x', 'd', 'd', 'p', 32, 0,
  /* 6001 */ 'x', 'v', 'c', 'v', 's', 'x', 'd', 'd', 'p', 32, 0,
  /* 6012 */ 'x', 's', 'c', 'v', 'u', 'x', 'd', 'd', 'p', 32, 0,
  /* 6023 */ 'x', 'v', 'c', 'v', 'u', 'x', 'd', 'd', 'p', 32, 0,
  /* 6034 */ 'x', 's', 'c', 'm', 'p', 'g', 'e', 'd', 'p', 32, 0,
  /* 6045 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 'd', 'p', 32, 0,
  /* 6056 */ 'x', 's', 'c', 'm', 'p', 'n', 'e', 'd', 'p', 32, 0,
  /* 6067 */ 'x', 's', 'r', 'e', 'd', 'p', 32, 0,
  /* 6075 */ 'x', 'v', 'r', 'e', 'd', 'p', 32, 0,
  /* 6083 */ 'x', 's', 'r', 's', 'q', 'r', 't', 'e', 'd', 'p', 32, 0,
  /* 6095 */ 'x', 'v', 'r', 's', 'q', 'r', 't', 'e', 'd', 'p', 32, 0,
  /* 6107 */ 'x', 's', 'n', 'e', 'g', 'd', 'p', 32, 0,
  /* 6116 */ 'x', 'v', 'n', 'e', 'g', 'd', 'p', 32, 0,
  /* 6125 */ 'x', 's', 'x', 's', 'i', 'g', 'd', 'p', 32, 0,
  /* 6135 */ 'x', 'v', 'x', 's', 'i', 'g', 'd', 'p', 32, 0,
  /* 6145 */ 'x', 's', 'm', 'i', 'n', 'j', 'd', 'p', 32, 0,
  /* 6155 */ 'x', 's', 'm', 'a', 'x', 'j', 'd', 'p', 32, 0,
  /* 6165 */ 'x', 's', 'm', 'u', 'l', 'd', 'p', 32, 0,
  /* 6174 */ 'x', 'v', 'm', 'u', 'l', 'd', 'p', 32, 0,
  /* 6183 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 6195 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 6207 */ 'x', 's', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 6218 */ 'x', 'v', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 6229 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 6241 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 6253 */ 'x', 's', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 6264 */ 'x', 'v', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 6275 */ 'x', 's', 'c', 'p', 's', 'g', 'n', 'd', 'p', 32, 0,
  /* 6286 */ 'x', 'v', 'c', 'p', 's', 'g', 'n', 'd', 'p', 32, 0,
  /* 6297 */ 'x', 's', 'm', 'i', 'n', 'd', 'p', 32, 0,
  /* 6306 */ 'x', 'v', 'm', 'i', 'n', 'd', 'p', 32, 0,
  /* 6315 */ 'x', 's', 'c', 'm', 'p', 'o', 'd', 'p', 32, 0,
  /* 6325 */ 'x', 's', 'c', 'v', 'h', 'p', 'd', 'p', 32, 0,
  /* 6335 */ 'x', 's', 'c', 'v', 'q', 'p', 'd', 'p', 32, 0,
  /* 6345 */ 'x', 's', 'c', 'v', 's', 'p', 'd', 'p', 32, 0,
  /* 6355 */ 'x', 'v', 'c', 'v', 's', 'p', 'd', 'p', 32, 0,
  /* 6365 */ 'x', 's', 'i', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 6375 */ 'x', 'v', 'i', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 6385 */ 'x', 's', 'c', 'm', 'p', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 6397 */ 'x', 's', 'x', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 6407 */ 'x', 'v', 'x', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 6417 */ 'x', 's', 'c', 'm', 'p', 'e', 'q', 'd', 'p', 32, 0,
  /* 6428 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 'd', 'p', 32, 0,
  /* 6439 */ 'x', 's', 'n', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 6449 */ 'x', 'v', 'n', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 6459 */ 'x', 's', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 6468 */ 'x', 'v', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 6477 */ 'x', 's', 'c', 'm', 'p', 'g', 't', 'd', 'p', 32, 0,
  /* 6488 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 'd', 'p', 32, 0,
  /* 6499 */ 'x', 's', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 6509 */ 'x', 's', 't', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 6520 */ 'x', 'v', 't', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 6531 */ 'x', 'v', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 6541 */ 'x', 's', 'c', 'm', 'p', 'u', 'd', 'p', 32, 0,
  /* 6551 */ 'x', 's', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 6560 */ 'x', 's', 't', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 6570 */ 'x', 'v', 't', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 6580 */ 'x', 'v', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 6589 */ 'x', 'v', 'c', 'v', 's', 'x', 'w', 'd', 'p', 32, 0,
  /* 6600 */ 'x', 'v', 'c', 'v', 'u', 'x', 'w', 'd', 'p', 32, 0,
  /* 6611 */ 'x', 's', 'm', 'a', 'x', 'd', 'p', 32, 0,
  /* 6620 */ 'x', 'v', 'm', 'a', 'x', 'd', 'p', 32, 0,
  /* 6629 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', 32, 0,
  /* 6638 */ 'v', 'n', 'm', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 6648 */ 'v', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 6656 */ 'v', 'm', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 6665 */ 'v', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 6673 */ 'v', 'l', 'o', 'g', 'e', 'f', 'p', 32, 0,
  /* 6682 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', 32, 0,
  /* 6692 */ 'v', 'r', 'e', 'f', 'p', 32, 0,
  /* 6699 */ 'v', 'e', 'x', 'p', 't', 'e', 'f', 'p', 32, 0,
  /* 6709 */ 'v', 'r', 's', 'q', 'r', 't', 'e', 'f', 'p', 32, 0,
  /* 6720 */ 'v', 'm', 'i', 'n', 'f', 'p', 32, 0,
  /* 6728 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', 32, 0,
  /* 6738 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', 32, 0,
  /* 6748 */ 'v', 'm', 'a', 'x', 'f', 'p', 32, 0,
  /* 6756 */ 'x', 's', 'c', 'v', 'd', 'p', 'h', 'p', 32, 0,
  /* 6766 */ 'x', 'v', 'c', 'v', 's', 'p', 'h', 'p', 32, 0,
  /* 6776 */ 'v', 'r', 'f', 'i', 'p', 32, 0,
  /* 6783 */ 'x', 's', 'r', 'd', 'p', 'i', 'p', 32, 0,
  /* 6792 */ 'x', 'v', 'r', 'd', 'p', 'i', 'p', 32, 0,
  /* 6801 */ 'x', 'v', 'r', 's', 'p', 'i', 'p', 32, 0,
  /* 6810 */ 'q', 'v', 'f', 'r', 'i', 'p', 32, 0,
  /* 6818 */ 'd', 'c', 'b', 'f', 'l', 'p', 32, 0,
  /* 6826 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'q', 'p', 32, 0,
  /* 6837 */ 'x', 's', 'm', 's', 'u', 'b', 'q', 'p', 32, 0,
  /* 6847 */ 'x', 's', 's', 'u', 'b', 'q', 'p', 32, 0,
  /* 6856 */ 'x', 's', 't', 's', 't', 'd', 'c', 'q', 'p', 32, 0,
  /* 6867 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'q', 'p', 32, 0,
  /* 6878 */ 'x', 's', 'm', 'a', 'd', 'd', 'q', 'p', 32, 0,
  /* 6888 */ 'x', 's', 'a', 'd', 'd', 'q', 'p', 32, 0,
  /* 6897 */ 'x', 's', 'c', 'v', 's', 'd', 'q', 'p', 32, 0,
  /* 6907 */ 'x', 's', 'c', 'v', 'u', 'd', 'q', 'p', 32, 0,
  /* 6917 */ 'x', 's', 'n', 'e', 'g', 'q', 'p', 32, 0,
  /* 6926 */ 'x', 's', 'x', 's', 'i', 'g', 'q', 'p', 32, 0,
  /* 6936 */ 'x', 's', 'm', 'u', 'l', 'q', 'p', 32, 0,
  /* 6945 */ 'x', 's', 'c', 'p', 's', 'g', 'n', 'q', 'p', 32, 0,
  /* 6956 */ 'x', 's', 'c', 'm', 'p', 'o', 'q', 'p', 32, 0,
  /* 6966 */ 'x', 's', 'c', 'v', 'd', 'p', 'q', 'p', 32, 0,
  /* 6976 */ 'x', 's', 'i', 'e', 'x', 'p', 'q', 'p', 32, 0,
  /* 6986 */ 'x', 's', 'c', 'm', 'p', 'e', 'x', 'p', 'q', 'p', 32, 0,
  /* 6998 */ 'x', 's', 'x', 'e', 'x', 'p', 'q', 'p', 32, 0,
  /* 7008 */ 'x', 's', 'n', 'a', 'b', 's', 'q', 'p', 32, 0,
  /* 7018 */ 'x', 's', 'a', 'b', 's', 'q', 'p', 32, 0,
  /* 7027 */ 'x', 's', 's', 'q', 'r', 't', 'q', 'p', 32, 0,
  /* 7037 */ 'x', 's', 'c', 'm', 'p', 'u', 'q', 'p', 32, 0,
  /* 7047 */ 'x', 's', 'd', 'i', 'v', 'q', 'p', 32, 0,
  /* 7056 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 7068 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 7080 */ 'x', 's', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 7091 */ 'x', 'v', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 7102 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 7114 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 7126 */ 'x', 's', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 7137 */ 'x', 'v', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 7148 */ 'x', 's', 's', 'u', 'b', 's', 'p', 32, 0,
  /* 7157 */ 'x', 'v', 's', 'u', 'b', 's', 'p', 32, 0,
  /* 7166 */ 'x', 's', 't', 's', 't', 'd', 'c', 's', 'p', 32, 0,
  /* 7177 */ 'x', 'v', 't', 's', 't', 'd', 'c', 's', 'p', 32, 0,
  /* 7188 */ 'x', 's', 'a', 'd', 'd', 's', 'p', 32, 0,
  /* 7197 */ 'x', 'v', 'a', 'd', 'd', 's', 'p', 32, 0,
  /* 7206 */ 'x', 's', 'c', 'v', 's', 'x', 'd', 's', 'p', 32, 0,
  /* 7217 */ 'x', 'v', 'c', 'v', 's', 'x', 'd', 's', 'p', 32, 0,
  /* 7228 */ 'x', 's', 'c', 'v', 'u', 'x', 'd', 's', 'p', 32, 0,
  /* 7239 */ 'x', 'v', 'c', 'v', 'u', 'x', 'd', 's', 'p', 32, 0,
  /* 7250 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 's', 'p', 32, 0,
  /* 7261 */ 'x', 's', 'r', 'e', 's', 'p', 32, 0,
  /* 7269 */ 'x', 'v', 'r', 'e', 's', 'p', 32, 0,
  /* 7277 */ 'x', 's', 'r', 's', 'q', 'r', 't', 'e', 's', 'p', 32, 0,
  /* 7289 */ 'x', 'v', 'r', 's', 'q', 'r', 't', 'e', 's', 'p', 32, 0,
  /* 7301 */ 'x', 'v', 'n', 'e', 'g', 's', 'p', 32, 0,
  /* 7310 */ 'x', 'v', 'x', 's', 'i', 'g', 's', 'p', 32, 0,
  /* 7320 */ 'x', 's', 'm', 'u', 'l', 's', 'p', 32, 0,
  /* 7329 */ 'x', 'v', 'm', 'u', 'l', 's', 'p', 32, 0,
  /* 7338 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 7350 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 7362 */ 'x', 's', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 7373 */ 'x', 'v', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 7384 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 7396 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 7408 */ 'x', 's', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 7419 */ 'x', 'v', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 7430 */ 'x', 'v', 'c', 'p', 's', 'g', 'n', 's', 'p', 32, 0,
  /* 7441 */ 'x', 'v', 'm', 'i', 'n', 's', 'p', 32, 0,
  /* 7450 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'p', 32, 0,
  /* 7460 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'p', 32, 0,
  /* 7470 */ 'x', 'v', 'c', 'v', 'h', 'p', 's', 'p', 32, 0,
  /* 7480 */ 'x', 'v', 'i', 'e', 'x', 'p', 's', 'p', 32, 0,
  /* 7490 */ 'x', 'v', 'x', 'e', 'x', 'p', 's', 'p', 32, 0,
  /* 7500 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 's', 'p', 32, 0,
  /* 7511 */ 'q', 'v', 'f', 'r', 's', 'p', 32, 0,
  /* 7519 */ 'x', 'v', 'n', 'a', 'b', 's', 's', 'p', 32, 0,
  /* 7529 */ 'x', 'v', 'a', 'b', 's', 's', 'p', 32, 0,
  /* 7538 */ 'l', 'x', 's', 's', 'p', 32, 0,
  /* 7545 */ 's', 't', 'x', 's', 's', 'p', 32, 0,
  /* 7553 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 's', 'p', 32, 0,
  /* 7564 */ 'x', 's', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 7574 */ 'x', 'v', 't', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 7585 */ 'x', 'v', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 7595 */ 'x', 's', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 7604 */ 'x', 'v', 't', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 7614 */ 'x', 'v', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 7623 */ 'x', 'v', 'c', 'v', 's', 'x', 'w', 's', 'p', 32, 0,
  /* 7634 */ 'x', 'v', 'c', 'v', 'u', 'x', 'w', 's', 'p', 32, 0,
  /* 7645 */ 'x', 'v', 'm', 'a', 'x', 's', 'p', 32, 0,
  /* 7654 */ 'x', 's', 'r', 'q', 'p', 'x', 'p', 32, 0,
  /* 7663 */ 'v', 'p', 'r', 't', 'y', 'b', 'q', 32, 0,
  /* 7672 */ 'q', 'v', 'f', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 7682 */ 'e', 'v', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 7691 */ 'v', 'b', 'p', 'e', 'r', 'm', 'q', 32, 0,
  /* 7700 */ 'x', 'x', 'b', 'r', 'q', 32, 0,
  /* 7707 */ 'v', 'm', 'u', 'l', '1', '0', 'u', 'q', 32, 0,
  /* 7717 */ 'v', 'm', 'u', 'l', '1', '0', 'c', 'u', 'q', 32, 0,
  /* 7728 */ 'v', 's', 'u', 'b', 'c', 'u', 'q', 32, 0,
  /* 7737 */ 'v', 'a', 'd', 'd', 'c', 'u', 'q', 32, 0,
  /* 7746 */ 'v', 'm', 'u', 'l', '1', '0', 'e', 'c', 'u', 'q', 32, 0,
  /* 7758 */ 'v', 's', 'u', 'b', 'e', 'c', 'u', 'q', 32, 0,
  /* 7768 */ 'v', 'a', 'd', 'd', 'e', 'c', 'u', 'q', 32, 0,
  /* 7778 */ 'v', 'm', 'u', 'l', '1', '0', 'e', 'u', 'q', 32, 0,
  /* 7789 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 32, 0,
  /* 7802 */ 'm', 'b', 'a', 'r', 32, 0,
  /* 7808 */ 'm', 'f', 'd', 'c', 'r', 32, 0,
  /* 7815 */ 'r', 'l', 'd', 'c', 'r', 32, 0,
  /* 7822 */ 'm', 't', 'd', 'c', 'r', 32, 0,
  /* 7829 */ 'm', 'f', 'c', 'r', 32, 0,
  /* 7835 */ 'r', 'l', 'd', 'i', 'c', 'r', 32, 0,
  /* 7843 */ 'm', 'f', 'v', 's', 'c', 'r', 32, 0,
  /* 7851 */ 'm', 't', 'v', 's', 'c', 'r', 32, 0,
  /* 7859 */ 'v', 'n', 'c', 'i', 'p', 'h', 'e', 'r', 32, 0,
  /* 7869 */ 'v', 'c', 'i', 'p', 'h', 'e', 'r', 32, 0,
  /* 7878 */ 'b', 'c', 'l', 'r', 32, 0,
  /* 7884 */ 'm', 'f', 'l', 'r', 32, 0,
  /* 7890 */ 'm', 't', 'l', 'r', 32, 0,
  /* 7896 */ 'q', 'v', 'f', 'm', 'r', 32, 0,
  /* 7903 */ 'm', 'f', 'p', 'm', 'r', 32, 0,
  /* 7910 */ 'm', 't', 'p', 'm', 'r', 32, 0,
  /* 7917 */ 'v', 'p', 'e', 'r', 'm', 'r', 32, 0,
  /* 7925 */ 'x', 'x', 'p', 'e', 'r', 'm', 'r', 32, 0,
  /* 7934 */ 'x', 'x', 'l', 'o', 'r', 32, 0,
  /* 7941 */ 'x', 'x', 'l', 'n', 'o', 'r', 32, 0,
  /* 7949 */ 'c', 'r', 'n', 'o', 'r', 32, 0,
  /* 7956 */ 'e', 'v', 'n', 'o', 'r', 32, 0,
  /* 7963 */ 'c', 'r', 'o', 'r', 32, 0,
  /* 7969 */ 'e', 'v', 'o', 'r', 32, 0,
  /* 7975 */ 'x', 'x', 'l', 'x', 'o', 'r', 32, 0,
  /* 7983 */ 'v', 'p', 'e', 'r', 'm', 'x', 'o', 'r', 32, 0,
  /* 7993 */ 'c', 'r', 'x', 'o', 'r', 32, 0,
  /* 8000 */ 'e', 'v', 'x', 'o', 'r', 32, 0,
  /* 8007 */ 'm', 'f', 's', 'p', 'r', 32, 0,
  /* 8014 */ 'm', 't', 's', 'p', 'r', 32, 0,
  /* 8021 */ 'm', 'f', 's', 'r', 32, 0,
  /* 8027 */ 'm', 'f', 'm', 's', 'r', 32, 0,
  /* 8034 */ 'm', 't', 'm', 's', 'r', 32, 0,
  /* 8041 */ 'm', 't', 's', 'r', 32, 0,
  /* 8047 */ 'l', 'v', 's', 'r', 32, 0,
  /* 8053 */ 'b', 'c', 'c', 't', 'r', 32, 0,
  /* 8060 */ 'm', 'f', 'c', 't', 'r', 32, 0,
  /* 8067 */ 'm', 't', 'c', 't', 'r', 32, 0,
  /* 8074 */ 'q', 'v', 'f', 'a', 'b', 's', 32, 0,
  /* 8082 */ 'q', 'v', 'f', 'n', 'a', 'b', 's', 32, 0,
  /* 8091 */ 'e', 'v', 'a', 'b', 's', 32, 0,
  /* 8098 */ 'v', 's', 'u', 'm', '4', 's', 'b', 's', 32, 0,
  /* 8108 */ 'v', 's', 'u', 'b', 's', 'b', 's', 32, 0,
  /* 8117 */ 'v', 'a', 'd', 'd', 's', 'b', 's', 32, 0,
  /* 8126 */ 'v', 's', 'u', 'm', '4', 'u', 'b', 's', 32, 0,
  /* 8136 */ 'v', 's', 'u', 'b', 'u', 'b', 's', 32, 0,
  /* 8145 */ 'v', 'a', 'd', 'd', 'u', 'b', 's', 32, 0,
  /* 8154 */ 'q', 'v', 'f', 's', 'u', 'b', 's', 32, 0,
  /* 8163 */ 'q', 'v', 'f', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 8173 */ 'q', 'v', 'f', 'n', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 8184 */ 'q', 'v', 'f', 'a', 'd', 'd', 's', 32, 0,
  /* 8193 */ 'q', 'v', 'f', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 8203 */ 'q', 'v', 'f', 'n', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 8214 */ 'q', 'v', 'f', 'x', 'x', 'c', 'p', 'n', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 8229 */ 'q', 'v', 'f', 'x', 'x', 'n', 'p', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 8243 */ 'q', 'v', 'f', 'x', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 8254 */ 'q', 'v', 'f', 'x', 'x', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 8266 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 's', 32, 0,
  /* 8276 */ 'd', 'c', 'b', 't', 'd', 's', 32, 0,
  /* 8284 */ 'd', 'c', 'b', 't', 's', 't', 'd', 's', 32, 0,
  /* 8294 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 8306 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 8318 */ 'x', 'v', 'c', 'v', 's', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 8330 */ 'x', 's', 'c', 'v', 'd', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 8342 */ 'x', 'v', 'c', 'v', 'd', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 8354 */ 'x', 'v', 'c', 'v', 's', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 8366 */ 'q', 'v', 'f', 'r', 'e', 's', 32, 0,
  /* 8374 */ 'q', 'v', 'f', 'r', 's', 'q', 'r', 't', 'e', 's', 32, 0,
  /* 8386 */ 'm', 'f', 'f', 's', 32, 0,
  /* 8392 */ 'l', 'f', 's', 32, 0,
  /* 8397 */ 'm', 'c', 'r', 'f', 's', 32, 0,
  /* 8404 */ 's', 't', 'f', 's', 32, 0,
  /* 8410 */ 'v', 's', 'u', 'm', '4', 's', 'h', 's', 32, 0,
  /* 8420 */ 'v', 's', 'u', 'b', 's', 'h', 's', 32, 0,
  /* 8429 */ 'v', 'm', 'h', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 8440 */ 'v', 'm', 'h', 'r', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 8452 */ 'v', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 8461 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 's', 32, 0,
  /* 8471 */ 'v', 's', 'u', 'b', 'u', 'h', 's', 32, 0,
  /* 8480 */ 'v', 'a', 'd', 'd', 'u', 'h', 's', 32, 0,
  /* 8489 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 's', 32, 0,
  /* 8499 */ 's', 'u', 'b', 'i', 's', 32, 0,
  /* 8506 */ 'a', 'd', 'd', 'i', 's', 32, 0,
  /* 8513 */ 'l', 'i', 's', 32, 0,
  /* 8518 */ 'x', 'o', 'r', 'i', 's', 32, 0,
  /* 8525 */ 'e', 'v', 's', 'r', 'w', 'i', 's', 32, 0,
  /* 8534 */ 'i', 'c', 'b', 't', 'l', 's', 32, 0,
  /* 8542 */ 'q', 'v', 'f', 'm', 'u', 'l', 's', 32, 0,
  /* 8551 */ 'q', 'v', 'f', 'x', 'm', 'u', 'l', 's', 32, 0,
  /* 8561 */ 'e', 'v', 'l', 'w', 'h', 'o', 's', 32, 0,
  /* 8570 */ 'v', 'p', 'k', 's', 'd', 's', 's', 32, 0,
  /* 8579 */ 'v', 'p', 'k', 's', 'h', 's', 's', 32, 0,
  /* 8588 */ 'v', 'p', 'k', 's', 'w', 's', 's', 32, 0,
  /* 8597 */ 'e', 'v', 'c', 'm', 'p', 'g', 't', 's', 32, 0,
  /* 8607 */ 'e', 'v', 'c', 'm', 'p', 'l', 't', 's', 32, 0,
  /* 8617 */ 'f', 's', 'q', 'r', 't', 's', 32, 0,
  /* 8625 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 'u', 's', 32, 0,
  /* 8636 */ 'v', 'p', 'k', 's', 'd', 'u', 's', 32, 0,
  /* 8645 */ 'v', 'p', 'k', 'u', 'd', 'u', 's', 32, 0,
  /* 8654 */ 'v', 'p', 'k', 's', 'h', 'u', 's', 32, 0,
  /* 8663 */ 'v', 'p', 'k', 'u', 'h', 'u', 's', 32, 0,
  /* 8672 */ 'v', 'p', 'k', 's', 'w', 'u', 's', 32, 0,
  /* 8681 */ 'v', 'p', 'k', 'u', 'w', 'u', 's', 32, 0,
  /* 8690 */ 'f', 'd', 'i', 'v', 's', 32, 0,
  /* 8697 */ 'e', 'v', 's', 'r', 'w', 's', 32, 0,
  /* 8705 */ 'm', 't', 'v', 's', 'r', 'w', 's', 32, 0,
  /* 8714 */ 'v', 's', 'u', 'm', '2', 's', 'w', 's', 32, 0,
  /* 8724 */ 'v', 's', 'u', 'b', 's', 'w', 's', 32, 0,
  /* 8733 */ 'v', 'a', 'd', 'd', 's', 'w', 's', 32, 0,
  /* 8742 */ 'v', 's', 'u', 'm', 's', 'w', 's', 32, 0,
  /* 8751 */ 'v', 's', 'u', 'b', 'u', 'w', 's', 32, 0,
  /* 8760 */ 'v', 'a', 'd', 'd', 'u', 'w', 's', 32, 0,
  /* 8769 */ 'e', 'v', 'd', 'i', 'v', 'w', 's', 32, 0,
  /* 8778 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 8790 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 8802 */ 'x', 'v', 'c', 'v', 's', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 8814 */ 'x', 's', 'c', 'v', 'd', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 8826 */ 'x', 'v', 'c', 'v', 'd', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 8838 */ 'x', 'v', 'c', 'v', 's', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 8850 */ 'v', 'c', 't', 's', 'x', 's', 32, 0,
  /* 8858 */ 'v', 'c', 't', 'u', 'x', 's', 32, 0,
  /* 8866 */ 'l', 'd', 'a', 't', 32, 0,
  /* 8872 */ 's', 't', 'd', 'a', 't', 32, 0,
  /* 8879 */ 'e', 'v', 'l', 'h', 'h', 'e', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 8892 */ 'e', 'v', 'l', 'w', 'h', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 8904 */ 'e', 'v', 'l', 'h', 'h', 'o', 's', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 8918 */ 'e', 'v', 'l', 'h', 'h', 'o', 'u', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 8932 */ 'e', 'v', 'l', 'w', 'w', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 8944 */ 'l', 'w', 'a', 't', 32, 0,
  /* 8950 */ 's', 't', 'w', 'a', 't', 32, 0,
  /* 8957 */ 'd', 'c', 'b', 't', 32, 0,
  /* 8963 */ 'i', 'c', 'b', 't', 32, 0,
  /* 8969 */ 'd', 'c', 'b', 't', 'c', 't', 32, 0,
  /* 8977 */ 'd', 'c', 'b', 't', 's', 't', 'c', 't', 32, 0,
  /* 8987 */ 'q', 'v', 'f', 'c', 'm', 'p', 'g', 't', 32, 0,
  /* 8997 */ 'w', 'a', 'i', 't', 32, 0,
  /* 9003 */ 'q', 'v', 'f', 'c', 'm', 'p', 'l', 't', 32, 0,
  /* 9013 */ 'f', 's', 'q', 'r', 't', 32, 0,
  /* 9020 */ 'f', 't', 's', 'q', 'r', 't', 32, 0,
  /* 9028 */ 'p', 'a', 's', 't', 'e', '_', 'l', 'a', 's', 't', 32, 0,
  /* 9040 */ 'v', 'n', 'c', 'i', 'p', 'h', 'e', 'r', 'l', 'a', 's', 't', 32, 0,
  /* 9054 */ 'v', 'c', 'i', 'p', 'h', 'e', 'r', 'l', 'a', 's', 't', 32, 0,
  /* 9067 */ 'd', 'c', 'b', 's', 't', 32, 0,
  /* 9074 */ 'd', 's', 't', 32, 0,
  /* 9079 */ 'c', 'o', 'p', 'y', '_', 'f', 'i', 'r', 's', 't', 32, 0,
  /* 9091 */ 'd', 'c', 'b', 't', 's', 't', 32, 0,
  /* 9099 */ 'd', 's', 't', 's', 't', 32, 0,
  /* 9106 */ 'd', 'c', 'b', 't', 't', 32, 0,
  /* 9113 */ 'd', 's', 't', 't', 32, 0,
  /* 9119 */ 'd', 'c', 'b', 't', 's', 't', 't', 32, 0,
  /* 9128 */ 'd', 's', 't', 's', 't', 't', 32, 0,
  /* 9136 */ 'l', 'h', 'a', 'u', 32, 0,
  /* 9142 */ 's', 't', 'b', 'u', 32, 0,
  /* 9148 */ 'l', 'f', 'd', 'u', 32, 0,
  /* 9154 */ 's', 't', 'f', 'd', 'u', 32, 0,
  /* 9161 */ 'm', 'u', 'l', 'h', 'd', 'u', 32, 0,
  /* 9169 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 'u', 32, 0,
  /* 9179 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 'u', 32, 0,
  /* 9189 */ 'l', 'd', 'u', 32, 0,
  /* 9194 */ 's', 't', 'd', 'u', 32, 0,
  /* 9200 */ 'd', 'i', 'v', 'd', 'u', 32, 0,
  /* 9207 */ 'd', 'i', 'v', 'd', 'e', 'u', 32, 0,
  /* 9215 */ 'd', 'i', 'v', 'w', 'e', 'u', 32, 0,
  /* 9223 */ 's', 't', 'h', 'u', 32, 0,
  /* 9229 */ 'e', 'v', 's', 'r', 'w', 'i', 'u', 32, 0,
  /* 9238 */ 'e', 'v', 'l', 'w', 'h', 'o', 'u', 32, 0,
  /* 9247 */ 'f', 'c', 'm', 'p', 'u', 32, 0,
  /* 9254 */ 'l', 'f', 's', 'u', 32, 0,
  /* 9260 */ 's', 't', 'f', 's', 'u', 32, 0,
  /* 9267 */ 'e', 'v', 'c', 'm', 'p', 'g', 't', 'u', 32, 0,
  /* 9277 */ 'e', 'v', 'c', 'm', 'p', 'l', 't', 'u', 32, 0,
  /* 9287 */ 'm', 'u', 'l', 'h', 'w', 'u', 32, 0,
  /* 9295 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 'u', 32, 0,
  /* 9305 */ 'e', 'v', 's', 'r', 'w', 'u', 32, 0,
  /* 9313 */ 's', 't', 'w', 'u', 32, 0,
  /* 9319 */ 'e', 'v', 'd', 'i', 'v', 'w', 'u', 32, 0,
  /* 9328 */ 'l', 'b', 'z', 'u', 32, 0,
  /* 9334 */ 'l', 'h', 'z', 'u', 32, 0,
  /* 9340 */ 'l', 'w', 'z', 'u', 32, 0,
  /* 9346 */ 's', 'l', 'b', 'm', 'f', 'e', 'v', 32, 0,
  /* 9355 */ 'f', 'd', 'i', 'v', 32, 0,
  /* 9361 */ 'f', 't', 'd', 'i', 'v', 32, 0,
  /* 9368 */ 'v', 's', 'l', 'v', 32, 0,
  /* 9374 */ 'x', 'x', 'l', 'e', 'q', 'v', 32, 0,
  /* 9382 */ 'c', 'r', 'e', 'q', 'v', 32, 0,
  /* 9389 */ 'e', 'v', 'e', 'q', 'v', 32, 0,
  /* 9396 */ 'v', 's', 'r', 'v', 32, 0,
  /* 9402 */ 'l', 'x', 'v', 32, 0,
  /* 9407 */ 's', 't', 'x', 'v', 32, 0,
  /* 9413 */ 'v', 'e', 'x', 't', 's', 'b', '2', 'w', 32, 0,
  /* 9423 */ 'v', 'e', 'x', 't', 's', 'h', '2', 'w', 32, 0,
  /* 9433 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 'a', 'a', 'w', 32, 0,
  /* 9446 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 'a', 'a', 'w', 32, 0,
  /* 9459 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 'a', 'a', 'w', 32, 0,
  /* 9472 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 'a', 'a', 'w', 32, 0,
  /* 9485 */ 'e', 'v', 'a', 'd', 'd', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9498 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9511 */ 'e', 'v', 's', 'u', 'b', 'f', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9525 */ 'e', 'v', 'm', 'w', 'l', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9538 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9551 */ 'e', 'v', 'a', 'd', 'd', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9564 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9577 */ 'e', 'v', 's', 'u', 'b', 'f', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9591 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9604 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9617 */ 'e', 'v', 'a', 'd', 'd', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9630 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9643 */ 'e', 'v', 's', 'u', 'b', 'f', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9657 */ 'e', 'v', 'm', 'w', 'l', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9670 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9683 */ 'e', 'v', 'a', 'd', 'd', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9696 */ 'e', 'v', 'm', 'h', 'e', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9709 */ 'e', 'v', 's', 'u', 'b', 'f', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9723 */ 'e', 'v', 'm', 'w', 'l', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9736 */ 'e', 'v', 'm', 'h', 'o', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9749 */ 'v', 's', 'h', 'a', 's', 'i', 'g', 'm', 'a', 'w', 32, 0,
  /* 9761 */ 'v', 's', 'r', 'a', 'w', 32, 0,
  /* 9768 */ 'v', 'p', 'r', 't', 'y', 'b', 'w', 32, 0,
  /* 9777 */ 'e', 'v', 'a', 'd', 'd', 'w', 32, 0,
  /* 9785 */ 'e', 'v', 'l', 'd', 'w', 32, 0,
  /* 9792 */ 'e', 'v', 'r', 'n', 'd', 'w', 32, 0,
  /* 9800 */ 'e', 'v', 's', 't', 'd', 'w', 32, 0,
  /* 9808 */ 'v', 'm', 'r', 'g', 'e', 'w', 32, 0,
  /* 9816 */ 'v', 'c', 'm', 'p', 'n', 'e', 'w', 32, 0,
  /* 9825 */ 'e', 'v', 's', 'u', 'b', 'f', 'w', 32, 0,
  /* 9834 */ 'e', 'v', 's', 'u', 'b', 'i', 'f', 'w', 32, 0,
  /* 9844 */ 'v', 'n', 'e', 'g', 'w', 32, 0,
  /* 9851 */ 'v', 'm', 'r', 'g', 'h', 'w', 32, 0,
  /* 9859 */ 'x', 'x', 'm', 'r', 'g', 'h', 'w', 32, 0,
  /* 9868 */ 'm', 'u', 'l', 'h', 'w', 32, 0,
  /* 9875 */ 'e', 'v', 'a', 'd', 'd', 'i', 'w', 32, 0,
  /* 9884 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 32, 0,
  /* 9893 */ 'v', 'm', 'r', 'g', 'l', 'w', 32, 0,
  /* 9901 */ 'x', 'x', 'm', 'r', 'g', 'l', 'w', 32, 0,
  /* 9910 */ 'm', 'u', 'l', 'l', 'w', 32, 0,
  /* 9917 */ 'c', 'm', 'p', 'l', 'w', 32, 0,
  /* 9924 */ 'e', 'v', 'r', 'l', 'w', 32, 0,
  /* 9931 */ 'e', 'v', 's', 'l', 'w', 32, 0,
  /* 9938 */ 'l', 'm', 'w', 32, 0,
  /* 9943 */ 's', 't', 'm', 'w', 32, 0,
  /* 9949 */ 'v', 'p', 'm', 's', 'u', 'm', 'w', 32, 0,
  /* 9958 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 'a', 'n', 'w', 32, 0,
  /* 9971 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 'a', 'n', 'w', 32, 0,
  /* 9984 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 'a', 'n', 'w', 32, 0,
  /* 9997 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 'a', 'n', 'w', 32, 0,
  /* 10010 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 10023 */ 'e', 'v', 'm', 'w', 'l', 's', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 10036 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 10049 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 10062 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 10075 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 10088 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 10101 */ 'e', 'v', 'm', 'w', 'l', 's', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 10114 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 10127 */ 'e', 'v', 'm', 'h', 'e', 'u', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 10140 */ 'e', 'v', 'm', 'w', 'l', 'u', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 10153 */ 'e', 'v', 'm', 'h', 'o', 'u', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 10166 */ 'v', 'm', 'r', 'g', 'o', 'w', 32, 0,
  /* 10174 */ 'c', 'm', 'p', 'w', 32, 0,
  /* 10180 */ 'x', 'x', 'b', 'r', 'w', 32, 0,
  /* 10187 */ 'v', 's', 'r', 'w', 32, 0,
  /* 10193 */ 'v', 'm', 'u', 'l', 'e', 's', 'w', 32, 0,
  /* 10202 */ 'v', 'a', 'v', 'g', 's', 'w', 32, 0,
  /* 10210 */ 'v', 'u', 'p', 'k', 'h', 's', 'w', 32, 0,
  /* 10219 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'w', 32, 0,
  /* 10229 */ 'v', 'u', 'p', 'k', 'l', 's', 'w', 32, 0,
  /* 10238 */ 'e', 'v', 'c', 'n', 't', 'l', 's', 'w', 32, 0,
  /* 10248 */ 'v', 'm', 'i', 'n', 's', 'w', 32, 0,
  /* 10256 */ 'v', 'm', 'u', 'l', 'o', 's', 'w', 32, 0,
  /* 10265 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', 32, 0,
  /* 10275 */ 'e', 'x', 't', 's', 'w', 32, 0,
  /* 10282 */ 'v', 'm', 'a', 'x', 's', 'w', 32, 0,
  /* 10290 */ 'v', 's', 'p', 'l', 't', 'w', 32, 0,
  /* 10298 */ 'x', 'x', 's', 'p', 'l', 't', 'w', 32, 0,
  /* 10307 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'w', 32, 0,
  /* 10317 */ 'v', 'i', 'n', 's', 'e', 'r', 't', 'w', 32, 0,
  /* 10327 */ 'x', 'x', 'i', 'n', 's', 'e', 'r', 't', 'w', 32, 0,
  /* 10338 */ 's', 't', 'w', 32, 0,
  /* 10343 */ 'v', 's', 'u', 'b', 'c', 'u', 'w', 32, 0,
  /* 10352 */ 'v', 'a', 'd', 'd', 'c', 'u', 'w', 32, 0,
  /* 10361 */ 'v', 'a', 'b', 's', 'd', 'u', 'w', 32, 0,
  /* 10370 */ 'v', 'm', 'u', 'l', 'e', 'u', 'w', 32, 0,
  /* 10379 */ 'v', 'a', 'v', 'g', 'u', 'w', 32, 0,
  /* 10387 */ 'v', 'm', 'i', 'n', 'u', 'w', 32, 0,
  /* 10395 */ 'v', 'm', 'u', 'l', 'o', 'u', 'w', 32, 0,
  /* 10404 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', 32, 0,
  /* 10414 */ 'v', 'e', 'x', 't', 'r', 'a', 'c', 't', 'u', 'w', 32, 0,
  /* 10426 */ 'x', 'x', 'e', 'x', 't', 'r', 'a', 'c', 't', 'u', 'w', 32, 0,
  /* 10439 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', 32, 0,
  /* 10449 */ 'v', 'm', 'a', 'x', 'u', 'w', 32, 0,
  /* 10457 */ 'd', 'i', 'v', 'w', 32, 0,
  /* 10463 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'w', 32, 0,
  /* 10473 */ 'v', 'c', 'l', 'z', 'w', 32, 0,
  /* 10480 */ 'e', 'v', 'c', 'n', 't', 'l', 'z', 'w', 32, 0,
  /* 10490 */ 'v', 'c', 't', 'z', 'w', 32, 0,
  /* 10497 */ 'c', 'n', 't', 't', 'z', 'w', 32, 0,
  /* 10505 */ 'l', 'x', 'v', 'd', '2', 'x', 32, 0,
  /* 10513 */ 's', 't', 'x', 'v', 'd', '2', 'x', 32, 0,
  /* 10522 */ 'l', 'x', 'v', 'w', '4', 'x', 32, 0,
  /* 10530 */ 's', 't', 'x', 'v', 'w', '4', 'x', 32, 0,
  /* 10539 */ 'l', 'x', 'v', 'b', '1', '6', 'x', 32, 0,
  /* 10548 */ 's', 't', 'x', 'v', 'b', '1', '6', 'x', 32, 0,
  /* 10558 */ 'l', 'x', 'v', 'h', '8', 'x', 32, 0,
  /* 10566 */ 's', 't', 'x', 'v', 'h', '8', 'x', 32, 0,
  /* 10575 */ 'l', 'h', 'a', 'x', 32, 0,
  /* 10581 */ 't', 'l', 'b', 'i', 'v', 'a', 'x', 32, 0,
  /* 10590 */ 'q', 'v', 'l', 'f', 'i', 'w', 'a', 'x', 32, 0,
  /* 10600 */ 'l', 'x', 's', 'i', 'w', 'a', 'x', 32, 0,
  /* 10609 */ 'l', 'w', 'a', 'x', 32, 0,
  /* 10615 */ 'l', 'v', 'e', 'b', 'x', 32, 0,
  /* 10622 */ 's', 't', 'v', 'e', 'b', 'x', 32, 0,
  /* 10630 */ 's', 't', 'x', 's', 'i', 'b', 'x', 32, 0,
  /* 10639 */ 's', 't', 'b', 'x', 32, 0,
  /* 10645 */ 'q', 'v', 'l', 'f', 'c', 'd', 'x', 32, 0,
  /* 10654 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 32, 0,
  /* 10664 */ 'e', 'v', 'l', 'd', 'd', 'x', 32, 0,
  /* 10672 */ 'e', 'v', 's', 't', 'd', 'd', 'x', 32, 0,
  /* 10681 */ 'q', 'v', 'l', 'f', 'd', 'x', 32, 0,
  /* 10689 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 32, 0,
  /* 10698 */ 'q', 'v', 'l', 'p', 'c', 'l', 'd', 'x', 32, 0,
  /* 10708 */ 'q', 'v', 'l', 'p', 'c', 'r', 'd', 'x', 32, 0,
  /* 10718 */ 'l', 'x', 's', 'd', 'x', 32, 0,
  /* 10725 */ 's', 't', 'x', 's', 'd', 'x', 32, 0,
  /* 10733 */ 's', 't', 'd', 'x', 32, 0,
  /* 10739 */ 'e', 'v', 'l', 'w', 'h', 'e', 'x', 32, 0,
  /* 10748 */ 'e', 'v', 's', 't', 'w', 'h', 'e', 'x', 32, 0,
  /* 10758 */ 'e', 'v', 's', 't', 'w', 'w', 'e', 'x', 32, 0,
  /* 10768 */ 'e', 'v', 'l', 'd', 'h', 'x', 32, 0,
  /* 10776 */ 'e', 'v', 's', 't', 'd', 'h', 'x', 32, 0,
  /* 10785 */ 'l', 'v', 'e', 'h', 'x', 32, 0,
  /* 10792 */ 's', 't', 'v', 'e', 'h', 'x', 32, 0,
  /* 10800 */ 's', 't', 'x', 's', 'i', 'h', 'x', 32, 0,
  /* 10809 */ 's', 't', 'h', 'x', 32, 0,
  /* 10815 */ 's', 't', 'b', 'c', 'i', 'x', 32, 0,
  /* 10823 */ 'l', 'd', 'c', 'i', 'x', 32, 0,
  /* 10830 */ 's', 't', 'd', 'c', 'i', 'x', 32, 0,
  /* 10838 */ 's', 't', 'h', 'c', 'i', 'x', 32, 0,
  /* 10846 */ 's', 't', 'w', 'c', 'i', 'x', 32, 0,
  /* 10854 */ 'l', 'b', 'z', 'c', 'i', 'x', 32, 0,
  /* 10862 */ 'l', 'h', 'z', 'c', 'i', 'x', 32, 0,
  /* 10870 */ 'l', 'w', 'z', 'c', 'i', 'x', 32, 0,
  /* 10878 */ 'x', 's', 'r', 'q', 'p', 'i', 'x', 32, 0,
  /* 10887 */ 'v', 'e', 'x', 't', 'u', 'b', 'l', 'x', 32, 0,
  /* 10897 */ 'v', 'e', 'x', 't', 'u', 'h', 'l', 'x', 32, 0,
  /* 10907 */ 'v', 'e', 'x', 't', 'u', 'w', 'l', 'x', 32, 0,
  /* 10917 */ 'l', 'd', 'm', 'x', 32, 0,
  /* 10923 */ 'v', 's', 'b', 'o', 'x', 32, 0,
  /* 10930 */ 'e', 'v', 's', 't', 'w', 'h', 'o', 'x', 32, 0,
  /* 10940 */ 'e', 'v', 's', 't', 'w', 'w', 'o', 'x', 32, 0,
  /* 10950 */ 'v', 'u', 'p', 'k', 'h', 'p', 'x', 32, 0,
  /* 10959 */ 'v', 'p', 'k', 'p', 'x', 32, 0,
  /* 10966 */ 'v', 'u', 'p', 'k', 'l', 'p', 'x', 32, 0,
  /* 10975 */ 'l', 'x', 's', 's', 'p', 'x', 32, 0,
  /* 10983 */ 's', 't', 'x', 's', 's', 'p', 'x', 32, 0,
  /* 10992 */ 'l', 'b', 'a', 'r', 'x', 32, 0,
  /* 10999 */ 'l', 'd', 'a', 'r', 'x', 32, 0,
  /* 11006 */ 'l', 'h', 'a', 'r', 'x', 32, 0,
  /* 11013 */ 'l', 'w', 'a', 'r', 'x', 32, 0,
  /* 11020 */ 'l', 'd', 'b', 'r', 'x', 32, 0,
  /* 11027 */ 's', 't', 'd', 'b', 'r', 'x', 32, 0,
  /* 11035 */ 'l', 'h', 'b', 'r', 'x', 32, 0,
  /* 11042 */ 's', 't', 'h', 'b', 'r', 'x', 32, 0,
  /* 11050 */ 'v', 'e', 'x', 't', 'u', 'b', 'r', 'x', 32, 0,
  /* 11060 */ 'l', 'w', 'b', 'r', 'x', 32, 0,
  /* 11067 */ 's', 't', 'w', 'b', 'r', 'x', 32, 0,
  /* 11075 */ 'v', 'e', 'x', 't', 'u', 'h', 'r', 'x', 32, 0,
  /* 11085 */ 'v', 'e', 'x', 't', 'u', 'w', 'r', 'x', 32, 0,
  /* 11095 */ 'm', 'c', 'r', 'x', 'r', 'x', 32, 0,
  /* 11103 */ 't', 'l', 'b', 's', 'x', 32, 0,
  /* 11110 */ 'q', 'v', 'l', 'f', 'c', 's', 'x', 32, 0,
  /* 11119 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 32, 0,
  /* 11129 */ 'l', 'x', 'v', 'd', 's', 'x', 32, 0,
  /* 11137 */ 'v', 'c', 'f', 's', 'x', 32, 0,
  /* 11144 */ 'q', 'v', 'l', 'f', 's', 'x', 32, 0,
  /* 11152 */ 'q', 'v', 's', 't', 'f', 's', 'x', 32, 0,
  /* 11161 */ 'q', 'v', 'l', 'p', 'c', 'l', 's', 'x', 32, 0,
  /* 11171 */ 'e', 'v', 'l', 'w', 'h', 'o', 's', 'x', 32, 0,
  /* 11181 */ 'q', 'v', 'l', 'p', 'c', 'r', 's', 'x', 32, 0,
  /* 11191 */ 'l', 'x', 'v', 'w', 's', 'x', 32, 0,
  /* 11199 */ 'e', 'v', 'l', 'h', 'h', 'e', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 11213 */ 'e', 'v', 'l', 'w', 'h', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 11226 */ 'e', 'v', 'l', 'h', 'h', 'o', 's', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 11241 */ 'e', 'v', 'l', 'h', 'h', 'o', 'u', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 11256 */ 'e', 'v', 'l', 'w', 'w', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 11269 */ 'l', 'h', 'a', 'u', 'x', 32, 0,
  /* 11276 */ 'l', 'w', 'a', 'u', 'x', 32, 0,
  /* 11283 */ 's', 't', 'b', 'u', 'x', 32, 0,
  /* 11290 */ 'q', 'v', 'l', 'f', 'c', 'd', 'u', 'x', 32, 0,
  /* 11300 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 32, 0,
  /* 11311 */ 'q', 'v', 'l', 'f', 'd', 'u', 'x', 32, 0,
  /* 11320 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 32, 0,
  /* 11330 */ 'l', 'd', 'u', 'x', 32, 0,
  /* 11336 */ 's', 't', 'd', 'u', 'x', 32, 0,
  /* 11343 */ 'v', 'c', 'f', 'u', 'x', 32, 0,
  /* 11350 */ 's', 't', 'h', 'u', 'x', 32, 0,
  /* 11357 */ 'e', 'v', 'l', 'w', 'h', 'o', 'u', 'x', 32, 0,
  /* 11367 */ 'q', 'v', 'l', 'f', 'c', 's', 'u', 'x', 32, 0,
  /* 11377 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 32, 0,
  /* 11388 */ 'q', 'v', 'l', 'f', 's', 'u', 'x', 32, 0,
  /* 11397 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 32, 0,
  /* 11407 */ 's', 't', 'w', 'u', 'x', 32, 0,
  /* 11414 */ 'l', 'b', 'z', 'u', 'x', 32, 0,
  /* 11421 */ 'l', 'h', 'z', 'u', 'x', 32, 0,
  /* 11428 */ 'l', 'w', 'z', 'u', 'x', 32, 0,
  /* 11435 */ 'l', 'v', 'x', 32, 0,
  /* 11440 */ 's', 't', 'v', 'x', 32, 0,
  /* 11446 */ 'l', 'x', 'v', 'x', 32, 0,
  /* 11452 */ 's', 't', 'x', 'v', 'x', 32, 0,
  /* 11459 */ 'e', 'v', 'l', 'd', 'w', 'x', 32, 0,
  /* 11467 */ 'e', 'v', 's', 't', 'd', 'w', 'x', 32, 0,
  /* 11476 */ 'l', 'v', 'e', 'w', 'x', 32, 0,
  /* 11483 */ 's', 't', 'v', 'e', 'w', 'x', 32, 0,
  /* 11491 */ 'q', 'v', 's', 't', 'f', 'i', 'w', 'x', 32, 0,
  /* 11501 */ 's', 't', 'x', 's', 'i', 'w', 'x', 32, 0,
  /* 11510 */ 's', 't', 'w', 'x', 32, 0,
  /* 11516 */ 'l', 'x', 's', 'i', 'b', 'z', 'x', 32, 0,
  /* 11525 */ 'l', 'b', 'z', 'x', 32, 0,
  /* 11531 */ 'l', 'x', 's', 'i', 'h', 'z', 'x', 32, 0,
  /* 11540 */ 'l', 'h', 'z', 'x', 32, 0,
  /* 11546 */ 'q', 'v', 'l', 'f', 'i', 'w', 'z', 'x', 32, 0,
  /* 11556 */ 'l', 'x', 's', 'i', 'w', 'z', 'x', 32, 0,
  /* 11565 */ 'l', 'w', 'z', 'x', 32, 0,
  /* 11571 */ 'c', 'o', 'p', 'y', 32, 0,
  /* 11577 */ 'd', 'c', 'b', 'z', 32, 0,
  /* 11583 */ 'l', 'b', 'z', 32, 0,
  /* 11588 */ 'b', 'd', 'z', 32, 0,
  /* 11593 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 'z', 32, 0,
  /* 11603 */ 'x', 's', 'c', 'v', 'q', 'p', 's', 'd', 'z', 32, 0,
  /* 11614 */ 'x', 's', 'c', 'v', 'q', 'p', 'u', 'd', 'z', 32, 0,
  /* 11625 */ 'l', 'h', 'z', 32, 0,
  /* 11630 */ 'v', 'r', 'f', 'i', 'z', 32, 0,
  /* 11637 */ 'x', 's', 'r', 'd', 'p', 'i', 'z', 32, 0,
  /* 11646 */ 'x', 'v', 'r', 'd', 'p', 'i', 'z', 32, 0,
  /* 11655 */ 'x', 'v', 'r', 's', 'p', 'i', 'z', 32, 0,
  /* 11664 */ 'q', 'v', 'f', 'r', 'i', 'z', 32, 0,
  /* 11672 */ 'b', 'd', 'n', 'z', 32, 0,
  /* 11678 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 'u', 'z', 32, 0,
  /* 11689 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 'u', 'z', 32, 0,
  /* 11700 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 'z', 32, 0,
  /* 11710 */ 'l', 'w', 'z', 32, 0,
  /* 11715 */ 'm', 'f', 'v', 's', 'r', 'w', 'z', 32, 0,
  /* 11724 */ 'm', 't', 'v', 's', 'r', 'w', 'z', 32, 0,
  /* 11733 */ 'x', 's', 'c', 'v', 'q', 'p', 's', 'w', 'z', 32, 0,
  /* 11744 */ 'x', 's', 'c', 'v', 'q', 'p', 'u', 'w', 'z', 32, 0,
  /* 11755 */ 'b', 'd', 'z', 'l', 'r', 'l', '+', 0,
  /* 11763 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', '+', 0,
  /* 11772 */ 'b', 'd', 'z', 'l', 'r', '+', 0,
  /* 11779 */ 'b', 'd', 'n', 'z', 'l', 'r', '+', 0,
  /* 11787 */ 'b', 'd', 'z', 'l', 'r', 'l', '-', 0,
  /* 11795 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', '-', 0,
  /* 11804 */ 'b', 'd', 'z', 'l', 'r', '-', 0,
  /* 11811 */ 'b', 'd', 'n', 'z', 'l', 'r', '-', 0,
  /* 11819 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'P', 'a', 't', 'c', 'h', 'a', 'b', 'l', 'e', 32, 'R', 'E', 'T', '.', 0,
  /* 11850 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 11873 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'a', 'i', 'l', 32, 'C', 'a', 'l', 'l', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 11896 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 11918 */ 't', 'r', 'e', 'c', 'h', 'k', 'p', 't', '.', 0,
  /* 11928 */ 'o', 'r', 'i', 32, '1', ',', 32, '1', ',', 32, '0', 0,
  /* 11940 */ 'o', 'r', 'i', 32, '2', ',', 32, '2', ',', 32, '0', 0,
  /* 11952 */ '#', 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', '3', '2', 0,
  /* 11969 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '3', '2', 0,
  /* 11990 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '3', '2', 0,
  /* 12011 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 12033 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 12054 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '3', '2', 0,
  /* 12076 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '3', '2', 0,
  /* 12097 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 12114 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 12135 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 12155 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '3', '2', 0,
  /* 12177 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '3', '2', 0,
  /* 12198 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', '3', '2', 0,
  /* 12212 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', '3', '2', 0,
  /* 12226 */ '#', 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 12241 */ '#', 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 12256 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '3', '2', 0,
  /* 12275 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '3', '2', 0,
  /* 12293 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 12311 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 12329 */ 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 12344 */ 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 12357 */ '#', 'D', 'F', 'L', 'O', 'A', 'D', 'f', '3', '2', 0,
  /* 12368 */ '#', 'D', 'F', 'S', 'T', 'O', 'R', 'E', 'f', '3', '2', 0,
  /* 12380 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '6', '4', 0,
  /* 12401 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '6', '4', 0,
  /* 12422 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 12444 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '6', '4', 0,
  /* 12466 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '6', '4', 0,
  /* 12487 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 12504 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 12525 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 12546 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 12566 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '6', '4', 0,
  /* 12588 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '6', '4', 0,
  /* 12609 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '6', '4', 0,
  /* 12628 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '6', '4', 0,
  /* 12646 */ '#', 'D', 'F', 'L', 'O', 'A', 'D', 'f', '6', '4', 0,
  /* 12657 */ '#', 'D', 'F', 'S', 'T', 'O', 'R', 'E', 'f', '6', '4', 0,
  /* 12669 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'i', '6', '4', 0,
  /* 12690 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '4', 0,
  /* 12704 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '4', 0,
  /* 12715 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '4', 0,
  /* 12729 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '4', 0,
  /* 12740 */ 'c', 'r', 'x', 'o', 'r', 32, '6', ',', 32, '6', ',', 32, '6', 0,
  /* 12754 */ 'c', 'r', 'e', 'q', 'v', 32, '6', ',', 32, '6', ',', 32, '6', 0,
  /* 12768 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '1', '6', 0,
  /* 12789 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '1', '6', 0,
  /* 12810 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 12832 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 12853 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '1', '6', 0,
  /* 12875 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '1', '6', 0,
  /* 12896 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 12913 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 12934 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 12954 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '1', '6', 0,
  /* 12976 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '1', '6', 0,
  /* 12997 */ '#', 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', '8', 0,
  /* 13008 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '8', 0,
  /* 13022 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '8', 0,
  /* 13033 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '8', 0,
  /* 13053 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '8', 0,
  /* 13067 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '8', 0,
  /* 13087 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 13108 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 13128 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '8', 0,
  /* 13149 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '8', 0,
  /* 13169 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 13189 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '8', 0,
  /* 13208 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '8', 0,
  /* 13227 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '8', 0,
  /* 13238 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '8', 0,
  /* 13259 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '8', 0,
  /* 13279 */ '#', 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', '8', 0,
  /* 13292 */ '#', 'D', 'Y', 'N', 'A', 'R', 'E', 'A', 'O', 'F', 'F', 'S', 'E', 'T', '8', 0,
  /* 13308 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', '8', 0,
  /* 13325 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', '8', 0,
  /* 13342 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'i', '8', 0,
  /* 13358 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'o', 'c', 'H', 'A', 0,
  /* 13370 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'g', 'd', 'H', 'A', 0,
  /* 13384 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'l', 'd', 'H', 'A', 0,
  /* 13398 */ '#', 'A', 'D', 'D', 'I', 'S', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 13415 */ '#', 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 13430 */ '#', 'R', 'e', 'a', 'd', 'T', 'B', 0,
  /* 13438 */ '#', 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', 0,
  /* 13448 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'B', 'R', 'C', 0,
  /* 13464 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'B', 'R', 'C', 0,
  /* 13477 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'F', 'R', 'C', 0,
  /* 13493 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'F', 'R', 'C', 0,
  /* 13506 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'F', 'R', 'C', 0,
  /* 13523 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'F', 'R', 'C', 0,
  /* 13537 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'R', 'R', 'C', 0,
  /* 13553 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'R', 'R', 'C', 0,
  /* 13566 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'S', 'R', 'C', 0,
  /* 13582 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'S', 'R', 'C', 0,
  /* 13595 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'S', 'R', 'C', 0,
  /* 13612 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'S', 'R', 'C', 0,
  /* 13626 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'R', 'C', 0,
  /* 13642 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'R', 'C', 0,
  /* 13655 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 13668 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 13675 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 13685 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 13701 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 13715 */ '#', 'L', 'D', 't', 'o', 'c', 'J', 'T', 'I', 0,
  /* 13725 */ '#', 'L', 'D', 't', 'o', 'c', 'L', 0,
  /* 13733 */ '#', 'A', 'D', 'D', 'I', 't', 'o', 'c', 'L', 0,
  /* 13743 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 0,
  /* 13755 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 0,
  /* 13767 */ '#', 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', 0,
  /* 13780 */ '#', 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', 0,
  /* 13793 */ '#', 'U', 'p', 'd', 'a', 't', 'e', 'G', 'B', 'R', 0,
  /* 13804 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 0,
  /* 13816 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 0,
  /* 13826 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 'A', 'D', 'D', 'R', 0,
  /* 13842 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 'A', 'D', 'D', 'R', 0,
  /* 13858 */ '#', 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', 0,
  /* 13872 */ '#', 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', 0,
  /* 13884 */ '#', 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', 0,
  /* 13896 */ '#', 'M', 'o', 'v', 'e', 'G', 'O', 'T', 't', 'o', 'L', 'R', 0,
  /* 13909 */ '#', 'T', 'C', 'H', 'E', 'C', 'K', '_', 'R', 'E', 'T', 0,
  /* 13921 */ '#', 'D', 'Y', 'N', 'A', 'R', 'E', 'A', 'O', 'F', 'F', 'S', 'E', 'T', 0,
  /* 13936 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 13951 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 13964 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', 0,
  /* 13980 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', 0,
  /* 13996 */ '#', 'P', 'P', 'C', '3', '2', 'G', 'O', 'T', 0,
  /* 14006 */ '#', 'P', 'P', 'C', '3', '2', 'P', 'I', 'C', 'G', 'O', 'T', 0,
  /* 14019 */ '#', 'L', 'D', 't', 'o', 'c', 'C', 'P', 'T', 0,
  /* 14029 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 14044 */ 'b', 'c', 'a', 0,
  /* 14048 */ 's', 'l', 'b', 'i', 'a', 0,
  /* 14054 */ 't', 'l', 'b', 'i', 'a', 0,
  /* 14060 */ 'b', 'c', 'l', 'a', 0,
  /* 14065 */ 'c', 'l', 'r', 'b', 'h', 'r', 'b', 0,
  /* 14073 */ 'b', 'c', 0,
  /* 14076 */ 's', 'l', 'b', 's', 'y', 'n', 'c', 0,
  /* 14084 */ 't', 'l', 'b', 's', 'y', 'n', 'c', 0,
  /* 14092 */ 'm', 's', 'g', 's', 'y', 'n', 'c', 0,
  /* 14100 */ 'i', 's', 'y', 'n', 'c', 0,
  /* 14106 */ 'm', 's', 'y', 'n', 'c', 0,
  /* 14112 */ '#', 'L', 'D', 't', 'o', 'c', 0,
  /* 14119 */ '#', 'L', 'W', 'Z', 't', 'o', 'c', 0,
  /* 14127 */ 'h', 'r', 'f', 'i', 'd', 0,
  /* 14133 */ 't', 'l', 'b', 'r', 'e', 0,
  /* 14139 */ 't', 'l', 'b', 'w', 'e', 0,
  /* 14145 */ 'r', 'f', 'c', 'i', 0,
  /* 14150 */ 'r', 'f', 'm', 'c', 'i', 0,
  /* 14156 */ 'r', 'f', 'd', 'i', 0,
  /* 14161 */ 'r', 'f', 'i', 0,
  /* 14165 */ 'b', 'c', 'l', 0,
  /* 14169 */ '#', 32, 'F', 'E', 'n', 't', 'r', 'y', 32, 'c', 'a', 'l', 'l', 0,
  /* 14183 */ 'd', 's', 's', 'a', 'l', 'l', 0,
  /* 14190 */ 'b', 'l', 'r', 'l', 0,
  /* 14195 */ 'b', 'd', 'z', 'l', 'r', 'l', 0,
  /* 14202 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', 0,
  /* 14210 */ 'b', 'c', 't', 'r', 'l', 0,
  /* 14216 */ 'a', 't', 't', 'n', 0,
  /* 14221 */ 'e', 'i', 'e', 'i', 'o', 0,
  /* 14227 */ 'n', 'a', 'p', 0,
  /* 14231 */ 't', 'r', 'a', 'p', 0,
  /* 14236 */ 'n', 'o', 'p', 0,
  /* 14240 */ 's', 't', 'o', 'p', 0,
  /* 14245 */ 'b', 'l', 'r', 0,
  /* 14249 */ 'b', 'd', 'z', 'l', 'r', 0,
  /* 14255 */ 'b', 'd', 'n', 'z', 'l', 'r', 0,
  /* 14262 */ 'b', 'c', 't', 'r', 0,
  /* 14267 */ 'c', 'p', '_', 'a', 'b', 'o', 'r', 't', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    13676U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    13669U,	// BUNDLE
    14030U,	// LIFETIME_START
    13656U,	// LIFETIME_END
    0U,	// STACKMAP
    14170U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    11851U,	// PATCHABLE_FUNCTION_ENTER
    11820U,	// PATCHABLE_RET
    11897U,	// PATCHABLE_FUNCTION_EXIT
    11874U,	// PATCHABLE_TAIL_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_SEQUENCE
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    19711U,	// ADD4
    19711U,	// ADD4TLS
    16891U,	// ADD4o
    19711U,	// ADD8
    19711U,	// ADD8TLS
    19711U,	// ADD8TLS_
    16891U,	// ADD8o
    19490U,	// ADDC
    19490U,	// ADDC8
    16786U,	// ADDC8o
    16786U,	// ADDCo
    20150U,	// ADDE
    20150U,	// ADDE8
    17030U,	// ADDE8o
    17030U,	// ADDEo
    20816U,	// ADDI
    20816U,	// ADDI8
    19535U,	// ADDIC
    19535U,	// ADDIC8
    16827U,	// ADDICo
    24891U,	// ADDIS
    24891U,	// ADDIS8
    13416U,	// ADDISdtprelHA
    11953U,	// ADDISdtprelHA32
    13399U,	// ADDISgotTprelHA
    13371U,	// ADDIStlsgdHA
    13385U,	// ADDIStlsldHA
    13359U,	// ADDIStocHA
    13781U,	// ADDIdtprelL
    12242U,	// ADDIdtprelL32
    13744U,	// ADDItlsgdL
    12199U,	// ADDItlsgdL32
    13827U,	// ADDItlsgdLADDR
    12294U,	// ADDItlsgdLADDR32
    13756U,	// ADDItlsldL
    12213U,	// ADDItlsldL32
    13843U,	// ADDItlsldLADDR
    12312U,	// ADDItlsldLADDR32
    13734U,	// ADDItocL
    536891129U,	// ADDME
    536891129U,	// ADDME8
    536887965U,	// ADDME8o
    536887965U,	// ADDMEo
    536891207U,	// ADDZE
    536891207U,	// ADDZE8
    536888014U,	// ADDZE8o
    536888014U,	// ADDZEo
    559052U,	// ADJCALLSTACKDOWN
    17860575U,	// ADJCALLSTACKUP
    19913U,	// AND
    19913U,	// AND8
    16953U,	// AND8o
    19499U,	// ANDC
    19499U,	// ANDC8
    16793U,	// ANDC8o
    16793U,	// ANDCo
    17870U,	// ANDISo
    17870U,	// ANDISo8
    17255U,	// ANDIo
    17255U,	// ANDIo8
    13965U,	// ANDIo_1_EQ_BIT
    13309U,	// ANDIo_1_EQ_BIT8
    13981U,	// ANDIo_1_GT_BIT
    13326U,	// ANDIo_1_GT_BIT8
    16953U,	// ANDo
    1108363133U,	// ATOMIC_CMP_SWAP_I16
    1108363111U,	// ATOMIC_CMP_SWAP_I32
    12505U,	// ATOMIC_CMP_SWAP_I64
    13170U,	// ATOMIC_CMP_SWAP_I8
    12790U,	// ATOMIC_LOAD_ADD_I16
    11991U,	// ATOMIC_LOAD_ADD_I32
    12402U,	// ATOMIC_LOAD_ADD_I64
    13068U,	// ATOMIC_LOAD_ADD_I8
    12833U,	// ATOMIC_LOAD_AND_I16
    12034U,	// ATOMIC_LOAD_AND_I32
    12670U,	// ATOMIC_LOAD_AND_I64
    13109U,	// ATOMIC_LOAD_AND_I8
    12977U,	// ATOMIC_LOAD_MAX_I16
    12178U,	// ATOMIC_LOAD_MAX_I32
    12589U,	// ATOMIC_LOAD_MAX_I64
    13260U,	// ATOMIC_LOAD_MAX_I8
    12876U,	// ATOMIC_LOAD_MIN_I16
    12077U,	// ATOMIC_LOAD_MIN_I32
    12467U,	// ATOMIC_LOAD_MIN_I64
    13150U,	// ATOMIC_LOAD_MIN_I8
    12811U,	// ATOMIC_LOAD_NAND_I16
    12012U,	// ATOMIC_LOAD_NAND_I32
    12423U,	// ATOMIC_LOAD_NAND_I64
    13088U,	// ATOMIC_LOAD_NAND_I8
    12935U,	// ATOMIC_LOAD_OR_I16
    12136U,	// ATOMIC_LOAD_OR_I32
    12547U,	// ATOMIC_LOAD_OR_I64
    13209U,	// ATOMIC_LOAD_OR_I8
    12769U,	// ATOMIC_LOAD_SUB_I16
    11970U,	// ATOMIC_LOAD_SUB_I32
    12381U,	// ATOMIC_LOAD_SUB_I64
    13034U,	// ATOMIC_LOAD_SUB_I8
    12955U,	// ATOMIC_LOAD_UMAX_I16
    12156U,	// ATOMIC_LOAD_UMAX_I32
    12567U,	// ATOMIC_LOAD_UMAX_I64
    13239U,	// ATOMIC_LOAD_UMAX_I8
    12854U,	// ATOMIC_LOAD_UMIN_I16
    12055U,	// ATOMIC_LOAD_UMIN_I32
    12445U,	// ATOMIC_LOAD_UMIN_I64
    13129U,	// ATOMIC_LOAD_UMIN_I8
    12914U,	// ATOMIC_LOAD_XOR_I16
    12115U,	// ATOMIC_LOAD_XOR_I32
    12526U,	// ATOMIC_LOAD_XOR_I64
    13190U,	// ATOMIC_LOAD_XOR_I8
    12897U,	// ATOMIC_SWAP_I16
    12098U,	// ATOMIC_SWAP_I32
    12488U,	// ATOMIC_SWAP_I64
    13343U,	// ATOMIC_SWAP_I8
    14217U,	// ATTN
    576167U,	// B
    591993U,	// BA
    50348160U,	// BC
    1668856U,	// BCC
    2193144U,	// BCCA
    2717432U,	// BCCCTR
    2717432U,	// BCCCTR8
    3241720U,	// BCCCTRL
    3241720U,	// BCCCTRL8
    3766008U,	// BCCL
    4290296U,	// BCCLA
    4814584U,	// BCCLR
    5338872U,	// BCCLRL
    5783730U,	// BCCTR
    5783730U,	// BCCTR8
    5783786U,	// BCCTR8n
    5783708U,	// BCCTRL
    5783708U,	// BCCTRL8
    5783766U,	// BCCTRL8n
    5783766U,	// BCCTRLn
    5783786U,	// BCCTRn
    17464U,	// BCDCFNo
    17691U,	// BCDCFSQo
    18209U,	// BCDCFZo
    17473U,	// BCDCPSGNo
    536888433U,	// BCDCTNo
    536888613U,	// BCDCTSQo
    18225U,	// BCDCTZo
    17493U,	// BCDSETSGNo
    17746U,	// BCDSRo
    17802U,	// BCDSo
    16843U,	// BCDTRUNCo
    17895U,	// BCDUSo
    16854U,	// BCDUTRUNCo
    50348168U,	// BCL
    5783720U,	// BCLR
    5783697U,	// BCLRL
    5783756U,	// BCLRLn
    5783777U,	// BCLRn
    573541U,	// BCLalways
    50348228U,	// BCLn
    14263U,	// BCTR
    14263U,	// BCTR8
    14211U,	// BCTRL
    14211U,	// BCTRL8
    98418U,	// BCTRL8_LDinto_toc
    50348221U,	// BCn
    585113U,	// BDNZ
    585113U,	// BDNZ8
    592540U,	// BDNZA
    590104U,	// BDNZAm
    589889U,	// BDNZAp
    578609U,	// BDNZL
    592304U,	// BDNZLA
    590088U,	// BDNZLAm
    589873U,	// BDNZLAp
    14256U,	// BDNZLR
    14256U,	// BDNZLR8
    14203U,	// BDNZLRL
    11796U,	// BDNZLRLm
    11764U,	// BDNZLRLp
    11812U,	// BDNZLRm
    11780U,	// BDNZLRp
    573735U,	// BDNZLm
    573520U,	// BDNZLp
    573749U,	// BDNZm
    573534U,	// BDNZp
    585029U,	// BDZ
    585029U,	// BDZ8
    592534U,	// BDZA
    590097U,	// BDZAm
    589882U,	// BDZAp
    578603U,	// BDZL
    592297U,	// BDZLA
    590080U,	// BDZLAm
    589865U,	// BDZLAp
    14250U,	// BDZLR
    14250U,	// BDZLR8
    14196U,	// BDZLRL
    11788U,	// BDZLRLm
    11756U,	// BDZLRLp
    11805U,	// BDZLRm
    11773U,	// BDZLRp
    573728U,	// BDZLm
    573513U,	// BDZLp
    573743U,	// BDZm
    573528U,	// BDZp
    578451U,	// BL
    578451U,	// BL8
    6345619U,	// BL8_NOP
    6411155U,	// BL8_NOP_TLS
    643987U,	// BL8_TLS
    643987U,	// BL8_TLS_
    592286U,	// BLA
    592286U,	// BLA8
    6359454U,	// BLA8_NOP
    14246U,	// BLR
    14246U,	// BLR8
    14191U,	// BLRL
    643987U,	// BL_TLS
    19893U,	// BPERMD
    19591U,	// BRINC
    14066U,	// CLRBHRB
    20830U,	// CLRLSLDI
    17235U,	// CLRLSLDIo
    21196U,	// CLRLSLWI
    17333U,	// CLRLSLWIo
    20865U,	// CLRRDI
    17262U,	// CLRRDIo
    21237U,	// CLRRWI
    17362U,	// CLRRWIo
    19197U,	// CMPB
    19197U,	// CMPB8
    19957U,	// CMPD
    20858U,	// CMPDI
    19203U,	// CMPEQB
    19864U,	// CMPLD
    20822U,	// CMPLDI
    26302U,	// CMPLW
    21180U,	// CMPLWI
    67128075U,	// CMPRB
    67128075U,	// CMPRB8
    26559U,	// CMPW
    21230U,	// CMPWI
    536891030U,	// CNTLZD
    536887924U,	// CNTLZDo
    536897779U,	// CNTLZW
    536897779U,	// CNTLZW8
    536889054U,	// CNTLZW8o
    536889054U,	// CNTLZWo
    536891045U,	// CNTTZD
    536887933U,	// CNTTZDo
    536897794U,	// CNTTZW
    536897794U,	// CNTTZW8
    536889063U,	// CNTTZW8o
    536889063U,	// CNTTZWo
    14268U,	// CP_ABORT
    27956U,	// CP_COPY
    27956U,	// CP_COPY8
    536896376U,	// CP_COPY_FIRST
    536898868U,	// CP_COPYx
    20265U,	// CP_PASTE
    20265U,	// CP_PASTE8
    17086U,	// CP_PASTE8o
    536896325U,	// CP_PASTE_LAST
    17086U,	// CP_PASTEo
    536891177U,	// CP_PASTEx
    12755U,	// CR6SET
    12741U,	// CR6UNSET
    19943U,	// CRAND
    19505U,	// CRANDC
    25767U,	// CREQV
    19927U,	// CRNAND
    24334U,	// CRNOR
    24348U,	// CROR
    19612U,	// CRORC
    83911847U,	// CRSET
    83910458U,	// CRUNSET
    24378U,	// CRXOR
    657527U,	// DCBA
    151382U,	// DCBF
    660430U,	// DCBFL
    662179U,	// DCBFLP
    659286U,	// DCBFx
    659745U,	// DCBI
    664428U,	// DCBST
    156414U,	// DCBT
    637674250U,	// DCBTCT
    637673557U,	// DCBTDS
    156548U,	// DCBTST
    637674258U,	// DCBTSTCT
    637673565U,	// DCBTSTDS
    664480U,	// DCBTSTT
    664452U,	// DCBTSTx
    664467U,	// DCBTT
    664318U,	// DCBTx
    666938U,	// DCBZ
    660516U,	// DCBZL
    536891699U,	// DCCCI
    12358U,	// DFLOADf32
    12647U,	// DFLOADf64
    12369U,	// DFSTOREf32
    12658U,	// DFSTOREf64
    20105U,	// DIVD
    20156U,	// DIVDE
    25592U,	// DIVDEU
    17973U,	// DIVDEUo
    17037U,	// DIVDEo
    25585U,	// DIVDU
    17965U,	// DIVDUo
    17005U,	// DIVDo
    26842U,	// DIVW
    20279U,	// DIVWE
    25600U,	// DIVWEU
    17982U,	// DIVWEUo
    17094U,	// DIVWEo
    25706U,	// DIVWU
    18009U,	// DIVWUo
    18124U,	// DIVWo
    696703U,	// DSS
    14184U,	// DSSALL
    1728242547U,	// DST
    1728242547U,	// DST64
    1728242572U,	// DSTST
    1728242572U,	// DSTST64
    1728242601U,	// DSTSTT
    1728242601U,	// DSTSTT64
    1728242586U,	// DSTT
    1728242586U,	// DSTT64
    13439U,	// DYNALLOC
    12998U,	// DYNALLOC8
    13922U,	// DYNAREAOFFSET
    13293U,	// DYNAREAOFFSET8
    12257U,	// EH_SjLj_LongJmp32
    12610U,	// EH_SjLj_LongJmp64
    12276U,	// EH_SjLj_SetJmp32
    12629U,	// EH_SjLj_SetJmp64
    573441U,	// EH_SjLj_Setup
    25762U,	// EQV
    25762U,	// EQV8
    18024U,	// EQV8o
    18024U,	// EQVo
    536895388U,	// EVABS
    100689556U,	// EVADDIW
    536896782U,	// EVADDSMIAAW
    536896914U,	// EVADDSSIAAW
    536896848U,	// EVADDUMIAAW
    536896980U,	// EVADDUSIAAW
    26162U,	// EVADDW
    19950U,	// EVAND
    19513U,	// EVANDC
    24067U,	// EVCMPEQ
    24982U,	// EVCMPGTS
    25652U,	// EVCMPGTU
    24992U,	// EVCMPLTS
    25662U,	// EVCMPLTU
    536897535U,	// EVCNTLSW
    536897777U,	// EVCNTLZW
    25154U,	// EVDIVWS
    25704U,	// EVDIVWU
    25774U,	// EVEQV
    536890208U,	// EVEXTSB
    536891524U,	// EVEXTSH
    134237511U,	// EVLDD
    27049U,	// EVLDDX
    134238194U,	// EVLDH
    27153U,	// EVLDHX
    134243898U,	// EVLDW
    27844U,	// EVLDWX
    134242992U,	// EVLHHESPLAT
    27584U,	// EVLHHESPLATX
    134243017U,	// EVLHHOSSPLAT
    27611U,	// EVLHHOSSPLATX
    134243031U,	// EVLHHOUSPLAT
    27626U,	// EVLHHOUSPLATX
    134237914U,	// EVLWHE
    27124U,	// EVLWHEX
    134242674U,	// EVLWHOS
    27556U,	// EVLWHOSX
    134243351U,	// EVLWHOU
    27742U,	// EVLWHOUX
    134243005U,	// EVLWHSPLAT
    27598U,	// EVLWHSPLATX
    134243045U,	// EVLWWSPLAT
    27641U,	// EVLWWSPLATX
    20929U,	// EVMERGEHI
    22063U,	// EVMERGEHILO
    22052U,	// EVMERGELO
    20940U,	// EVMERGELOHI
    18429U,	// EVMHEGSMFAA
    21847U,	// EVMHEGSMFAN
    18477U,	// EVMHEGSMIAA
    21895U,	// EVMHEGSMIAN
    18514U,	// EVMHEGUMIAA
    21932U,	// EVMHEGUMIAN
    20322U,	// EVMHESMF
    18562U,	// EVMHESMFA
    25818U,	// EVMHESMFAAW
    26343U,	// EVMHESMFANW
    20991U,	// EVMHESMI
    18653U,	// EVMHESMIA
    25883U,	// EVMHESMIAAW
    26395U,	// EVMHESMIANW
    20397U,	// EVMHESSF
    18605U,	// EVMHESSFA
    25844U,	// EVMHESSFAAW
    26369U,	// EVMHESSFANW
    26015U,	// EVMHESSIAAW
    26473U,	// EVMHESSIANW
    21030U,	// EVMHEUMI
    18696U,	// EVMHEUMIA
    25949U,	// EVMHEUMIAAW
    26434U,	// EVMHEUMIANW
    26081U,	// EVMHEUSIAAW
    26512U,	// EVMHEUSIANW
    18442U,	// EVMHOGSMFAA
    21860U,	// EVMHOGSMFAN
    18490U,	// EVMHOGSMIAA
    21908U,	// EVMHOGSMIAN
    18527U,	// EVMHOGUMIAA
    21945U,	// EVMHOGUMIAN
    20342U,	// EVMHOSMF
    18584U,	// EVMHOSMFA
    25831U,	// EVMHOSMFAAW
    26356U,	// EVMHOSMFANW
    21011U,	// EVMHOSMI
    18675U,	// EVMHOSMIA
    25923U,	// EVMHOSMIAAW
    26421U,	// EVMHOSMIANW
    20417U,	// EVMHOSSF
    18627U,	// EVMHOSSFA
    25857U,	// EVMHOSSFAAW
    26382U,	// EVMHOSSFANW
    26055U,	// EVMHOSSIAAW
    26499U,	// EVMHOSSIANW
    21060U,	// EVMHOUMI
    18729U,	// EVMHOUMIA
    25989U,	// EVMHOUMIAAW
    26460U,	// EVMHOUMIANW
    26121U,	// EVMHOUSIAAW
    26538U,	// EVMHOUSIANW
    536889784U,	// EVMRA
    20332U,	// EVMWHSMF
    18573U,	// EVMWHSMFA
    21001U,	// EVMWHSMI
    18664U,	// EVMWHSMIA
    20407U,	// EVMWHSSF
    18616U,	// EVMWHSSFA
    21040U,	// EVMWHUMI
    18707U,	// EVMWHUMIA
    25910U,	// EVMWLSMIAAW
    26408U,	// EVMWLSMIANW
    26042U,	// EVMWLSSIAAW
    26486U,	// EVMWLSSIANW
    21050U,	// EVMWLUMI
    18718U,	// EVMWLUMIA
    25976U,	// EVMWLUMIAAW
    26447U,	// EVMWLUMIANW
    26108U,	// EVMWLUSIAAW
    26525U,	// EVMWLUSIANW
    20352U,	// EVMWSMF
    18595U,	// EVMWSMFA
    18455U,	// EVMWSMFAA
    21873U,	// EVMWSMFAN
    21021U,	// EVMWSMI
    18686U,	// EVMWSMIA
    18503U,	// EVMWSMIAA
    21921U,	// EVMWSMIAN
    20427U,	// EVMWSSF
    18638U,	// EVMWSSFA
    18466U,	// EVMWSSFAA
    21884U,	// EVMWSSFAN
    21070U,	// EVMWUMI
    18740U,	// EVMWUMIA
    18540U,	// EVMWUMIAA
    21958U,	// EVMWUMIAN
    19935U,	// EVNAND
    536891364U,	// EVNEG
    24341U,	// EVNOR
    24354U,	// EVOR
    19619U,	// EVORC
    26309U,	// EVRLW
    21188U,	// EVRLWI
    536897089U,	// EVRNDW
    26316U,	// EVSLW
    21214U,	// EVSLWI
    536891830U,	// EVSPLATFI
    536892066U,	// EVSPLATI
    24910U,	// EVSRWIS
    25614U,	// EVSRWIU
    25082U,	// EVSRWS
    25690U,	// EVSRWU
    134237527U,	// EVSTDD
    27057U,	// EVSTDDX
    134238201U,	// EVSTDH
    27161U,	// EVSTDHX
    134243913U,	// EVSTDW
    27852U,	// EVSTDWX
    134237922U,	// EVSTWHE
    27133U,	// EVSTWHEX
    134239771U,	// EVSTWHO
    27315U,	// EVSTWHOX
    134238014U,	// EVSTWWE
    27143U,	// EVSTWWEX
    134239924U,	// EVSTWWO
    27325U,	// EVSTWWOX
    536896808U,	// EVSUBFSMIAAW
    536896940U,	// EVSUBFSSIAAW
    536896874U,	// EVSUBFUMIAAW
    536897006U,	// EVSUBFUSIAAW
    26210U,	// EVSUBFW
    151021163U,	// EVSUBIFW
    24385U,	// EVXOR
    20840U,	// EXTLDI
    17246U,	// EXTLDIo
    21222U,	// EXTLWI
    17353U,	// EXTLWIo
    20889U,	// EXTRDI
    17289U,	// EXTRDIo
    21261U,	// EXTRWI
    17389U,	// EXTRWIo
    536890210U,	// EXTSB
    536890210U,	// EXTSB8
    536890210U,	// EXTSB8_32_64
    536887633U,	// EXTSB8o
    536887633U,	// EXTSBo
    536891526U,	// EXTSH
    536891526U,	// EXTSH8
    536891526U,	// EXTSH8_32_64
    536888074U,	// EXTSH8o
    536888074U,	// EXTSHo
    536897572U,	// EXTSW
    536897572U,	// EXTSW_32_64
    536889006U,	// EXTSW_32_64o
    536889006U,	// EXTSWo
    14222U,	// EnforceIEIO
    536895373U,	// FABSD
    536888672U,	// FABSDo
    536895373U,	// FABSS
    536888672U,	// FABSSo
    19710U,	// FADD
    24571U,	// FADDS
    17809U,	// FADDSo
    16890U,	// FADDo
    0U,	// FADDrtz
    536890746U,	// FCFID
    536895565U,	// FCFIDS
    536888748U,	// FCFIDSo
    536896468U,	// FCFIDU
    536895924U,	// FCFIDUS
    536888815U,	// FCFIDUSo
    536888859U,	// FCFIDUo
    536887834U,	// FCFIDo
    25632U,	// FCMPUD
    25632U,	// FCMPUS
    21982U,	// FCPSGND
    17484U,	// FCPSGNDo
    21982U,	// FCPSGNS
    17484U,	// FCPSGNSo
    536890755U,	// FCTID
    536896478U,	// FCTIDU
    536898977U,	// FCTIDUZ
    536889146U,	// FCTIDUZo
    536888868U,	// FCTIDUo
    536898892U,	// FCTIDZ
    536889112U,	// FCTIDZo
    536887842U,	// FCTIDo
    536897183U,	// FCTIW
    536896594U,	// FCTIWU
    536898988U,	// FCTIWUZ
    536889156U,	// FCTIWUZo
    536888912U,	// FCTIWUo
    536898999U,	// FCTIWZ
    536889166U,	// FCTIWZo
    536888967U,	// FCTIWo
    25740U,	// FDIV
    25075U,	// FDIVS
    17913U,	// FDIVSo
    18017U,	// FDIVo
    19718U,	// FMADD
    24580U,	// FMADDS
    17817U,	// FMADDSo
    16897U,	// FMADDo
    536895195U,	// FMR
    536888640U,	// FMRo
    19415U,	// FMSUB
    24550U,	// FMSUBS
    17783U,	// FMSUBSo
    16747U,	// FMSUBo
    21499U,	// FMUL
    24929U,	// FMULS
    17878U,	// FMULSo
    17422U,	// FMULo
    536895381U,	// FNABSD
    536888679U,	// FNABSDo
    536895381U,	// FNABSS
    536888679U,	// FNABSSo
    536891358U,	// FNEGD
    536888046U,	// FNEGDo
    536891358U,	// FNEGS
    536888046U,	// FNEGSo
    19727U,	// FNMADD
    24590U,	// FNMADDS
    17826U,	// FNMADDSo
    16905U,	// FNMADDo
    19424U,	// FNMSUB
    24560U,	// FNMSUBS
    17792U,	// FNMSUBSo
    16755U,	// FNMSUBo
    536891153U,	// FRE
    536895665U,	// FRES
    536888757U,	// FRESo
    536887982U,	// FREo
    536892613U,	// FRIMD
    536888352U,	// FRIMDo
    536892613U,	// FRIMS
    536888352U,	// FRIMSo
    536892911U,	// FRIND
    536888426U,	// FRINDo
    536892911U,	// FRINS
    536888426U,	// FRINSo
    536894109U,	// FRIPD
    536888533U,	// FRIPDo
    536894109U,	// FRIPS
    536888533U,	// FRIPSo
    536898963U,	// FRIZD
    536889130U,	// FRIZDo
    536898963U,	// FRIZS
    536889130U,	// FRIZSo
    536894810U,	// FRSP
    536888576U,	// FRSPo
    536891168U,	// FRSQRTE
    536895673U,	// FRSQRTES
    536888764U,	// FRSQRTESo
    536887988U,	// FRSQRTEo
    21429U,	// FSELD
    17415U,	// FSELDo
    21429U,	// FSELS
    17415U,	// FSELSo
    536896310U,	// FSQRT
    536895914U,	// FSQRTS
    536888798U,	// FSQRTSo
    536888842U,	// FSQRTo
    19407U,	// FSUB
    24541U,	// FSUBS
    17775U,	// FSUBSo
    16740U,	// FSUBo
    25746U,	// FTDIV
    536896317U,	// FTSQRT
    13873U,	// GETtlsADDR
    12345U,	// GETtlsADDR32
    13859U,	// GETtlsldADDR
    12330U,	// GETtlsldADDR32
    14128U,	// HRFID
    659751U,	// ICBI
    199808U,	// ICBLC
    197907U,	// ICBLQ
    205572U,	// ICBT
    205143U,	// ICBTLS
    536891706U,	// ICCCI
    21206U,	// INSLWI
    17344U,	// INSLWIo
    20873U,	// INSRDI
    17271U,	// INSRDIo
    21245U,	// INSRWI
    17371U,	// INSRWIo
    21435U,	// ISEL
    21435U,	// ISEL8
    14101U,	// ISYNC
    167791007U,	// LA
    134236575U,	// LAx
    570452721U,	// LBARX
    2181065457U,	// LBARXL
    134245696U,	// LBZ
    134245696U,	// LBZ8
    27239U,	// LBZCIX
    184575089U,	// LBZU
    184575089U,	// LBZU8
    201354391U,	// LBZUX
    201354391U,	// LBZUX8
    570453254U,	// LBZX
    570453254U,	// LBZX8
    134237581U,	// LD
    570452728U,	// LDARX
    2181065464U,	// LDARXL
    25251U,	// LDAT
    570452749U,	// LDBRX
    27208U,	// LDCIX
    570452646U,	// LDMX
    184574950U,	// LDU
    201354307U,	// LDUX
    570452432U,	// LDX
    13768U,	// LDgotTprelL
    12227U,	// LDgotTprelL32
    14113U,	// LDtoc
    14020U,	// LDtocBA
    14020U,	// LDtocCPT
    13716U,	// LDtocJTI
    13726U,	// LDtocL
    134237535U,	// LFD
    184574909U,	// LFDU
    201354290U,	// LFDUX
    570452412U,	// LFDX
    570452321U,	// LFIWAX
    570453277U,	// LFIWZX
    134242505U,	// LFS
    184575015U,	// LFSU
    201354367U,	// LFSUX
    570452875U,	// LFSX
    134236376U,	// LHA
    134236376U,	// LHA8
    570452735U,	// LHARX
    2181065471U,	// LHARXL
    184574897U,	// LHAU
    184574897U,	// LHAU8
    201354246U,	// LHAUX
    201354246U,	// LHAUX8
    570452304U,	// LHAX
    570452304U,	// LHAX8
    570452764U,	// LHBRX
    570452764U,	// LHBRX8
    134245738U,	// LHZ
    134245738U,	// LHZ8
    27247U,	// LHZCIX
    184575095U,	// LHZU
    184575095U,	// LHZU8
    201354398U,	// LHZUX
    201354398U,	// LHZUX8
    570453269U,	// LHZX
    570453269U,	// LHZX8
    218124764U,	// LI
    218124764U,	// LI8
    218128706U,	// LIS
    218128706U,	// LIS8
    134244051U,	// LMW
    21269U,	// LSWI
    570452344U,	// LVEBX
    570452514U,	// LVEHX
    570453205U,	// LVEWX
    570446835U,	// LVSL
    570449776U,	// LVSR
    570453164U,	// LVX
    570446871U,	// LVXL
    134236607U,	// LWA
    570452742U,	// LWARX
    2181065478U,	// LWARXL
    25329U,	// LWAT
    201354253U,	// LWAUX
    570452338U,	// LWAX
    570452338U,	// LWAX_32
    134236607U,	// LWA_32
    570452789U,	// LWBRX
    570452789U,	// LWBRX8
    134245823U,	// LWZ
    134245823U,	// LWZ8
    27255U,	// LWZCIX
    184575101U,	// LWZU
    184575101U,	// LWZU8
    201354405U,	// LWZUX
    201354405U,	// LWZUX8
    570453294U,	// LWZX
    570453294U,	// LWZX8
    14120U,	// LWZtoc
    134237748U,	// LXSD
    570452447U,	// LXSDX
    570453245U,	// LXSIBZX
    570453260U,	// LXSIHZX
    570452329U,	// LXSIWAX
    570453285U,	// LXSIWZX
    134241651U,	// LXSSP
    570452704U,	// LXSSPX
    134243515U,	// LXV
    570452268U,	// LXVB16X
    570452234U,	// LXVD2X
    570452858U,	// LXVDSX
    570452287U,	// LXVH8X
    21514U,	// LXVL
    21461U,	// LXVLL
    570452251U,	// LXVW4X
    570452920U,	// LXVWSX
    570453175U,	// LXVX
    695931U,	// MBAR
    536891273U,	// MCRF
    536895694U,	// MCRFS
    551768U,	// MCRXRX
    234901165U,	// MFBHRBE
    548502U,	// MFCR
    548502U,	// MFCR8
    548733U,	// MFCTR
    548733U,	// MFCTR8
    536895105U,	// MFDCR
    549059U,	// MFFS
    542151U,	// MFFSo
    548557U,	// MFLR
    548557U,	// MFLR8
    548700U,	// MFMSR
    251678607U,	// MFOCRF
    251678607U,	// MFOCRF8
    536895200U,	// MFPMR
    536895304U,	// MFSPR
    536895304U,	// MFSPR8
    268459862U,	// MFSR
    536892917U,	// MFSRIN
    536890225U,	// MFTB
    6840136U,	// MFTB8
    536890890U,	// MFVRD
    7364424U,	// MFVRSAVE
    7364424U,	// MFVRSAVEv
    548516U,	// MFVSCR
    536890890U,	// MFVSRD
    536890783U,	// MFVSRLD
    536899012U,	// MFVSRWZ
    14093U,	// MSGSYNC
    14107U,	// MSYNC
    536891295U,	// MTCRF
    536891295U,	// MTCRF8
    548740U,	// MTCTR
    548740U,	// MTCTR8
    548740U,	// MTCTR8loop
    548740U,	// MTCTRloop
    620945039U,	// MTDCR
    690007U,	// MTFSB0
    690015U,	// MTFSB1
    20390U,	// MTFSF
    20910U,	// MTFSFI
    17298U,	// MTFSFIo
    536891302U,	// MTFSFb
    17126U,	// MTFSFo
    548563U,	// MTLR
    548563U,	// MTLR8
    536895331U,	// MTMSR
    536890882U,	// MTMSRD
    216983U,	// MTOCRF
    216983U,	// MTOCRF8
    536895207U,	// MTPMR
    536895311U,	// MTSPR
    536895311U,	// MTSPR8
    237418U,	// MTSR
    536892925U,	// MTSRIN
    540916U,	// MTVRSAVE
    704756U,	// MTVRSAVEv
    548524U,	// MTVSCR
    536890898U,	// MTVSRD
    19790U,	// MTVSRDD
    536889796U,	// MTVSRWA
    536896002U,	// MTVSRWS
    536899021U,	// MTVSRWZ
    19825U,	// MULHD
    25546U,	// MULHDU
    17938U,	// MULHDUo
    16914U,	// MULHDo
    26253U,	// MULHW
    25672U,	// MULHWU
    17991U,	// MULHWUo
    18047U,	// MULHWo
    19857U,	// MULLD
    16938U,	// MULLDo
    20960U,	// MULLI
    20960U,	// MULLI8
    26295U,	// MULLW
    18063U,	// MULLWo
    13897U,	// MoveGOTtoLR
    13885U,	// MovePCtoLR
    13280U,	// MovePCtoLR8
    19921U,	// NAND
    19921U,	// NAND8
    16952U,	// NAND8o
    16952U,	// NANDo
    14228U,	// NAP
    536891359U,	// NEG
    536891359U,	// NEG8
    536888047U,	// NEG8o
    536888047U,	// NEGo
    14237U,	// NOP
    11929U,	// NOP_GT_PWR6
    11941U,	// NOP_GT_PWR7
    24329U,	// NOR
    24329U,	// NOR8
    17734U,	// NOR8o
    17734U,	// NORo
    24322U,	// OR
    24322U,	// OR8
    17735U,	// OR8o
    19607U,	// ORC
    19607U,	// ORC8
    16866U,	// ORC8o
    16866U,	// ORCo
    21138U,	// ORI
    21138U,	// ORI8
    24904U,	// ORIS
    24904U,	// ORIS8
    17735U,	// ORo
    536890957U,	// POPCNTD
    536897605U,	// POPCNTW
    13997U,	// PPC32GOT
    14007U,	// PPC32PICGOT
    21087U,	// QVALIGNI
    21087U,	// QVALIGNIb
    21087U,	// QVALIGNIs
    21143U,	// QVESPLATI
    21143U,	// QVESPLATIb
    21143U,	// QVESPLATIs
    536895371U,	// QVFABS
    536895371U,	// QVFABSs
    19708U,	// QVFADD
    24569U,	// QVFADDS
    24569U,	// QVFADDSs
    536890744U,	// QVFCFID
    536895563U,	// QVFCFIDS
    536896466U,	// QVFCFIDU
    536895922U,	// QVFCFIDUS
    536890744U,	// QVFCFIDb
    24057U,	// QVFCMPEQ
    24057U,	// QVFCMPEQb
    24057U,	// QVFCMPEQbs
    25372U,	// QVFCMPGT
    25372U,	// QVFCMPGTb
    25372U,	// QVFCMPGTbs
    25388U,	// QVFCMPLT
    25388U,	// QVFCMPLTb
    25388U,	// QVFCMPLTbs
    21980U,	// QVFCPSGN
    21980U,	// QVFCPSGNs
    536890753U,	// QVFCTID
    536896476U,	// QVFCTIDU
    536898975U,	// QVFCTIDUZ
    536898890U,	// QVFCTIDZ
    536890753U,	// QVFCTIDb
    536897181U,	// QVFCTIW
    536896592U,	// QVFCTIWU
    536898986U,	// QVFCTIWUZ
    536898997U,	// QVFCTIWZ
    21383U,	// QVFLOGICAL
    21383U,	// QVFLOGICALb
    21383U,	// QVFLOGICALs
    19716U,	// QVFMADD
    24578U,	// QVFMADDS
    24578U,	// QVFMADDSs
    536895193U,	// QVFMR
    536895193U,	// QVFMRb
    536895193U,	// QVFMRs
    19413U,	// QVFMSUB
    24548U,	// QVFMSUBS
    24548U,	// QVFMSUBSs
    21497U,	// QVFMUL
    24927U,	// QVFMULS
    24927U,	// QVFMULSs
    536895379U,	// QVFNABS
    536895379U,	// QVFNABSs
    536891356U,	// QVFNEG
    536891356U,	// QVFNEGs
    19725U,	// QVFNMADD
    24588U,	// QVFNMADDS
    24588U,	// QVFNMADDSs
    19422U,	// QVFNMSUB
    24558U,	// QVFNMSUBS
    24558U,	// QVFNMSUBSs
    21769U,	// QVFPERM
    21769U,	// QVFPERMs
    536891151U,	// QVFRE
    536895663U,	// QVFRES
    536895663U,	// QVFRESs
    536892611U,	// QVFRIM
    536892611U,	// QVFRIMs
    536892909U,	// QVFRIN
    536892909U,	// QVFRINs
    536894107U,	// QVFRIP
    536894107U,	// QVFRIPs
    536898961U,	// QVFRIZ
    536898961U,	// QVFRIZs
    536894808U,	// QVFRSP
    536894808U,	// QVFRSPs
    536891166U,	// QVFRSQRTE
    536895671U,	// QVFRSQRTES
    536895671U,	// QVFRSQRTESs
    21427U,	// QVFSEL
    21427U,	// QVFSELb
    21427U,	// QVFSELbb
    21427U,	// QVFSELbs
    19405U,	// QVFSUB
    24539U,	// QVFSUBS
    24539U,	// QVFSUBSs
    21969U,	// QVFTSTNAN
    21969U,	// QVFTSTNANb
    21969U,	// QVFTSTNANbs
    19762U,	// QVFXMADD
    24628U,	// QVFXMADDS
    21505U,	// QVFXMUL
    24936U,	// QVFXMULS
    19735U,	// QVFXXCPNMADD
    24599U,	// QVFXXCPNMADDS
    19772U,	// QVFXXMADD
    24639U,	// QVFXXMADDS
    19749U,	// QVFXXNPMADD
    24614U,	// QVFXXNPMADDS
    285233473U,	// QVGPCI
    570453019U,	// QVLFCDUX
    570444328U,	// QVLFCDUXA
    570452374U,	// QVLFCDX
    570444248U,	// QVLFCDXA
    570453096U,	// QVLFCSUX
    570444372U,	// QVLFCSUXA
    570452839U,	// QVLFCSX
    570444288U,	// QVLFCSXA
    570452839U,	// QVLFCSXs
    201354288U,	// QVLFDUX
    570444351U,	// QVLFDUXA
    570452410U,	// QVLFDX
    570444269U,	// QVLFDXA
    570452410U,	// QVLFDXb
    570452319U,	// QVLFIWAX
    570444237U,	// QVLFIWAXA
    570453275U,	// QVLFIWZX
    570444427U,	// QVLFIWZXA
    201354365U,	// QVLFSUX
    570444395U,	// QVLFSUXA
    570452873U,	// QVLFSX
    570444309U,	// QVLFSXA
    570452873U,	// QVLFSXb
    570452873U,	// QVLFSXs
    570452427U,	// QVLPCLDX
    570452890U,	// QVLPCLSX
    7891866U,	// QVLPCLSXint
    570452437U,	// QVLPCRDX
    570452910U,	// QVLPCRSX
    570453029U,	// QVSTFCDUX
    570444339U,	// QVSTFCDUXA
    570446673U,	// QVSTFCDUXI
    570444140U,	// QVSTFCDUXIA
    570452383U,	// QVSTFCDX
    570444258U,	// QVSTFCDXA
    570446631U,	// QVSTFCDXI
    570444094U,	// QVSTFCDXIA
    570453106U,	// QVSTFCSUX
    570444383U,	// QVSTFCSUXA
    570446696U,	// QVSTFCSUXI
    570444165U,	// QVSTFCSUXIA
    570452848U,	// QVSTFCSX
    570444298U,	// QVSTFCSXA
    570446652U,	// QVSTFCSXI
    570444117U,	// QVSTFCSXIA
    570452848U,	// QVSTFCSXs
    201518137U,	// QVSTFDUX
    570444361U,	// QVSTFDUXA
    570446685U,	// QVSTFDUXI
    570444153U,	// QVSTFDUXIA
    570452418U,	// QVSTFDX
    570444278U,	// QVSTFDXA
    570446642U,	// QVSTFDXI
    570444106U,	// QVSTFDXIA
    570452418U,	// QVSTFDXb
    570453220U,	// QVSTFIWX
    570444416U,	// QVSTFIWXA
    201518214U,	// QVSTFSUX
    570444405U,	// QVSTFSUXA
    570446708U,	// QVSTFSUXI
    570444178U,	// QVSTFSUXIA
    201518214U,	// QVSTFSUXs
    570452881U,	// QVSTFSX
    570444318U,	// QVSTFSXA
    570446663U,	// QVSTFSXI
    570444129U,	// QVSTFSXIA
    570452881U,	// QVSTFSXs
    13805U,	// RESTORE_CR
    13937U,	// RESTORE_CRBIT
    13686U,	// RESTORE_VRSAVE
    14146U,	// RFCI
    14157U,	// RFDI
    248490U,	// RFEBB
    14162U,	// RFI
    14129U,	// RFID
    14151U,	// RFMCI
    21404U,	// RLDCL
    17398U,	// RLDCLo
    24200U,	// RLDCR
    17711U,	// RLDCRo
    19542U,	// RLDIC
    21411U,	// RLDICL
    21411U,	// RLDICL_32_64
    17406U,	// RLDICLo
    24220U,	// RLDICR
    17719U,	// RLDICRo
    16835U,	// RLDICo
    2801816047U,	// RLDIMI
    2801812379U,	// RLDIMIo
    3338686967U,	// RLWIMI
    3338686967U,	// RLWIMI8
    3338683300U,	// RLWIMI8o
    20983U,	// RLWIMIbm
    3338683300U,	// RLWIMIo
    17316U,	// RLWIMIobm
    21715U,	// RLWINM
    21715U,	// RLWINM8
    17447U,	// RLWINM8o
    21715U,	// RLWINMbm
    17447U,	// RLWINMo
    17447U,	// RLWINMobm
    21724U,	// RLWNM
    21724U,	// RLWNM8
    17456U,	// RLWNM8o
    21724U,	// RLWNMbm
    17456U,	// RLWNMo
    17456U,	// RLWNMobm
    20881U,	// ROTRDI
    17280U,	// ROTRDIo
    21253U,	// ROTRWI
    17380U,	// ROTRWIo
    13431U,	// ReadTB
    543914U,	// SC
    12691U,	// SELECT_CC_F4
    13009U,	// SELECT_CC_F8
    12716U,	// SELECT_CC_I4
    13054U,	// SELECT_CC_I8
    13449U,	// SELECT_CC_QBRC
    13478U,	// SELECT_CC_QFRC
    13567U,	// SELECT_CC_QSRC
    13538U,	// SELECT_CC_VRRC
    13507U,	// SELECT_CC_VSFRC
    13627U,	// SELECT_CC_VSRC
    13596U,	// SELECT_CC_VSSRC
    12705U,	// SELECT_F4
    13023U,	// SELECT_F8
    12730U,	// SELECT_I4
    13228U,	// SELECT_I8
    13465U,	// SELECT_QBRC
    13494U,	// SELECT_QFRC
    13583U,	// SELECT_QSRC
    13554U,	// SELECT_VRRC
    13524U,	// SELECT_VSFRC
    13643U,	// SELECT_VSRC
    13613U,	// SELECT_VSSRC
    14049U,	// SLBIA
    544491U,	// SLBIE
    536891348U,	// SLBIEG
    536891075U,	// SLBMFEE
    536896643U,	// SLBMFEV
    536891158U,	// SLBMTE
    14077U,	// SLBSYNC
    19887U,	// SLD
    20834U,	// SLDI
    17239U,	// SLDIo
    16946U,	// SLDo
    26318U,	// SLW
    26318U,	// SLW8
    18071U,	// SLW8o
    21200U,	// SLWI
    17337U,	// SLWIo
    18071U,	// SLWo
    13817U,	// SPILL_CR
    13952U,	// SPILL_CRBIT
    13702U,	// SPILL_VRSAVE
    19686U,	// SRAD
    20809U,	// SRADI
    17227U,	// SRADIo
    16883U,	// SRADo
    26147U,	// SRAW
    21164U,	// SRAWI
    17325U,	// SRAWIo
    18030U,	// SRAWo
    19973U,	// SRD
    20875U,	// SRDI
    17273U,	// SRDIo
    16966U,	// SRDo
    26573U,	// SRW
    26573U,	// SRW8
    18077U,	// SRW8o
    21247U,	// SRWI
    17373U,	// SRWIo
    18077U,	// SRWo
    134237075U,	// STB
    134237075U,	// STB8
    27200U,	// STBCIX
    570443504U,	// STBCX
    184738743U,	// STBU
    184738743U,	// STBU8
    201518100U,	// STBUX
    201518100U,	// STBUX8
    570452368U,	// STBX
    570452368U,	// STBX8
    134237792U,	// STD
    25257U,	// STDAT
    570452756U,	// STDBRX
    27215U,	// STDCIX
    570443512U,	// STDCX
    184738795U,	// STDU
    201518153U,	// STDUX
    570452462U,	// STDX
    134237540U,	// STFD
    184738755U,	// STFDU
    201518139U,	// STFDUX
    570452420U,	// STFDX
    570453222U,	// STFIWX
    134242517U,	// STFS
    184738861U,	// STFSU
    201518216U,	// STFSUX
    570452883U,	// STFSX
    134238385U,	// STH
    134238385U,	// STH8
    570452771U,	// STHBRX
    27223U,	// STHCIX
    570443520U,	// STHCX
    184738824U,	// STHU
    184738824U,	// STHU8
    201518167U,	// STHUX
    201518167U,	// STHUX8
    570452538U,	// STHX
    570452538U,	// STHX8
    134244056U,	// STMW
    14241U,	// STOP
    21275U,	// STSWI
    570452351U,	// STVEBX
    570452521U,	// STVEHX
    570453212U,	// STVEWX
    570453169U,	// STVX
    570446877U,	// STVXL
    134244451U,	// STW
    134244451U,	// STW8
    25335U,	// STWAT
    570452796U,	// STWBRX
    27231U,	// STWCIX
    570443528U,	// STWCX
    184738914U,	// STWU
    184738914U,	// STWU8
    201518224U,	// STWUX
    201518224U,	// STWUX8
    570453239U,	// STWX
    570453239U,	// STWX8
    134237754U,	// STXSD
    570452454U,	// STXSDX
    570452359U,	// STXSIBX
    570452359U,	// STXSIBXv
    570452529U,	// STXSIHX
    570452529U,	// STXSIHXv
    570453230U,	// STXSIWX
    134241658U,	// STXSSP
    570452712U,	// STXSSPX
    134243520U,	// STXV
    570452277U,	// STXVB16X
    570452242U,	// STXVD2X
    570452295U,	// STXVH8X
    21520U,	// STXVL
    21468U,	// STXVLL
    570452259U,	// STXVW4X
    570453181U,	// STXVX
    20316U,	// SUBF
    20316U,	// SUBF8
    17119U,	// SUBF8o
    19521U,	// SUBFC
    19521U,	// SUBFC8
    16811U,	// SUBFC8o
    16811U,	// SUBFCo
    20179U,	// SUBFE
    20179U,	// SUBFE8
    17045U,	// SUBFE8o
    17045U,	// SUBFEo
    19549U,	// SUBFIC
    19549U,	// SUBFIC8
    536891136U,	// SUBFME
    536891136U,	// SUBFME8
    536887973U,	// SUBFME8o
    536887973U,	// SUBFMEo
    536891214U,	// SUBFZE
    536891214U,	// SUBFZE8
    536888022U,	// SUBFZE8o
    536888022U,	// SUBFZEo
    17119U,	// SUBFo
    20781U,	// SUBI
    19528U,	// SUBIC
    16819U,	// SUBICo
    24884U,	// SUBIS
    543886U,	// SYNC
    706049U,	// TABORT
    8651168U,	// TABORTDC
    9175859U,	// TABORTDCI
    8651240U,	// TABORTWC
    9175871U,	// TABORTWCI
    576167U,	// TAILB
    576167U,	// TAILB8
    591993U,	// TAILBA
    591993U,	// TAILBA8
    14263U,	// TAILBCTR
    14263U,	// TAILBCTR8
    803937U,	// TBEGIN
    545663U,	// TCHECK
    13910U,	// TCHECK_RET
    537987056U,	// TCRETURNai
    537986963U,	// TCRETURNai8
    537971916U,	// TCRETURNdi
    537970593U,	// TCRETURNdi8
    537943662U,	// TCRETURNri
    537937839U,	// TCRETURNri8
    167496U,	// TD
    168353U,	// TDI
    803391U,	// TEND
    14055U,	// TLBIA
    9621234U,	// TLBIE
    545707U,	// TLBIEL
    536897878U,	// TLBIVAX
    544138U,	// TLBLD
    545241U,	// TLBLI
    14134U,	// TLBRE
    20232U,	// TLBRE2
    536898400U,	// TLBSX
    27488U,	// TLBSX2
    18192U,	// TLBSX2D
    14085U,	// TLBSYNC
    14140U,	// TLBWE
    20272U,	// TLBWE2
    14232U,	// TRAP
    11919U,	// TRECHKPT
    705557U,	// TRECLAIM
    804186U,	// TSR
    174135U,	// TW
    168738U,	// TWI
    536889277U,	// UPDATE_VRSAVE
    13794U,	// UpdateGBR
    19352U,	// VABSDUB
    20662U,	// VABSDUH
    26746U,	// VABSDUW
    24122U,	// VADDCUQ
    26737U,	// VADDCUW
    24153U,	// VADDECUQ
    21759U,	// VADDEUQM
    23050U,	// VADDFP
    24502U,	// VADDSBS
    24837U,	// VADDSHS
    25118U,	// VADDSWS
    21579U,	// VADDUBM
    24530U,	// VADDUBS
    21607U,	// VADDUDM
    21646U,	// VADDUHM
    24865U,	// VADDUHS
    21740U,	// VADDUQM
    21829U,	// VADDUWM
    25145U,	// VADDUWS
    19951U,	// VAND
    19514U,	// VANDC
    19233U,	// VAVGSB
    20549U,	// VAVGSH
    26587U,	// VAVGSW
    19370U,	// VAVGUB
    20680U,	// VAVGUH
    26764U,	// VAVGUW
    19892U,	// VBPERMD
    24076U,	// VBPERMQ
    3875564418U,	// VCFSX
    27522U,	// VCFSX_0
    3875564624U,	// VCFUX
    27728U,	// VCFUX_0
    24254U,	// VCIPHER
    25439U,	// VCIPHERLAST
    536890384U,	// VCLZB
    536891023U,	// VCLZD
    536891667U,	// VCLZH
    536890033U,	// VCLZLSBB
    536897770U,	// VCLZW
    23014U,	// VCMPBFP
    17578U,	// VCMPBFPo
    23113U,	// VCMPEQFP
    17599U,	// VCMPEQFPo
    19395U,	// VCMPEQUB
    16729U,	// VCMPEQUBo
    20077U,	// VCMPEQUD
    16983U,	// VCMPEQUDo
    20705U,	// VCMPEQUH
    17170U,	// VCMPEQUHo
    26789U,	// VCMPEQUW
    18102U,	// VCMPEQUWo
    23067U,	// VCMPGEFP
    17588U,	// VCMPGEFPo
    23123U,	// VCMPGTFP
    17610U,	// VCMPGTFPo
    19286U,	// VCMPGTSB
    16710U,	// VCMPGTSBo
    20002U,	// VCMPGTSD
    16972U,	// VCMPGTSDo
    20602U,	// VCMPGTSH
    17151U,	// VCMPGTSHo
    26650U,	// VCMPGTSW
    18083U,	// VCMPGTSWo
    19444U,	// VCMPGTUB
    16764U,	// VCMPGTUBo
    20087U,	// VCMPGTUD
    16994U,	// VCMPGTUDo
    20727U,	// VCMPGTUH
    17181U,	// VCMPGTUHo
    26824U,	// VCMPGTUW
    18113U,	// VCMPGTUWo
    19141U,	// VCMPNEB
    16700U,	// VCMPNEBo
    20481U,	// VCMPNEH
    17141U,	// VCMPNEHo
    26201U,	// VCMPNEW
    18037U,	// VCMPNEWo
    19462U,	// VCMPNEZB
    16775U,	// VCMPNEZBo
    20745U,	// VCMPNEZH
    17192U,	// VCMPNEZHo
    26848U,	// VCMPNEZW
    18131U,	// VCMPNEZWo
    3875562131U,	// VCTSXS
    25235U,	// VCTSXS_0
    3875562139U,	// VCTUXS
    25243U,	// VCTUXS_0
    536890391U,	// VCTZB
    536891038U,	// VCTZD
    536891674U,	// VCTZH
    536890043U,	// VCTZLSBB
    536897787U,	// VCTZW
    25775U,	// VEQV
    536893996U,	// VEXPTEFP
    654331457U,	// VEXTRACTD
    654330856U,	// VEXTRACTUB
    654332139U,	// VEXTRACTUH
    654338223U,	// VEXTRACTUW
    536890542U,	// VEXTSB2D
    536890542U,	// VEXTSB2Ds
    536896710U,	// VEXTSB2W
    536896710U,	// VEXTSB2Ws
    536890552U,	// VEXTSH2D
    536890552U,	// VEXTSH2Ds
    536896720U,	// VEXTSH2W
    536896720U,	// VEXTSH2Ws
    536890562U,	// VEXTSW2D
    536890562U,	// VEXTSW2Ds
    27272U,	// VEXTUBLX
    27435U,	// VEXTUBRX
    27282U,	// VEXTUHLX
    27460U,	// VEXTUHRX
    27292U,	// VEXTUWLX
    27470U,	// VEXTUWRX
    536890604U,	// VGBBD
    654330761U,	// VINSERTB
    654331478U,	// VINSERTD
    654332071U,	// VINSERTH
    654338126U,	// VINSERTW
    536893970U,	// VLOGEFP
    23041U,	// VMADDFP
    23133U,	// VMAXFP
    19305U,	// VMAXSB
    20012U,	// VMAXSD
    20621U,	// VMAXSH
    26667U,	// VMAXSW
    19454U,	// VMAXUB
    20097U,	// VMAXUD
    20737U,	// VMAXUH
    26834U,	// VMAXUW
    24814U,	// VMHADDSHS
    24825U,	// VMHRADDSHS
    23105U,	// VMINFP
    19269U,	// VMINSB
    19994U,	// VMINSD
    20585U,	// VMINSH
    26633U,	// VMINSW
    19378U,	// VMINUB
    20069U,	// VMINUD
    20688U,	// VMINUH
    26772U,	// VMINUW
    21635U,	// VMLADDUHM
    26193U,	// VMRGEW
    19150U,	// VMRGHB
    20490U,	// VMRGHH
    26236U,	// VMRGHW
    19168U,	// VMRGLB
    20498U,	// VMRGLH
    26278U,	// VMRGLW
    26551U,	// VMRGOW
    21560U,	// VMSUMMBM
    21616U,	// VMSUMSHM
    24846U,	// VMSUMSHS
    21588U,	// VMSUMUBM
    21655U,	// VMSUMUHM
    24874U,	// VMSUMUHS
    536895014U,	// VMUL10CUQ
    24131U,	// VMUL10ECUQ
    24163U,	// VMUL10EUQ
    536895004U,	// VMUL10UQ
    19224U,	// VMULESB
    20540U,	// VMULESH
    26578U,	// VMULESW
    19361U,	// VMULEUB
    20671U,	// VMULEUH
    26755U,	// VMULEUW
    19277U,	// VMULOSB
    20593U,	// VMULOSH
    26641U,	// VMULOSW
    19386U,	// VMULOUB
    20696U,	// VMULOUH
    26780U,	// VMULOUW
    21838U,	// VMULUWM
    19936U,	// VNAND
    24244U,	// VNCIPHER
    25425U,	// VNCIPHERLAST
    536890730U,	// VNEGD
    536897141U,	// VNEGW
    23023U,	// VNMSUBFP
    24342U,	// VNOR
    24355U,	// VOR
    19620U,	// VORC
    21778U,	// VPERM
    24302U,	// VPERMR
    24368U,	// VPERMXOR
    27344U,	// VPKPX
    24955U,	// VPKSDSS
    25021U,	// VPKSDUS
    24964U,	// VPKSHSS
    25039U,	// VPKSHUS
    24973U,	// VPKSWSS
    25057U,	// VPKSWUS
    21793U,	// VPKUDUM
    25030U,	// VPKUDUS
    21802U,	// VPKUHUM
    25048U,	// VPKUHUS
    21811U,	// VPKUWUM
    25066U,	// VPKUWUS
    19188U,	// VPMSUMB
    19901U,	// VPMSUMD
    20518U,	// VPMSUMH
    26334U,	// VPMSUMW
    536890239U,	// VPOPCNTB
    536890956U,	// VPOPCNTD
    536891549U,	// VPOPCNTH
    536897604U,	// VPOPCNTW
    536890611U,	// VPRTYBD
    536894960U,	// VPRTYBQ
    536897065U,	// VPRTYBW
    536893989U,	// VREFP
    536892577U,	// VRFIM
    536892902U,	// VRFIN
    536894073U,	// VRFIP
    536898927U,	// VRFIZ
    19176U,	// VRLB
    19880U,	// VRLD
    20967U,	// VRLDMI
    21707U,	// VRLDNM
    20506U,	// VRLH
    26310U,	// VRLW
    21079U,	// VRLWMI
    21723U,	// VRLWNM
    536894006U,	// VRSQRTEFP
    536898220U,	// VSBOX
    21441U,	// VSEL
    19673U,	// VSHASIGMAD
    26134U,	// VSHASIGMAW
    21492U,	// VSL
    19182U,	// VSLB
    19886U,	// VSLD
    21097U,	// VSLDOI
    20512U,	// VSLH
    22076U,	// VSLO
    25753U,	// VSLV
    26317U,	// VSLW
    3875556215U,	// VSPLTB
    3875556215U,	// VSPLTBs
    3875557525U,	// VSPLTH
    3875557525U,	// VSPLTHs
    302009138U,	// VSPLTISB
    302010454U,	// VSPLTISH
    302016492U,	// VSPLTISW
    3875563571U,	// VSPLTW
    24433U,	// VSR
    19107U,	// VSRAB
    19685U,	// VSRAD
    20459U,	// VSRAH
    26146U,	// VSRAW
    19218U,	// VSRB
    19980U,	// VSRD
    20534U,	// VSRH
    22190U,	// VSRO
    25781U,	// VSRV
    26572U,	// VSRW
    24113U,	// VSUBCUQ
    26728U,	// VSUBCUW
    24143U,	// VSUBECUQ
    21749U,	// VSUBEUQM
    23033U,	// VSUBFP
    24493U,	// VSUBSBS
    24805U,	// VSUBSHS
    25109U,	// VSUBSWS
    21570U,	// VSUBUBM
    24521U,	// VSUBUBS
    21598U,	// VSUBUDM
    21626U,	// VSUBUHM
    24856U,	// VSUBUHS
    21731U,	// VSUBUQM
    21820U,	// VSUBUWM
    25136U,	// VSUBUWS
    25099U,	// VSUM2SWS
    24483U,	// VSUM4SBS
    24795U,	// VSUM4SHS
    24511U,	// VSUM4UBS
    25127U,	// VSUMSWS
    536898247U,	// VUPKHPX
    536890153U,	// VUPKHSB
    536891469U,	// VUPKHSH
    536897507U,	// VUPKHSW
    536898263U,	// VUPKLPX
    536890172U,	// VUPKLSB
    536891488U,	// VUPKLSH
    536897526U,	// VUPKLSW
    24386U,	// VXOR
    83910466U,	// V_SET0
    83910466U,	// V_SET0B
    83910466U,	// V_SET0H
    9988076U,	// V_SETALLONES
    9988076U,	// V_SETALLONESB
    9988076U,	// V_SETALLONESH
    549670U,	// WAIT
    544460U,	// WRTEE
    545190U,	// WRTEEI
    24363U,	// XOR
    24363U,	// XOR8
    17740U,	// XOR8o
    21137U,	// XORI
    21137U,	// XORI8
    24903U,	// XORIS
    24903U,	// XORIS8
    17740U,	// XORo
    536893756U,	// XSABSDP
    536894315U,	// XSABSQP
    22357U,	// XSADDDP
    23273U,	// XSADDQP
    22149U,	// XSADDQPO
    23573U,	// XSADDSP
    22802U,	// XSCMPEQDP
    22770U,	// XSCMPEXPDP
    23371U,	// XSCMPEXPQP
    22419U,	// XSCMPGEDP
    22862U,	// XSCMPGTDP
    22441U,	// XSCMPNEDP
    22700U,	// XSCMPODP
    23341U,	// XSCMPOQP
    22926U,	// XSCMPUDP
    23422U,	// XSCMPUQP
    22660U,	// XSCPSGNDP
    23330U,	// XSCPSGNQP
    536894053U,	// XSCVDPHP
    536894263U,	// XSCVDPQP
    536894747U,	// XSCVDPSP
    536892944U,	// XSCVDPSPN
    536895591U,	// XSCVDPSXDS
    536895591U,	// XSCVDPSXDSs
    536896075U,	// XSCVDPSXWS
    536896075U,	// XSCVDPSXWSs
    536895627U,	// XSCVDPUXDS
    536895627U,	// XSCVDPUXDSs
    536896111U,	// XSCVDPUXWS
    536896111U,	// XSCVDPUXWSs
    536893622U,	// XSCVHPDP
    536893632U,	// XSCVQPDP
    536892994U,	// XSCVQPDPO
    536898900U,	// XSCVQPSDZ
    536899030U,	// XSCVQPSWZ
    536898911U,	// XSCVQPUDZ
    536899041U,	// XSCVQPUWZ
    536894194U,	// XSCVSDQP
    536893642U,	// XSCVSPDP
    536892933U,	// XSCVSPDPN
    536893287U,	// XSCVSXDDP
    536894503U,	// XSCVSXDSP
    536894204U,	// XSCVUDQP
    536893309U,	// XSCVUXDDP
    536894525U,	// XSCVUXDSP
    22936U,	// XSDIVDP
    23432U,	// XSDIVQP
    22180U,	// XSDIVQPO
    23980U,	// XSDIVSP
    22750U,	// XSIEXPDP
    23361U,	// XSIEXPQP
    1191204611U,	// XSMADDADP
    1191205847U,	// XSMADDASP
    1191204974U,	// XSMADDMDP
    1191206129U,	// XSMADDMSP
    23263U,	// XSMADDQP
    22138U,	// XSMADDQPO
    22347U,	// XSMAXCDP
    22996U,	// XSMAXDP
    22540U,	// XSMAXJDP
    22337U,	// XSMINCDP
    22682U,	// XSMINDP
    22530U,	// XSMINJDP
    1191204565U,	// XSMSUBADP
    1191205801U,	// XSMSUBASP
    1191204928U,	// XSMSUBMDP
    1191206083U,	// XSMSUBMSP
    23222U,	// XSMSUBQP
    22105U,	// XSMSUBQPO
    22550U,	// XSMULDP
    23321U,	// XSMULQP
    22159U,	// XSMULQPO
    23705U,	// XSMULSP
    536893736U,	// XSNABSDP
    536894305U,	// XSNABSQP
    536893404U,	// XSNEGDP
    536894214U,	// XSNEGQP
    1191204587U,	// XSNMADDADP
    1191205823U,	// XSNMADDASP
    1191204950U,	// XSNMADDMDP
    1191206105U,	// XSNMADDMSP
    23252U,	// XSNMADDQP
    22126U,	// XSNMADDQPO
    1191204541U,	// XSNMSUBADP
    1191205777U,	// XSNMSUBASP
    1191204904U,	// XSNMSUBMDP
    1191206059U,	// XSNMSUBMSP
    23211U,	// XSNMSUBQP
    22093U,	// XSNMSUBQPO
    536892017U,	// XSRDPI
    536890469U,	// XSRDPIC
    536892584U,	// XSRDPIM
    536894080U,	// XSRDPIP
    536898934U,	// XSRDPIZ
    536893364U,	// XSREDP
    536894558U,	// XSRESP
    84169345U,	// XSRQPI
    84175487U,	// XSRQPIX
    84172263U,	// XSRQPXP
    536893380U,	// XSRSQRTEDP
    536894574U,	// XSRSQRTESP
    536893796U,	// XSSQRTDP
    536894324U,	// XSSQRTQP
    536893081U,	// XSSQRTQPO
    536894861U,	// XSSQRTSP
    22297U,	// XSSUBDP
    23232U,	// XSSUBQP
    22116U,	// XSSUBQPO
    23533U,	// XSSUBSP
    22945U,	// XSTDIVDP
    536893806U,	// XSTSQRTDP
    1728075563U,	// XSTSTDCDP
    1728076489U,	// XSTSTDCQP
    1728076799U,	// XSTSTDCSP
    536893694U,	// XSXEXPDP
    536894295U,	// XSXEXPQP
    536893422U,	// XSXSIGDP
    536894223U,	// XSXSIGQP
    536893765U,	// XVABSDP
    536894826U,	// XVABSSP
    22366U,	// XVADDDP
    23582U,	// XVADDSP
    22813U,	// XVCMPEQDP
    17554U,	// XVCMPEQDPo
    23885U,	// XVCMPEQSP
    17652U,	// XVCMPEQSPo
    22430U,	// XVCMPGEDP
    17530U,	// XVCMPGEDPo
    23635U,	// XVCMPGESP
    17628U,	// XVCMPGESPo
    22873U,	// XVCMPGTDP
    17566U,	// XVCMPGTDPo
    23938U,	// XVCMPGTSP
    17671U,	// XVCMPGTSPo
    16401U,	// XVCMPNEDP
    17542U,	// XVCMPNEDPo
    16413U,	// XVCMPNESP
    17640U,	// XVCMPNESPo
    22671U,	// XVCPSGNDP
    23815U,	// XVCPSGNSP
    536894757U,	// XVCVDPSP
    536895603U,	// XVCVDPSXDS
    536896087U,	// XVCVDPSXWS
    536895639U,	// XVCVDPUXDS
    536896123U,	// XVCVDPUXWS
    536894767U,	// XVCVHPSP
    536893652U,	// XVCVSPDP
    536894063U,	// XVCVSPHP
    536895615U,	// XVCVSPSXDS
    536896099U,	// XVCVSPSXWS
    536895651U,	// XVCVSPUXDS
    536896135U,	// XVCVSPUXWS
    536893298U,	// XVCVSXDDP
    536894514U,	// XVCVSXDSP
    536893886U,	// XVCVSXWDP
    536894920U,	// XVCVSXWSP
    536893320U,	// XVCVUXDDP
    536894536U,	// XVCVUXDSP
    536893897U,	// XVCVUXWDP
    536894931U,	// XVCVUXWSP
    22965U,	// XVDIVDP
    23999U,	// XVDIVSP
    22760U,	// XVIEXPDP
    23865U,	// XVIEXPSP
    1191204622U,	// XVMADDADP
    1191205858U,	// XVMADDASP
    1191204985U,	// XVMADDMDP
    1191206140U,	// XVMADDMSP
    23005U,	// XVMAXDP
    24030U,	// XVMAXSP
    22691U,	// XVMINDP
    23826U,	// XVMINSP
    1191204576U,	// XVMSUBADP
    1191205812U,	// XVMSUBASP
    1191204939U,	// XVMSUBMDP
    1191206094U,	// XVMSUBMSP
    22559U,	// XVMULDP
    23714U,	// XVMULSP
    536893746U,	// XVNABSDP
    536894816U,	// XVNABSSP
    536893413U,	// XVNEGDP
    536894598U,	// XVNEGSP
    1191204599U,	// XVNMADDADP
    1191205835U,	// XVNMADDASP
    1191204962U,	// XVNMADDMDP
    1191206117U,	// XVNMADDMSP
    1191204553U,	// XVNMSUBADP
    1191205789U,	// XVNMSUBASP
    1191204916U,	// XVNMSUBMDP
    1191206071U,	// XVNMSUBMSP
    536892025U,	// XVRDPI
    536890478U,	// XVRDPIC
    536892593U,	// XVRDPIM
    536894089U,	// XVRDPIP
    536898943U,	// XVRDPIZ
    536893372U,	// XVREDP
    536894566U,	// XVRESP
    536892041U,	// XVRSPI
    536890487U,	// XVRSPIC
    536892602U,	// XVRSPIM
    536894098U,	// XVRSPIP
    536898952U,	// XVRSPIZ
    536893392U,	// XVRSQRTEDP
    536894586U,	// XVRSQRTESP
    536893828U,	// XVSQRTDP
    536894882U,	// XVSQRTSP
    22306U,	// XVSUBDP
    23542U,	// XVSUBSP
    22955U,	// XVTDIVDP
    23989U,	// XVTDIVSP
    536893817U,	// XVTSQRTDP
    536894871U,	// XVTSQRTSP
    1728075574U,	// XVTSTDCDP
    1728076810U,	// XVTSTDCSP
    536893704U,	// XVXEXPDP
    536894787U,	// XVXEXPSP
    536893432U,	// XVXSIGDP
    536894607U,	// XVXSIGSP
    536890875U,	// XXBRD
    536891439U,	// XXBRH
    536894997U,	// XXBRQ
    536897477U,	// XXBRW
    26811U,	// XXEXTRACTUW
    2264950872U,	// XXINSERTW
    19910U,	// XXLAND
    19496U,	// XXLANDC
    25759U,	// XXLEQV
    19918U,	// XXLNAND
    24326U,	// XXLNOR
    24319U,	// XXLOR
    19604U,	// XXLORC
    24319U,	// XXLORf
    24360U,	// XXLXOR
    83910440U,	// XXLXORdpz
    83910440U,	// XXLXORspz
    83910440U,	// XXLXORz
    26244U,	// XXMRGHW
    26286U,	// XXMRGLW
    21785U,	// XXPERM
    20848U,	// XXPERMDI
    20848U,	// XXPERMDIs
    24310U,	// XXPERMR
    21447U,	// XXSEL
    21171U,	// XXSLDWI
    318786262U,	// XXSPLTIB
    26683U,	// XXSPLTW
    26683U,	// XXSPLTWs
    166942U,	// gBC
    166013U,	// gBCA
    10794717U,	// gBCAat
    171894U,	// gBCCTR
    168939U,	// gBCCTRL
    168855U,	// gBCL
    166307U,	// gBCLA
    10794733U,	// gBCLAat
    171719U,	// gBCLR
    168932U,	// gBCLRL
    11319126U,	// gBCLat
    11319034U,	// gBCat
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_SEQUENCE
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// ADD4
    0U,	// ADD4TLS
    0U,	// ADD4o
    0U,	// ADD8
    0U,	// ADD8TLS
    0U,	// ADD8TLS_
    0U,	// ADD8o
    0U,	// ADDC
    0U,	// ADDC8
    0U,	// ADDC8o
    0U,	// ADDCo
    0U,	// ADDE
    0U,	// ADDE8
    0U,	// ADDE8o
    0U,	// ADDEo
    2U,	// ADDI
    2U,	// ADDI8
    2U,	// ADDIC
    2U,	// ADDIC8
    2U,	// ADDICo
    2U,	// ADDIS
    2U,	// ADDIS8
    0U,	// ADDISdtprelHA
    0U,	// ADDISdtprelHA32
    0U,	// ADDISgotTprelHA
    0U,	// ADDIStlsgdHA
    0U,	// ADDIStlsldHA
    0U,	// ADDIStocHA
    0U,	// ADDIdtprelL
    0U,	// ADDIdtprelL32
    0U,	// ADDItlsgdL
    0U,	// ADDItlsgdL32
    0U,	// ADDItlsgdLADDR
    0U,	// ADDItlsgdLADDR32
    0U,	// ADDItlsldL
    0U,	// ADDItlsldL32
    0U,	// ADDItlsldLADDR
    0U,	// ADDItlsldLADDR32
    0U,	// ADDItocL
    0U,	// ADDME
    0U,	// ADDME8
    0U,	// ADDME8o
    0U,	// ADDMEo
    0U,	// ADDZE
    0U,	// ADDZE8
    0U,	// ADDZE8o
    0U,	// ADDZEo
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// AND
    0U,	// AND8
    0U,	// AND8o
    0U,	// ANDC
    0U,	// ANDC8
    0U,	// ANDC8o
    0U,	// ANDCo
    4U,	// ANDISo
    4U,	// ANDISo8
    4U,	// ANDIo
    4U,	// ANDIo8
    0U,	// ANDIo_1_EQ_BIT
    0U,	// ANDIo_1_EQ_BIT8
    0U,	// ANDIo_1_GT_BIT
    0U,	// ANDIo_1_GT_BIT8
    0U,	// ANDo
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_MAX_I16
    0U,	// ATOMIC_LOAD_MAX_I32
    0U,	// ATOMIC_LOAD_MAX_I64
    0U,	// ATOMIC_LOAD_MAX_I8
    0U,	// ATOMIC_LOAD_MIN_I16
    0U,	// ATOMIC_LOAD_MIN_I32
    0U,	// ATOMIC_LOAD_MIN_I64
    0U,	// ATOMIC_LOAD_MIN_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_UMAX_I16
    0U,	// ATOMIC_LOAD_UMAX_I32
    0U,	// ATOMIC_LOAD_UMAX_I64
    0U,	// ATOMIC_LOAD_UMAX_I8
    0U,	// ATOMIC_LOAD_UMIN_I16
    0U,	// ATOMIC_LOAD_UMIN_I32
    0U,	// ATOMIC_LOAD_UMIN_I64
    0U,	// ATOMIC_LOAD_UMIN_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATTN
    0U,	// B
    0U,	// BA
    0U,	// BC
    0U,	// BCC
    0U,	// BCCA
    0U,	// BCCCTR
    0U,	// BCCCTR8
    0U,	// BCCCTRL
    0U,	// BCCCTRL8
    0U,	// BCCL
    0U,	// BCCLA
    0U,	// BCCLR
    0U,	// BCCLRL
    0U,	// BCCTR
    0U,	// BCCTR8
    0U,	// BCCTR8n
    0U,	// BCCTRL
    0U,	// BCCTRL8
    0U,	// BCCTRL8n
    0U,	// BCCTRLn
    0U,	// BCCTRn
    6U,	// BCDCFNo
    6U,	// BCDCFSQo
    6U,	// BCDCFZo
    0U,	// BCDCPSGNo
    0U,	// BCDCTNo
    0U,	// BCDCTSQo
    6U,	// BCDCTZo
    6U,	// BCDSETSGNo
    32U,	// BCDSRo
    32U,	// BCDSo
    32U,	// BCDTRUNCo
    0U,	// BCDUSo
    0U,	// BCDUTRUNCo
    0U,	// BCL
    0U,	// BCLR
    0U,	// BCLRL
    0U,	// BCLRLn
    0U,	// BCLRn
    0U,	// BCLalways
    0U,	// BCLn
    0U,	// BCTR
    0U,	// BCTR8
    0U,	// BCTRL
    0U,	// BCTRL8
    0U,	// BCTRL8_LDinto_toc
    0U,	// BCn
    0U,	// BDNZ
    0U,	// BDNZ8
    0U,	// BDNZA
    0U,	// BDNZAm
    0U,	// BDNZAp
    0U,	// BDNZL
    0U,	// BDNZLA
    0U,	// BDNZLAm
    0U,	// BDNZLAp
    0U,	// BDNZLR
    0U,	// BDNZLR8
    0U,	// BDNZLRL
    0U,	// BDNZLRLm
    0U,	// BDNZLRLp
    0U,	// BDNZLRm
    0U,	// BDNZLRp
    0U,	// BDNZLm
    0U,	// BDNZLp
    0U,	// BDNZm
    0U,	// BDNZp
    0U,	// BDZ
    0U,	// BDZ8
    0U,	// BDZA
    0U,	// BDZAm
    0U,	// BDZAp
    0U,	// BDZL
    0U,	// BDZLA
    0U,	// BDZLAm
    0U,	// BDZLAp
    0U,	// BDZLR
    0U,	// BDZLR8
    0U,	// BDZLRL
    0U,	// BDZLRLm
    0U,	// BDZLRLp
    0U,	// BDZLRm
    0U,	// BDZLRp
    0U,	// BDZLm
    0U,	// BDZLp
    0U,	// BDZm
    0U,	// BDZp
    0U,	// BL
    0U,	// BL8
    0U,	// BL8_NOP
    0U,	// BL8_NOP_TLS
    0U,	// BL8_TLS
    0U,	// BL8_TLS_
    0U,	// BLA
    0U,	// BLA8
    0U,	// BLA8_NOP
    0U,	// BLR
    0U,	// BLR8
    0U,	// BLRL
    0U,	// BL_TLS
    0U,	// BPERMD
    0U,	// BRINC
    0U,	// CLRBHRB
    104U,	// CLRLSLDI
    104U,	// CLRLSLDIo
    170U,	// CLRLSLWI
    170U,	// CLRLSLWIo
    8U,	// CLRRDI
    8U,	// CLRRDIo
    10U,	// CLRRWI
    10U,	// CLRRWIo
    0U,	// CMPB
    0U,	// CMPB8
    0U,	// CMPD
    2U,	// CMPDI
    0U,	// CMPEQB
    0U,	// CMPLD
    4U,	// CMPLDI
    0U,	// CMPLW
    4U,	// CMPLWI
    0U,	// CMPRB
    0U,	// CMPRB8
    0U,	// CMPW
    2U,	// CMPWI
    0U,	// CNTLZD
    0U,	// CNTLZDo
    0U,	// CNTLZW
    0U,	// CNTLZW8
    0U,	// CNTLZW8o
    0U,	// CNTLZWo
    0U,	// CNTTZD
    0U,	// CNTTZDo
    0U,	// CNTTZW
    0U,	// CNTTZW8
    0U,	// CNTTZW8o
    0U,	// CNTTZWo
    0U,	// CP_ABORT
    6U,	// CP_COPY
    6U,	// CP_COPY8
    0U,	// CP_COPY_FIRST
    0U,	// CP_COPYx
    6U,	// CP_PASTE
    6U,	// CP_PASTE8
    6U,	// CP_PASTE8o
    0U,	// CP_PASTE_LAST
    6U,	// CP_PASTEo
    0U,	// CP_PASTEx
    0U,	// CR6SET
    0U,	// CR6UNSET
    0U,	// CRAND
    0U,	// CRANDC
    0U,	// CREQV
    0U,	// CRNAND
    0U,	// CRNOR
    0U,	// CROR
    0U,	// CRORC
    12U,	// CRSET
    12U,	// CRUNSET
    0U,	// CRXOR
    0U,	// DCBA
    0U,	// DCBF
    0U,	// DCBFL
    0U,	// DCBFLP
    0U,	// DCBFx
    0U,	// DCBI
    0U,	// DCBST
    0U,	// DCBT
    0U,	// DCBTCT
    0U,	// DCBTDS
    0U,	// DCBTST
    0U,	// DCBTSTCT
    0U,	// DCBTSTDS
    0U,	// DCBTSTT
    0U,	// DCBTSTx
    0U,	// DCBTT
    0U,	// DCBTx
    0U,	// DCBZ
    0U,	// DCBZL
    0U,	// DCCCI
    0U,	// DFLOADf32
    0U,	// DFLOADf64
    0U,	// DFSTOREf32
    0U,	// DFSTOREf64
    0U,	// DIVD
    0U,	// DIVDE
    0U,	// DIVDEU
    0U,	// DIVDEUo
    0U,	// DIVDEo
    0U,	// DIVDU
    0U,	// DIVDUo
    0U,	// DIVDo
    0U,	// DIVW
    0U,	// DIVWE
    0U,	// DIVWEU
    0U,	// DIVWEUo
    0U,	// DIVWEo
    0U,	// DIVWU
    0U,	// DIVWUo
    0U,	// DIVWo
    0U,	// DSS
    0U,	// DSSALL
    0U,	// DST
    0U,	// DST64
    0U,	// DSTST
    0U,	// DSTST64
    0U,	// DSTSTT
    0U,	// DSTSTT64
    0U,	// DSTT
    0U,	// DSTT64
    0U,	// DYNALLOC
    0U,	// DYNALLOC8
    0U,	// DYNAREAOFFSET
    0U,	// DYNAREAOFFSET8
    0U,	// EH_SjLj_LongJmp32
    0U,	// EH_SjLj_LongJmp64
    0U,	// EH_SjLj_SetJmp32
    0U,	// EH_SjLj_SetJmp64
    0U,	// EH_SjLj_Setup
    0U,	// EQV
    0U,	// EQV8
    0U,	// EQV8o
    0U,	// EQVo
    0U,	// EVABS
    14U,	// EVADDIW
    0U,	// EVADDSMIAAW
    0U,	// EVADDSSIAAW
    0U,	// EVADDUMIAAW
    0U,	// EVADDUSIAAW
    0U,	// EVADDW
    0U,	// EVAND
    0U,	// EVANDC
    0U,	// EVCMPEQ
    0U,	// EVCMPGTS
    0U,	// EVCMPGTU
    0U,	// EVCMPLTS
    0U,	// EVCMPLTU
    0U,	// EVCNTLSW
    0U,	// EVCNTLZW
    0U,	// EVDIVWS
    0U,	// EVDIVWU
    0U,	// EVEQV
    0U,	// EVEXTSB
    0U,	// EVEXTSH
    0U,	// EVLDD
    0U,	// EVLDDX
    0U,	// EVLDH
    0U,	// EVLDHX
    0U,	// EVLDW
    0U,	// EVLDWX
    0U,	// EVLHHESPLAT
    0U,	// EVLHHESPLATX
    0U,	// EVLHHOSSPLAT
    0U,	// EVLHHOSSPLATX
    0U,	// EVLHHOUSPLAT
    0U,	// EVLHHOUSPLATX
    0U,	// EVLWHE
    0U,	// EVLWHEX
    0U,	// EVLWHOS
    0U,	// EVLWHOSX
    0U,	// EVLWHOU
    0U,	// EVLWHOUX
    0U,	// EVLWHSPLAT
    0U,	// EVLWHSPLATX
    0U,	// EVLWWSPLAT
    0U,	// EVLWWSPLATX
    0U,	// EVMERGEHI
    0U,	// EVMERGEHILO
    0U,	// EVMERGELO
    0U,	// EVMERGELOHI
    0U,	// EVMHEGSMFAA
    0U,	// EVMHEGSMFAN
    0U,	// EVMHEGSMIAA
    0U,	// EVMHEGSMIAN
    0U,	// EVMHEGUMIAA
    0U,	// EVMHEGUMIAN
    0U,	// EVMHESMF
    0U,	// EVMHESMFA
    0U,	// EVMHESMFAAW
    0U,	// EVMHESMFANW
    0U,	// EVMHESMI
    0U,	// EVMHESMIA
    0U,	// EVMHESMIAAW
    0U,	// EVMHESMIANW
    0U,	// EVMHESSF
    0U,	// EVMHESSFA
    0U,	// EVMHESSFAAW
    0U,	// EVMHESSFANW
    0U,	// EVMHESSIAAW
    0U,	// EVMHESSIANW
    0U,	// EVMHEUMI
    0U,	// EVMHEUMIA
    0U,	// EVMHEUMIAAW
    0U,	// EVMHEUMIANW
    0U,	// EVMHEUSIAAW
    0U,	// EVMHEUSIANW
    0U,	// EVMHOGSMFAA
    0U,	// EVMHOGSMFAN
    0U,	// EVMHOGSMIAA
    0U,	// EVMHOGSMIAN
    0U,	// EVMHOGUMIAA
    0U,	// EVMHOGUMIAN
    0U,	// EVMHOSMF
    0U,	// EVMHOSMFA
    0U,	// EVMHOSMFAAW
    0U,	// EVMHOSMFANW
    0U,	// EVMHOSMI
    0U,	// EVMHOSMIA
    0U,	// EVMHOSMIAAW
    0U,	// EVMHOSMIANW
    0U,	// EVMHOSSF
    0U,	// EVMHOSSFA
    0U,	// EVMHOSSFAAW
    0U,	// EVMHOSSFANW
    0U,	// EVMHOSSIAAW
    0U,	// EVMHOSSIANW
    0U,	// EVMHOUMI
    0U,	// EVMHOUMIA
    0U,	// EVMHOUMIAAW
    0U,	// EVMHOUMIANW
    0U,	// EVMHOUSIAAW
    0U,	// EVMHOUSIANW
    0U,	// EVMRA
    0U,	// EVMWHSMF
    0U,	// EVMWHSMFA
    0U,	// EVMWHSMI
    0U,	// EVMWHSMIA
    0U,	// EVMWHSSF
    0U,	// EVMWHSSFA
    0U,	// EVMWHUMI
    0U,	// EVMWHUMIA
    0U,	// EVMWLSMIAAW
    0U,	// EVMWLSMIANW
    0U,	// EVMWLSSIAAW
    0U,	// EVMWLSSIANW
    0U,	// EVMWLUMI
    0U,	// EVMWLUMIA
    0U,	// EVMWLUMIAAW
    0U,	// EVMWLUMIANW
    0U,	// EVMWLUSIAAW
    0U,	// EVMWLUSIANW
    0U,	// EVMWSMF
    0U,	// EVMWSMFA
    0U,	// EVMWSMFAA
    0U,	// EVMWSMFAN
    0U,	// EVMWSMI
    0U,	// EVMWSMIA
    0U,	// EVMWSMIAA
    0U,	// EVMWSMIAN
    0U,	// EVMWSSF
    0U,	// EVMWSSFA
    0U,	// EVMWSSFAA
    0U,	// EVMWSSFAN
    0U,	// EVMWUMI
    0U,	// EVMWUMIA
    0U,	// EVMWUMIAA
    0U,	// EVMWUMIAN
    0U,	// EVNAND
    0U,	// EVNEG
    0U,	// EVNOR
    0U,	// EVOR
    0U,	// EVORC
    0U,	// EVRLW
    10U,	// EVRLWI
    0U,	// EVRNDW
    0U,	// EVSLW
    10U,	// EVSLWI
    0U,	// EVSPLATFI
    0U,	// EVSPLATI
    10U,	// EVSRWIS
    10U,	// EVSRWIU
    0U,	// EVSRWS
    0U,	// EVSRWU
    0U,	// EVSTDD
    0U,	// EVSTDDX
    0U,	// EVSTDH
    0U,	// EVSTDHX
    0U,	// EVSTDW
    0U,	// EVSTDWX
    0U,	// EVSTWHE
    0U,	// EVSTWHEX
    0U,	// EVSTWHO
    0U,	// EVSTWHOX
    0U,	// EVSTWWE
    0U,	// EVSTWWEX
    0U,	// EVSTWWO
    0U,	// EVSTWWOX
    0U,	// EVSUBFSMIAAW
    0U,	// EVSUBFSSIAAW
    0U,	// EVSUBFUMIAAW
    0U,	// EVSUBFUSIAAW
    0U,	// EVSUBFW
    0U,	// EVSUBIFW
    0U,	// EVXOR
    104U,	// EXTLDI
    104U,	// EXTLDIo
    170U,	// EXTLWI
    170U,	// EXTLWIo
    104U,	// EXTRDI
    104U,	// EXTRDIo
    170U,	// EXTRWI
    170U,	// EXTRWIo
    0U,	// EXTSB
    0U,	// EXTSB8
    0U,	// EXTSB8_32_64
    0U,	// EXTSB8o
    0U,	// EXTSBo
    0U,	// EXTSH
    0U,	// EXTSH8
    0U,	// EXTSH8_32_64
    0U,	// EXTSH8o
    0U,	// EXTSHo
    0U,	// EXTSW
    0U,	// EXTSW_32_64
    0U,	// EXTSW_32_64o
    0U,	// EXTSWo
    0U,	// EnforceIEIO
    0U,	// FABSD
    0U,	// FABSDo
    0U,	// FABSS
    0U,	// FABSSo
    0U,	// FADD
    0U,	// FADDS
    0U,	// FADDSo
    0U,	// FADDo
    0U,	// FADDrtz
    0U,	// FCFID
    0U,	// FCFIDS
    0U,	// FCFIDSo
    0U,	// FCFIDU
    0U,	// FCFIDUS
    0U,	// FCFIDUSo
    0U,	// FCFIDUo
    0U,	// FCFIDo
    0U,	// FCMPUD
    0U,	// FCMPUS
    0U,	// FCPSGND
    0U,	// FCPSGNDo
    0U,	// FCPSGNS
    0U,	// FCPSGNSo
    0U,	// FCTID
    0U,	// FCTIDU
    0U,	// FCTIDUZ
    0U,	// FCTIDUZo
    0U,	// FCTIDUo
    0U,	// FCTIDZ
    0U,	// FCTIDZo
    0U,	// FCTIDo
    0U,	// FCTIW
    0U,	// FCTIWU
    0U,	// FCTIWUZ
    0U,	// FCTIWUZo
    0U,	// FCTIWUo
    0U,	// FCTIWZ
    0U,	// FCTIWZo
    0U,	// FCTIWo
    0U,	// FDIV
    0U,	// FDIVS
    0U,	// FDIVSo
    0U,	// FDIVo
    224U,	// FMADD
    224U,	// FMADDS
    224U,	// FMADDSo
    224U,	// FMADDo
    0U,	// FMR
    0U,	// FMRo
    224U,	// FMSUB
    224U,	// FMSUBS
    224U,	// FMSUBSo
    224U,	// FMSUBo
    0U,	// FMUL
    0U,	// FMULS
    0U,	// FMULSo
    0U,	// FMULo
    0U,	// FNABSD
    0U,	// FNABSDo
    0U,	// FNABSS
    0U,	// FNABSSo
    0U,	// FNEGD
    0U,	// FNEGDo
    0U,	// FNEGS
    0U,	// FNEGSo
    224U,	// FNMADD
    224U,	// FNMADDS
    224U,	// FNMADDSo
    224U,	// FNMADDo
    224U,	// FNMSUB
    224U,	// FNMSUBS
    224U,	// FNMSUBSo
    224U,	// FNMSUBo
    0U,	// FRE
    0U,	// FRES
    0U,	// FRESo
    0U,	// FREo
    0U,	// FRIMD
    0U,	// FRIMDo
    0U,	// FRIMS
    0U,	// FRIMSo
    0U,	// FRIND
    0U,	// FRINDo
    0U,	// FRINS
    0U,	// FRINSo
    0U,	// FRIPD
    0U,	// FRIPDo
    0U,	// FRIPS
    0U,	// FRIPSo
    0U,	// FRIZD
    0U,	// FRIZDo
    0U,	// FRIZS
    0U,	// FRIZSo
    0U,	// FRSP
    0U,	// FRSPo
    0U,	// FRSQRTE
    0U,	// FRSQRTES
    0U,	// FRSQRTESo
    0U,	// FRSQRTEo
    224U,	// FSELD
    224U,	// FSELDo
    224U,	// FSELS
    224U,	// FSELSo
    0U,	// FSQRT
    0U,	// FSQRTS
    0U,	// FSQRTSo
    0U,	// FSQRTo
    0U,	// FSUB
    0U,	// FSUBS
    0U,	// FSUBSo
    0U,	// FSUBo
    0U,	// FTDIV
    0U,	// FTSQRT
    0U,	// GETtlsADDR
    0U,	// GETtlsADDR32
    0U,	// GETtlsldADDR
    0U,	// GETtlsldADDR32
    0U,	// HRFID
    0U,	// ICBI
    0U,	// ICBLC
    0U,	// ICBLQ
    0U,	// ICBT
    0U,	// ICBTLS
    0U,	// ICCCI
    170U,	// INSLWI
    170U,	// INSLWIo
    104U,	// INSRDI
    104U,	// INSRDIo
    170U,	// INSRWI
    170U,	// INSRWIo
    224U,	// ISEL
    224U,	// ISEL8
    0U,	// ISYNC
    0U,	// LA
    0U,	// LAx
    0U,	// LBARX
    0U,	// LBARXL
    0U,	// LBZ
    0U,	// LBZ8
    0U,	// LBZCIX
    0U,	// LBZU
    0U,	// LBZU8
    0U,	// LBZUX
    0U,	// LBZUX8
    0U,	// LBZX
    0U,	// LBZX8
    0U,	// LD
    0U,	// LDARX
    0U,	// LDARXL
    10U,	// LDAT
    0U,	// LDBRX
    0U,	// LDCIX
    0U,	// LDMX
    0U,	// LDU
    0U,	// LDUX
    0U,	// LDX
    0U,	// LDgotTprelL
    0U,	// LDgotTprelL32
    0U,	// LDtoc
    0U,	// LDtocBA
    0U,	// LDtocCPT
    0U,	// LDtocJTI
    0U,	// LDtocL
    0U,	// LFD
    0U,	// LFDU
    0U,	// LFDUX
    0U,	// LFDX
    0U,	// LFIWAX
    0U,	// LFIWZX
    0U,	// LFS
    0U,	// LFSU
    0U,	// LFSUX
    0U,	// LFSX
    0U,	// LHA
    0U,	// LHA8
    0U,	// LHARX
    0U,	// LHARXL
    0U,	// LHAU
    0U,	// LHAU8
    0U,	// LHAUX
    0U,	// LHAUX8
    0U,	// LHAX
    0U,	// LHAX8
    0U,	// LHBRX
    0U,	// LHBRX8
    0U,	// LHZ
    0U,	// LHZ8
    0U,	// LHZCIX
    0U,	// LHZU
    0U,	// LHZU8
    0U,	// LHZUX
    0U,	// LHZUX8
    0U,	// LHZX
    0U,	// LHZX8
    0U,	// LI
    0U,	// LI8
    0U,	// LIS
    0U,	// LIS8
    0U,	// LMW
    10U,	// LSWI
    0U,	// LVEBX
    0U,	// LVEHX
    0U,	// LVEWX
    0U,	// LVSL
    0U,	// LVSR
    0U,	// LVX
    0U,	// LVXL
    0U,	// LWA
    0U,	// LWARX
    0U,	// LWARXL
    10U,	// LWAT
    0U,	// LWAUX
    0U,	// LWAX
    0U,	// LWAX_32
    0U,	// LWA_32
    0U,	// LWBRX
    0U,	// LWBRX8
    0U,	// LWZ
    0U,	// LWZ8
    0U,	// LWZCIX
    0U,	// LWZU
    0U,	// LWZU8
    0U,	// LWZUX
    0U,	// LWZUX8
    0U,	// LWZX
    0U,	// LWZX8
    0U,	// LWZtoc
    0U,	// LXSD
    0U,	// LXSDX
    0U,	// LXSIBZX
    0U,	// LXSIHZX
    0U,	// LXSIWAX
    0U,	// LXSIWZX
    0U,	// LXSSP
    0U,	// LXSSPX
    0U,	// LXV
    0U,	// LXVB16X
    0U,	// LXVD2X
    0U,	// LXVDSX
    0U,	// LXVH8X
    0U,	// LXVL
    0U,	// LXVLL
    0U,	// LXVW4X
    0U,	// LXVWSX
    0U,	// LXVX
    0U,	// MBAR
    0U,	// MCRF
    0U,	// MCRFS
    0U,	// MCRXRX
    0U,	// MFBHRBE
    0U,	// MFCR
    0U,	// MFCR8
    0U,	// MFCTR
    0U,	// MFCTR8
    0U,	// MFDCR
    0U,	// MFFS
    0U,	// MFFSo
    0U,	// MFLR
    0U,	// MFLR8
    0U,	// MFMSR
    0U,	// MFOCRF
    0U,	// MFOCRF8
    0U,	// MFPMR
    0U,	// MFSPR
    0U,	// MFSPR8
    0U,	// MFSR
    0U,	// MFSRIN
    0U,	// MFTB
    0U,	// MFTB8
    0U,	// MFVRD
    0U,	// MFVRSAVE
    0U,	// MFVRSAVEv
    0U,	// MFVSCR
    0U,	// MFVSRD
    0U,	// MFVSRLD
    0U,	// MFVSRWZ
    0U,	// MSGSYNC
    0U,	// MSYNC
    0U,	// MTCRF
    0U,	// MTCRF8
    0U,	// MTCTR
    0U,	// MTCTR8
    0U,	// MTCTR8loop
    0U,	// MTCTRloop
    0U,	// MTDCR
    0U,	// MTFSB0
    0U,	// MTFSB1
    224U,	// MTFSF
    0U,	// MTFSFI
    0U,	// MTFSFIo
    0U,	// MTFSFb
    224U,	// MTFSFo
    0U,	// MTLR
    0U,	// MTLR8
    0U,	// MTMSR
    0U,	// MTMSRD
    0U,	// MTOCRF
    0U,	// MTOCRF8
    0U,	// MTPMR
    0U,	// MTSPR
    0U,	// MTSPR8
    0U,	// MTSR
    0U,	// MTSRIN
    0U,	// MTVRSAVE
    0U,	// MTVRSAVEv
    0U,	// MTVSCR
    0U,	// MTVSRD
    0U,	// MTVSRDD
    0U,	// MTVSRWA
    0U,	// MTVSRWS
    0U,	// MTVSRWZ
    0U,	// MULHD
    0U,	// MULHDU
    0U,	// MULHDUo
    0U,	// MULHDo
    0U,	// MULHW
    0U,	// MULHWU
    0U,	// MULHWUo
    0U,	// MULHWo
    0U,	// MULLD
    0U,	// MULLDo
    2U,	// MULLI
    2U,	// MULLI8
    0U,	// MULLW
    0U,	// MULLWo
    0U,	// MoveGOTtoLR
    0U,	// MovePCtoLR
    0U,	// MovePCtoLR8
    0U,	// NAND
    0U,	// NAND8
    0U,	// NAND8o
    0U,	// NANDo
    0U,	// NAP
    0U,	// NEG
    0U,	// NEG8
    0U,	// NEG8o
    0U,	// NEGo
    0U,	// NOP
    0U,	// NOP_GT_PWR6
    0U,	// NOP_GT_PWR7
    0U,	// NOR
    0U,	// NOR8
    0U,	// NOR8o
    0U,	// NORo
    0U,	// OR
    0U,	// OR8
    0U,	// OR8o
    0U,	// ORC
    0U,	// ORC8
    0U,	// ORC8o
    0U,	// ORCo
    4U,	// ORI
    4U,	// ORI8
    4U,	// ORIS
    4U,	// ORIS8
    0U,	// ORo
    0U,	// POPCNTD
    0U,	// POPCNTW
    0U,	// PPC32GOT
    0U,	// PPC32PICGOT
    288U,	// QVALIGNI
    288U,	// QVALIGNIb
    288U,	// QVALIGNIs
    16U,	// QVESPLATI
    16U,	// QVESPLATIb
    16U,	// QVESPLATIs
    0U,	// QVFABS
    0U,	// QVFABSs
    0U,	// QVFADD
    0U,	// QVFADDS
    0U,	// QVFADDSs
    0U,	// QVFCFID
    0U,	// QVFCFIDS
    0U,	// QVFCFIDU
    0U,	// QVFCFIDUS
    0U,	// QVFCFIDb
    0U,	// QVFCMPEQ
    0U,	// QVFCMPEQb
    0U,	// QVFCMPEQbs
    0U,	// QVFCMPGT
    0U,	// QVFCMPGTb
    0U,	// QVFCMPGTbs
    0U,	// QVFCMPLT
    0U,	// QVFCMPLTb
    0U,	// QVFCMPLTbs
    0U,	// QVFCPSGN
    0U,	// QVFCPSGNs
    0U,	// QVFCTID
    0U,	// QVFCTIDU
    0U,	// QVFCTIDUZ
    0U,	// QVFCTIDZ
    0U,	// QVFCTIDb
    0U,	// QVFCTIW
    0U,	// QVFCTIWU
    0U,	// QVFCTIWUZ
    0U,	// QVFCTIWZ
    352U,	// QVFLOGICAL
    352U,	// QVFLOGICALb
    352U,	// QVFLOGICALs
    18U,	// QVFMADD
    18U,	// QVFMADDS
    18U,	// QVFMADDSs
    0U,	// QVFMR
    0U,	// QVFMRb
    0U,	// QVFMRs
    18U,	// QVFMSUB
    18U,	// QVFMSUBS
    18U,	// QVFMSUBSs
    0U,	// QVFMUL
    0U,	// QVFMULS
    0U,	// QVFMULSs
    0U,	// QVFNABS
    0U,	// QVFNABSs
    0U,	// QVFNEG
    0U,	// QVFNEGs
    18U,	// QVFNMADD
    18U,	// QVFNMADDS
    18U,	// QVFNMADDSs
    18U,	// QVFNMSUB
    18U,	// QVFNMSUBS
    18U,	// QVFNMSUBSs
    224U,	// QVFPERM
    224U,	// QVFPERMs
    0U,	// QVFRE
    0U,	// QVFRES
    0U,	// QVFRESs
    0U,	// QVFRIM
    0U,	// QVFRIMs
    0U,	// QVFRIN
    0U,	// QVFRINs
    0U,	// QVFRIP
    0U,	// QVFRIPs
    0U,	// QVFRIZ
    0U,	// QVFRIZs
    0U,	// QVFRSP
    0U,	// QVFRSPs
    0U,	// QVFRSQRTE
    0U,	// QVFRSQRTES
    0U,	// QVFRSQRTESs
    18U,	// QVFSEL
    18U,	// QVFSELb
    18U,	// QVFSELbb
    18U,	// QVFSELbs
    0U,	// QVFSUB
    0U,	// QVFSUBS
    0U,	// QVFSUBSs
    0U,	// QVFTSTNAN
    0U,	// QVFTSTNANb
    0U,	// QVFTSTNANbs
    18U,	// QVFXMADD
    18U,	// QVFXMADDS
    0U,	// QVFXMUL
    0U,	// QVFXMULS
    18U,	// QVFXXCPNMADD
    18U,	// QVFXXCPNMADDS
    18U,	// QVFXXMADD
    18U,	// QVFXXMADDS
    18U,	// QVFXXNPMADD
    18U,	// QVFXXNPMADDS
    0U,	// QVGPCI
    0U,	// QVLFCDUX
    0U,	// QVLFCDUXA
    0U,	// QVLFCDX
    0U,	// QVLFCDXA
    0U,	// QVLFCSUX
    0U,	// QVLFCSUXA
    0U,	// QVLFCSX
    0U,	// QVLFCSXA
    0U,	// QVLFCSXs
    0U,	// QVLFDUX
    0U,	// QVLFDUXA
    0U,	// QVLFDX
    0U,	// QVLFDXA
    0U,	// QVLFDXb
    0U,	// QVLFIWAX
    0U,	// QVLFIWAXA
    0U,	// QVLFIWZX
    0U,	// QVLFIWZXA
    0U,	// QVLFSUX
    0U,	// QVLFSUXA
    0U,	// QVLFSX
    0U,	// QVLFSXA
    0U,	// QVLFSXb
    0U,	// QVLFSXs
    0U,	// QVLPCLDX
    0U,	// QVLPCLSX
    0U,	// QVLPCLSXint
    0U,	// QVLPCRDX
    0U,	// QVLPCRSX
    0U,	// QVSTFCDUX
    0U,	// QVSTFCDUXA
    0U,	// QVSTFCDUXI
    0U,	// QVSTFCDUXIA
    0U,	// QVSTFCDX
    0U,	// QVSTFCDXA
    0U,	// QVSTFCDXI
    0U,	// QVSTFCDXIA
    0U,	// QVSTFCSUX
    0U,	// QVSTFCSUXA
    0U,	// QVSTFCSUXI
    0U,	// QVSTFCSUXIA
    0U,	// QVSTFCSX
    0U,	// QVSTFCSXA
    0U,	// QVSTFCSXI
    0U,	// QVSTFCSXIA
    0U,	// QVSTFCSXs
    0U,	// QVSTFDUX
    0U,	// QVSTFDUXA
    0U,	// QVSTFDUXI
    0U,	// QVSTFDUXIA
    0U,	// QVSTFDX
    0U,	// QVSTFDXA
    0U,	// QVSTFDXI
    0U,	// QVSTFDXIA
    0U,	// QVSTFDXb
    0U,	// QVSTFIWX
    0U,	// QVSTFIWXA
    0U,	// QVSTFSUX
    0U,	// QVSTFSUXA
    0U,	// QVSTFSUXI
    0U,	// QVSTFSUXIA
    0U,	// QVSTFSUXs
    0U,	// QVSTFSX
    0U,	// QVSTFSXA
    0U,	// QVSTFSXI
    0U,	// QVSTFSXIA
    0U,	// QVSTFSXs
    0U,	// RESTORE_CR
    0U,	// RESTORE_CRBIT
    0U,	// RESTORE_VRSAVE
    0U,	// RFCI
    0U,	// RFDI
    0U,	// RFEBB
    0U,	// RFI
    0U,	// RFID
    0U,	// RFMCI
    96U,	// RLDCL
    96U,	// RLDCLo
    96U,	// RLDCR
    96U,	// RLDCRo
    104U,	// RLDIC
    104U,	// RLDICL
    104U,	// RLDICL_32_64
    104U,	// RLDICLo
    104U,	// RLDICR
    104U,	// RLDICRo
    104U,	// RLDICo
    0U,	// RLDIMI
    0U,	// RLDIMIo
    0U,	// RLWIMI
    0U,	// RLWIMI8
    0U,	// RLWIMI8o
    234U,	// RLWIMIbm
    0U,	// RLWIMIo
    234U,	// RLWIMIobm
    682U,	// RLWINM
    682U,	// RLWINM8
    682U,	// RLWINM8o
    234U,	// RLWINMbm
    682U,	// RLWINMo
    234U,	// RLWINMobm
    672U,	// RLWNM
    672U,	// RLWNM8
    672U,	// RLWNM8o
    234U,	// RLWNMbm
    672U,	// RLWNMo
    234U,	// RLWNMobm
    8U,	// ROTRDI
    8U,	// ROTRDIo
    10U,	// ROTRWI
    10U,	// ROTRWIo
    0U,	// ReadTB
    0U,	// SC
    0U,	// SELECT_CC_F4
    0U,	// SELECT_CC_F8
    0U,	// SELECT_CC_I4
    0U,	// SELECT_CC_I8
    0U,	// SELECT_CC_QBRC
    0U,	// SELECT_CC_QFRC
    0U,	// SELECT_CC_QSRC
    0U,	// SELECT_CC_VRRC
    0U,	// SELECT_CC_VSFRC
    0U,	// SELECT_CC_VSRC
    0U,	// SELECT_CC_VSSRC
    0U,	// SELECT_F4
    0U,	// SELECT_F8
    0U,	// SELECT_I4
    0U,	// SELECT_I8
    0U,	// SELECT_QBRC
    0U,	// SELECT_QFRC
    0U,	// SELECT_QSRC
    0U,	// SELECT_VRRC
    0U,	// SELECT_VSFRC
    0U,	// SELECT_VSRC
    0U,	// SELECT_VSSRC
    0U,	// SLBIA
    0U,	// SLBIE
    0U,	// SLBIEG
    0U,	// SLBMFEE
    0U,	// SLBMFEV
    0U,	// SLBMTE
    0U,	// SLBSYNC
    0U,	// SLD
    8U,	// SLDI
    8U,	// SLDIo
    0U,	// SLDo
    0U,	// SLW
    0U,	// SLW8
    0U,	// SLW8o
    10U,	// SLWI
    10U,	// SLWIo
    0U,	// SLWo
    0U,	// SPILL_CR
    0U,	// SPILL_CRBIT
    0U,	// SPILL_VRSAVE
    0U,	// SRAD
    8U,	// SRADI
    8U,	// SRADIo
    0U,	// SRADo
    0U,	// SRAW
    10U,	// SRAWI
    10U,	// SRAWIo
    0U,	// SRAWo
    0U,	// SRD
    8U,	// SRDI
    8U,	// SRDIo
    0U,	// SRDo
    0U,	// SRW
    0U,	// SRW8
    0U,	// SRW8o
    10U,	// SRWI
    10U,	// SRWIo
    0U,	// SRWo
    0U,	// STB
    0U,	// STB8
    0U,	// STBCIX
    0U,	// STBCX
    0U,	// STBU
    0U,	// STBU8
    0U,	// STBUX
    0U,	// STBUX8
    0U,	// STBX
    0U,	// STBX8
    0U,	// STD
    10U,	// STDAT
    0U,	// STDBRX
    0U,	// STDCIX
    0U,	// STDCX
    0U,	// STDU
    0U,	// STDUX
    0U,	// STDX
    0U,	// STFD
    0U,	// STFDU
    0U,	// STFDUX
    0U,	// STFDX
    0U,	// STFIWX
    0U,	// STFS
    0U,	// STFSU
    0U,	// STFSUX
    0U,	// STFSX
    0U,	// STH
    0U,	// STH8
    0U,	// STHBRX
    0U,	// STHCIX
    0U,	// STHCX
    0U,	// STHU
    0U,	// STHU8
    0U,	// STHUX
    0U,	// STHUX8
    0U,	// STHX
    0U,	// STHX8
    0U,	// STMW
    0U,	// STOP
    10U,	// STSWI
    0U,	// STVEBX
    0U,	// STVEHX
    0U,	// STVEWX
    0U,	// STVX
    0U,	// STVXL
    0U,	// STW
    0U,	// STW8
    10U,	// STWAT
    0U,	// STWBRX
    0U,	// STWCIX
    0U,	// STWCX
    0U,	// STWU
    0U,	// STWU8
    0U,	// STWUX
    0U,	// STWUX8
    0U,	// STWX
    0U,	// STWX8
    0U,	// STXSD
    0U,	// STXSDX
    0U,	// STXSIBX
    0U,	// STXSIBXv
    0U,	// STXSIHX
    0U,	// STXSIHXv
    0U,	// STXSIWX
    0U,	// STXSSP
    0U,	// STXSSPX
    0U,	// STXV
    0U,	// STXVB16X
    0U,	// STXVD2X
    0U,	// STXVH8X
    0U,	// STXVL
    0U,	// STXVLL
    0U,	// STXVW4X
    0U,	// STXVX
    0U,	// SUBF
    0U,	// SUBF8
    0U,	// SUBF8o
    0U,	// SUBFC
    0U,	// SUBFC8
    0U,	// SUBFC8o
    0U,	// SUBFCo
    0U,	// SUBFE
    0U,	// SUBFE8
    0U,	// SUBFE8o
    0U,	// SUBFEo
    2U,	// SUBFIC
    2U,	// SUBFIC8
    0U,	// SUBFME
    0U,	// SUBFME8
    0U,	// SUBFME8o
    0U,	// SUBFMEo
    0U,	// SUBFZE
    0U,	// SUBFZE8
    0U,	// SUBFZE8o
    0U,	// SUBFZEo
    0U,	// SUBFo
    2U,	// SUBI
    2U,	// SUBIC
    2U,	// SUBICo
    2U,	// SUBIS
    0U,	// SYNC
    0U,	// TABORT
    0U,	// TABORTDC
    0U,	// TABORTDCI
    0U,	// TABORTWC
    0U,	// TABORTWCI
    0U,	// TAILB
    0U,	// TAILB8
    0U,	// TAILBA
    0U,	// TAILBA8
    0U,	// TAILBCTR
    0U,	// TAILBCTR8
    0U,	// TBEGIN
    0U,	// TCHECK
    0U,	// TCHECK_RET
    0U,	// TCRETURNai
    0U,	// TCRETURNai8
    0U,	// TCRETURNdi
    0U,	// TCRETURNdi8
    0U,	// TCRETURNri
    0U,	// TCRETURNri8
    0U,	// TD
    2U,	// TDI
    0U,	// TEND
    0U,	// TLBIA
    0U,	// TLBIE
    0U,	// TLBIEL
    0U,	// TLBIVAX
    0U,	// TLBLD
    0U,	// TLBLI
    0U,	// TLBRE
    0U,	// TLBRE2
    0U,	// TLBSX
    0U,	// TLBSX2
    0U,	// TLBSX2D
    0U,	// TLBSYNC
    0U,	// TLBWE
    0U,	// TLBWE2
    0U,	// TRAP
    0U,	// TRECHKPT
    0U,	// TRECLAIM
    0U,	// TSR
    0U,	// TW
    2U,	// TWI
    0U,	// UPDATE_VRSAVE
    0U,	// UpdateGBR
    0U,	// VABSDUB
    0U,	// VABSDUH
    0U,	// VABSDUW
    0U,	// VADDCUQ
    0U,	// VADDCUW
    224U,	// VADDECUQ
    224U,	// VADDEUQM
    0U,	// VADDFP
    0U,	// VADDSBS
    0U,	// VADDSHS
    0U,	// VADDSWS
    0U,	// VADDUBM
    0U,	// VADDUBS
    0U,	// VADDUDM
    0U,	// VADDUHM
    0U,	// VADDUHS
    0U,	// VADDUQM
    0U,	// VADDUWM
    0U,	// VADDUWS
    0U,	// VAND
    0U,	// VANDC
    0U,	// VAVGSB
    0U,	// VAVGSH
    0U,	// VAVGSW
    0U,	// VAVGUB
    0U,	// VAVGUH
    0U,	// VAVGUW
    0U,	// VBPERMD
    0U,	// VBPERMQ
    0U,	// VCFSX
    1U,	// VCFSX_0
    0U,	// VCFUX
    1U,	// VCFUX_0
    0U,	// VCIPHER
    0U,	// VCIPHERLAST
    0U,	// VCLZB
    0U,	// VCLZD
    0U,	// VCLZH
    0U,	// VCLZLSBB
    0U,	// VCLZW
    0U,	// VCMPBFP
    0U,	// VCMPBFPo
    0U,	// VCMPEQFP
    0U,	// VCMPEQFPo
    0U,	// VCMPEQUB
    0U,	// VCMPEQUBo
    0U,	// VCMPEQUD
    0U,	// VCMPEQUDo
    0U,	// VCMPEQUH
    0U,	// VCMPEQUHo
    0U,	// VCMPEQUW
    0U,	// VCMPEQUWo
    0U,	// VCMPGEFP
    0U,	// VCMPGEFPo
    0U,	// VCMPGTFP
    0U,	// VCMPGTFPo
    0U,	// VCMPGTSB
    0U,	// VCMPGTSBo
    0U,	// VCMPGTSD
    0U,	// VCMPGTSDo
    0U,	// VCMPGTSH
    0U,	// VCMPGTSHo
    0U,	// VCMPGTSW
    0U,	// VCMPGTSWo
    0U,	// VCMPGTUB
    0U,	// VCMPGTUBo
    0U,	// VCMPGTUD
    0U,	// VCMPGTUDo
    0U,	// VCMPGTUH
    0U,	// VCMPGTUHo
    0U,	// VCMPGTUW
    0U,	// VCMPGTUWo
    0U,	// VCMPNEB
    0U,	// VCMPNEBo
    0U,	// VCMPNEH
    0U,	// VCMPNEHo
    0U,	// VCMPNEW
    0U,	// VCMPNEWo
    0U,	// VCMPNEZB
    0U,	// VCMPNEZBo
    0U,	// VCMPNEZH
    0U,	// VCMPNEZHo
    0U,	// VCMPNEZW
    0U,	// VCMPNEZWo
    0U,	// VCTSXS
    1U,	// VCTSXS_0
    0U,	// VCTUXS
    1U,	// VCTUXS_0
    0U,	// VCTZB
    0U,	// VCTZD
    0U,	// VCTZH
    0U,	// VCTZLSBB
    0U,	// VCTZW
    0U,	// VEQV
    0U,	// VEXPTEFP
    1U,	// VEXTRACTD
    1U,	// VEXTRACTUB
    1U,	// VEXTRACTUH
    1U,	// VEXTRACTUW
    0U,	// VEXTSB2D
    0U,	// VEXTSB2Ds
    0U,	// VEXTSB2W
    0U,	// VEXTSB2Ws
    0U,	// VEXTSH2D
    0U,	// VEXTSH2Ds
    0U,	// VEXTSH2W
    0U,	// VEXTSH2Ws
    0U,	// VEXTSW2D
    0U,	// VEXTSW2Ds
    0U,	// VEXTUBLX
    0U,	// VEXTUBRX
    0U,	// VEXTUHLX
    0U,	// VEXTUHRX
    0U,	// VEXTUWLX
    0U,	// VEXTUWRX
    0U,	// VGBBD
    1U,	// VINSERTB
    1U,	// VINSERTD
    1U,	// VINSERTH
    1U,	// VINSERTW
    0U,	// VLOGEFP
    224U,	// VMADDFP
    0U,	// VMAXFP
    0U,	// VMAXSB
    0U,	// VMAXSD
    0U,	// VMAXSH
    0U,	// VMAXSW
    0U,	// VMAXUB
    0U,	// VMAXUD
    0U,	// VMAXUH
    0U,	// VMAXUW
    224U,	// VMHADDSHS
    224U,	// VMHRADDSHS
    0U,	// VMINFP
    0U,	// VMINSB
    0U,	// VMINSD
    0U,	// VMINSH
    0U,	// VMINSW
    0U,	// VMINUB
    0U,	// VMINUD
    0U,	// VMINUH
    0U,	// VMINUW
    224U,	// VMLADDUHM
    0U,	// VMRGEW
    0U,	// VMRGHB
    0U,	// VMRGHH
    0U,	// VMRGHW
    0U,	// VMRGLB
    0U,	// VMRGLH
    0U,	// VMRGLW
    0U,	// VMRGOW
    224U,	// VMSUMMBM
    224U,	// VMSUMSHM
    224U,	// VMSUMSHS
    224U,	// VMSUMUBM
    224U,	// VMSUMUHM
    224U,	// VMSUMUHS
    0U,	// VMUL10CUQ
    0U,	// VMUL10ECUQ
    0U,	// VMUL10EUQ
    0U,	// VMUL10UQ
    0U,	// VMULESB
    0U,	// VMULESH
    0U,	// VMULESW
    0U,	// VMULEUB
    0U,	// VMULEUH
    0U,	// VMULEUW
    0U,	// VMULOSB
    0U,	// VMULOSH
    0U,	// VMULOSW
    0U,	// VMULOUB
    0U,	// VMULOUH
    0U,	// VMULOUW
    0U,	// VMULUWM
    0U,	// VNAND
    0U,	// VNCIPHER
    0U,	// VNCIPHERLAST
    0U,	// VNEGD
    0U,	// VNEGW
    224U,	// VNMSUBFP
    0U,	// VNOR
    0U,	// VOR
    0U,	// VORC
    224U,	// VPERM
    224U,	// VPERMR
    224U,	// VPERMXOR
    0U,	// VPKPX
    0U,	// VPKSDSS
    0U,	// VPKSDUS
    0U,	// VPKSHSS
    0U,	// VPKSHUS
    0U,	// VPKSWSS
    0U,	// VPKSWUS
    0U,	// VPKUDUM
    0U,	// VPKUDUS
    0U,	// VPKUHUM
    0U,	// VPKUHUS
    0U,	// VPKUWUM
    0U,	// VPKUWUS
    0U,	// VPMSUMB
    0U,	// VPMSUMD
    0U,	// VPMSUMH
    0U,	// VPMSUMW
    0U,	// VPOPCNTB
    0U,	// VPOPCNTD
    0U,	// VPOPCNTH
    0U,	// VPOPCNTW
    0U,	// VPRTYBD
    0U,	// VPRTYBQ
    0U,	// VPRTYBW
    0U,	// VREFP
    0U,	// VRFIM
    0U,	// VRFIN
    0U,	// VRFIP
    0U,	// VRFIZ
    0U,	// VRLB
    0U,	// VRLD
    0U,	// VRLDMI
    0U,	// VRLDNM
    0U,	// VRLH
    0U,	// VRLW
    0U,	// VRLWMI
    0U,	// VRLWNM
    0U,	// VRSQRTEFP
    0U,	// VSBOX
    224U,	// VSEL
    422U,	// VSHASIGMAD
    422U,	// VSHASIGMAW
    0U,	// VSL
    0U,	// VSLB
    0U,	// VSLD
    160U,	// VSLDOI
    0U,	// VSLH
    0U,	// VSLO
    0U,	// VSLV
    0U,	// VSLW
    0U,	// VSPLTB
    0U,	// VSPLTBs
    0U,	// VSPLTH
    0U,	// VSPLTHs
    0U,	// VSPLTISB
    0U,	// VSPLTISH
    0U,	// VSPLTISW
    0U,	// VSPLTW
    0U,	// VSR
    0U,	// VSRAB
    0U,	// VSRAD
    0U,	// VSRAH
    0U,	// VSRAW
    0U,	// VSRB
    0U,	// VSRD
    0U,	// VSRH
    0U,	// VSRO
    0U,	// VSRV
    0U,	// VSRW
    0U,	// VSUBCUQ
    0U,	// VSUBCUW
    224U,	// VSUBECUQ
    224U,	// VSUBEUQM
    0U,	// VSUBFP
    0U,	// VSUBSBS
    0U,	// VSUBSHS
    0U,	// VSUBSWS
    0U,	// VSUBUBM
    0U,	// VSUBUBS
    0U,	// VSUBUDM
    0U,	// VSUBUHM
    0U,	// VSUBUHS
    0U,	// VSUBUQM
    0U,	// VSUBUWM
    0U,	// VSUBUWS
    0U,	// VSUM2SWS
    0U,	// VSUM4SBS
    0U,	// VSUM4SHS
    0U,	// VSUM4UBS
    0U,	// VSUMSWS
    0U,	// VUPKHPX
    0U,	// VUPKHSB
    0U,	// VUPKHSH
    0U,	// VUPKHSW
    0U,	// VUPKLPX
    0U,	// VUPKLSB
    0U,	// VUPKLSH
    0U,	// VUPKLSW
    0U,	// VXOR
    12U,	// V_SET0
    12U,	// V_SET0B
    12U,	// V_SET0H
    0U,	// V_SETALLONES
    0U,	// V_SETALLONESB
    0U,	// V_SETALLONESH
    0U,	// WAIT
    0U,	// WRTEE
    0U,	// WRTEEI
    0U,	// XOR
    0U,	// XOR8
    0U,	// XOR8o
    4U,	// XORI
    4U,	// XORI8
    4U,	// XORIS
    4U,	// XORIS8
    0U,	// XORo
    0U,	// XSABSDP
    0U,	// XSABSQP
    0U,	// XSADDDP
    0U,	// XSADDQP
    0U,	// XSADDQPO
    0U,	// XSADDSP
    0U,	// XSCMPEQDP
    0U,	// XSCMPEXPDP
    0U,	// XSCMPEXPQP
    0U,	// XSCMPGEDP
    0U,	// XSCMPGTDP
    0U,	// XSCMPNEDP
    0U,	// XSCMPODP
    0U,	// XSCMPOQP
    0U,	// XSCMPUDP
    0U,	// XSCMPUQP
    0U,	// XSCPSGNDP
    0U,	// XSCPSGNQP
    0U,	// XSCVDPHP
    0U,	// XSCVDPQP
    0U,	// XSCVDPSP
    0U,	// XSCVDPSPN
    0U,	// XSCVDPSXDS
    0U,	// XSCVDPSXDSs
    0U,	// XSCVDPSXWS
    0U,	// XSCVDPSXWSs
    0U,	// XSCVDPUXDS
    0U,	// XSCVDPUXDSs
    0U,	// XSCVDPUXWS
    0U,	// XSCVDPUXWSs
    0U,	// XSCVHPDP
    0U,	// XSCVQPDP
    0U,	// XSCVQPDPO
    0U,	// XSCVQPSDZ
    0U,	// XSCVQPSWZ
    0U,	// XSCVQPUDZ
    0U,	// XSCVQPUWZ
    0U,	// XSCVSDQP
    0U,	// XSCVSPDP
    0U,	// XSCVSPDPN
    0U,	// XSCVSXDDP
    0U,	// XSCVSXDSP
    0U,	// XSCVUDQP
    0U,	// XSCVUXDDP
    0U,	// XSCVUXDSP
    0U,	// XSDIVDP
    0U,	// XSDIVQP
    0U,	// XSDIVQPO
    0U,	// XSDIVSP
    0U,	// XSIEXPDP
    0U,	// XSIEXPQP
    1U,	// XSMADDADP
    1U,	// XSMADDASP
    1U,	// XSMADDMDP
    1U,	// XSMADDMSP
    0U,	// XSMADDQP
    0U,	// XSMADDQPO
    0U,	// XSMAXCDP
    0U,	// XSMAXDP
    0U,	// XSMAXJDP
    0U,	// XSMINCDP
    0U,	// XSMINDP
    0U,	// XSMINJDP
    1U,	// XSMSUBADP
    1U,	// XSMSUBASP
    1U,	// XSMSUBMDP
    1U,	// XSMSUBMSP
    0U,	// XSMSUBQP
    0U,	// XSMSUBQPO
    0U,	// XSMULDP
    0U,	// XSMULQP
    0U,	// XSMULQPO
    0U,	// XSMULSP
    0U,	// XSNABSDP
    0U,	// XSNABSQP
    0U,	// XSNEGDP
    0U,	// XSNEGQP
    1U,	// XSNMADDADP
    1U,	// XSNMADDASP
    1U,	// XSNMADDMDP
    1U,	// XSNMADDMSP
    0U,	// XSNMADDQP
    0U,	// XSNMADDQPO
    1U,	// XSNMSUBADP
    1U,	// XSNMSUBASP
    1U,	// XSNMSUBMDP
    1U,	// XSNMSUBMSP
    0U,	// XSNMSUBQP
    0U,	// XSNMSUBQPO
    0U,	// XSRDPI
    0U,	// XSRDPIC
    0U,	// XSRDPIM
    0U,	// XSRDPIP
    0U,	// XSRDPIZ
    0U,	// XSREDP
    0U,	// XSRESP
    288U,	// XSRQPI
    288U,	// XSRQPIX
    288U,	// XSRQPXP
    0U,	// XSRSQRTEDP
    0U,	// XSRSQRTESP
    0U,	// XSSQRTDP
    0U,	// XSSQRTQP
    0U,	// XSSQRTQPO
    0U,	// XSSQRTSP
    0U,	// XSSUBDP
    0U,	// XSSUBQP
    0U,	// XSSUBQPO
    0U,	// XSSUBSP
    0U,	// XSTDIVDP
    0U,	// XSTSQRTDP
    1U,	// XSTSTDCDP
    1U,	// XSTSTDCQP
    1U,	// XSTSTDCSP
    0U,	// XSXEXPDP
    0U,	// XSXEXPQP
    0U,	// XSXSIGDP
    0U,	// XSXSIGQP
    0U,	// XVABSDP
    0U,	// XVABSSP
    0U,	// XVADDDP
    0U,	// XVADDSP
    0U,	// XVCMPEQDP
    0U,	// XVCMPEQDPo
    0U,	// XVCMPEQSP
    0U,	// XVCMPEQSPo
    0U,	// XVCMPGEDP
    0U,	// XVCMPGEDPo
    0U,	// XVCMPGESP
    0U,	// XVCMPGESPo
    0U,	// XVCMPGTDP
    0U,	// XVCMPGTDPo
    0U,	// XVCMPGTSP
    0U,	// XVCMPGTSPo
    0U,	// XVCMPNEDP
    0U,	// XVCMPNEDPo
    0U,	// XVCMPNESP
    0U,	// XVCMPNESPo
    0U,	// XVCPSGNDP
    0U,	// XVCPSGNSP
    0U,	// XVCVDPSP
    0U,	// XVCVDPSXDS
    0U,	// XVCVDPSXWS
    0U,	// XVCVDPUXDS
    0U,	// XVCVDPUXWS
    0U,	// XVCVHPSP
    0U,	// XVCVSPDP
    0U,	// XVCVSPHP
    0U,	// XVCVSPSXDS
    0U,	// XVCVSPSXWS
    0U,	// XVCVSPUXDS
    0U,	// XVCVSPUXWS
    0U,	// XVCVSXDDP
    0U,	// XVCVSXDSP
    0U,	// XVCVSXWDP
    0U,	// XVCVSXWSP
    0U,	// XVCVUXDDP
    0U,	// XVCVUXDSP
    0U,	// XVCVUXWDP
    0U,	// XVCVUXWSP
    0U,	// XVDIVDP
    0U,	// XVDIVSP
    0U,	// XVIEXPDP
    0U,	// XVIEXPSP
    1U,	// XVMADDADP
    1U,	// XVMADDASP
    1U,	// XVMADDMDP
    1U,	// XVMADDMSP
    0U,	// XVMAXDP
    0U,	// XVMAXSP
    0U,	// XVMINDP
    0U,	// XVMINSP
    1U,	// XVMSUBADP
    1U,	// XVMSUBASP
    1U,	// XVMSUBMDP
    1U,	// XVMSUBMSP
    0U,	// XVMULDP
    0U,	// XVMULSP
    0U,	// XVNABSDP
    0U,	// XVNABSSP
    0U,	// XVNEGDP
    0U,	// XVNEGSP
    1U,	// XVNMADDADP
    1U,	// XVNMADDASP
    1U,	// XVNMADDMDP
    1U,	// XVNMADDMSP
    1U,	// XVNMSUBADP
    1U,	// XVNMSUBASP
    1U,	// XVNMSUBMDP
    1U,	// XVNMSUBMSP
    0U,	// XVRDPI
    0U,	// XVRDPIC
    0U,	// XVRDPIM
    0U,	// XVRDPIP
    0U,	// XVRDPIZ
    0U,	// XVREDP
    0U,	// XVRESP
    0U,	// XVRSPI
    0U,	// XVRSPIC
    0U,	// XVRSPIM
    0U,	// XVRSPIP
    0U,	// XVRSPIZ
    0U,	// XVRSQRTEDP
    0U,	// XVRSQRTESP
    0U,	// XVSQRTDP
    0U,	// XVSQRTSP
    0U,	// XVSUBDP
    0U,	// XVSUBSP
    0U,	// XVTDIVDP
    0U,	// XVTDIVSP
    0U,	// XVTSQRTDP
    0U,	// XVTSQRTSP
    1U,	// XVTSTDCDP
    1U,	// XVTSTDCSP
    0U,	// XVXEXPDP
    0U,	// XVXEXPSP
    0U,	// XVXSIGDP
    0U,	// XVXSIGSP
    0U,	// XXBRD
    0U,	// XXBRH
    0U,	// XXBRQ
    0U,	// XXBRW
    20U,	// XXEXTRACTUW
    1U,	// XXINSERTW
    0U,	// XXLAND
    0U,	// XXLANDC
    0U,	// XXLEQV
    0U,	// XXLNAND
    0U,	// XXLNOR
    0U,	// XXLOR
    0U,	// XXLORC
    0U,	// XXLORf
    0U,	// XXLXOR
    12U,	// XXLXORdpz
    12U,	// XXLXORspz
    12U,	// XXLXORz
    0U,	// XXMRGHW
    0U,	// XXMRGLW
    0U,	// XXPERM
    288U,	// XXPERMDI
    494U,	// XXPERMDIs
    0U,	// XXPERMR
    224U,	// XXSEL
    288U,	// XXSLDWI
    0U,	// XXSPLTIB
    16U,	// XXSPLTW
    16U,	// XXSPLTWs
    22U,	// gBC
    24U,	// gBCA
    0U,	// gBCAat
    0U,	// gBCCTR
    0U,	// gBCCTRL
    22U,	// gBCL
    24U,	// gBCLA
    0U,	// gBCLAat
    0U,	// gBCLR
    0U,	// gBCLRL
    0U,	// gBCLat
    0U,	// gBCat
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MI->getOpcode()] << 0;
  Bits |= (uint64_t)OpInfo1[MI->getOpcode()] << 32;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 5 bits for 19 unique commands.
  switch ((Bits >> 14) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, FENTRY_CALL, PATCHABL...
    return;
    break;
  case 1:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    printOperand(MI, 0, O);
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP
    printU16ImmOperand(MI, 0, O);
    break;
  case 3:
    // B, BCLalways, BDNZ, BDNZ8, BDNZL, BDNZLm, BDNZLp, BDNZm, BDNZp, BDZ, B...
    printBranchOperand(MI, 0, O);
    break;
  case 4:
    // BA, BDNZA, BDNZAm, BDNZAp, BDNZLA, BDNZLAm, BDNZLAp, BDZA, BDZAm, BDZA...
    printAbsBranchOperand(MI, 0, O);
    break;
  case 5:
    // BCC, BCCA, BCCCTR, BCCCTR8, BCCCTRL, BCCCTRL8, BCCL, BCCLA, BCCLR, BCC...
    printPredicateOperand(MI, 0, O, "cc");
    break;
  case 6:
    // BCTRL8_LDinto_toc
    printMemRegImm(MI, 0, O);
    return;
    break;
  case 7:
    // BL8_NOP_TLS, BL8_TLS, BL8_TLS_, BL_TLS
    printTLSCall(MI, 0, O);
    break;
  case 8:
    // DCBA, DCBFL, DCBFLP, DCBFx, DCBI, DCBST, DCBTCT, DCBTDS, DCBTSTCT, DCB...
    printMemRegReg(MI, 0, O);
    break;
  case 9:
    // DCBF, DCBT, DCBTST
    printMemRegReg(MI, 1, O);
    O << ", ";
    printU5ImmOperand(MI, 0, O);
    return;
    break;
  case 10:
    // DSS, MBAR, MTFSB0, MTFSB1, TD, TDI, TW, TWI, gBC, gBCA, gBCCTR, gBCCTR...
    printU5ImmOperand(MI, 0, O);
    break;
  case 11:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64, MTDCR, MTV...
    printOperand(MI, 1, O);
    break;
  case 12:
    // ICBLC, ICBLQ, ICBT, ICBTLS
    printU4ImmOperand(MI, 0, O);
    O << ", ";
    printMemRegReg(MI, 1, O);
    return;
    break;
  case 13:
    // MTOCRF, MTOCRF8
    printcrbitm(MI, 0, O);
    O << ", ";
    printOperand(MI, 1, O);
    return;
    break;
  case 14:
    // MTSR
    printU4ImmOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 0, O);
    return;
    break;
  case 15:
    // RFEBB
    printU1ImmOperand(MI, 0, O);
    return;
    break;
  case 16:
    // TABORTDC, TABORTDCI, TABORTWC, TABORTWCI
    printU5ImmOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ", ";
    break;
  case 17:
    // TBEGIN, TEND, TSR, XSRQPI, XSRQPIX, XSRQPXP
    printU1ImmOperand(MI, 1, O);
    break;
  case 18:
    // gBCAat, gBCLAat, gBCLat, gBCat
    printATBitsAsHint(MI, 1, O);
    O << ' ';
    printU5ImmOperand(MI, 0, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ", ";
    break;
  }


  // Fragment 1 encoded into 5 bits for 22 unique commands.
  switch ((Bits >> 19) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    O << ", ";
    break;
  case 1:
    // ADJCALLSTACKDOWN, B, BA, BCLalways, BDNZ, BDNZ8, BDNZA, BDNZAm, BDNZAp...
    return;
    break;
  case 2:
    // ADJCALLSTACKUP, ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, TCRETURNai, ...
    O << ' ';
    break;
  case 3:
    // BCC
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    O << ", ";
    printBranchOperand(MI, 2, O);
    return;
    break;
  case 4:
    // BCCA
    O << 'a';
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    O << ", ";
    printAbsBranchOperand(MI, 2, O);
    return;
    break;
  case 5:
    // BCCCTR, BCCCTR8
    O << "ctr";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 6:
    // BCCCTRL, BCCCTRL8
    O << "ctrl";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 7:
    // BCCL
    O << 'l';
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    O << ", ";
    printBranchOperand(MI, 2, O);
    return;
    break;
  case 8:
    // BCCLA
    O << "la";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    O << ", ";
    printAbsBranchOperand(MI, 2, O);
    return;
    break;
  case 9:
    // BCCLR
    O << "lr";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 10:
    // BCCLRL
    O << "lrl";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 11:
    // BCCTR, BCCTR8, BCCTR8n, BCCTRL, BCCTRL8, BCCTRL8n, BCCTRLn, BCCTRn, BC...
    O << ", 0";
    return;
    break;
  case 12:
    // BL8_NOP, BL8_NOP_TLS, BLA8_NOP
    O << "\n\tnop";
    return;
    break;
  case 13:
    // MFTB8
    O << ", 268";
    return;
    break;
  case 14:
    // MFVRSAVE, MFVRSAVEv
    O << ", 256";
    return;
    break;
  case 15:
    // QVLPCLSXint
    O << ", 0, ";
    printOperand(MI, 1, O);
    return;
    break;
  case 16:
    // TABORTDC, TABORTWC
    printOperand(MI, 3, O);
    return;
    break;
  case 17:
    // TABORTDCI, TABORTWCI
    printU5ImmOperand(MI, 3, O);
    return;
    break;
  case 18:
    // TLBIE
    O << ',';
    printOperand(MI, 0, O);
    return;
    break;
  case 19:
    // V_SETALLONES, V_SETALLONESB, V_SETALLONESH
    O << ", -1";
    return;
    break;
  case 20:
    // gBCAat, gBCLAat
    printAbsBranchOperand(MI, 3, O);
    return;
    break;
  case 21:
    // gBCLat, gBCat
    printBranchOperand(MI, 3, O);
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 20 unique commands.
  switch ((Bits >> 24) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ADJCALLSTACKUP
    printU16ImmOperand(MI, 1, O);
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, LBARX, LBARXL, LBZX, LBZX8, ...
    printMemRegReg(MI, 1, O);
    break;
  case 3:
    // BC, BCL, BCLn, BCn
    printBranchOperand(MI, 1, O);
    return;
    break;
  case 4:
    // CMPRB, CMPRB8
    printU1ImmOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    return;
    break;
  case 5:
    // CRSET, CRUNSET, MTDCR, V_SET0, V_SET0B, V_SET0H, XSRQPI, XSRQPIX, XSRQ...
    printOperand(MI, 0, O);
    break;
  case 6:
    // DCBTCT, DCBTDS, DCBTSTCT, DCBTSTDS, EVADDIW
    printU5ImmOperand(MI, 2, O);
    break;
  case 7:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64, RLDIMI, RL...
    printOperand(MI, 2, O);
    O << ", ";
    break;
  case 8:
    // EVLDD, EVLDH, EVLDW, EVLHHESPLAT, EVLHHOSSPLAT, EVLHHOUSPLAT, EVLWHE, ...
    printMemRegImm(MI, 1, O);
    return;
    break;
  case 9:
    // EVSUBIFW
    printU5ImmOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 10:
    // LA
    printS16ImmOperand(MI, 2, O);
    O << '(';
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 11:
    // LBZU, LBZU8, LDU, LFDU, LFSU, LHAU, LHAU8, LHZU, LHZU8, LWZU, LWZU8, S...
    printMemRegImm(MI, 2, O);
    return;
    break;
  case 12:
    // LBZUX, LBZUX8, LDUX, LFDUX, LFSUX, LHAUX, LHAUX8, LHZUX, LHZUX8, LWAUX...
    printMemRegReg(MI, 2, O);
    return;
    break;
  case 13:
    // LI, LI8, LIS, LIS8
    printS16ImmOperand(MI, 1, O);
    return;
    break;
  case 14:
    // MFBHRBE
    printU10ImmOperand(MI, 1, O);
    return;
    break;
  case 15:
    // MFOCRF, MFOCRF8
    printcrbitm(MI, 1, O);
    return;
    break;
  case 16:
    // MFSR
    printU4ImmOperand(MI, 1, O);
    return;
    break;
  case 17:
    // QVGPCI
    printU12ImmOperand(MI, 1, O);
    return;
    break;
  case 18:
    // VSPLTISB, VSPLTISH, VSPLTISW
    printS5ImmOperand(MI, 1, O);
    return;
    break;
  case 19:
    // XXSPLTIB
    printU8ImmOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 29) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    O << ", ";
    break;
  case 1:
    // ADDME, ADDME8, ADDME8o, ADDMEo, ADDZE, ADDZE8, ADDZE8o, ADDZEo, BCDCTN...
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32
    O << ' ';
    printOperand(MI, 3, O);
    O << ' ';
    printOperand(MI, 4, O);
    return;
    break;
  case 3:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64
    printU5ImmOperand(MI, 0, O);
    return;
    break;
  case 4:
    // LBARXL, LDARXL, LHARXL, LWARXL
    O << ", 1";
    return;
    break;
  case 5:
    // RLDIMI, RLDIMIo
    printU6ImmOperand(MI, 3, O);
    O << ", ";
    printU6ImmOperand(MI, 4, O);
    return;
    break;
  case 6:
    // RLWIMI, RLWIMI8, RLWIMI8o, RLWIMIo
    printU5ImmOperand(MI, 3, O);
    O << ", ";
    printU5ImmOperand(MI, 4, O);
    O << ", ";
    printU5ImmOperand(MI, 5, O);
    return;
    break;
  case 7:
    // VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTBs, VSPLTH, VSPLTHs, VSPLTW
    printU5ImmOperand(MI, 1, O);
    return;
    break;
  case 8:
    // VCFSX_0, VCFUX_0, VCTSXS_0, VCTUXS_0
    O << ", 0";
    return;
    break;
  case 9:
    // VEXTRACTD, VEXTRACTUB, VEXTRACTUH, VEXTRACTUW, VINSERTB, VINSERTD, VIN...
    printU4ImmOperand(MI, 1, O);
    return;
    break;
  case 10:
    // XSMADDADP, XSMADDASP, XSMADDMDP, XSMADDMSP, XSMSUBADP, XSMSUBASP, XSMS...
    printOperand(MI, 3, O);
    return;
    break;
  case 11:
    // XSTSTDCDP, XSTSTDCQP, XSTSTDCSP, XVTSTDCDP, XVTSTDCSP
    printU7ImmOperand(MI, 1, O);
    return;
    break;
  case 12:
    // XXINSERTW
    printU4ImmOperand(MI, 3, O);
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 33) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ADDI, ADDI8, ADDIC, ADDIC8, ADDICo, ADDIS, ADDIS8, CMPDI, CMPWI, MULLI...
    printS16ImmOperand(MI, 2, O);
    return;
    break;
  case 2:
    // ANDISo, ANDISo8, ANDIo, ANDIo8, CMPLDI, CMPLWI, ORI, ORI8, ORIS, ORIS8...
    printU16ImmOperand(MI, 2, O);
    return;
    break;
  case 3:
    // BCDCFNo, BCDCFSQo, BCDCFZo, BCDCTZo, BCDSETSGNo, CP_COPY, CP_COPY8, CP...
    printU1ImmOperand(MI, 2, O);
    break;
  case 4:
    // CLRLSLDI, CLRLSLDIo, CLRRDI, CLRRDIo, EXTLDI, EXTLDIo, EXTRDI, EXTRDIo...
    printU6ImmOperand(MI, 2, O);
    break;
  case 5:
    // CLRLSLWI, CLRLSLWIo, CLRRWI, CLRRWIo, EVRLWI, EVSLWI, EVSRWIS, EVSRWIU...
    printU5ImmOperand(MI, 2, O);
    break;
  case 6:
    // CRSET, CRUNSET, V_SET0, V_SET0B, V_SET0H, XXLXORdpz, XXLXORspz, XXLXOR...
    printOperand(MI, 0, O);
    return;
    break;
  case 7:
    // EVADDIW, XXPERMDIs
    printOperand(MI, 1, O);
    break;
  case 8:
    // QVESPLATI, QVESPLATIb, QVESPLATIs, XXSPLTW, XXSPLTWs
    printU2ImmOperand(MI, 2, O);
    return;
    break;
  case 9:
    // QVFMADD, QVFMADDS, QVFMADDSs, QVFMSUB, QVFMSUBS, QVFMSUBSs, QVFNMADD, ...
    printOperand(MI, 3, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 10:
    // XXEXTRACTUW
    printU4ImmOperand(MI, 2, O);
    return;
    break;
  case 11:
    // gBC, gBCL
    printBranchOperand(MI, 2, O);
    return;
    break;
  case 12:
    // gBCA, gBCLA
    printAbsBranchOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 37) & 1) {
    // BCDSRo, BCDSo, BCDTRUNCo, CLRLSLDI, CLRLSLDIo, CLRLSLWI, CLRLSLWIo, EX...
    O << ", ";
  } else {
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    return;
  }


  // Fragment 6 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 38) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // BCDSRo, BCDSo, BCDTRUNCo
    printU1ImmOperand(MI, 3, O);
    return;
    break;
  case 1:
    // CLRLSLDI, CLRLSLDIo, EXTLDI, EXTLDIo, EXTRDI, EXTRDIo, INSRDI, INSRDIo...
    printU6ImmOperand(MI, 3, O);
    return;
    break;
  case 2:
    // CLRLSLWI, CLRLSLWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo, INSLWI, INSLWIo...
    printU5ImmOperand(MI, 3, O);
    break;
  case 3:
    // FMADD, FMADDS, FMADDSo, FMADDo, FMSUB, FMSUBS, FMSUBSo, FMSUBo, FNMADD...
    printOperand(MI, 3, O);
    return;
    break;
  case 4:
    // QVALIGNI, QVALIGNIb, QVALIGNIs, XSRQPI, XSRQPIX, XSRQPXP, XXPERMDI, XX...
    printU2ImmOperand(MI, 3, O);
    return;
    break;
  case 5:
    // QVFLOGICAL, QVFLOGICALb, QVFLOGICALs
    printU12ImmOperand(MI, 3, O);
    return;
    break;
  case 6:
    // VSHASIGMAD, VSHASIGMAW
    printU4ImmOperand(MI, 3, O);
    return;
    break;
  case 7:
    // XXPERMDIs
    printU2ImmOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 41) & 1) {
    // RLWINM, RLWINM8, RLWINM8o, RLWINMo, RLWNM, RLWNM8, RLWNM8o, RLWNMo
    O << ", ";
    printU5ImmOperand(MI, 4, O);
    return;
  } else {
    // CLRLSLWI, CLRLSLWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo, INSLWI, INSLWIo...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *PPCInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 310 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ '*', '*', 'R', 'O', 'U', 'N', 'D', 'I', 'N', 'G', 32, 'M', 'O', 'D', 'E', '*', '*', 0,
  /* 18 */ '*', '*', 'F', 'R', 'A', 'M', 'E', 32, 'P', 'O', 'I', 'N', 'T', 'E', 'R', '*', '*', 0,
  /* 36 */ '*', '*', 'B', 'A', 'S', 'E', 32, 'P', 'O', 'I', 'N', 'T', 'E', 'R', '*', '*', 0,
  /* 53 */ 'f', '1', '0', 0,
  /* 57 */ 'q', '1', '0', 0,
  /* 61 */ 'r', '1', '0', 0,
  /* 65 */ 'v', 's', '1', '0', 0,
  /* 70 */ 'v', '1', '0', 0,
  /* 74 */ 'f', '2', '0', 0,
  /* 78 */ 'q', '2', '0', 0,
  /* 82 */ 'r', '2', '0', 0,
  /* 86 */ 'v', 's', '2', '0', 0,
  /* 91 */ 'v', '2', '0', 0,
  /* 95 */ 'f', '3', '0', 0,
  /* 99 */ 'q', '3', '0', 0,
  /* 103 */ 'r', '3', '0', 0,
  /* 107 */ 'v', 's', '3', '0', 0,
  /* 112 */ 'v', '3', '0', 0,
  /* 116 */ 'v', 's', '4', '0', 0,
  /* 121 */ 'v', 's', '5', '0', 0,
  /* 126 */ 'v', 's', '6', '0', 0,
  /* 131 */ 'f', '0', 0,
  /* 134 */ 'q', '0', 0,
  /* 137 */ 'c', 'r', '0', 0,
  /* 141 */ 'v', 's', '0', 0,
  /* 145 */ 'v', '0', 0,
  /* 148 */ 'f', '1', '1', 0,
  /* 152 */ 'q', '1', '1', 0,
  /* 156 */ 'r', '1', '1', 0,
  /* 160 */ 'v', 's', '1', '1', 0,
  /* 165 */ 'v', '1', '1', 0,
  /* 169 */ 'f', '2', '1', 0,
  /* 173 */ 'q', '2', '1', 0,
  /* 177 */ 'r', '2', '1', 0,
  /* 181 */ 'v', 's', '2', '1', 0,
  /* 186 */ 'v', '2', '1', 0,
  /* 190 */ 'f', '3', '1', 0,
  /* 194 */ 'q', '3', '1', 0,
  /* 198 */ 'r', '3', '1', 0,
  /* 202 */ 'v', 's', '3', '1', 0,
  /* 207 */ 'v', '3', '1', 0,
  /* 211 */ 'v', 's', '4', '1', 0,
  /* 216 */ 'v', 's', '5', '1', 0,
  /* 221 */ 'v', 's', '6', '1', 0,
  /* 226 */ 'f', '1', 0,
  /* 229 */ 'q', '1', 0,
  /* 232 */ 'c', 'r', '1', 0,
  /* 236 */ 'v', 's', '1', 0,
  /* 240 */ 'v', '1', 0,
  /* 243 */ 'f', '1', '2', 0,
  /* 247 */ 'q', '1', '2', 0,
  /* 251 */ 'r', '1', '2', 0,
  /* 255 */ 'v', 's', '1', '2', 0,
  /* 260 */ 'v', '1', '2', 0,
  /* 264 */ 'f', '2', '2', 0,
  /* 268 */ 'q', '2', '2', 0,
  /* 272 */ 'r', '2', '2', 0,
  /* 276 */ 'v', 's', '2', '2', 0,
  /* 281 */ 'v', '2', '2', 0,
  /* 285 */ 'v', 's', '3', '2', 0,
  /* 290 */ 'v', 's', '4', '2', 0,
  /* 295 */ 'v', 's', '5', '2', 0,
  /* 300 */ 'v', 's', '6', '2', 0,
  /* 305 */ 'f', '2', 0,
  /* 308 */ 'q', '2', 0,
  /* 311 */ 'c', 'r', '2', 0,
  /* 315 */ 'v', 's', '2', 0,
  /* 319 */ 'v', '2', 0,
  /* 322 */ 'f', '1', '3', 0,
  /* 326 */ 'q', '1', '3', 0,
  /* 330 */ 'r', '1', '3', 0,
  /* 334 */ 'v', 's', '1', '3', 0,
  /* 339 */ 'v', '1', '3', 0,
  /* 343 */ 'f', '2', '3', 0,
  /* 347 */ 'q', '2', '3', 0,
  /* 351 */ 'r', '2', '3', 0,
  /* 355 */ 'v', 's', '2', '3', 0,
  /* 360 */ 'v', '2', '3', 0,
  /* 364 */ 'v', 's', '3', '3', 0,
  /* 369 */ 'v', 's', '4', '3', 0,
  /* 374 */ 'v', 's', '5', '3', 0,
  /* 379 */ 'v', 's', '6', '3', 0,
  /* 384 */ 'f', '3', 0,
  /* 387 */ 'q', '3', 0,
  /* 390 */ 'c', 'r', '3', 0,
  /* 394 */ 'v', 's', '3', 0,
  /* 398 */ 'v', '3', 0,
  /* 401 */ 'f', '1', '4', 0,
  /* 405 */ 'q', '1', '4', 0,
  /* 409 */ 'r', '1', '4', 0,
  /* 413 */ 'v', 's', '1', '4', 0,
  /* 418 */ 'v', '1', '4', 0,
  /* 422 */ 'f', '2', '4', 0,
  /* 426 */ 'q', '2', '4', 0,
  /* 430 */ 'r', '2', '4', 0,
  /* 434 */ 'v', 's', '2', '4', 0,
  /* 439 */ 'v', '2', '4', 0,
  /* 443 */ 'v', 's', '3', '4', 0,
  /* 448 */ 'v', 's', '4', '4', 0,
  /* 453 */ 'v', 's', '5', '4', 0,
  /* 458 */ 'f', '4', 0,
  /* 461 */ 'q', '4', 0,
  /* 464 */ 'c', 'r', '4', 0,
  /* 468 */ 'v', 's', '4', 0,
  /* 472 */ 'v', '4', 0,
  /* 475 */ 'f', '1', '5', 0,
  /* 479 */ 'q', '1', '5', 0,
  /* 483 */ 'r', '1', '5', 0,
  /* 487 */ 'v', 's', '1', '5', 0,
  /* 492 */ 'v', '1', '5', 0,
  /* 496 */ 'f', '2', '5', 0,
  /* 500 */ 'q', '2', '5', 0,
  /* 504 */ 'r', '2', '5', 0,
  /* 508 */ 'v', 's', '2', '5', 0,
  /* 513 */ 'v', '2', '5', 0,
  /* 517 */ 'v', 's', '3', '5', 0,
  /* 522 */ 'v', 's', '4', '5', 0,
  /* 527 */ 'v', 's', '5', '5', 0,
  /* 532 */ 'f', '5', 0,
  /* 535 */ 'q', '5', 0,
  /* 538 */ 'c', 'r', '5', 0,
  /* 542 */ 'v', 's', '5', 0,
  /* 546 */ 'v', '5', 0,
  /* 549 */ 'f', '1', '6', 0,
  /* 553 */ 'q', '1', '6', 0,
  /* 557 */ 'r', '1', '6', 0,
  /* 561 */ 'v', 's', '1', '6', 0,
  /* 566 */ 'v', '1', '6', 0,
  /* 570 */ 'f', '2', '6', 0,
  /* 574 */ 'q', '2', '6', 0,
  /* 578 */ 'r', '2', '6', 0,
  /* 582 */ 'v', 's', '2', '6', 0,
  /* 587 */ 'v', '2', '6', 0,
  /* 591 */ 'v', 's', '3', '6', 0,
  /* 596 */ 'v', 's', '4', '6', 0,
  /* 601 */ 'v', 's', '5', '6', 0,
  /* 606 */ 'f', '6', 0,
  /* 609 */ 'q', '6', 0,
  /* 612 */ 'c', 'r', '6', 0,
  /* 616 */ 'v', 's', '6', 0,
  /* 620 */ 'v', '6', 0,
  /* 623 */ 'f', '1', '7', 0,
  /* 627 */ 'q', '1', '7', 0,
  /* 631 */ 'r', '1', '7', 0,
  /* 635 */ 'v', 's', '1', '7', 0,
  /* 640 */ 'v', '1', '7', 0,
  /* 644 */ 'f', '2', '7', 0,
  /* 648 */ 'q', '2', '7', 0,
  /* 652 */ 'r', '2', '7', 0,
  /* 656 */ 'v', 's', '2', '7', 0,
  /* 661 */ 'v', '2', '7', 0,
  /* 665 */ 'v', 's', '3', '7', 0,
  /* 670 */ 'v', 's', '4', '7', 0,
  /* 675 */ 'v', 's', '5', '7', 0,
  /* 680 */ 'f', '7', 0,
  /* 683 */ 'q', '7', 0,
  /* 686 */ 'c', 'r', '7', 0,
  /* 690 */ 'v', 's', '7', 0,
  /* 694 */ 'v', '7', 0,
  /* 697 */ 'f', '1', '8', 0,
  /* 701 */ 'q', '1', '8', 0,
  /* 705 */ 'r', '1', '8', 0,
  /* 709 */ 'v', 's', '1', '8', 0,
  /* 714 */ 'v', '1', '8', 0,
  /* 718 */ 'f', '2', '8', 0,
  /* 722 */ 'q', '2', '8', 0,
  /* 726 */ 'r', '2', '8', 0,
  /* 730 */ 'v', 's', '2', '8', 0,
  /* 735 */ 'v', '2', '8', 0,
  /* 739 */ 'v', 's', '3', '8', 0,
  /* 744 */ 'v', 's', '4', '8', 0,
  /* 749 */ 'v', 's', '5', '8', 0,
  /* 754 */ 'f', '8', 0,
  /* 757 */ 'q', '8', 0,
  /* 760 */ 'r', '8', 0,
  /* 763 */ 'v', 's', '8', 0,
  /* 767 */ 'v', '8', 0,
  /* 770 */ 'f', '1', '9', 0,
  /* 774 */ 'q', '1', '9', 0,
  /* 778 */ 'r', '1', '9', 0,
  /* 782 */ 'v', 's', '1', '9', 0,
  /* 787 */ 'v', '1', '9', 0,
  /* 791 */ 'f', '2', '9', 0,
  /* 795 */ 'q', '2', '9', 0,
  /* 799 */ 'r', '2', '9', 0,
  /* 803 */ 'v', 's', '2', '9', 0,
  /* 808 */ 'v', '2', '9', 0,
  /* 812 */ 'v', 's', '3', '9', 0,
  /* 817 */ 'v', 's', '4', '9', 0,
  /* 822 */ 'v', 's', '5', '9', 0,
  /* 827 */ 'f', '9', 0,
  /* 830 */ 'q', '9', 0,
  /* 833 */ 'r', '9', 0,
  /* 836 */ 'v', 's', '9', 0,
  /* 840 */ 'v', '9', 0,
  /* 843 */ 'c', 'a', 0,
  /* 846 */ 'v', 'r', 's', 'a', 'v', 'e', 0,
  /* 853 */ 'l', 'r', 0,
  /* 856 */ 'c', 't', 'r', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    36, 843, 856, 18, 853, 0, 846, 55, 36, 137, 232, 311, 390, 464, 
    538, 612, 686, 856, 131, 226, 305, 384, 458, 532, 606, 680, 754, 827, 
    53, 148, 243, 322, 401, 475, 549, 623, 697, 770, 74, 169, 264, 343, 
    422, 496, 570, 644, 718, 791, 95, 190, 18, 853, 134, 229, 308, 387, 
    461, 535, 609, 683, 757, 830, 57, 152, 247, 326, 405, 479, 553, 627, 
    701, 774, 78, 173, 268, 347, 426, 500, 574, 648, 722, 795, 99, 194, 
    138, 233, 312, 391, 465, 539, 613, 687, 760, 833, 61, 156, 251, 330, 
    409, 483, 557, 631, 705, 778, 82, 177, 272, 351, 430, 504, 578, 652, 
    726, 799, 103, 198, 145, 240, 319, 398, 472, 546, 620, 694, 767, 840, 
    70, 165, 260, 339, 418, 492, 566, 640, 714, 787, 91, 186, 281, 360, 
    439, 513, 587, 661, 735, 808, 112, 207, 145, 240, 319, 398, 472, 546, 
    620, 694, 767, 840, 70, 165, 260, 339, 418, 492, 566, 640, 714, 787, 
    91, 186, 281, 360, 439, 513, 587, 661, 735, 808, 112, 207, 141, 236, 
    315, 394, 468, 542, 616, 690, 763, 836, 65, 160, 255, 334, 413, 487, 
    561, 635, 709, 782, 86, 181, 276, 355, 434, 508, 582, 656, 730, 803, 
    107, 202, 285, 364, 443, 517, 591, 665, 739, 812, 116, 211, 290, 369, 
    448, 522, 596, 670, 744, 817, 121, 216, 295, 374, 453, 527, 601, 675, 
    749, 822, 126, 221, 300, 379, 138, 233, 312, 391, 465, 539, 613, 687, 
    760, 833, 61, 156, 251, 330, 409, 483, 557, 631, 705, 778, 82, 177, 
    272, 351, 430, 504, 578, 652, 726, 799, 103, 198, 55, 245, 551, 54, 
    402, 698, 265, 571, 96, 150, 477, 772, 323, 624, 170, 497, 792, 55, 
    403, 699, 244, 550, 75, 423, 719, 324, 625, 149, 476, 771, 344, 645, 
    191, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool PPCInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case PPC::BCC:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 12, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 12, CR0, condbrtarget:$dst)
      AsmString = "blt $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 14, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 14, CR0, condbrtarget:$dst)
      AsmString = "blt- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 15, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 15, CR0, condbrtarget:$dst)
      AsmString = "blt+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 44, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 44, CR0, condbrtarget:$dst)
      AsmString = "bgt $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 46, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 46, CR0, condbrtarget:$dst)
      AsmString = "bgt- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 47, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 47, CR0, condbrtarget:$dst)
      AsmString = "bgt+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 76, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 76, CR0, condbrtarget:$dst)
      AsmString = "beq $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 78, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 78, CR0, condbrtarget:$dst)
      AsmString = "beq- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 79, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 79, CR0, condbrtarget:$dst)
      AsmString = "beq+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 68, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 68, CR0, condbrtarget:$dst)
      AsmString = "bne $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 70, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 70, CR0, condbrtarget:$dst)
      AsmString = "bne- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 71, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 71, CR0, condbrtarget:$dst)
      AsmString = "bne+ $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::BCCA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 12, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 12, CR0, abscondbrtarget:$dst)
      AsmString = "blta $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 14, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 14, CR0, abscondbrtarget:$dst)
      AsmString = "blta- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 15, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 15, CR0, abscondbrtarget:$dst)
      AsmString = "blta+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 44, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 44, CR0, abscondbrtarget:$dst)
      AsmString = "bgta $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 46, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 46, CR0, abscondbrtarget:$dst)
      AsmString = "bgta- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 47, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 47, CR0, abscondbrtarget:$dst)
      AsmString = "bgta+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 76, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 76, CR0, abscondbrtarget:$dst)
      AsmString = "beqa $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 78, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 78, CR0, abscondbrtarget:$dst)
      AsmString = "beqa- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 79, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 79, CR0, abscondbrtarget:$dst)
      AsmString = "beqa+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 68, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 68, CR0, abscondbrtarget:$dst)
      AsmString = "bnea $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 70, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 70, CR0, abscondbrtarget:$dst)
      AsmString = "bnea- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 71, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 71, CR0, abscondbrtarget:$dst)
      AsmString = "bnea+ $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::BCCCTR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 12, crrc:$cc)
      AsmString = "bltctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 12, CR0)
      AsmString = "bltctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 14, crrc:$cc)
      AsmString = "bltctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 14, CR0)
      AsmString = "bltctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 15, crrc:$cc)
      AsmString = "bltctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 15, CR0)
      AsmString = "bltctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 44, crrc:$cc)
      AsmString = "bgtctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 44, CR0)
      AsmString = "bgtctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 46, crrc:$cc)
      AsmString = "bgtctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 46, CR0)
      AsmString = "bgtctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 47, crrc:$cc)
      AsmString = "bgtctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 47, CR0)
      AsmString = "bgtctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 76, crrc:$cc)
      AsmString = "beqctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 76, CR0)
      AsmString = "beqctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 78, crrc:$cc)
      AsmString = "beqctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 78, CR0)
      AsmString = "beqctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 79, crrc:$cc)
      AsmString = "beqctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 79, CR0)
      AsmString = "beqctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 68, crrc:$cc)
      AsmString = "bnectr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 68, CR0)
      AsmString = "bnectr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 70, crrc:$cc)
      AsmString = "bnectr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 70, CR0)
      AsmString = "bnectr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 71, crrc:$cc)
      AsmString = "bnectr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 71, CR0)
      AsmString = "bnectr+";
      break;
    }
    return false;
  case PPC::BCCCTRL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 12, crrc:$cc)
      AsmString = "bltctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 12, CR0)
      AsmString = "bltctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 14, crrc:$cc)
      AsmString = "bltctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 14, CR0)
      AsmString = "bltctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 15, crrc:$cc)
      AsmString = "bltctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 15, CR0)
      AsmString = "bltctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 44, crrc:$cc)
      AsmString = "bgtctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 44, CR0)
      AsmString = "bgtctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 46, crrc:$cc)
      AsmString = "bgtctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 46, CR0)
      AsmString = "bgtctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 47, crrc:$cc)
      AsmString = "bgtctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 47, CR0)
      AsmString = "bgtctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 76, crrc:$cc)
      AsmString = "beqctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 76, CR0)
      AsmString = "beqctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 78, crrc:$cc)
      AsmString = "beqctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 78, CR0)
      AsmString = "beqctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 79, crrc:$cc)
      AsmString = "beqctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 79, CR0)
      AsmString = "beqctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 68, crrc:$cc)
      AsmString = "bnectrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 68, CR0)
      AsmString = "bnectrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 70, crrc:$cc)
      AsmString = "bnectrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 70, CR0)
      AsmString = "bnectrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 71, crrc:$cc)
      AsmString = "bnectrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 71, CR0)
      AsmString = "bnectrl+";
      break;
    }
    return false;
  case PPC::BCCL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 12, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 12, CR0, condbrtarget:$dst)
      AsmString = "bltl $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 14, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 14, CR0, condbrtarget:$dst)
      AsmString = "bltl- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 15, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 15, CR0, condbrtarget:$dst)
      AsmString = "bltl+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 44, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 44, CR0, condbrtarget:$dst)
      AsmString = "bgtl $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 46, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 46, CR0, condbrtarget:$dst)
      AsmString = "bgtl- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 47, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 47, CR0, condbrtarget:$dst)
      AsmString = "bgtl+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 76, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 76, CR0, condbrtarget:$dst)
      AsmString = "beql $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 78, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 78, CR0, condbrtarget:$dst)
      AsmString = "beql- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 79, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 79, CR0, condbrtarget:$dst)
      AsmString = "beql+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 68, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 68, CR0, condbrtarget:$dst)
      AsmString = "bnel $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 70, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 70, CR0, condbrtarget:$dst)
      AsmString = "bnel- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 71, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 71, CR0, condbrtarget:$dst)
      AsmString = "bnel+ $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::BCCLA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 12, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 12, CR0, abscondbrtarget:$dst)
      AsmString = "bltla $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 14, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 14, CR0, abscondbrtarget:$dst)
      AsmString = "bltla- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 15, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 15, CR0, abscondbrtarget:$dst)
      AsmString = "bltla+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 44, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 44, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 46, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 46, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 47, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 47, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 76, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 76, CR0, abscondbrtarget:$dst)
      AsmString = "beqla $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 78, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 78, CR0, abscondbrtarget:$dst)
      AsmString = "beqla- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 79, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 79, CR0, abscondbrtarget:$dst)
      AsmString = "beqla+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 68, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 68, CR0, abscondbrtarget:$dst)
      AsmString = "bnela $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 70, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 70, CR0, abscondbrtarget:$dst)
      AsmString = "bnela- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 71, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 71, CR0, abscondbrtarget:$dst)
      AsmString = "bnela+ $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::BCCLR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 12, crrc:$cc)
      AsmString = "bltlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 12, CR0)
      AsmString = "bltlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 14, crrc:$cc)
      AsmString = "bltlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 14, CR0)
      AsmString = "bltlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 15, crrc:$cc)
      AsmString = "bltlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 15, CR0)
      AsmString = "bltlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 44, crrc:$cc)
      AsmString = "bgtlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 44, CR0)
      AsmString = "bgtlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 46, crrc:$cc)
      AsmString = "bgtlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 46, CR0)
      AsmString = "bgtlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 47, crrc:$cc)
      AsmString = "bgtlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 47, CR0)
      AsmString = "bgtlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 76, crrc:$cc)
      AsmString = "beqlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 76, CR0)
      AsmString = "beqlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 78, crrc:$cc)
      AsmString = "beqlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 78, CR0)
      AsmString = "beqlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 79, crrc:$cc)
      AsmString = "beqlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 79, CR0)
      AsmString = "beqlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 68, crrc:$cc)
      AsmString = "bnelr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 68, CR0)
      AsmString = "bnelr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 70, crrc:$cc)
      AsmString = "bnelr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 70, CR0)
      AsmString = "bnelr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 71, crrc:$cc)
      AsmString = "bnelr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 71, CR0)
      AsmString = "bnelr+";
      break;
    }
    return false;
  case PPC::BCCLRL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 12, crrc:$cc)
      AsmString = "bltlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 12, CR0)
      AsmString = "bltlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 14, crrc:$cc)
      AsmString = "bltlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 14, CR0)
      AsmString = "bltlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 15, crrc:$cc)
      AsmString = "bltlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 15, CR0)
      AsmString = "bltlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 44, crrc:$cc)
      AsmString = "bgtlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 44, CR0)
      AsmString = "bgtlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 46, crrc:$cc)
      AsmString = "bgtlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 46, CR0)
      AsmString = "bgtlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 47, crrc:$cc)
      AsmString = "bgtlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 47, CR0)
      AsmString = "bgtlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 76, crrc:$cc)
      AsmString = "beqlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 76, CR0)
      AsmString = "beqlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 78, crrc:$cc)
      AsmString = "beqlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 78, CR0)
      AsmString = "beqlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 79, crrc:$cc)
      AsmString = "beqlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 79, CR0)
      AsmString = "beqlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 68, crrc:$cc)
      AsmString = "bnelrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 68, CR0)
      AsmString = "bnelrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 70, crrc:$cc)
      AsmString = "bnelrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 70, CR0)
      AsmString = "bnelrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 71, crrc:$cc)
      AsmString = "bnelrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 71, CR0)
      AsmString = "bnelrl+";
      break;
    }
    return false;
  case PPC::CMPD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPD CR0, g8rc:$rA, g8rc:$rB)
      AsmString = "cmpd $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPDI CR0, g8rc:$rA, s16imm64:$imm)
      AsmString = "cmpdi $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::CMPLD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPLD CR0, g8rc:$rA, g8rc:$rB)
      AsmString = "cmpld $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPLDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPLDI CR0, g8rc:$rA, u16imm64:$imm)
      AsmString = "cmpldi $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case PPC::CMPLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPLW CR0, gprc:$rA, gprc:$rB)
      AsmString = "cmplw $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPLWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPLWI CR0, gprc:$rA, u16imm:$imm)
      AsmString = "cmplwi $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case PPC::CMPW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPW CR0, gprc:$rA, gprc:$rB)
      AsmString = "cmpw $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPWI CR0, gprc:$rA, s16imm:$imm)
      AsmString = "cmpwi $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::CNTLZW:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CNTLZW gprc:$rA, gprc:$rS)
      AsmString = "cntlzw $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CNTLZWo:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CNTLZWo gprc:$rA, gprc:$rS)
      AsmString = "cntlzw. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CREQV:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (CREQV crbitrc:$bx, crbitrc:$bx, crbitrc:$bx)
      AsmString = "crset $\x01";
      break;
    }
    return false;
  case PPC::CRNOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (CRNOR crbitrc:$bx, crbitrc:$by, crbitrc:$by)
      AsmString = "crnot $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CROR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (CROR crbitrc:$bx, crbitrc:$by, crbitrc:$by)
      AsmString = "crmove $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CRXOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (CRXOR crbitrc:$bx, crbitrc:$bx, crbitrc:$bx)
      AsmString = "crclr $\x01";
      break;
    }
    return false;
  case PPC::MBAR:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (MBAR 0)
      AsmString = "mbar";
      break;
    }
    return false;
  case PPC::MFDCR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 128) {
      // (MFDCR gprc:$Rx, 128)
      AsmString = "mfbr0 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 129) {
      // (MFDCR gprc:$Rx, 129)
      AsmString = "mfbr1 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 130) {
      // (MFDCR gprc:$Rx, 130)
      AsmString = "mfbr2 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 131) {
      // (MFDCR gprc:$Rx, 131)
      AsmString = "mfbr3 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 132) {
      // (MFDCR gprc:$Rx, 132)
      AsmString = "mfbr4 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 133) {
      // (MFDCR gprc:$Rx, 133)
      AsmString = "mfbr5 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 134) {
      // (MFDCR gprc:$Rx, 134)
      AsmString = "mfbr6 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 135) {
      // (MFDCR gprc:$Rx, 135)
      AsmString = "mfbr7 $\x01";
      break;
    }
    return false;
  case PPC::MFSPR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1) {
      // (MFSPR gprc:$Rx, 1)
      AsmString = "mfxer $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 4) {
      // (MFSPR gprc:$Rx, 4)
      AsmString = "mfrtcu $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 5) {
      // (MFSPR gprc:$Rx, 5)
      AsmString = "mfrtcl $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 17) {
      // (MFSPR gprc:$Rx, 17)
      AsmString = "mfdscr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 18) {
      // (MFSPR gprc:$Rx, 18)
      AsmString = "mfdsisr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 19) {
      // (MFSPR gprc:$Rx, 19)
      AsmString = "mfdar $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 990) {
      // (MFSPR gprc:$Rx, 990)
      AsmString = "mfsrr2 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 991) {
      // (MFSPR gprc:$Rx, 991)
      AsmString = "mfsrr3 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 28) {
      // (MFSPR gprc:$Rx, 28)
      AsmString = "mfcfar $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 29) {
      // (MFSPR gprc:$Rx, 29)
      AsmString = "mfamr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 48) {
      // (MFSPR gprc:$Rx, 48)
      AsmString = "mfpid $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 989) {
      // (MFSPR gprc:$Rx, 989)
      AsmString = "mftblo $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 988) {
      // (MFSPR gprc:$Rx, 988)
      AsmString = "mftbhi $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 536) {
      // (MFSPR gprc:$Rx, 536)
      AsmString = "mfdbatu $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 538) {
      // (MFSPR gprc:$Rx, 538)
      AsmString = "mfdbatu $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 540) {
      // (MFSPR gprc:$Rx, 540)
      AsmString = "mfdbatu $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 542) {
      // (MFSPR gprc:$Rx, 542)
      AsmString = "mfdbatu $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 537) {
      // (MFSPR gprc:$Rx, 537)
      AsmString = "mfdbatl $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 539) {
      // (MFSPR gprc:$Rx, 539)
      AsmString = "mfdbatl $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 541) {
      // (MFSPR gprc:$Rx, 541)
      AsmString = "mfdbatl $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 543) {
      // (MFSPR gprc:$Rx, 543)
      AsmString = "mfdbatl $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 528) {
      // (MFSPR gprc:$Rx, 528)
      AsmString = "mfibatu $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 530) {
      // (MFSPR gprc:$Rx, 530)
      AsmString = "mfibatu $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 532) {
      // (MFSPR gprc:$Rx, 532)
      AsmString = "mfibatu $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 534) {
      // (MFSPR gprc:$Rx, 534)
      AsmString = "mfibatu $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 529) {
      // (MFSPR gprc:$Rx, 529)
      AsmString = "mfibatl $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 531) {
      // (MFSPR gprc:$Rx, 531)
      AsmString = "mfibatl $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 533) {
      // (MFSPR gprc:$Rx, 533)
      AsmString = "mfibatl $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 535) {
      // (MFSPR gprc:$Rx, 535)
      AsmString = "mfibatl $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1018) {
      // (MFSPR gprc:$Rx, 1018)
      AsmString = "mfdccr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1019) {
      // (MFSPR gprc:$Rx, 1019)
      AsmString = "mficcr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 981) {
      // (MFSPR gprc:$Rx, 981)
      AsmString = "mfdear $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 980) {
      // (MFSPR gprc:$Rx, 980)
      AsmString = "mfesr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 512) {
      // (MFSPR gprc:$Rx, 512)
      AsmString = "mfspefscr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 986) {
      // (MFSPR gprc:$Rx, 986)
      AsmString = "mftcr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 280) {
      // (MFSPR gprc:$RT, 280)
      AsmString = "mfasr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 287) {
      // (MFSPR gprc:$RT, 287)
      AsmString = "mfpvr $\x01";
      break;
    }
    return false;
  case PPC::MFTB:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 269) {
      // (MFTB gprc:$Rx, 269)
      AsmString = "mftbu $\x01";
      break;
    }
    return false;
  case PPC::MFVRSAVE:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg())) {
      // (MFVRSAVE gprc:$rS)
      AsmString = "mfvrsave $\x01";
      break;
    }
    return false;
  case PPC::MFVSRD:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::F8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MFVSRD g8rc:$rA, f8rc:$src)
      AsmString = "mffprd $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTCRF8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 255 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTCRF8 255, g8rc:$rA)
      AsmString = "mtcr $\x02";
      break;
    }
    return false;
  case PPC::MTDCR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 128) {
      // (MTDCR gprc:$Rx, 128)
      AsmString = "mtbr0 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 129) {
      // (MTDCR gprc:$Rx, 129)
      AsmString = "mtbr1 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 130) {
      // (MTDCR gprc:$Rx, 130)
      AsmString = "mtbr2 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 131) {
      // (MTDCR gprc:$Rx, 131)
      AsmString = "mtbr3 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 132) {
      // (MTDCR gprc:$Rx, 132)
      AsmString = "mtbr4 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 133) {
      // (MTDCR gprc:$Rx, 133)
      AsmString = "mtbr5 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 134) {
      // (MTDCR gprc:$Rx, 134)
      AsmString = "mtbr6 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 135) {
      // (MTDCR gprc:$Rx, 135)
      AsmString = "mtbr7 $\x01";
      break;
    }
    return false;
  case PPC::MTFSF:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::F8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (MTFSF i32imm:$FLM, f8rc:$FRB, 0, 0)
      AsmString = "mtfsf $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTFSFI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MTFSFI crrc:$BF, i32imm:$U, 0)
      AsmString = "mtfsfi $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTFSFIo:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MTFSFIo crrc:$BF, i32imm:$U, 0)
      AsmString = "mtfsfi. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTFSFo:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::F8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (MTFSFo i32imm:$FLM, f8rc:$FRB, 0, 0)
      AsmString = "mtfsf. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTMSR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (MTMSR gprc:$RS, 0)
      AsmString = "mtmsr $\x01";
      break;
    }
    return false;
  case PPC::MTMSRD:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (MTMSRD gprc:$RS, 0)
      AsmString = "mtmsrd $\x01";
      break;
    }
    return false;
  case PPC::MTSPR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 1, gprc:$Rx)
      AsmString = "mtxer $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 17 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 17, gprc:$Rx)
      AsmString = "mtdscr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 18 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 18, gprc:$Rx)
      AsmString = "mtdsisr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 19 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 19, gprc:$Rx)
      AsmString = "mtdar $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 990 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 990, gprc:$Rx)
      AsmString = "mtsrr2 $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 991 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 991, gprc:$Rx)
      AsmString = "mtsrr3 $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 28 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 28, gprc:$Rx)
      AsmString = "mtcfar $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 29 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 29, gprc:$Rx)
      AsmString = "mtamr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 48 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 48, gprc:$Rx)
      AsmString = "mtpid $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 284 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 284, gprc:$Rx)
      AsmString = "mttbl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 285 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 285, gprc:$Rx)
      AsmString = "mttbu $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 989 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 989, gprc:$Rx)
      AsmString = "mttblo $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 988 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 988, gprc:$Rx)
      AsmString = "mttbhi $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 536 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 536, gprc:$Rx)
      AsmString = "mtdbatu 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 538 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 538, gprc:$Rx)
      AsmString = "mtdbatu 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 540 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 540, gprc:$Rx)
      AsmString = "mtdbatu 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 542 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 542, gprc:$Rx)
      AsmString = "mtdbatu 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 537 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 537, gprc:$Rx)
      AsmString = "mtdbatl 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 539 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 539, gprc:$Rx)
      AsmString = "mtdbatl 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 541 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 541, gprc:$Rx)
      AsmString = "mtdbatl 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 543 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 543, gprc:$Rx)
      AsmString = "mtdbatl 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 528 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 528, gprc:$Rx)
      AsmString = "mtibatu 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 530 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 530, gprc:$Rx)
      AsmString = "mtibatu 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 532 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 532, gprc:$Rx)
      AsmString = "mtibatu 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 534 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 534, gprc:$Rx)
      AsmString = "mtibatu 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 529 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 529, gprc:$Rx)
      AsmString = "mtibatl 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 531 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 531, gprc:$Rx)
      AsmString = "mtibatl 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 533 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 533, gprc:$Rx)
      AsmString = "mtibatl 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 535 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 535, gprc:$Rx)
      AsmString = "mtibatl 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1018 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 1018, gprc:$Rx)
      AsmString = "mtdccr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1019 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 1019, gprc:$Rx)
      AsmString = "mticcr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 981 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 981, gprc:$Rx)
      AsmString = "mtdear $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 980 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 980, gprc:$Rx)
      AsmString = "mtesr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 512 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 512, gprc:$Rx)
      AsmString = "mtspefscr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 986 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 986, gprc:$Rx)
      AsmString = "mttcr $\x02";
      break;
    }
    return false;
  case PPC::MTVRSAVE:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg())) {
      // (MTVRSAVE gprc:$rS)
      AsmString = "mtvrsave $\x01";
      break;
    }
    return false;
  case PPC::NOR8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (NOR8 g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "not $\x01, $\x02";
      break;
    }
    return false;
  case PPC::NOR8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (NOR8o g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "not. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::OR8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (OR8 g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "mr $\x01, $\x02";
      break;
    }
    return false;
  case PPC::OR8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (OR8o g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "mr. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::QVFLOGICALb:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRT, qbrc:$FRT, 0)
      AsmString = "qvfclr $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 1)
      AsmString = "qvfand $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 4) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 4)
      AsmString = "qvfandc $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 5) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRA, 5)
      AsmString = "qvfctfb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 6) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 6)
      AsmString = "qvfxor $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 7)
      AsmString = "qvfor $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 8) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 8)
      AsmString = "qvfnor $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 9) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 9)
      AsmString = "qvfequ $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 10) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRA, 10)
      AsmString = "qvfnot $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 13) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 13)
      AsmString = "qvforc $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 14) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 14)
      AsmString = "qvfnand $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRT, qbrc:$FRT, 15)
      AsmString = "qvfset $\x01";
      break;
    }
    return false;
  case PPC::RLDCL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDCL g8rc:$rA, g8rc:$rS, gprc:$rB, 0)
      AsmString = "rotld $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::RLDCLo:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDCLo g8rc:$rA, g8rc:$rS, gprc:$rB, 0)
      AsmString = "rotld. $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::RLDICL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDICL g8rc:$rA, g8rc:$rS, u6imm:$n, 0)
      AsmString = "rotldi $\x01, $\x02, $\xFF\x03\x05";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RLDICL g8rc:$rA, g8rc:$rS, 0, u6imm:$n)
      AsmString = "clrldi $\x01, $\x02, $\xFF\x04\x05";
      break;
    }
    return false;
  case PPC::RLDICLo:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDICLo g8rc:$rA, g8rc:$rS, u6imm:$n, 0)
      AsmString = "rotldi. $\x01, $\x02, $\xFF\x03\x05";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RLDICLo g8rc:$rA, g8rc:$rS, 0, u6imm:$n)
      AsmString = "clrldi. $\x01, $\x02, $\xFF\x04\x05";
      break;
    }
    return false;
  case PPC::RLWINM:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINM gprc:$rA, gprc:$rS, u5imm:$n, 0, 31)
      AsmString = "rotlwi $\x01, $\x02, $\xFF\x03\x06";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINM gprc:$rA, gprc:$rS, 0, u5imm:$n, 31)
      AsmString = "clrlwi $\x01, $\x02, $\xFF\x04\x06";
      break;
    }
    return false;
  case PPC::RLWINMo:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINMo gprc:$rA, gprc:$rS, u5imm:$n, 0, 31)
      AsmString = "rotlwi. $\x01, $\x02, $\xFF\x03\x06";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINMo gprc:$rA, gprc:$rS, 0, u5imm:$n, 31)
      AsmString = "clrlwi. $\x01, $\x02, $\xFF\x04\x06";
      break;
    }
    return false;
  case PPC::RLWNM:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWNM gprc:$rA, gprc:$rS, gprc:$rB, 0, 31)
      AsmString = "rotlw $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::RLWNMo:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWNMo gprc:$rA, gprc:$rS, gprc:$rB, 0, 31)
      AsmString = "rotlw. $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::SC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SC 0)
      AsmString = "sc";
      break;
    }
    return false;
  case PPC::SUBF8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBF8 g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "sub $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SUBF8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBF8o g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "sub. $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SUBFC8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBFC8 g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "subc $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SUBFC8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBFC8o g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "subc. $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SYNC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYNC 0)
      AsmString = "sync";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (SYNC 1)
      AsmString = "lwsync";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (SYNC 2)
      AsmString = "ptesync";
      break;
    }
    return false;
  case PPC::TD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 16, g8rc:$rA, g8rc:$rB)
      AsmString = "tdlt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 4, g8rc:$rA, g8rc:$rB)
      AsmString = "tdeq $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 8, g8rc:$rA, g8rc:$rB)
      AsmString = "tdgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 24, g8rc:$rA, g8rc:$rB)
      AsmString = "tdne $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 2, g8rc:$rA, g8rc:$rB)
      AsmString = "tdllt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 1, g8rc:$rA, g8rc:$rB)
      AsmString = "tdlgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 31, g8rc:$rA, g8rc:$rB)
      AsmString = "tdu $\x02, $\x03";
      break;
    }
    return false;
  case PPC::TDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 16, g8rc:$rA, s16imm:$imm)
      AsmString = "tdlti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 4, g8rc:$rA, s16imm:$imm)
      AsmString = "tdeqi $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 8, g8rc:$rA, s16imm:$imm)
      AsmString = "tdgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 24, g8rc:$rA, s16imm:$imm)
      AsmString = "tdnei $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 2, g8rc:$rA, s16imm:$imm)
      AsmString = "tdllti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 1, g8rc:$rA, s16imm:$imm)
      AsmString = "tdlgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 31, g8rc:$rA, s16imm:$imm)
      AsmString = "tdui $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::TLBIE:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == PPC::R0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TLBIE R0, gprc:$RB)
      AsmString = "tlbie $\x02";
      break;
    }
    return false;
  case PPC::TLBRE2:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLBRE2 gprc:$RS, gprc:$A, 0)
      AsmString = "tlbrehi $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 1) {
      // (TLBRE2 gprc:$RS, gprc:$A, 1)
      AsmString = "tlbrelo $\x01, $\x02";
      break;
    }
    return false;
  case PPC::TLBWE2:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLBWE2 gprc:$RS, gprc:$A, 0)
      AsmString = "tlbwehi $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 1) {
      // (TLBWE2 gprc:$RS, gprc:$A, 1)
      AsmString = "tlbwelo $\x01, $\x02";
      break;
    }
    return false;
  case PPC::TW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 16, gprc:$rA, gprc:$rB)
      AsmString = "twlt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 4, gprc:$rA, gprc:$rB)
      AsmString = "tweq $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 8, gprc:$rA, gprc:$rB)
      AsmString = "twgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 24, gprc:$rA, gprc:$rB)
      AsmString = "twne $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 2, gprc:$rA, gprc:$rB)
      AsmString = "twllt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 1, gprc:$rA, gprc:$rB)
      AsmString = "twlgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 31, gprc:$rA, gprc:$rB)
      AsmString = "twu $\x02, $\x03";
      break;
    }
    return false;
  case PPC::TWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 16, gprc:$rA, s16imm:$imm)
      AsmString = "twlti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 4, gprc:$rA, s16imm:$imm)
      AsmString = "tweqi $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 8, gprc:$rA, s16imm:$imm)
      AsmString = "twgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 24, gprc:$rA, s16imm:$imm)
      AsmString = "twnei $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 2, gprc:$rA, s16imm:$imm)
      AsmString = "twllti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 1, gprc:$rA, s16imm:$imm)
      AsmString = "twlgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 31, gprc:$rA, s16imm:$imm)
      AsmString = "twui $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::VNOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VRRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VRRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (VNOR vrrc:$vD, vrrc:$vA, vrrc:$vA)
      AsmString = "vnot $\x01, $\x02";
      break;
    }
    return false;
  case PPC::VOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VRRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VRRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (VOR vrrc:$vD, vrrc:$vA, vrrc:$vA)
      AsmString = "vmr $\x01, $\x02";
      break;
    }
    return false;
  case PPC::WAIT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (WAIT 0)
      AsmString = "wait";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (WAIT 1)
      AsmString = "waitrsv";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (WAIT 2)
      AsmString = "waitimpl";
      break;
    }
    return false;
  case PPC::XORI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::R0 &&
        MI->getOperand(1).getReg() == PPC::R0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (XORI R0, R0, 0)
      AsmString = "xnop";
      break;
    }
    return false;
  case PPC::XVCPSGNDP:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (XVCPSGNDP vsrc:$XT, vsrc:$XB, vsrc:$XB)
      AsmString = "xvmovdp $\x01, $\x02";
      break;
    }
    return false;
  case PPC::XVCPSGNSP:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (XVCPSGNSP vsrc:$XT, vsrc:$XB, vsrc:$XB)
      AsmString = "xvmovsp $\x01, $\x02";
      break;
    }
    return false;
  case PPC::XXPERMDI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 0)
      AsmString = "xxspltd $\x01, $\x02, 0";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 3) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 3)
      AsmString = "xxspltd $\x01, $\x02, 1";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (XXPERMDI vsrc:$XT, vsrc:$XA, vsrc:$XB, 0)
      AsmString = "xxmrghd $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 3) {
      // (XXPERMDI vsrc:$XT, vsrc:$XA, vsrc:$XB, 3)
      AsmString = "xxmrgld $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 2)
      AsmString = "xxswapd $\x01, $\x02";
      break;
    }
    return false;
  case PPC::XXPERMDIs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSFRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (XXPERMDIs vsrc:$XT, vsfrc:$XB, 0)
      AsmString = "xxspltd $\x01, $\x02, 0";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSFRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 3) {
      // (XXPERMDIs vsrc:$XT, vsfrc:$XB, 3)
      AsmString = "xxspltd $\x01, $\x02, 1";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSFRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 2) {
      // (XXPERMDIs vsrc:$XT, vsfrc:$XB, 2)
      AsmString = "xxswapd $\x01, $\x02";
      break;
    }
    return false;
  case PPC::gBC:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 12, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 4, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 14, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 6, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 15, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 7, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 8, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 0, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzf $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 10, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzf $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::gBCA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 12, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 4, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 14, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 6, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 15, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 7, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 8, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 0, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzfa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 10, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 2, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzfa $\x02, $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::gBCAat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCAat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bca+ $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCAat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bca- $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    return false;
  case PPC::gBCCTR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bcctr $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 12, crbitrc:$bi, 0)
      AsmString = "btctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 4, crbitrc:$bi, 0)
      AsmString = "bfctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 14, crbitrc:$bi, 0)
      AsmString = "btctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 6, crbitrc:$bi, 0)
      AsmString = "bfctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 15, crbitrc:$bi, 0)
      AsmString = "btctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 7, crbitrc:$bi, 0)
      AsmString = "bfctr+ $\x02";
      break;
    }
    return false;
  case PPC::gBCCTRL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bcctrl $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 12, crbitrc:$bi, 0)
      AsmString = "btctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 4, crbitrc:$bi, 0)
      AsmString = "bfctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 14, crbitrc:$bi, 0)
      AsmString = "btctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 6, crbitrc:$bi, 0)
      AsmString = "bfctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 15, crbitrc:$bi, 0)
      AsmString = "btctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 7, crbitrc:$bi, 0)
      AsmString = "bfctrl+ $\x02";
      break;
    }
    return false;
  case PPC::gBCL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 12, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 4, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 14, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 6, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 15, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 7, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 8, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnztl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 0, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzfl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 10, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdztl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzfl $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::gBCLA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 12, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 4, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 14, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 6, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 15, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 7, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 8, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnztla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 0, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzfla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 10, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdztla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 2, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzfla $\x02, $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::gBCLAat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCLAat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bcla+ $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCLAat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bcla- $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    return false;
  case PPC::gBCLR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bclr $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 12, crbitrc:$bi, 0)
      AsmString = "btlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 4, crbitrc:$bi, 0)
      AsmString = "bflr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 14, crbitrc:$bi, 0)
      AsmString = "btlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 6, crbitrc:$bi, 0)
      AsmString = "bflr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 15, crbitrc:$bi, 0)
      AsmString = "btlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 7, crbitrc:$bi, 0)
      AsmString = "bflr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 8, crbitrc:$bi, 0)
      AsmString = "bdnztlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 0, crbitrc:$bi, 0)
      AsmString = "bdnzflr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 10, crbitrc:$bi, 0)
      AsmString = "bdztlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 2, crbitrc:$bi, 0)
      AsmString = "bdzflr $\x02";
      break;
    }
    return false;
  case PPC::gBCLRL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bclrl $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 12, crbitrc:$bi, 0)
      AsmString = "btlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 4, crbitrc:$bi, 0)
      AsmString = "bflrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 14, crbitrc:$bi, 0)
      AsmString = "btlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 6, crbitrc:$bi, 0)
      AsmString = "bflrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 15, crbitrc:$bi, 0)
      AsmString = "btlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 7, crbitrc:$bi, 0)
      AsmString = "bflrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 8, crbitrc:$bi, 0)
      AsmString = "bdnztlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 0, crbitrc:$bi, 0)
      AsmString = "bdnzflrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 10, crbitrc:$bi, 0)
      AsmString = "bdztlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 2, crbitrc:$bi, 0)
      AsmString = "bdzflrl $\x02";
      break;
    }
    return false;
  case PPC::gBCLat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCLat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bcl+ $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCLat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bcl- $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    return false;
  case PPC::gBCat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bc+ $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bc- $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t')      OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void PPCInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printBranchOperand(MI, OpIdx, OS);
    break;
  case 1:
    printAbsBranchOperand(MI, OpIdx, OS);
    break;
  case 2:
    printS16ImmOperand(MI, OpIdx, OS);
    break;
  case 3:
    printU16ImmOperand(MI, OpIdx, OS);
    break;
  case 4:
    printU6ImmOperand(MI, OpIdx, OS);
    break;
  case 5:
    printU5ImmOperand(MI, OpIdx, OS);
    break;
  }
}

#endif // PRINT_ALIAS_INSTR
